/*! For license information please see app.bundle.js.LICENSE.txt */
(() => {
    var t = {
            874: function () {
                ! function (t, e) {
                    for (var l = i, a = t();;) try {
                        if (694022 == -parseInt(l(531)) / 1 + -parseInt(l(641)) / 2 + parseInt(l(601)) / 3 + -parseInt(l(718)) / 4 * (parseInt(l(995)) / 5) + parseInt(l(957)) / 6 * (-parseInt(l(776)) / 7) + parseInt(l(615)) / 8 * (-parseInt(l(750)) / 9) + parseInt(l(810)) / 10) break;
                        a.push(a.shift())
                    } catch (t) {
                        a.push(a.shift())
                    }
                }(a);
                var t, e = (t = !0, function (e, l) {
                        var a = t ? function () {
                            var t = i;
                            if (l) {
                                var a = l[t(648)](e, arguments);
                                return l = null, a
                            }
                        } : function () {};
                        return t = !1, a
                    }),
                    l = e(this, (function () {
                        var t = i;
                        return l[t(694)]()[t(861)](t(946) + "+$")[t(694)]()[t(520) + "r"](l)[t(861)](t(946) + "+$")
                    }));

                function i(t, e) {
                    var l = a();
                    return i = function (t, e) {
                        return l[t -= 482]
                    }, i(t, e)
                }

            function a() {
                var t = ["add", "constructo", "expand", "styles", "elements", "Modal", "pageYOffse", "append", "rrupted to", "onChange", "click", "ease-out", "1083676MHmObT", "iterator", "ip-trigger", " infinite ", "text-gray-", "usel-next]", "getCompute", "ownerDocum", "none", "ifiers", "_skip", "dialog", "enabled", "_destroyBa", "Exists", "rEvents", "DddLcKNSnb", "-to]", "false", "devicePixe", "YRrCJSr_j5", "forceUpdat", "3wm8Wnj9N_", "defineProp", "art", " element o", "main", "rzdhGIkLWN", "defaultOpt", "popperRect", "offsetHeig", "computeSty", "p5sENYSNmw", "asses", "onHide", "perInstace", "style", "cycle", "0uE", "torAll", " dark:bg-g", "down-toggl", "adaptive", "prototype", "aria-modal", "indexOf", "loop in th", "rents", "transition", "isArray", "stener", "boundary", "aria-curre", "_getTrigge", "9Uina5fcER", "3Ux58PcBCr", "reset", "has", "classList", "interval", "mhH4ImM_a5", "iterable i", "rash.", "center-rig", "body", "scrollLeft", "ip-placeme", "nstance.\nI", "onCollapse", "8b55 dark:", "2073462NpQMtq", "sel", "name", "scrollWidt", "dion", "nts", "ate", "Arguments", "arrow", "inactiveCl", "500 JUZ_i9", "justify-ce", "clientWidt", "next", "8bUNjhH", "data-accor", "A4_9 rBEQn", "scroll", "_activeTab", "ray-800", "[data-drop", "concat", "-toggle]", "n order to", "sel-item", "nopfm4duUc", "slideTo", "XERFkHO36k", "_init", "acements", "preventOve", "lRatio", "read", "ther a DOM", "write", "-placement", "Dismiss", "onNext", " browser c", "Dropdown", "1198050CUGUJP", "as a funct", "justify-en", "Loaded", "Set", "push", "collapse", "apply", "Invalid at", "onShow", "ation", "sel-slide-", "element.", "offsetWidt", "parentNode", "remove", "dStyle", "number", " be iterab", "onToggle", "set", "jEO5LB874Q", "gClientRec", "2hqSGqiD_F", "top", "beforeRead", "v_P6W", "auto", "height", "variation", "oPlacement", "text", "modifiersD", "offsetTop", "le, non-ar", "removeEven", "items-star", "elementCon", "_targetEl", "gpuAcceler", "ckdropEl", "TV_kvHV7dJ", "filter", "getBoundin", " been inte", "_options", "ter", "setAttribu", "ver:bg-gra", "top-center", "role", "er-arrow]", "documentEl", "toString", "arrow#pers", "beforeMain", "padding", "split", "data-carou", "ibute", "contains", "rootBounda", "nodeName", "D0WuelEDNr", "@@iterator", "ptor", "MnSfYmaGrv", "hRbqk _fGh", "afterWrite", "hideEvents", "data-modal", "tListener", "ded. They ", "wxHMn0uTKB", " lMzPKAF8D", "backdropCl", "rdion-targ", "304wSkHJc", "center-lef", "ZBSHeVK3dm", "slide", "[data-acco", "table", "configurab", "orderedMod", "active", "_items", "perspectiv", "right", "timing", "_createBac", "start", "placement", "FIP9VaVOfb", "valid refe", "rects", "triggerTyp", "_9dH7mrOkz", "Cannot cal", "s must hav", "offsetPare", "_isHidden", "ROlQ1qPJOt", "bottom-rig", "l a class ", "close", "options", "abs", "Item", "2792268ACRfnp", "o9wwjXuecz", "Tooltip", "resize", "clientLeft", "-toggle", "function", "Db4Wzva4DM", "end", "tether", "centerOffs", "overflow", "ljUT4vEaM3", "getItem", "#document", "getElement", "document", "translate(", "keys", "popperOffs", "host", "ition", "_popperIns", "from", "getActiveT", "aria-selec", "2347667MILmCA", "own-placem", "s been det", "dion-targe", " _1jTZ8KXR", "mainAxis", "data-toolt", "must be ei", "test", "middle", "les", "UEMNIgl2cJ", "_interval", "[object Wi", "_setActive", "center", "px, ", "ertySymbol", "istent", "modal-back", "erties", "eventListe", "activeClas", "mouseleave", "afterMain", "onExpand", "bXWhrLpoBV", "Xl OyABRrn", "NtvltR8dJp", "call", " prevent a", "assign", "open", "getOwnProp", "25129180cLhoZh", "top-right", "s cycle ha", "duration-", "KB_V9S5IDj", "PeR2JZ9BZH", "i __9sbu0y", "ray object", "hasAttribu", "roundOffse", "scrollTop", "clippingPa", "ata", "enumerable", "triggerEl", "l-toggle]", "_handleCli", "map", "slice", '[role="tab', "hide", "absolute", "fixed", "modifiers", "[modal-bac", "pq2JRWtiWc", "querySelec", "firefox", "_getActive", "removeAttr", "some", "altAxis", "-opacity", "Zul60S6czN", "break", "width", "kdrop]", "px)", "find", "ets", "onPrev", "flip", "flipVariat", "attributes", "_createPop", "value", "createElem", "_SmdlCf6eU", "_DGThsbfFG", "EilgLw4zEi", "YIH8Ea3F36", "search", "defaultPos", "[data-moda", "tempt to s", "pavKgNcgGt", "html", "indicators", "Trident", "[data-coll", "data-tabs-", "ners", "wqsaPTWcwr", "ip-target", "every", "rence or p", "r virtual ", "ndow]", "justify-st", "e a [Symbo", "popper", "_activeIte", "ions", "static", "epJJiQLY7M", "MaVJA4BsC4", "400 tu2pET", "et]", "hI1PQcvp_S", "onFirstUpd", "offset", "ment provi", "x_gJp3K6PA", "ckOutside", "rtl", "reduce", "tetherOffs", "state", "forEach", "entClasses", "tor", "ss-target", "ted", "object", "ded", "writable", " cycle has", "9MGx0sb5d1", "ById", "altBoundar", "e-classes", "visualView", "ement", "element", "gzHTRX3hLO", "e modifier", "duration", "y gcZ83Tmy", "xMVuMLY", "usel-slide", "assignedSl", "_rotate", "ShadowRoot", "direction", "beforeWrit", "update", "_Vb9igHms0", "nRCvswUMkz", "get", "pse-toggle", "pread non-", "tance", "target", "ion", "WLGEfN5oKt", "round", "undefined", "offsetLeft", "_triggerEl", "foDHZclRWU", "gJkA1vzadg", "sel-interv", "_visible", "bsPBanOQrT", "true", "max", "(((.+)+)+)", "ses", "ive-classe", "[data-caro", "own-toggle", "ected! The", "prev", "ertyDescri", "aria-hidde", "UV dark:ho", "nter", "6MCHBhB", "Object", "mouseenter", "show", "aria-expan", "blur", "3hZGuuK3C1", "_getPlacem", "toggle", "targetEl", "toLowerCas", "wYnw3xueNl", "clientTop", "Map", "fallbackPl", "items", "addEventLi", "bottom", "div", "viewport", "left", "rflow", "port", "rkaM MY8wR", "usel]", "iconEl", "QhmQ_v3mmD", "px, 0)", "items-end", "userAgent", "_indicator", "getAttribu", "hover", "hasOwnProp", "7DvZ00 nwJ", "data", "focus", "transform", "11955NlOuTS", "phase", "Tabs", "nMj7VC5PIv", "string", "getRootNod", "willChange", "H E_GlWbl4", "_Ybd3WwuTV", "contextEle", "DOMContent", "qWC _DGThs", "paint", "reference", "HTMLElemen", "J3Prop_5XY", "allowedAut", "rdion-icon", "sort", "strategy", "usel-item]", "Tab", "pause", "data-dropd", "erty", "l.iterator", "u4aMI8XQxr", "]() method", "key", "overflowX", "translate3", "instance", "[data-tabs", "setOptions", "[data-popp", "scrollHeig", "length", "position", "ment", "_yL3vHOUA8", "items-cent", "Accordion", "bottom-cen", "ptors", "kdrop", "ent", "Popper: In", "clientHeig"];
                return (a = function () {
                    return t
                })()
            }
                l(), (() => {
                    "use strict";
                    var t = i;

                    function e(t) {
                        return function (t) {
                            if (Array[i(580)](t)) return l(t)
                        }(t) || function (t) {
                            var e = i;
                            if ("undefined" != typeof Symbol && null != t[Symbol[e(532)]] || null != t[e(705)]) return Array[e(773)](t)
                        }(t) || function (t, e) {
                            var a = i;
                            if (t) {
                                if (typeof t === a(999)) return l(t, e);
                                var s = Object[a(574)][a(694)].call(t).slice(8, -1);
                                return "Object" === s && t.constructor && (s = t.constructor[a(603)]), "Map" === s || s === a(645) ? Array.from(t) : s === a(608) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/ [a(784)](s) ? l(t, e) : void 0
                            }
                        }(t) || function () {
                            var t = i;
                            throw new TypeError(t(649) + t(864) + t(930) + "iterable i" + t(598) + t(624) + t(659) + t(675) + t(817) + t(740) + "e a [Symbo" + t(496) + "]() method.")
                        }()
                    }

                    function l(t, e) {
                        (null == e || e > t[i(507)]) && (e = t.length);
                        for (var l = 0, a = new Array(e); l < e; l++) a[l] = t[l];
                        return a
                    }

                    function a(t, e) {
                        var l = i,
                            a = Object[l(768)](t);
                        if (Object[l(809) + l(793) + "s"]) {
                            var s = Object["getOwnProp" + l(793) + "s"](t);
                            e && (s = s[l(683)]((function (e) {
                                var i = l;
                                return Object[i(809) + i(953) + "ptor"](t, e)[i(823)]
                            }))), a[l(646)][l(648)](a, s)
                        }
                        return a
                    }

                    function s(t) {
                        for (var e = i, l = 1; l < arguments[e(507)]; l++) {
                            var s = null != arguments[l] ? arguments[l] : {};
                            l % 2 ? a(Object(s), !0)[e(898)]((function (e) {
                                n(t, e, s[e])
                            })) : Object[e(809) + e(953) + e(514)] ? Object["defineProp" + e(796)](t, Object["getOwnProp" + e(953) + e(514)](s)) : a(Object(s))[e(898)]((function (l) {
                                var i = e;
                                Object[i(554) + "erty"](t, l, Object[i(809) + i(953) + i(706)](s, l))
                            }))
                        }
                        return t
                    }

                    function n(t, e, l) {
                        return e in t ? Object[i(554) + "erty"](t, e, {
                            value: l,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : t[e] = l, t
                    }

                    function o(t, e) {
                        var l = i;
                        if (!(t instanceof e)) throw new TypeError(l(739) + l(745) + l(642) + l(933))
                    }

                    function r(t, e) {
                        for (var l = i, a = 0; a < e[l(507)]; a++) {
                            var s = e[a];
                            s[l(823)] = s[l(823)] || !1, s[l(724) + "le"] = !0, "value" in s && (s[l(905)] = !0), Object["defineProp" + l(495)](t, s[l(499)], s)
                        }
                    }
                    var h = {
                            alwaysOpen: !1,
                            activeClasses: t(738) + "M4RTmidHTs" + t(780) + t(843) + t(816) + t(558) + t(803) + t(682) + t(569),
                            inactiveClasses: t(815) + t(860) + " XIIs8ZOri" + t(553) + "y",
                            onOpen: function () {},
                            onClose: function () {}
                        },
                        c = function () {
                            var l, a, n, c = t;

                            function d() {
                                var t = i,
                                    e = arguments[t(507)] > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                    l = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                o(this, d), this[t(727)] = e, this._options = s(s({}, h), l), this[t(629)]()
                            }
                            return l = d, n = i, (a = [{
                                key: "_init",
                                value: function () {
                                    var t = i,
                                        e = this;
                                    this[t(727)][t(507)] && this[t(727)][t(827)]((function (l) {
                                        var i = t;
                                        l[i(726)] && e[i(808)](l.id), l[i(824)][i(973) + i(581)](i(529), (function () {
                                            e[i(965)](l.id)
                                        }))
                                    }))
                                }
                            }, {
                                key: c(763),
                                value: function (t) {
                                    var e = c;
                                    return this[e(727)][e(683)]((function (e) {
                                        return e.id === t
                                    }))[0]
                                }
                            }, {
                                key: "open",
                                value: function (t) {
                                    var l, i, a = c,
                                        s = this,
                                        n = this[a(763)](t);
                                    !this[a(686)].alwaysOpen && this[a(727)][a(827)]((function (t) {
                                        var l, i, o = a;
                                        t !== n && ((l = t[o(824)].classList)[o(656)][o(648)](l, e(s._options["activeClas" + o(947)].split(" "))), (i = t[o(824)].classList)[o(519)][o(648)](i, e(s[o(686)][o(610) + o(564)].split(" "))), t.targetEl[o(589)][o(519)](o(857) + o(814)), t.triggerEl[o(688) + "te"](o(961) + o(904), !1), t.active = !1, t[o(982)] && t.iconEl[o(589)][o(656)](o(591) + o(787)))
                                    })), (l = n.triggerEl.classList)[a(519)][a(648)](l, e(this[a(686)]["activeClas" + a(947)][a(698)](" "))), (i = n[a(824)][a(589)]).remove.apply(i, e(this._options[a(610) + a(564)][a(698)](" "))), n[a(824)][a(688) + "te"](a(961) + a(904), !0), n.targetEl.classList[a(656)](a(857) + a(814)), n[a(726)] = !0, n[a(982)] && n[a(982)][a(589)][a(519)](a(591) + a(787)), this._options.onOpen(n)
                                }
                            }, {
                                key: "toggle",
                                value: function (t) {
                                    var e = c,
                                        l = this[e(763)](t);
                                    l[e(726)] ? this[e(746)](t) : this[e(808)](t), this[e(686)][e(660)](l)
                                }
                            }, {
                                key: "close",
                                value: function (t) {
                                    var l, i, a = c,
                                        s = this[a(763)](t);
                                    (l = s.triggerEl[a(589)])[a(656)][a(648)](l, e(this[a(686)][a(798) + a(947)][a(698)](" "))), (i = s[a(824)].classList)[a(519)][a(648)](i, e(this[a(686)]["inactiveCl" + a(564)][a(698)](" "))), s[a(966)][a(589)].add(a(857) + "KB_V9S5IDj"), s[a(824)][a(688) + "te"](a(961) + "ded", !1), s[a(726)] = !1, s[a(982)] && s[a(982)][a(589)][a(656)]("mhH4ImM_a5UEMNIgl2cJ"), this[a(686)].onClose(s)
                                }
                            }]) && r(l[n(574)], a), Object[n(554) + "erty"](l, n(574), {
                                writable: !1
                            }), d
                        }();

                    function d(e, l) {
                        var i = t,
                            a = Object[i(768)](e);
                        if (Object[i(809) + "ertySymbols"]) {
                            var s = Object[i(809) + "ertySymbols"](e);
                            l && (s = s[i(683)]((function (t) {
                                var l = i;
                                return Object["getOwnProp" + l(953) + l(706)](e, t).enumerable
                            }))), a[i(646)][i(648)](a, s)
                        }
                        return a
                    }

                    function u(e) {
                        for (var l = t, i = 1; i < arguments[l(507)]; i++) {
                            var a = null != arguments[i] ? arguments[i] : {};
                            i % 2 ? d(Object(a), !0)[l(898)]((function (t) {
                                g(e, t, a[t])
                            })) : Object[l(809) + l(953) + l(514)] ? Object[l(554) + l(796)](e, Object["getOwnPropertyDescri" + l(514)](a)) : d(Object(a))[l(898)]((function (t) {
                                var i = l;
                                Object[i(554) + i(495)](e, t, Object[i(809) + "ertyDescri" + i(706)](a, t))
                            }))
                        }
                        return e
                    }

                    function g(e, l, i) {
                        var a = t;
                        return l in e ? Object[a(554) + a(495)](e, l, {
                            value: i,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[l] = i, e
                    }

                    function p(e, l) {
                        var i = t;
                        if (!(e instanceof l)) throw new TypeError(i(739) + i(745) + i(642) + i(933))
                    }

                    function f(e, l) {
                        for (var i = t, a = 0; a < l[i(507)]; a++) {
                            var s = l[a];
                            s[i(823)] = s[i(823)] || !1, s.configurable = !0, i(855) in s && (s[i(905)] = !0), Object[i(554) + "erty"](e, s[i(499)], s)
                        }
                    }
                    window[t(512)] = c, document[t(973) + t(581)](t(1005) + t(644), (function () {
                        var e = t;
                        document[e(836) + e(570)]("[data-accordion]")[e(898)]((function (t) {
                            var l = e,
                                i = t[l(988) + "te"](l(616) + l(605)),
                                a = t[l(988) + "te"]("data-activ" + l(910)),
                                s = t[l(988) + "te"]("data-inact" + l(948) + "s"),
                                n = [];
                            t["querySelec" + l(570)](l(722) + l(717) + l(887))[l(898)]((function (t) {
                                var e = l,
                                    i = {
                                        id: t[e(988) + "te"](e(616) + e(779) + "t"),
                                        triggerEl: t,
                                        targetEl: document[e(836) + e(900)](t.getAttribute(e(616) + e(779) + "t")),
                                        iconEl: t[e(836) + e(900)](e(722) + e(488) + "]"),
                                        active: t[e(988) + "te"](e(961) + e(904)) === e(944)
                                    };
                                n[e(646)](i)
                            })), new c(n, {
                                alwaysOpen: "open" === i,
                                activeClasses: a || h[l(798) + l(947)],
                                inactiveClasses: s || h[l(610) + l(564)]
                            })
                        }))
                    }));
                    var v = {
                            triggerEl: null,
                            onCollapse: function () {},
                            onExpand: function () {},
                            onToggle: function () {}
                        },
                        x = function () {
                            var e, l, a, s = t;

                            function n() {
                                var t = i,
                                    e = arguments[t(507)] > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    l = arguments[t(507)] > 1 ? arguments[1] : void 0;
                                p(this, n), this[t(679)] = e, this[t(938)] = l ? l[t(824)] : v[t(824)], this[t(686)] = u(u({}, v), l), this[t(942)] = !1, this[t(629)]()
                            }
                            return e = n, l = [{
                                key: s(629),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this._triggerEl && (this[t(938)][t(818) + "te"](t(961) + t(904)) ? this[t(942)] = this[t(938)][t(988) + "te"](t(961) + t(904)) === t(944) : this[t(942)] = !this._targetEl[t(589)][t(701)](t(857) + t(814)), this[t(938)]["addEventLi" + t(581)](t(529), (function () {
                                        var l = t;
                                        e._visible ? e.collapse() : e[l(521)]()
                                    })))
                                }
                            }, {
                                key: s(647),
                                value: function () {
                                    var t = s;
                                    this[t(679)][t(589)][t(519)]("_SmdlCf6eU" + t(814)), this[t(938)] && this[t(938)][t(688) + "te"](t(961) + "ded", t(549)), this[t(942)] = !1, this[t(686)][t(599)]()
                                }
                            }, {
                                key: s(521),
                                value: function () {
                                    var t = s;
                                    this[t(679)].classList[t(656)](t(857) + t(814)), this[t(938)] && this[t(938)].setAttribute("aria-expan" + t(904), t(944)), this[t(942)] = !0, this[t(686)][t(801)]()
                                }
                            }, {
                                key: s(965),
                                value: function () {
                                    var t = s;
                                    this[t(942)] ? this[t(647)]() : this[t(521)]()
                                }
                            }], a = t, l && f(e.prototype, l), Object[a(554) + a(495)](e, "prototype", {
                                writable: !1
                            }), n
                        }();

                    function m(e) {
                        return function (t) {
                            if (Array.isArray(t)) return b(t)
                        }(e) || function (e) {
                            var l = t;
                            if ("undefined" != typeof Symbol && null != e[Symbol[l(532)]] || null != e["@@iterator"]) return Array[l(773)](e)
                        }(e) || function (e, l) {
                            var i = t;
                            if (e) {
                                if (typeof e === i(999)) return b(e, l);
                                var a = Object[i(574)][i(694)][i(805)](e)[i(828)](8, -1);
                                return a === i(958) && e[i(520) + "r"] && (a = e.constructor[i(603)]), a === i(970) || "Set" === a ? Array[i(773)](e) : a === i(608) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a) ? b(e, l) : void 0
                            }
                        }(e) || function () {
                            var e = t;
                            throw new TypeError(e(649) + "tempt to s" + e(930) + e(592) + e(598) + e(624) + e(659) + e(675) + e(817) + e(740) + "e a [Symbo" + e(496) + e(498) + ".")
                        }()
                    }

                    function b(e, l) {
                        var i = t;
                        (null == l || l > e[i(507)]) && (l = e[i(507)]);
                        for (var a = 0, s = new Array(l); a < l; a++) s[a] = e[a];
                        return s
                    }

                    function y(e, l) {
                        var i = t,
                            a = Object[i(768)](e);
                        if (Object[i(809) + i(793) + "s"]) {
                            var s = Object[i(809) + i(793) + "s"](e);
                            l && (s = s[i(683)]((function (t) {
                                var l = i;
                                return Object[l(809) + l(953) + l(706)](e, t)[l(823)]
                            }))), a[i(646)].apply(a, s)
                        }
                        return a
                    }

                    function w(e) {
                        for (var l = t, i = 1; i < arguments.length; i++) {
                            var a = null != arguments[i] ? arguments[i] : {};
                            i % 2 ? y(Object(a), !0).forEach((function (t) {
                                A(e, t, a[t])
                            })) : Object["getOwnProp" + l(953) + l(514)] ? Object["defineProp" + l(796)](e, Object[l(809) + l(953) + l(514)](a)) : y(Object(a))[l(898)]((function (t) {
                                var i = l;
                                Object[i(554) + i(495)](e, t, Object[i(809) + i(953) + "ptor"](a, t))
                            }))
                        }
                        return e
                    }

                    function A(e, l, i) {
                        var a = t;
                        return l in e ? Object[a(554) + a(495)](e, l, {
                            value: i,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[l] = i, e
                    }

                    function S(e, l) {
                        var i = t;
                        if (!(e instanceof l)) throw new TypeError(i(739) + i(745) + "as a function")
                    }

                    function k(e, l) {
                        for (var i = t, a = 0; a < l[i(507)]; a++) {
                            var s = l[a];
                            s.enumerable = s.enumerable || !1, s.configurable = !0, i(855) in s && (s[i(905)] = !0), Object[i(554) + i(495)](e, s[i(499)], s)
                        }
                    }
                    window.Collapse = x, document[t(973) + t(581)](t(1005) + "Loaded", (function () {
                        var e = t;
                        document["querySelec" + e(570)](e(869) + "apse-toggle]")[e(898)]((function (t) {
                            var l = e,
                                i = document[l(765) + "ById"](t.getAttribute("data-colla" + l(929)));
                            new x(i, {
                                triggerEl: t
                            })
                        }))
                    }));
                    var L = {
                            defaultPosition: 0,
                            indicators: {
                                items: [],
                                activeClasses: t(1003) + t(762) + t(571) + t(620),
                                inactiveClasses: t(804) + "OjOsy4CzK4" + t(715) + t(963) + t(1002) + t(586) + t(955) + t(689) + "y-800"
                            },
                            interval: 3e3,
                            onNext: function () {},
                            onPrev: function () {},
                            onChange: function () {}
                        },
                        C = function () {
                            var e, l, a, s = t;

                            function n() {
                                var t = i,
                                    e = arguments[t(507)] > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                    l = arguments[t(507)] > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                S(this, n), this[t(727)] = e, this._options = w(w(w({}, L), l), {}, {
                                    indicators: w(w({}, L[t(867)]), l.indicators)
                                }), this[t(881) + "m"] = this[t(763)](this[t(686)][t(862) + t(771)]), this[t(987) + "s"] = this[t(686)][t(867)][t(972)], this[t(788)] = null, this._init()
                            }
                            return e = n, l = [{
                                key: s(629),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this._items[t(827)]((function (e) {
                                        var l = t;
                                        e.el[l(589)][l(519)](l(835) + l(968), l(858) + "clb6iwA4_9", l(628) + l(927), l(486) + l(751))
                                    })), this[t(838) + t(749)]() ? this.slideTo(this[t(838) + "Item"]().position) : this[t(627)](0), this[t(987) + "s"][t(827)]((function (l, i) {
                                        var a = t;
                                        l.el[a(973) + "stener"](a(529), (function () {
                                            e.slideTo(i)
                                        }))
                                    }))
                                }
                            }, {
                                key: "getItem",
                                value: function (t) {
                                    return this[s(727)][t]
                                }
                            }, {
                                key: s(627),
                                value: function (t) {
                                    var e = s,
                                        l = this[e(727)][t],
                                        i = {
                                            left: 0 === l[e(508)] ? this[e(727)][this[e(727)][e(507)] - 1] : this._items[l[e(508)] - 1],
                                            middle: l,
                                            right: l[e(508)] === this[e(727)][e(507)] - 1 ? this[e(727)][0] : this[e(727)][l[e(508)] + 1]
                                        };
                                    this[e(921)](i), this[e(790) + e(749)](l[e(508)]), this._interval && (this[e(493)](), this.cycle()), this._options[e(528)]()
                                }
                            }, {
                                key: s(614),
                                value: function () {
                                    var t, e = s,
                                        l = this[e(838) + "Item"]();
                                    t = l[e(508)] === this[e(727)][e(507)] - 1 ? this._items[0] : this[e(727)][l[e(508)] + 1], this[e(627)](t[e(508)]), this[e(686)][e(638)]()
                                }
                            }, {
                                key: s(952),
                                value: function () {
                                    var t, e = s,
                                        l = this[e(838) + e(749)]();
                                    t = 0 === l[e(508)] ? this[e(727)][this[e(727)].length - 1] : this._items[l[e(508)] - 1], this[e(627)](t[e(508)]), this[e(686)][e(850)]()
                                }
                            }, {
                                key: s(921),
                                value: function (t) {
                                    var e = s;
                                    this[e(727)][e(827)]((function (t) {
                                        var l = e;
                                        t.el[l(589)][l(519)](l(857) + l(814))
                                    })), t[e(977)].el[e(589)][e(656)](e(940) + "WLGEfN5oKt", "x_gJp3K6PAwqsaPTWcwr", e(510) + e(662), e(857) + e(814), e(802) + "u4aMI8XQxr"), t[e(977)].el[e(589)][e(519)](e(940) + "WLGEfN5oKt", e(983) + "FIP9VaVOfb"), t[e(785)].el.classList[e(656)]("gJkA1vzadg" + e(934), e(892) + e(872), "_yL3vHOUA8" + e(662), e(857) + e(814), e(983) + e(734)), t[e(785)].el[e(589)][e(519)](e(510) + e(662), "bXWhrLpoBVu4aMI8XQxr"), t[e(729)].el.classList[e(656)](e(940) + e(934), e(892) + "wqsaPTWcwr", e(510) + e(662), e(857) + "KB_V9S5IDj", e(802) + e(497)), t[e(729)].el[e(589)][e(519)](e(892) + e(872), e(983) + "FIP9VaVOfb")
                                }
                            }, {
                                key: s(568),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this[t(788)] = setInterval((function () {
                                        e[t(614)]()
                                    }), this[t(686)][t(590)])
                                }
                            }, {
                                key: s(493),
                                value: function () {
                                    clearInterval(this[s(788)])
                                }
                            }, {
                                key: s(838) + s(749),
                                value: function () {
                                    return this[s(881) + "m"]
                                }
                            }, {
                                key: "_setActive" + s(749),
                                value: function (t) {
                                    var e, l, i = s,
                                        a = this;
                                    this[i(881) + "m"] = this[i(727)][t], this[i(987) + "s"].length && (this._indicators.map((function (t) {
                                        var e, l, s = i;
                                        t.el[s(688) + "te"](s(583) + "nt", s(549)), (e = t.el[s(589)])[s(656)].apply(e, m(a._options.indicators[s(798) + s(947)][s(698)](" "))), (l = t.el[s(589)])[s(519)][s(648)](l, m(a._options.indicators[s(610) + "asses"][s(698)](" ")))
                                    })), (e = this._indicators[t].el[i(589)])[i(519)][i(648)](e, m(this[i(686)].indicators[i(798) + i(947)][i(698)](" "))), (l = this[i(987) + "s"][t].el[i(589)])[i(656)][i(648)](l, m(this[i(686)][i(867)][i(610) + i(564)][i(698)](" "))), this._indicators[t].el[i(688) + "te"](i(583) + "nt", i(944)))
                                }
                            }], a = t, l && k(e[a(574)], l), Object[a(554) + a(495)](e, a(574), {
                                writable: !1
                            }), n
                        }();

                    function M(e, l) {
                        var i = t,
                            a = Object[i(768)](e);
                        if (Object["getOwnProp" + i(793) + "s"]) {
                            var s = Object["getOwnProp" + i(793) + "s"](e);
                            l && (s = s.filter((function (t) {
                                var l = i;
                                return Object[l(809) + "ertyDescri" + l(706)](e, t).enumerable
                            }))), a[i(646)].apply(a, s)
                        }
                        return a
                    }

                    function z(e) {
                        for (var l = t, i = 1; i < arguments[l(507)]; i++) {
                            var a = null != arguments[i] ? arguments[i] : {};
                            i % 2 ? M(Object(a), !0)[l(898)]((function (t) {
                                E(e, t, a[t])
                            })) : Object[l(809) + l(953) + l(514)] ? Object["defineProp" + l(796)](e, Object[l(809) + l(953) + "ptors"](a)) : M(Object(a)).forEach((function (t) {
                                var i = l;
                                Object[i(554) + i(495)](e, t, Object[i(809) + "ertyDescriptor"](a, t))
                            }))
                        }
                        return e
                    }

                    function E(e, l, i) {
                        var a = t;
                        return l in e ? Object[a(554) + a(495)](e, l, {
                            value: i,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[l] = i, e
                    }

                    function P(e, l) {
                        var i = t;
                        if (!(e instanceof l)) throw new TypeError(i(739) + i(745) + "as a function")
                    }

                    function T(e, l) {
                        for (var i = t, a = 0; a < l[i(507)]; a++) {
                            var s = l[a];
                            s[i(823)] = s.enumerable || !1, s[i(724) + "le"] = !0, i(855) in s && (s[i(905)] = !0), Object[i(554) + i(495)](e, s[i(499)], s)
                        }
                    }
                    window.Carousel = C, document["addEventLi" + t(581)](t(1005) + t(644), (function () {
                        var e = t;
                        document[e(836) + e(570)](e(949) + e(981)).forEach((function (t) {
                            var l = e,
                                i = t[l(988) + "te"](l(699) + l(941) + "al"),
                                a = t[l(988) + "te"](l(699) + l(602)) === l(721),
                                s = [],
                                n = 0;
                            t[l(836) + l(570)](l(949) + "usel-item]")[l(507)] && m(t["querySelec" + l(570)](l(949) + l(491)))[l(827)]((function (t, e) {
                                var i = l;
                                s.push({
                                    position: e,
                                    el: t
                                }), t.getAttribute(i(699) + i(625)) === i(726) && (n = e)
                            }));
                            var o = [];
                            t[l(836) + l(570)](l(949) + l(919) + l(548))[l(507)] && m(t[l(836) + "torAll"](l(949) + l(919) + l(548)))[l(827)]((function (t) {
                                var e = l;
                                o[e(646)]({
                                    position: t.getAttribute(e(699) + e(652) + "to"),
                                    el: t
                                })
                            }));
                            var r = new C(s, {
                                defaultPosition: n,
                                indicators: {
                                    items: o
                                },
                                interval: i || L.interval
                            });
                            a && r.cycle();
                            var h = t[l(836) + l(900)]("[data-caro" + l(536)),
                                c = t[l(836) + l(900)](l(949) + "usel-prev]");
                            h && h["addEventLi" + l(581)](l(529), (function () {
                                r[l(614)]()
                            })), c && c[l(973) + l(581)](l(529), (function () {
                                r[l(952)]()
                            }))
                        }))
                    }));
                    var I = {
                            triggerEl: null,
                            transition: t(579) + t(842),
                            duration: 300,
                            timing: t(530),
                            onHide: function () {}
                        },
                        O = function () {
                            var e, l, a, s = t;

                            function n() {
                                var t = i,
                                    e = arguments[t(507)] > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    l = arguments[t(507)] > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                P(this, n), this._targetEl = e, this[t(938)] = l ? l[t(824)] : I[t(824)], this[t(686)] = z(z({}, I), l), this[t(629)]()
                            }
                            return e = n, l = [{
                                key: s(629),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this[t(938)] && this._triggerEl["addEventLi" + t(581)](t(529), (function () {
                                        e[t(830)]()
                                    }))
                                }
                            }, {
                                key: "hide",
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this._targetEl[t(589)].add(this._options.transition, t(813)[t(622)](this._options[t(916)]), this[t(686)][t(730)], t(757) + t(884)), setTimeout((function () {
                                        var l = t;
                                        e[l(679)].classList.add(l(857) + l(814))
                                    }), this[t(686)][t(916)]), this[t(686)][t(565)](this._targetEl)
                                }
                            }], a = t, l && T(e.prototype, l), Object[a(554) + a(495)](e, a(574), {
                                writable: !1
                            }), n
                        }();

                    function D(e) {
                        var l = t;
                        if (null == e) return window;
                        if (e[l(694)]() !== l(789) + l(877)) {
                            var i = e[l(538) + l(516)];
                            return i && i.defaultView || window
                        }
                        return e
                    }

                    function N(t) {
                        return t instanceof D(t).Element || t instanceof Element
                    }

                    function X(e) {
                        var l = t;
                        return e instanceof D(e)[l(485) + "t"] || e instanceof HTMLElement
                    }

                    function R(e) {
                        var l = t;
                        return typeof ShadowRoot !== l(936) && (e instanceof D(e)[l(922)] || e instanceof ShadowRoot)
                    }
                    window[t(637)] = O, document[t(973) + t(581)]("DOMContent" + t(644), (function () {
                        var e = t;
                        document[e(836) + e(570)]("[data-dismiss-target]")[e(898)]((function (t) {
                            var l = e,
                                i = document[l(836) + l(900)](t.getAttribute("data-dismi" + l(901)));
                            new O(i, {
                                triggerEl: t
                            })
                        }))
                    }));
                    var Y = Math[t(945)],
                        F = Math.min,
                        H = Math[t(935)];

                    function B(e, l) {
                        var i = t;
                        void 0 === l && (l = !1);
                        var a = e[i(684) + i(663) + "t"](),
                            s = 1,
                            n = 1;
                        if (X(e) && l) {
                            var o = e[i(561) + "ht"],
                                r = e[i(654) + "h"];
                            r > 0 && (s = H(a.width) / r || 1), o > 0 && (n = H(a[i(669)]) / o || 1)
                        }
                        return {
                            width: a.width / s,
                            height: a[i(669)] / n,
                            top: a[i(665)] / n,
                            right: a[i(729)] / s,
                            bottom: a.bottom / n,
                            left: a[i(977)] / s,
                            x: a[i(977)] / s,
                            y: a[i(665)] / n
                        }
                    }

                    function W(e) {
                        var l = t,
                            i = D(e);
                        return {
                            scrollLeft: i.pageXOffset,
                            scrollTop: i[l(525) + "t"]
                        }
                    }

                    function G(e) {
                        return e ? (e[t(703)] || "").toLowerCase() : null
                    }

                    function V(e) {
                        var l = t;
                        return ((N(e) ? e[l(538) + l(516)] : e[l(766)]) || window[l(766)])[l(693) + l(912)]
                    }

                    function _(e) {
                        var l = t;
                        return B(V(e)).left + W(e)[l(596)]
                    }

                    function j(e) {
                        var l = t;
                        return D(e)[l(537) + l(657)](e)
                    }

                    function U(e) {
                        var l = t,
                            i = j(e),
                            a = i[l(761)],
                            s = i[l(500)],
                            n = i.overflowY;
                        return /auto|scroll|overlay|hidden/ [l(784)](a + n + s)
                    }

                    function Z(e, l, i) {
                        var a = t;
                        void 0 === i && (i = !1);
                        var s, n, o, r, h, c, d, u = X(l),
                            g = X(l) && (o = (s = l)[(n = t)(684) + n(663) + "t"](), r = H(o[n(845)]) / s[n(654) + "h"] || 1, h = H(o.height) / s[n(561) + "ht"] || 1, 1 !== r || 1 !== h),
                            p = V(l),
                            f = B(e, g),
                            v = {
                                scrollLeft: 0,
                                scrollTop: 0
                            },
                            x = {
                                x: 0,
                                y: 0
                            };
                        return (u || !u && !i) && ((G(l) !== a(595) || U(p)) && (v = (c = l) !== D(c) && X(c) ? {
                            scrollLeft: (d = c).scrollLeft,
                            scrollTop: d.scrollTop
                        } : W(c)), X(l) ? ((x = B(l, !0)).x += l[a(754)], x.y += l.clientTop) : p && (x.x = _(p))), {
                            x: f.left + v[a(596)] - x.x,
                            y: f[a(665)] + v[a(820)] - x.y,
                            width: f.width,
                            height: f.height
                        }
                    }

                    function q(e) {
                        var l = t,
                            i = B(e),
                            a = e[l(654) + "h"],
                            s = e[l(561) + "ht"];
                        return Math[l(748)](i.width - a) <= 1 && (a = i[l(845)]), Math[l(748)](i[l(669)] - s) <= 1 && (s = i[l(669)]), {
                            x: e[l(937)],
                            y: e[l(674)],
                            width: a,
                            height: s
                        }
                    }

                    function K(e) {
                        var l = t;
                        return G(e) === l(866) ? e : e[l(920) + "ot"] || e[l(655)] || (R(e) ? e[l(770)] : null) || V(e)
                    }

                    function J(e) {
                        var l = t;
                        return ["html", l(595), l(764)][l(576)](G(e)) >= 0 ? e["ownerDocum" + l(516)][l(595)] : X(e) && U(e) ? e : J(K(e))
                    }

                    function $(e, l) {
                        var i, a = t;
                        void 0 === l && (l = []);
                        var s = J(e),
                            n = s === (null == (i = e[a(538) + a(516)]) ? void 0 : i[a(595)]),
                            o = D(s),
                            r = n ? [o].concat(o[a(911) + a(979)] || [], U(s) ? s : []) : s,
                            h = l[a(622)](r);
                        return n ? h : h[a(622)]($(K(r)))
                    }

                    function Q(e) {
                        var l = t;
                        return X(e) && j(e)[l(508)] !== l(832) ? e[l(741) + "nt"] : null
                    }

                    function tt(e) {
                        for (var l, i = t, a = D(e), s = Q(e); s && (l = s, [t(723), "td", "th"].indexOf(G(l)) >= 0) && j(s)[i(508)] === i(883);) s = Q(s);
                        return s && ("html" === G(s) || G(s) === i(595) && j(s)[i(508)] === i(883)) ? a : s || function (e) {
                            var l = t,
                                i = -1 !== navigator[l(986)][l(967) + "e"]().indexOf(l(837));
                            if (-1 !== navigator[l(986)].indexOf(l(868)) && X(e) && j(e).position === l(832)) return null;
                            for (var a = K(e); X(a) && [l(866), l(595)][l(576)](G(a)) < 0;) {
                                var s = j(a);
                                if ("none" !== s[l(994)] || s[l(728) + "e"] !== l(539) || s.contain === l(483) || -1 !== ["transform", l(728) + "e"][l(576)](s[l(1001)]) || i && s[l(1001)] === l(683) || i && s[l(683)] && s[l(683)] !== l(539)) return a;
                                a = a[l(655)]
                            }
                            return null
                        }(e) || a
                    }
                    var et = t(665),
                        lt = t(974),
                        it = "right",
                        at = t(977),
                        st = "auto",
                        nt = [et, lt, it, at],
                        ot = "start",
                        rt = t(758),
                        ht = t(821) + t(578),
                        ct = t(976),
                        dt = "popper",
                        ut = nt[t(895)]((function (e, l) {
                            return e[t(622)]([l + "-" + ot, l + "-" + rt])
                        }), []),
                        gt = [].concat(nt, [st]).reduce((function (t, e) {
                            return t.concat([e, e + "-" + ot, e + "-" + rt])
                        }), []),
                        pt = [t(666), "read", "afterRead", t(696), t(557), t(800), t(924) + "e", "write", t(709)];

                    function ft(e) {
                        var l = t,
                            i = new Map,
                            a = new Set,
                            s = [];

                        function n(t) {
                            var e = l;
                            a[e(519)](t[e(603)]), [].concat(t.requires || [], t["requiresIf" + e(545)] || [])[e(898)]((function (t) {
                                var l = e;
                                if (!a[l(588)](t)) {
                                    var s = i[l(928)](t);
                                    s && n(s)
                                }
                            })), s[e(646)](t)
                        }
                        return e[l(898)]((function (t) {
                            var e = l;
                            i.set(t[e(603)], t)
                        })), e[l(898)]((function (t) {
                            !a[l(588)](t.name) && n(t)
                        })), s
                    }
                    t(517), t(735), t(875), t(891), t(713), t(783), t(634), t(556), t(876), t(653), t(534), t(577), t(915), t(812), t(778), t(951), t(906), t(685), t(527), t(806), t(639), t(593);
                    var vt = {
                        placement: t(974),
                        modifiers: [],
                        strategy: t(831)
                    };

                    function xt() {
                        for (var e = t, l = arguments[e(507)], i = new Array(l), a = 0; a < l; a++) i[a] = arguments[a];
                        return !i[e(840)]((function (t) {
                            var l = e;
                            return !(t && "function" == typeof t[l(684) + l(663) + "t"])
                        }))
                    }
                    var mt = {
                        passive: !0
                    };
                    const bt = {
                        name: t(797) + "ners",
                        enabled: !0,
                        phase: t(635),
                        fn: function () {},
                        effect: function (e) {
                            var l = t,
                                i = e[l(897)],
                                a = e[l(502)],
                                s = e[l(747)],
                                n = s[l(618)],
                                o = void 0 === n || n,
                                r = s.resize,
                                h = void 0 === r || r,
                                c = D(i[l(523)][l(880)]),
                                d = [][l(622)](i["scrollPare" + l(606)][l(484)], i["scrollPare" + l(606)][l(880)]);
                            return o && d.forEach((function (t) {
                                    var e = l;
                                    t[e(973) + e(581)](e(618), a[e(925)], mt)
                                })), h && c["addEventLi" + l(581)](l(753), a[l(925)], mt),
                                function () {
                                    var t = l;
                                    o && d[t(898)]((function (e) {
                                        var l = t;
                                        e[l(676) + l(712)]("scroll", a[l(925)], mt)
                                    })), h && c[t(676) + "tListener"](t(753), a[t(925)], mt)
                                }
                        },
                        data: {}
                    };

                    function yt(t) {
                        return t.split("-")[0]
                    }

                    function wt(t) {
                        return t.split("-")[1]
                    }

                    function At(e) {
                        var l = t;
                        return ["top", l(974)][l(576)](e) >= 0 ? "x" : "y"
                    }

                    function St(e) {
                        var l, i = t,
                            a = e[i(484)],
                            s = e[i(913)],
                            n = e[i(733)],
                            o = n ? yt(n) : null,
                            r = n ? wt(n) : null,
                            h = a.x + a[i(845)] / 2 - s[i(845)] / 2,
                            c = a.y + a[i(669)] / 2 - s.height / 2;
                        switch (o) {
                            case et:
                                l = {
                                    x: h,
                                    y: a.y - s[i(669)]
                                };
                                break;
                            case lt:
                                l = {
                                    x: h,
                                    y: a.y + a[i(669)]
                                };
                                break;
                            case it:
                                l = {
                                    x: a.x + a[i(845)],
                                    y: c
                                };
                                break;
                            case at:
                                l = {
                                    x: a.x - s[i(845)],
                                    y: c
                                };
                                break;
                            default:
                                l = {
                                    x: a.x,
                                    y: a.y
                                }
                        }
                        var d = o ? At(o) : null;
                        if (null != d) {
                            var u = i("y" === d ? 669 : 845);
                            switch (r) {
                                case ot:
                                    l[d] = l[d] - (a[u] / 2 - s[u] / 2);
                                    break;
                                case rt:
                                    l[d] = l[d] + (a[u] / 2 - s[u] / 2)
                            }
                        }
                        return l
                    }
                    const kt = {
                        name: t(769) + t(849),
                        enabled: !0,
                        phase: t(633),
                        fn: function (e) {
                            var l = t,
                                i = e[l(897)],
                                a = e[l(603)];
                            i["modifiersD" + l(822)][a] = St({
                                reference: i[l(736)][l(484)],
                                element: i[l(736)][l(880)],
                                strategy: l(831),
                                placement: i.placement
                            })
                        },
                        data: {}
                    };
                    var Lt = {
                        top: t(668),
                        right: t(668),
                        bottom: t(668),
                        left: "auto"
                    };

                    function Ct(e) {
                        var l, i = t,
                            a = e[i(880)],
                            s = e[i(560)],
                            n = e.placement,
                            o = e[i(670)],
                            r = e.offsets,
                            h = e.position,
                            c = e[i(680) + i(651)],
                            d = e[i(573)],
                            u = e[i(819) + "ts"],
                            g = e.isFixed,
                            p = r.x,
                            f = void 0 === p ? 0 : p,
                            v = r.y,
                            x = void 0 === v ? 0 : v,
                            m = typeof u === i(756) ? u({
                                x: f,
                                y: x
                            }) : {
                                x: f,
                                y: x
                            };
                        f = m.x, x = m.y;
                        var b = r[i(990) + i(495)]("x"),
                            y = r[i(990) + i(495)]("y"),
                            w = at,
                            A = et,
                            S = window;
                        if (d) {
                            var k = tt(a),
                                L = i(518) + "ht",
                                C = "clientWidth";
                            k === D(a) && "static" !== j(k = V(a))[i(508)] && h === i(831) && (L = i(506) + "ht", C = i(604) + "h"), k = k, (n === et || (n === at || n === it) && o === rt) && (A = lt, x -= (g && S[i(911) + i(979)] ? S[i(911) + i(979)].height : k[L]) - s[i(669)], x *= c ? 1 : -1), n !== at && (n !== et && n !== lt || o !== rt) || (w = it, f -= (g && S[i(911) + i(979)] ? S["visualView" + i(979)][i(845)] : k[C]) - s[i(845)], f *= c ? 1 : -1)
                        }
                        var M, z, E, P, T, I, O = Object[i(807)]({
                                position: h
                            }, d && Lt),
                            N = !0 === u ? (z = t, E = (M = {
                                x: f,
                                y: x
                            }).x, P = M.y, T = window[z(550) + z(632)] || 1, {
                                x: H(E * T) / T || 0,
                                y: H(P * T) / T || 0
                            }) : {
                                x: f,
                                y: x
                            };
                        return f = N.x, x = N.y, c ? Object[i(807)]({}, O, ((I = {})[A] = y ? "0" : "", I[w] = b ? "0" : "", I[i(994)] = (S[i(550) + i(632)] || 1) <= 1 ? i(767) + f + i(792) + x + i(847) : i(501) + "d(" + f + i(792) + x + i(984), I)) : Object.assign({}, O, ((l = {})[A] = y ? x + "px" : "", l[w] = b ? f + "px" : "", l[i(994)] = "", l))
                    }
                    const Mt = {
                            name: t(562) + t(786),
                            enabled: !0,
                            phase: t(924) + "e",
                            fn: function (e) {
                                var l = t,
                                    i = e[l(897)],
                                    a = e[l(747)],
                                    s = a[l(680) + l(651)],
                                    n = void 0 === s || s,
                                    o = a.adaptive,
                                    r = void 0 === o || o,
                                    h = a.roundOffsets,
                                    c = void 0 === h || h,
                                    d = {
                                        placement: yt(i[l(733)]),
                                        variation: wt(i[l(733)]),
                                        popper: i[l(523)].popper,
                                        popperRect: i[l(736)][l(880)],
                                        gpuAcceleration: n,
                                        isFixed: "fixed" === i[l(747)][l(490)]
                                    };
                                null != i[l(673) + l(822)][l(769) + l(849)] && (i[l(522)][l(880)] = Object.assign({}, i[l(522)][l(880)], Ct(Object[l(807)]({}, d, {
                                    offsets: i[l(673) + "ata"][l(769) + l(849)],
                                    position: i[l(747)][l(490)],
                                    adaptive: r,
                                    roundOffsets: c
                                })))), null != i[l(673) + l(822)][l(609)] && (i[l(522)][l(609)] = Object[l(807)]({}, i.styles[l(609)], Ct(Object[l(807)]({}, d, {
                                    offsets: i[l(673) + l(822)][l(609)],
                                    position: l(831),
                                    adaptive: !1,
                                    roundOffsets: c
                                })))), i[l(853)][l(880)] = Object.assign({}, i.attributes.popper, {
                                    "data-popper-placement": i[l(733)]
                                })
                            },
                            data: {}
                        },
                        zt = {
                            name: "applyStyles",
                            enabled: !0,
                            phase: t(635),
                            fn: function (e) {
                                var l = t,
                                    i = e[l(897)];
                                Object[l(768)](i[l(523)])[l(898)]((function (t) {
                                    var e = l,
                                        a = i[e(522)][t] || {},
                                        s = i[e(853)][t] || {},
                                        n = i[e(523)][t];
                                    X(n) && G(n) && (Object.assign(n.style, a), Object[e(768)](s).forEach((function (t) {
                                        var l = e,
                                            i = s[t];
                                        !1 === i ? n[l(839) + "ibute"](t) : n[l(688) + "te"](t, !0 === i ? "" : i)
                                    })))
                                }))
                            },
                            effect: function (e) {
                                var l = t,
                                    i = e[l(897)],
                                    a = {
                                        popper: {
                                            position: i[l(747)][l(490)],
                                            left: "0",
                                            top: "0",
                                            margin: "0"
                                        },
                                        arrow: {
                                            position: l(831)
                                        },
                                        reference: {}
                                    };
                                return Object[l(807)](i[l(523)][l(880)][l(567)], a[l(880)]), i[l(522)] = a, i.elements[l(609)] && Object.assign(i[l(523)][l(609)][l(567)], a[l(609)]),
                                    function () {
                                        var t = l;
                                        Object[t(768)](i.elements)[t(898)]((function (e) {
                                            var l = t,
                                                s = i.elements[e],
                                                n = i[l(853)][e] || {},
                                                o = Object[l(768)](i[l(522)][l(990) + l(495)](e) ? i.styles[e] : a[e])[l(895)]((function (t, e) {
                                                    return t[e] = "", t
                                                }), {});
                                            X(s) && G(s) && (Object.assign(s[l(567)], o), Object[l(768)](n)[l(898)]((function (t) {
                                                s.removeAttribute(t)
                                            })))
                                        }))
                                    }
                            },
                            requires: [t(562) + "les"]
                        },
                        Et = {
                            name: t(890),
                            enabled: !0,
                            phase: t(557),
                            requires: [t(769) + t(849)],
                            fn: function (e) {
                                var l = t,
                                    i = e[l(897)],
                                    a = e[l(747)],
                                    s = e[l(603)],
                                    n = a.offset,
                                    o = void 0 === n ? [0, 0] : n,
                                    r = gt[l(895)]((function (e, l) {
                                        return e[l] = (a = l, s = i.rects, n = o, r = t, h = yt(a), c = [at, et][r(576)](h) >= 0 ? -1 : 1, u = (u = (d = typeof n === r(756) ? n(Object[r(807)]({}, s, {
                                            placement: a
                                        })) : n)[0]) || 0, g = ((g = d[1]) || 0) * c, [at, it][r(576)](h) >= 0 ? {
                                            x: g,
                                            y: u
                                        } : {
                                            x: u,
                                            y: g
                                        }), e;
                                        var a, s, n, r, h, c, d, u, g
                                    }), {}),
                                    h = r[i[l(733)]],
                                    c = h.x,
                                    d = h.y;
                                null != i[l(673) + l(822)][l(769) + l(849)] && (i.modifiersData[l(769) + l(849)].x += c, i[l(673) + l(822)][l(769) + l(849)].y += d), i[l(673) + l(822)][s] = r
                            }
                        };
                    var Pt = {
                        left: "right",
                        right: "left",
                        bottom: t(665),
                        top: t(974)
                    };

                    function Tt(t) {
                        return t.replace(/left|right|bottom|top/g, (function (t) {
                            return Pt[t]
                        }))
                    }
                    var It = {
                        start: t(758),
                        end: t(732)
                    };

                    function Ot(t) {
                        return t.replace(/start|end/g, (function (t) {
                            return It[t]
                        }))
                    }

                    function Dt(e, l) {
                        var i = t,
                            a = l[i(1e3) + "e"] && l[i(1e3) + "e"]();
                        if (e[i(701)](l)) return !0;
                        if (a && R(a)) {
                            var s = l;
                            do {
                                if (s && e.isSameNode(s)) return !0;
                                s = s[i(655)] || s[i(770)]
                            } while (s)
                        }
                        return !1
                    }

                    function Nt(e) {
                        var l = t;
                        return Object[l(807)]({}, e, {
                            left: e.x,
                            top: e.y,
                            right: e.x + e[l(845)],
                            bottom: e.y + e[l(669)]
                        })
                    }

                    function Xt(e, l) {
                        return l === ct ? Nt((x = t, m = D(v = e), b = V(v), y = m[x(911) + x(979)], w = b.clientWidth, A = b.clientHeight, S = 0, k = 0, y && (w = y[x(845)], A = y[x(669)], !/^((?!chrome|android).)*safari/i [x(784)](navigator[x(986)]) && (S = y[x(937)], k = y.offsetTop)), {
                            width: w,
                            height: A,
                            x: S + _(v),
                            y: k
                        })) : N(l) ? (p = t, (f = B(g = l))[p(665)] = f[p(665)] + g.clientTop, f[p(977)] = f[p(977)] + g[p(754)], f[p(974)] = f.top + g.clientHeight, f[p(729)] = f[p(977)] + g[p(613) + "h"], f[p(845)] = g.clientWidth, f[p(669)] = g[p(518) + "ht"], f.x = f.left, f.y = f[p(665)], f) : Nt((i = V(e), s = t, n = V(i), o = W(i), r = null == (a = i.ownerDocument) ? void 0 : a[s(595)], h = Y(n[s(604) + "h"], n[s(613) + "h"], r ? r[s(604) + "h"] : 0, r ? r[s(613) + "h"] : 0), c = Y(n[s(506) + "ht"], n[s(518) + "ht"], r ? r[s(506) + "ht"] : 0, r ? r[s(518) + "ht"] : 0), d = -o[s(596)] + _(i), u = -o[s(820)], j(r || n)[s(923)] === s(894) && (d += Y(n[s(613) + "h"], r ? r[s(613) + "h"] : 0) - h), {
                            width: h,
                            height: c,
                            x: d,
                            y: u
                        }));
                        var i, a, s, n, o, r, h, c, d, u, g, p, f, v, x, m, b, y, w, A, S, k
                    }

                    function Rt(e) {
                        return Object[t(807)]({}, {
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        }, e)
                    }

                    function Yt(e, l) {
                        return l[t(895)]((function (t, l) {
                            return t[l] = e, t
                        }), {})
                    }

                    function Ft(e, l) {
                        var i = t;
                        void 0 === l && (l = {});
                        var a, s, n, o, r, h, c, d, u, g, p, f, v = l,
                            x = v[i(733)],
                            m = void 0 === x ? e[i(733)] : x,
                            b = v.boundary,
                            y = void 0 === b ? ht : b,
                            w = v[i(702) + "ry"],
                            A = void 0 === w ? ct : w,
                            S = v[i(678) + i(672)],
                            k = void 0 === S ? dt : S,
                            L = v[i(909) + "y"],
                            C = void 0 !== L && L,
                            M = v[i(697)],
                            z = void 0 === M ? 0 : M,
                            E = Rt(typeof z !== i(658) ? z : Yt(z, nt)),
                            P = k === dt ? "reference" : dt,
                            T = e[i(736)][i(880)],
                            I = e[i(523)][C ? P : k],
                            O = (a = N(I) ? I : I[i(1004) + i(509)] || V(e[i(523)].popper), n = A, u = (s = y) === (d = t)(821) + d(578) ? (r = t, h = $(K(o = a)), N(c = ["absolute", r(832)][r(576)](j(o).position) >= 0 && X(o) ? tt(o) : o) ? h[r(683)]((function (t) {
                                var e = r;
                                return N(t) && Dt(t, c) && G(t) !== e(595)
                            })) : []) : [][d(622)](s), g = [][d(622)](u, [n]), p = g[0], (f = g[d(895)]((function (t, e) {
                                var l = d,
                                    i = Xt(a, e);
                                return t[l(665)] = Y(i[l(665)], t.top), t[l(729)] = F(i[l(729)], t[l(729)]), t[l(974)] = F(i[l(974)], t.bottom), t[l(977)] = Y(i[l(977)], t[l(977)]), t
                            }), Xt(a, p)))[d(845)] = f[d(729)] - f[d(977)], f.height = f[d(974)] - f[d(665)], f.x = f.left, f.y = f[d(665)], f),
                            D = B(e[i(523)][i(484)]),
                            R = St({
                                reference: D,
                                element: T,
                                strategy: "absolute",
                                placement: m
                            }),
                            H = Nt(Object[i(807)]({}, T, R)),
                            W = k === dt ? H : D,
                            _ = {
                                top: O[i(665)] - W[i(665)] + E.top,
                                bottom: W[i(974)] - O[i(974)] + E[i(974)],
                                left: O[i(977)] - W.left + E[i(977)],
                                right: W.right - O[i(729)] + E[i(729)]
                            },
                            U = e[i(673) + "ata"][i(890)];
                        if (k === dt && U) {
                            var Z = U[m];
                            Object.keys(_)[i(898)]((function (t) {
                                var e = i,
                                    l = [it, lt][e(576)](t) >= 0 ? 1 : -1,
                                    a = [et, lt][e(576)](t) >= 0 ? "y" : "x";
                                _[t] += Z[a] * l
                            }))
                        }
                        return _
                    }

                    function Ht(t, e, l) {
                        return Y(t, F(e, l))
                    }

                    function Bt(e, l, i) {
                        var a = t;
                        return void 0 === i && (i = {
                            x: 0,
                            y: 0
                        }), {
                            top: e[a(665)] - l[a(669)] - i.y,
                            right: e[a(729)] - l[a(845)] + i.x,
                            bottom: e.bottom - l[a(669)] + i.y,
                            left: e[a(977)] - l.width - i.x
                        }
                    }

                    function Wt(t) {
                        return [et, it, lt, at].some((function (e) {
                            return t[e] >= 0
                        }))
                    }
                    var Gt = function (e) {
                        var l = t;
                        void 0 === e && (e = {});
                        var a = e,
                            s = a["defaultMod" + l(540)],
                            n = void 0 === s ? [] : s,
                            o = a[l(559) + "ions"],
                            r = void 0 === o ? vt : o;
                        return function (e, a, s) {
                            var o = l;
                            void 0 === s && (s = r);
                            var h, c, d = {
                                    placement: "bottom",
                                    orderedModifiers: [],
                                    options: Object[o(807)]({}, vt, r),
                                    modifiersData: {},
                                    elements: {
                                        reference: e,
                                        popper: a
                                    },
                                    attributes: {},
                                    styles: {}
                                },
                                u = [],
                                g = !1,
                                p = {
                                    state: d,
                                    setOptions: function (l) {
                                        var s = o,
                                            h = typeof l === s(756) ? l(d[s(747)]) : l;
                                        f(), d[s(747)] = Object.assign({}, r, d[s(747)], h), d["scrollPare" + s(606)] = {
                                            reference: N(e) ? $(e) : e[s(1004) + s(509)] ? $(e[s(1004) + s(509)]) : [],
                                            popper: $(a)
                                        };
                                        var c, g, v, x, m, b, y, w = (x = [].concat(n, d[s(747)].modifiers), m = t, b = x.reduce((function (t, e) {
                                            var l = i,
                                                a = t[e[l(603)]];
                                            return t[e[l(603)]] = a ? Object[l(807)]({}, a, e, {
                                                options: Object.assign({}, a[l(747)], e.options),
                                                data: Object[l(807)]({}, a[l(992)], e.data)
                                            }) : e, t
                                        }), {}), c = Object[m(768)](b)[m(827)]((function (t) {
                                            return b[t]
                                        })), g = t, v = ft(c), pt[g(895)]((function (t, e) {
                                            var l = g;
                                            return t[l(622)](v[l(683)]((function (t) {
                                                return t[l(996)] === e
                                            })))
                                        }), []));
                                        return d[s(725) + s(540)] = w.filter((function (t) {
                                            return t[s(543)]
                                        })), d[(y = o)(725) + y(540)][y(898)]((function (t) {
                                            var e = y,
                                                l = t.name,
                                                i = t[e(747)],
                                                a = void 0 === i ? {} : i,
                                                s = t.effect;
                                            if (typeof s === e(756)) {
                                                var n = s({
                                                    state: d,
                                                    name: l,
                                                    instance: p,
                                                    options: a
                                                });
                                                u[e(646)](n || function () {})
                                            }
                                        })), p[s(925)]()
                                    },
                                    forceUpdate: function () {
                                        var t = o;
                                        if (!g) {
                                            var e = d[t(523)],
                                                l = e[t(484)],
                                                i = e.popper;
                                            if (xt(l, i)) {
                                                d[t(736)] = {
                                                    reference: Z(l, tt(i), d.options[t(490)] === t(832)),
                                                    popper: q(i)
                                                }, d.reset = !1, d.placement = d.options[t(733)], d[t(725) + t(540)][t(898)]((function (e) {
                                                    var l = t;
                                                    return d.modifiersData[e[l(603)]] = Object.assign({}, e.data)
                                                }));
                                                for (var a = 0; a < d["orderedMod" + t(540)][t(507)]; a++)
                                                    if (!0 !== d.reset) {
                                                        var s = d[t(725) + t(540)][a],
                                                            n = s.fn,
                                                            r = s[t(747)],
                                                            h = void 0 === r ? {} : r,
                                                            c = s[t(603)];
                                                        typeof n === t(756) && (d = n({
                                                            state: d,
                                                            options: h,
                                                            name: c,
                                                            instance: p
                                                        }) || d)
                                                    } else d[t(587)] = !1, a = -1
                                            }
                                        }
                                    },
                                    update: (h = function () {
                                        return new Promise((function (t) {
                                            p[i(552) + "e"](), t(d)
                                        }))
                                    }, function () {
                                        return !c && (c = new Promise((function (t) {
                                            Promise.resolve().then((function () {
                                                c = void 0, t(h())
                                            }))
                                        }))), c
                                    }),
                                    destroy: function () {
                                        f(), g = !0
                                    }
                                };
                            if (!xt(e, a)) return p;

                            function f() {
                                u.forEach((function (t) {
                                    return t()
                                })), u = []
                            }
                            return p[o(504)](s).then((function (t) {
                                var e = o;
                                !g && s[e(889) + e(607)] && s[e(889) + e(607)](t)
                            })), p
                        }
                    }({
                        defaultModifiers: [bt, kt, Mt, zt, Et, {
                            name: t(851),
                            enabled: !0,
                            phase: t(557),
                            fn: function (e) {
                                var l = t,
                                    i = e[l(897)],
                                    a = e[l(747)],
                                    s = e[l(603)];
                                if (!i[l(673) + l(822)][s][l(541)]) {
                                    for (var n = a[l(781)], o = void 0 === n || n, r = a[l(841)], h = void 0 === r || r, c = a[l(971) + l(630)], d = a[l(697)], u = a[l(582)], g = a[l(702) + "ry"], p = a[l(909) + "y"], f = a[l(852) + l(882)], v = void 0 === f || f, x = a["allowedAut" + l(671) + "s"], m = i[l(747)][l(733)], b = yt(m), y = c || (b !== m && v ? function (t) {
                                            if (yt(t) === st) return [];
                                            var e = Tt(t);
                                            return [Ot(t), e, Ot(e)]
                                        }(m) : [Tt(m)]), w = [m][l(622)](y).reduce((function (e, a) {
                                            return e[l(622)](yt(a) === st ? function (e, l) {
                                                var i = t;
                                                void 0 === l && (l = {});
                                                var a = l,
                                                    s = a[i(733)],
                                                    n = a[i(582)],
                                                    o = a[i(702) + "ry"],
                                                    r = a[i(697)],
                                                    h = a[i(852) + i(882)],
                                                    c = a[i(487) + i(671) + "s"],
                                                    d = void 0 === c ? gt : c,
                                                    u = wt(s),
                                                    g = u ? h ? ut : ut[i(683)]((function (t) {
                                                        return wt(t) === u
                                                    })) : nt,
                                                    p = g[i(683)]((function (t) {
                                                        return d[i(576)](t) >= 0
                                                    }));
                                                0 === p[i(507)] && (p = g);
                                                var f = p[i(895)]((function (t, l) {
                                                    return t[l] = Ft(e, {
                                                        placement: l,
                                                        boundary: n,
                                                        rootBoundary: o,
                                                        padding: r
                                                    })[yt(l)], t
                                                }), {});
                                                return Object[i(768)](f)[i(489)]((function (t, e) {
                                                    return f[t] - f[e]
                                                }))
                                            }(i, {
                                                placement: a,
                                                boundary: u,
                                                rootBoundary: g,
                                                padding: d,
                                                flipVariations: v,
                                                allowedAutoPlacements: x
                                            }) : a)
                                        }), []), A = i[l(736)][l(484)], S = i.rects.popper, k = new Map, L = !0, C = w[0], M = 0; M < w[l(507)]; M++) {
                                        var z = w[M],
                                            E = yt(z),
                                            P = wt(z) === ot,
                                            T = [et, lt][l(576)](E) >= 0,
                                            I = T ? "width" : "height",
                                            O = Ft(i, {
                                                placement: z,
                                                boundary: u,
                                                rootBoundary: g,
                                                altBoundary: p,
                                                padding: d
                                            }),
                                            D = T ? P ? it : at : P ? lt : et;
                                        A[I] > S[I] && (D = Tt(D));
                                        var N = Tt(D),
                                            X = [];
                                        if (o && X[l(646)](O[E] <= 0), h && X[l(646)](O[D] <= 0, O[N] <= 0), X[l(874)]((function (t) {
                                                return t
                                            }))) {
                                            C = z, L = !1;
                                            break
                                        }
                                        k[l(661)](z, X)
                                    }
                                    if (L)
                                        for (var R = function (t) {
                                                var e = l,
                                                    i = w[e(848)]((function (l) {
                                                        var i = e,
                                                            a = k[i(928)](l);
                                                        if (a) return a[i(828)](0, t)[i(874)]((function (t) {
                                                            return t
                                                        }))
                                                    }));
                                                if (i) return C = i, "break"
                                            }, Y = v ? 3 : 1; Y > 0 && R(Y) !== l(844); Y--);
                                    i[l(733)] !== C && (i[l(673) + l(822)][s][l(541)] = !0, i[l(733)] = C, i.reset = !0)
                                }
                            },
                            requiresIfExists: [t(890)],
                            data: {
                                _skip: !1
                            }
                        }, {
                            name: t(631) + t(978),
                            enabled: !0,
                            phase: t(557),
                            fn: function (e) {
                                var l = t,
                                    i = e.state,
                                    a = e[l(747)],
                                    s = e[l(603)],
                                    n = a[l(781)],
                                    o = void 0 === n || n,
                                    r = a.altAxis,
                                    h = void 0 !== r && r,
                                    c = a[l(582)],
                                    d = a[l(702) + "ry"],
                                    u = a.altBoundary,
                                    g = a.padding,
                                    p = a[l(759)],
                                    f = void 0 === p || p,
                                    v = a[l(896) + "et"],
                                    x = void 0 === v ? 0 : v,
                                    m = Ft(i, {
                                        boundary: c,
                                        rootBoundary: d,
                                        padding: g,
                                        altBoundary: u
                                    }),
                                    b = yt(i.placement),
                                    y = wt(i[l(733)]),
                                    w = !y,
                                    A = At(b),
                                    S = "x" === A ? "y" : "x",
                                    k = i[l(673) + "ata"][l(769) + "ets"],
                                    L = i.rects[l(484)],
                                    C = i[l(736)][l(880)],
                                    M = "function" == typeof x ? x(Object[l(807)]({}, i[l(736)], {
                                        placement: i.placement
                                    })) : x,
                                    z = typeof M === l(658) ? {
                                        mainAxis: M,
                                        altAxis: M
                                    } : Object[l(807)]({
                                        mainAxis: 0,
                                        altAxis: 0
                                    }, M),
                                    E = i[l(673) + l(822)].offset ? i["modifiersD" + l(822)][l(890)][i[l(733)]] : null,
                                    P = {
                                        x: 0,
                                        y: 0
                                    };
                                if (k) {
                                    if (o) {
                                        var T, I = "y" === A ? et : at,
                                            O = "y" === A ? lt : it,
                                            D = l("y" === A ? 669 : 845),
                                            N = k[A],
                                            X = N + m[I],
                                            R = N - m[O],
                                            H = f ? -C[D] / 2 : 0,
                                            B = y === ot ? L[D] : C[D],
                                            W = y === ot ? -C[D] : -L[D],
                                            G = i[l(523)][l(609)],
                                            V = f && G ? q(G) : {
                                                width: 0,
                                                height: 0
                                            },
                                            _ = i[l(673) + l(822)][l(695) + "istent"] ? i["modifiersD" + l(822)][l(695) + l(794)][l(697)] : {
                                                top: 0,
                                                right: 0,
                                                bottom: 0,
                                                left: 0
                                            },
                                            j = _[I],
                                            U = _[O],
                                            Z = Ht(0, L[D], V[D]),
                                            K = w ? L[D] / 2 - H - Z - j - z[l(781)] : B - Z - j - z[l(781)],
                                            J = w ? -L[D] / 2 + H + Z + U + z[l(781)] : W + Z + U + z.mainAxis,
                                            $ = i.elements[l(609)] && tt(i[l(523)][l(609)]),
                                            Q = $ ? "y" === A ? $[l(969)] || 0 : $.clientLeft || 0 : 0,
                                            st = null != (T = null == E ? void 0 : E[A]) ? T : 0,
                                            nt = N + J - st,
                                            rt = Ht(f ? F(X, N + K - st - Q) : X, N, f ? Y(R, nt) : R);
                                        k[A] = rt, P[A] = rt - N
                                    }
                                    if (h) {
                                        var ht, ct = "x" === A ? et : at,
                                            dt = "x" === A ? lt : it,
                                            ut = k[S],
                                            gt = "y" === S ? "height" : l(845),
                                            pt = ut + m[ct],
                                            ft = ut - m[dt],
                                            vt = -1 !== [et, at][l(576)](b),
                                            xt = null != (ht = null == E ? void 0 : E[S]) ? ht : 0,
                                            mt = vt ? pt : ut - L[gt] - C[gt] - xt + z.altAxis,
                                            bt = vt ? ut + L[gt] + C[gt] - xt - z[l(841)] : ft,
                                            St = f && vt ? (Lt = Ht(mt, ut, kt = bt)) > kt ? kt : Lt : Ht(f ? mt : pt, ut, f ? bt : ft);
                                        k[S] = St, P[S] = St - ut
                                    }
                                    var kt, Lt;
                                    i[l(673) + l(822)][s] = P
                                }
                            },
                            requiresIfExists: [t(890)]
                        }, {
                            name: t(609),
                            enabled: !0,
                            phase: t(557),
                            fn: function (e) {
                                var l, i = t,
                                    a = e[i(897)],
                                    s = e[i(603)],
                                    n = e.options,
                                    o = a[i(523)][i(609)],
                                    r = a[i(673) + i(822)][i(769) + i(849)],
                                    h = yt(a[i(733)]),
                                    c = At(h),
                                    d = [at, it][i(576)](h) >= 0,
                                    u = i(d ? 669 : 845);
                                if (o && r) {
                                    var g, p, f, v = (p = a, Rt("number" != typeof (g = typeof (g = n[i(697)]) === (f = t)(756) ? g(Object[f(807)]({}, p[f(736)], {
                                            placement: p[f(733)]
                                        })) : g) ? g : Yt(g, nt))),
                                        x = q(o),
                                        m = "y" === c ? et : at,
                                        b = "y" === c ? lt : it,
                                        y = a.rects[i(484)][u] + a[i(736)].reference[c] - r[c] - a.rects[i(880)][u],
                                        w = r[c] - a[i(736)][i(484)][c],
                                        A = tt(o),
                                        S = A ? "y" === c ? A.clientHeight || 0 : A[i(613) + "h"] || 0 : 0,
                                        k = y / 2 - w / 2,
                                        L = v[m],
                                        C = S - x[u] - v[b],
                                        M = S / 2 - x[u] / 2 + k,
                                        z = Ht(L, M, C),
                                        E = c;
                                    a[i(673) + "ata"][s] = ((l = {})[E] = z, l[i(760) + "et"] = z - M, l)
                                }
                            },
                            effect: function (e) {
                                var l = t,
                                    i = e[l(897)],
                                    a = e[l(747)][l(913)],
                                    s = void 0 === a ? l(505) + l(692) : a;
                                null != s && (typeof s !== l(999) || (s = i[l(523)][l(880)][l(836) + l(900)](s))) && Dt(i[l(523)].popper, s) && (i[l(523)][l(609)] = s)
                            },
                            requires: [t(769) + t(849)],
                            requiresIfExists: [t(631) + t(978)]
                        }, {
                            name: t(830),
                            enabled: !0,
                            phase: t(557),
                            requiresIfExists: ["preventOve" + t(978)],
                            fn: function (e) {
                                var l = t,
                                    i = e.state,
                                    a = e[l(603)],
                                    s = i[l(736)][l(484)],
                                    n = i[l(736)][l(880)],
                                    o = i[l(673) + l(822)]["preventOve" + l(978)],
                                    r = Ft(i, {
                                        elementContext: "reference"
                                    }),
                                    h = Ft(i, {
                                        altBoundary: !0
                                    }),
                                    c = Bt(r, s),
                                    d = Bt(h, n, o),
                                    u = Wt(c),
                                    g = Wt(d);
                                i[l(673) + "ata"][a] = {
                                    referenceClippingOffsets: c,
                                    popperEscapeOffsets: d,
                                    isReferenceHidden: u,
                                    hasPopperEscaped: g
                                }, i[l(853)][l(880)] = Object[l(807)]({}, i[l(853)][l(880)], {
                                    "data-popper-reference-hidden": u,
                                    "data-popper-escaped": g
                                })
                            }
                        }]
                    });

                    function Vt(e) {
                        return function (e) {
                            if (Array[t(580)](e)) return _t(e)
                        }(e) || function (e) {
                            var l = t;
                            if (typeof Symbol !== l(936) && null != e[Symbol[l(532)]] || null != e["@@iterator"]) return Array[l(773)](e)
                        }(e) || function (e, l) {
                            var i = t;
                            if (e) {
                                if (typeof e === i(999)) return _t(e, l);
                                var a = Object[i(574)][i(694)].call(e)[i(828)](8, -1);
                                return a === i(958) && e[i(520) + "r"] && (a = e[i(520) + "r"][i(603)]), a === i(970) || "Set" === a ? Array[i(773)](e) : a === i(608) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/ [i(784)](a) ? _t(e, l) : void 0
                            }
                        }(e) || function () {
                            var e = t;
                            throw new TypeError("Invalid at" + e(864) + e(930) + e(592) + e(598) + e(624) + " be iterab" + e(675) + e(817) + e(740) + e(879) + e(496) + e(498) + ".")
                        }()
                    }

                    function _t(e, l) {
                        var i = t;
                        (null == l || l > e[i(507)]) && (l = e[i(507)]);
                        for (var a = 0, s = new Array(l); a < l; a++) s[a] = e[a];
                        return s
                    }

                    function jt(e, l) {
                        var i = t,
                            a = Object[i(768)](e);
                        if (Object["getOwnProp" + i(793) + "s"]) {
                            var s = Object[i(809) + i(793) + "s"](e);
                            l && (s = s[i(683)]((function (t) {
                                var l = i;
                                return Object[l(809) + l(953) + l(706)](e, t)[l(823)]
                            }))), a[i(646)].apply(a, s)
                        }
                        return a
                    }

                    function Ut(e) {
                        for (var l = t, i = 1; i < arguments[l(507)]; i++) {
                            var a = null != arguments[i] ? arguments[i] : {};
                            i % 2 ? jt(Object(a), !0)[l(898)]((function (t) {
                                Zt(e, t, a[t])
                            })) : Object[l(809) + l(953) + l(514)] ? Object[l(554) + "erties"](e, Object[l(809) + l(953) + l(514)](a)) : jt(Object(a))[l(898)]((function (t) {
                                var i = l;
                                Object[i(554) + i(495)](e, t, Object[i(809) + i(953) + i(706)](a, t))
                            }))
                        }
                        return e
                    }

                    function Zt(e, l, i) {
                        return l in e ? Object[t(554) + "erty"](e, l, {
                            value: i,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[l] = i, e
                    }

                    function qt(e, l) {
                        var i = t;
                        if (!(e instanceof l)) throw new TypeError(i(739) + "l a class " + i(642) + "ion")
                    }

                    function Kt(e, l) {
                        for (var i = t, a = 0; a < l[i(507)]; a++) {
                            var s = l[a];
                            s[i(823)] = s[i(823)] || !1, s[i(724) + "le"] = !0, i(855) in s && (s[i(905)] = !0), Object[i(554) + i(495)](e, s[i(499)], s)
                        }
                    }
                    var Jt = {
                            placement: t(974),
                            triggerType: t(529),
                            onShow: function () {},
                            onHide: function () {}
                        },
                        $t = function () {
                            var e, l, a, s = t;

                            function n() {
                                var t = i,
                                    e = arguments[t(507)] > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    l = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                    a = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                                qt(this, n), this._targetEl = e, this[t(938)] = l, this._options = Ut(Ut({}, Jt), a), this["_popperIns" + t(931)] = this._createPopperInstace(), this._visible = !1, this[t(629)]()
                            }
                            return e = n, l = [{
                                key: s(629),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this[t(938)] && this[t(938)][t(973) + "stener"](t(529), (function () {
                                        e[t(965)]()
                                    }))
                                }
                            }, {
                                key: "_createPopperInstace",
                                value: function () {
                                    var t = s;
                                    return Gt(this[t(938)], this[t(679)], {
                                        placement: this._options[t(733)],
                                        modifiers: [{
                                            name: t(890),
                                            options: {
                                                offset: [0, 10]
                                            }
                                        }]
                                    })
                                }
                            }, {
                                key: "_handleCli" + s(893),
                                value: function (t, e) {
                                    var l = s,
                                        i = t.target;
                                    i !== e && !e[l(701)](i) && !this[l(938)][l(701)](i) && this[l(942)] && this[l(830)](), document[l(595)][l(676) + l(712)](l(529), this[l(826) + l(893)], !0)
                                }
                            }, {
                                key: "toggle",
                                value: function () {
                                    var t = s;
                                    this[t(942)] ? (this.hide(), document[t(595)][t(676) + t(712)](t(529), this[t(826) + t(893)], !0)) : this[t(960)]()
                                }
                            }, {
                                key: s(960),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this[t(679)][t(589)][t(656)](t(857) + t(814)), this._targetEl[t(589)][t(519)](t(926) + t(888)), this[t(772) + t(931)].setOptions((function (e) {
                                        var l = t;
                                        return Ut(Ut({}, e), {}, {
                                            modifiers: [][l(622)](Vt(e[l(833)]), [{
                                                name: "eventListe" + l(871),
                                                enabled: !0
                                            }])
                                        })
                                    })), document[t(595)][t(973) + t(581)](t(529), (function (l) {
                                        var i = t;
                                        e[i(826) + i(893)](l, e._targetEl)
                                    }), !0), this[t(772) + "tance"].update(), this[t(942)] = !0, this[t(686)][t(650)]()
                                }
                            }, {
                                key: s(830),
                                value: function () {
                                    var t = s;
                                    this[t(679)][t(589)].remove(t(926) + t(888)), this[t(679)].classList[t(519)](t(857) + t(814)), this[t(772) + t(931)].setOptions((function (e) {
                                        var l = t;
                                        return Ut(Ut({}, e), {}, {
                                            modifiers: [][l(622)](Vt(e[l(833)]), [{
                                                name: "eventListe" + l(871),
                                                enabled: !1
                                            }])
                                        })
                                    })), this[t(942)] = !1, this._options.onHide()
                                }
                            }], a = t, l && Kt(e[a(574)], l), Object[a(554) + a(495)](e, a(574), {
                                writable: !1
                            }), n
                        }();

                    function Qt(t, e) {
                        (null == e || e > t.length) && (e = t.length);
                        for (var l = 0, i = new Array(e); l < e; l++) i[l] = t[l];
                        return i
                    }

                    function te(e, l) {
                        var i = t,
                            a = Object[i(768)](e);
                        if (Object[i(809) + i(793) + "s"]) {
                            var s = Object[i(809) + "ertySymbols"](e);
                            l && (s = s.filter((function (t) {
                                var l = i;
                                return Object["getOwnProp" + l(953) + l(706)](e, t)[l(823)]
                            }))), a.push.apply(a, s)
                        }
                        return a
                    }

                    function ee(e) {
                        for (var l = t, i = 1; i < arguments.length; i++) {
                            var a = null != arguments[i] ? arguments[i] : {};
                            i % 2 ? te(Object(a), !0).forEach((function (t) {
                                le(e, t, a[t])
                            })) : Object[l(809) + l(953) + "ptors"] ? Object[l(554) + l(796)](e, Object[l(809) + l(953) + l(514)](a)) : te(Object(a))[l(898)]((function (t) {
                                var i = l;
                                Object[i(554) + i(495)](e, t, Object[i(809) + i(953) + "ptor"](a, t))
                            }))
                        }
                        return e
                    }

                    function le(e, l, i) {
                        var a = t;
                        return l in e ? Object[a(554) + a(495)](e, l, {
                            value: i,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[l] = i, e
                    }

                    function ie(e, l) {
                        var i = t;
                        if (!(e instanceof l)) throw new TypeError("Cannot cal" + i(745) + i(642) + i(933))
                    }

                    function ae(e, l) {
                        for (var i = t, a = 0; a < l.length; a++) {
                            var s = l[a];
                            s[i(823)] = s[i(823)] || !1, s[i(724) + "le"] = !0, "value" in s && (s[i(905)] = !0), Object[i(554) + i(495)](e, s[i(499)], s)
                        }
                    }
                    window[t(640)] = $t, document[t(973) + t(581)](t(1005) + t(644), (function () {
                        var e = t;
                        document[e(836) + "torAll"](e(621) + e(572) + "e]")[e(898)]((function (t) {
                            var l = e,
                                i = document[l(765) + "ById"](t[l(988) + "te"](l(494) + l(950))),
                                a = t[l(988) + "te"](l(494) + l(777) + l(516));
                            new $t(i, t, {
                                placement: a || Jt[l(733)]
                            })
                        }))
                    }));
                    var se = {
                            placement: t(791),
                            backdropClasses: t(939) + "f2bqma2a8U YDxTlMchJwRzLwFqGXw" + t(917) + t(563) + "v6 _LPVUrp" + t(585) + t(482) + "bfFGclb6iw" + t(617) + t(547) + t(667),
                            onHide: function () {},
                            onShow: function () {},
                            onToggle: function () {}
                        },
                        ne = function () {
                            var e, l, a, s = t;

                            function n() {
                                var t = i,
                                    e = arguments[t(507)] > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    l = arguments[t(507)] > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                ie(this, n), this[t(679)] = e, this[t(686)] = ee(ee({}, se), l), this[t(742)] = !0, this[t(629)]()
                            }
                            return e = n, l = [{
                                key: s(629),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this[t(964) + "entClasses"]().map((function (l) {
                                        var i = t;
                                        e[i(679)][i(589)].add(l)
                                    }))
                                }
                            }, {
                                key: s(731) + "kdrop",
                                value: function () {
                                    var e, l = s;
                                    if (this[l(742)]) {
                                        var i, a = document[l(856) + "ent"](l(975));
                                        a[l(688) + "te"](l(795) + "drop", ""), (i = a[l(589)])[l(519)][l(648)](i, function (t) {
                                            if (Array.isArray(t)) return Qt(t)
                                        }(e = this[l(686)][l(716) + l(564)][l(698)](" ")) || function (e) {
                                            var l = t;
                                            if ("undefined" != typeof Symbol && null != e[Symbol[l(532)]] || null != e[l(705)]) return Array[l(773)](e)
                                        }(e) || function (e, l) {
                                            var i = t;
                                            if (e) {
                                                if (typeof e === i(999)) return Qt(e, l);
                                                var a = Object.prototype[i(694)].call(e)[i(828)](8, -1);
                                                return "Object" === a && e[i(520) + "r"] && (a = e[i(520) + "r"][i(603)]), a === i(970) || a === i(645) ? Array.from(e) : a === i(608) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/ [i(784)](a) ? Qt(e, l) : void 0
                                            }
                                        }(e) || function () {
                                            var e = t;
                                            throw new TypeError(e(649) + e(864) + e(930) + e(592) + e(598) + e(624) + e(659) + e(675) + e(817) + e(740) + e(879) + e(496) + "]() method.")
                                        }()), document[l(836) + l(900)](l(595))[l(526)](a)
                                    }
                                }
                            }, {
                                key: "_destroyBa" + s(681),
                                value: function () {
                                    var t = s;
                                    !this[t(742)] && document["querySelec" + t(900)](t(834) + t(846))[t(656)]()
                                }
                            }, {
                                key: "_getPlacem" + s(899),
                                value: function () {
                                    var t = s;
                                    switch (this[t(686)][t(733)]) {
                                        case "top-left":
                                            return [t(878) + t(555), t(677) + "t"];
                                        case t(690):
                                            return ["justify-ce" + t(956), t(677) + "t"];
                                        case t(811):
                                            return [t(643) + "d", "items-start"];
                                        case t(719) + "t":
                                            return [t(878) + t(555), t(511) + "er"];
                                        case t(791):
                                            return [t(612) + "nter", t(511) + "er"];
                                        case t(594) + "ht":
                                            return ["justify-end", t(511) + "er"];
                                        case "bottom-left":
                                            return [t(878) + t(555), t(985)];
                                        case t(513) + t(687):
                                            return ["justify-ce" + t(956), t(985)];
                                        case t(744) + "ht":
                                            return [t(643) + "d", "items-end"];
                                        default:
                                            return [t(612) + "nter", t(511) + "er"]
                                    }
                                }
                            }, {
                                key: s(965),
                                value: function () {
                                    var t = s;
                                    this._isHidden ? this.show() : this.hide(), this[t(686)][t(660)]()
                                }
                            }, {
                                key: "show",
                                value: function () {
                                    var t = s;
                                    this[t(679)][t(589)][t(519)](t(551) + t(626)), this[t(679)][t(589)][t(656)]("_SmdlCf6eU" + t(814)), this[t(679)][t(688) + "te"](t(575), "true"), this[t(679)][t(688) + "te"](t(691), t(542)), this._targetEl[t(839) + t(700)](t(954) + "n"), this["_createBac" + t(515)](), this[t(742)] = !1, this[t(686)][t(650)]()
                                }
                            }, {
                                key: "hide",
                                value: function () {
                                    var t = s;
                                    this[t(679)].classList[t(519)](t(857) + t(814)), this[t(679)][t(589)].remove(t(551) + t(626)), this._targetEl.setAttribute(t(954) + "n", t(944)), this[t(679)][t(839) + t(700)](t(575)), this[t(679)][t(839) + "ibute"](t(691)), this[t(544) + "ckdropEl"](), this[t(742)] = !0, this[t(686)][t(565)]()
                                }
                            }], a = t, l && ae(e.prototype, l), Object["defineProp" + a(495)](e, "prototype", {
                                writable: !1
                            }), n
                        }();
                    window[t(524)] = ne;
                    var oe = function (e, l) {
                        var i = t;
                        return !!l[i(840)]((function (t) {
                            return t.id === e
                        })) && l[i(848)]((function (t) {
                            return t.id === e
                        }))
                    };

                    function re(e) {
                        return function (e) {
                            if (Array[t(580)](e)) return he(e)
                        }(e) || function (e) {
                            var l = t;
                            if ("undefined" != typeof Symbol && null != e[Symbol[l(532)]] || null != e[l(705)]) return Array.from(e)
                        }(e) || function (e, l) {
                            var i = t;
                            if (e) {
                                if (typeof e === i(999)) return he(e, l);
                                var a = Object.prototype.toString[i(805)](e)[i(828)](8, -1);
                                return a === i(958) && e.constructor && (a = e[i(520) + "r"][i(603)]), a === i(970) || a === i(645) ? Array[i(773)](e) : a === i(608) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/ [i(784)](a) ? he(e, l) : void 0
                            }
                        }(e) || function () {
                            var e = t;
                            throw new TypeError(e(649) + e(864) + e(930) + e(592) + e(598) + e(624) + e(659) + e(675) + e(817) + e(740) + e(879) + "l.iterator]() method.")
                        }()
                    }

                    function he(e, l) {
                        var i = t;
                        (null == l || l > e[i(507)]) && (l = e[i(507)]);
                        for (var a = 0, s = new Array(l); a < l; a++) s[a] = e[a];
                        return s
                    }

                    function ce(e, l) {
                        var i = t,
                            a = Object[i(768)](e);
                        if (Object[i(809) + i(793) + "s"]) {
                            var s = Object[i(809) + "ertySymbols"](e);
                            l && (s = s[i(683)]((function (t) {
                                var l = i;
                                return Object[l(809) + l(953) + l(706)](e, t)[l(823)]
                            }))), a[i(646)][i(648)](a, s)
                        }
                        return a
                    }

                    function de(e) {
                        for (var l = t, i = 1; i < arguments.length; i++) {
                            var a = null != arguments[i] ? arguments[i] : {};
                            i % 2 ? ce(Object(a), !0).forEach((function (t) {
                                ue(e, t, a[t])
                            })) : Object[l(809) + l(953) + "ptors"] ? Object[l(554) + l(796)](e, Object["getOwnProp" + l(953) + l(514)](a)) : ce(Object(a))[l(898)]((function (t) {
                                var i = l;
                                Object[i(554) + "erty"](e, t, Object[i(809) + i(953) + i(706)](a, t))
                            }))
                        }
                        return e
                    }

                    function ue(e, l, i) {
                        var a = t;
                        return l in e ? Object[a(554) + a(495)](e, l, {
                            value: i,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[l] = i, e
                    }

                    function ge(e, l) {
                        var i = t;
                        if (!(e instanceof l)) throw new TypeError(i(739) + i(745) + i(642) + i(933))
                    }

                    function pe(e, l) {
                        for (var i = t, a = 0; a < l[i(507)]; a++) {
                            var s = l[a];
                            s[i(823)] = s[i(823)] || !1, s[i(724) + "le"] = !0, i(855) in s && (s[i(905)] = !0), Object[i(554) + i(495)](e, s[i(499)], s)
                        }
                    }
                    document[t(973) + t(581)](t(1005) + t(644), (function () {
                        var e = t,
                            l = [];
                        document[e(836) + e(570)](e(863) + e(825))[e(898)]((function (t) {
                            var i = e,
                                a = t.getAttribute("data-modal" + i(755)),
                                s = document[i(765) + i(908)](a),
                                n = s[i(988) + "te"](i(711) + i(636));
                            s && !s.hasAttribute("aria-hidden") && !s[i(818) + "te"](i(575)) && s[i(688) + "te"]("aria-hidden", i(944));
                            var o = null;
                            oe(a, l) ? o = (o = oe(a, l))[i(903)] : (o = new ne(s, {
                                placement: n || se[i(733)]
                            }), l[i(646)]({
                                id: a,
                                object: o
                            })), t[i(973) + "stener"](i(529), (function () {
                                o[i(965)]()
                            }))
                        }))
                    }));
                    var fe = {
                            defaultTabId: null,
                            activeClasses: t(943) + t(664) + " _BcKqe1Zn6bpdCELP68s __gsjKtD0h3dJmx22C0C EUr5pVh" + t(865) + "ABY _UbWkohhEDUaAHAZ" + t(980) + t(743) + "4TsfG",
                            inactiveClasses: "text-gray-" + t(611) + t(885) + t(600) + t(535) + t(886) + "5XXEFdLYbAVwZL bBg1_YEFygzKJ0o" + t(708) + t(707) + t(991) + t(907) + t(918),
                            onShow: function () {}
                        },
                        ve = function () {
                            var e, l, a, s = t;

                            function n() {
                                var t = i,
                                    e = arguments[t(507)] > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                    l = arguments[t(507)] > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                                ge(this, n), this[t(727)] = e, this[t(619)] = l ? this.getTab(l.defaultTabId) : null, this._options = de(de({}, fe), l), this[t(629)]()
                            }
                            return e = n, l = [{
                                key: s(629),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    this._items[t(507)] && (!this[t(619)] && this[t(790) + t(492)](this[t(727)][0]), this[t(960)](this[t(619)].id, !0), this[t(727)][t(827)]((function (l) {
                                        var i = t;
                                        l[i(824)][i(973) + i(581)](i(529), (function () {
                                            e[i(960)](l.id)
                                        }))
                                    })))
                                }
                            }, {
                                key: s(774) + "ab",
                                value: function () {
                                    return this[s(619)]
                                }
                            }, {
                                key: "_setActive" + s(492),
                                value: function (t) {
                                    this[s(619)] = t
                                }
                            }, {
                                key: "getTab",
                                value: function (t) {
                                    var e = s;
                                    return this[e(727)][e(683)]((function (e) {
                                        return e.id === t
                                    }))[0]
                                }
                            }, {
                                key: s(960),
                                value: function (t) {
                                    var e, l, i = s,
                                        a = this,
                                        n = arguments[i(507)] > 1 && void 0 !== arguments[1] && arguments[1],
                                        o = this.getTab(t);
                                    (o !== this[i(619)] || n) && (this._items[i(827)]((function (t) {
                                        var e, l, s = i;
                                        t !== o && ((e = t[s(824)][s(589)])[s(656)][s(648)](e, re(a[s(686)][s(798) + "ses"][s(698)](" "))), (l = t[s(824)][s(589)])[s(519)][s(648)](l, re(a[s(686)][s(610) + "asses"][s(698)](" "))), t[s(966)][s(589)][s(519)](s(857) + s(814)), t[s(824)][s(688) + "te"](s(775) + s(902), !1))
                                    })), (e = o[i(824)][i(589)])[i(519)].apply(e, re(this[i(686)][i(798) + i(947)][i(698)](" "))), (l = o[i(824)][i(589)])[i(656)][i(648)](l, re(this[i(686)][i(610) + i(564)][i(698)](" "))), o[i(824)].setAttribute(i(775) + i(902), !0), o[i(966)][i(589)][i(656)](i(857) + i(814)), this["_setActive" + i(492)](o), this[i(686)][i(650)]())
                                }
                            }], a = t, l && pe(e.prototype, l), Object[a(554) + a(495)](e, a(574), {
                                writable: !1
                            }), n
                        }();

                    function xe(e) {
                        return function (t) {
                            if (Array.isArray(t)) return me(t)
                        }(e) || function (e) {
                            if (typeof Symbol !== t(936) && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e)
                        }(e) || function (e, l) {
                            var i = t;
                            if (e) {
                                if (typeof e === i(999)) return me(e, l);
                                var a = Object[i(574)][i(694)][i(805)](e)[i(828)](8, -1);
                                return a === i(958) && e[i(520) + "r"] && (a = e[i(520) + "r"].name), a === i(970) || a === i(645) ? Array[i(773)](e) : a === i(608) || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/ [i(784)](a) ? me(e, l) : void 0
                            }
                        }(e) || function () {
                            var e = t;
                            throw new TypeError("Invalid at" + e(864) + e(930) + e(592) + e(598) + e(624) + e(659) + "le, non-array object" + e(740) + "e a [Symbol.iterator" + e(498) + ".")
                        }()
                    }

                    function me(e, l) {
                        var i = t;
                        (null == l || l > e[i(507)]) && (l = e[i(507)]);
                        for (var a = 0, s = new Array(l); a < l; a++) s[a] = e[a];
                        return s
                    }

                    function be(e, l) {
                        var i = t,
                            a = Object.keys(e);
                        if (Object["getOwnProp" + i(793) + "s"]) {
                            var s = Object[i(809) + i(793) + "s"](e);
                            l && (s = s[i(683)]((function (t) {
                                var l = i;
                                return Object[l(809) + "ertyDescri" + l(706)](e, t).enumerable
                            }))), a[i(646)][i(648)](a, s)
                        }
                        return a
                    }

                    function ye(e) {
                        for (var l = t, i = 1; i < arguments[l(507)]; i++) {
                            var a = null != arguments[i] ? arguments[i] : {};
                            i % 2 ? be(Object(a), !0)[l(898)]((function (t) {
                                we(e, t, a[t])
                            })) : Object[l(809) + l(953) + l(514)] ? Object[l(554) + l(796)](e, Object["getOwnProp" + l(953) + l(514)](a)) : be(Object(a)).forEach((function (t) {
                                var i = l;
                                Object[i(554) + i(495)](e, t, Object[i(809) + "ertyDescri" + i(706)](a, t))
                            }))
                        }
                        return e
                    }

                    function we(e, l, i) {
                        var a = t;
                        return l in e ? Object[a(554) + a(495)](e, l, {
                            value: i,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : e[l] = i, e
                    }

                    function Ae(e, l) {
                        if (!(e instanceof l)) throw new TypeError("Cannot call a class " + t(642) + "ion")
                    }

                    function Se(e, l) {
                        for (var i = t, a = 0; a < l[i(507)]; a++) {
                            var s = l[a];
                            s[i(823)] = s[i(823)] || !1, s[i(724) + "le"] = !0, i(855) in s && (s[i(905)] = !0), Object[i(554) + "erty"](e, s[i(499)], s)
                        }
                    }
                    window[t(997)] = ve, document[t(973) + "stener"](t(1005) + t(644), (function () {
                        var e = t;
                        document[e(836) + e(570)](e(503) + e(623))[e(898)]((function (t) {
                            var l = e,
                                i = [],
                                a = null;
                            t[l(836) + l(570)](l(829) + '"]')[l(898)]((function (t) {
                                var e = l,
                                    s = t.getAttribute(e(775) + e(902)) === e(944),
                                    n = {
                                        id: t[e(988) + "te"]("data-tabs-target"),
                                        triggerEl: t,
                                        targetEl: document[e(836) + e(900)](t.getAttribute(e(870) + e(932)))
                                    };
                                i[e(646)](n), s && (a = n.id)
                            })), new ve(i, {
                                defaultTabId: a
                            })
                        }))
                    }));
                    var ke = {
                            placement: "top",
                            triggerType: t(989),
                            onShow: function () {},
                            onHide: function () {}
                        },
                        Le = function () {
                            var e, l, a, s = t;

                            function n() {
                                var t = i,
                                    e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    l = arguments[t(507)] > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                    a = arguments[t(507)] > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                                Ae(this, n), this._targetEl = e, this[t(938)] = l, this[t(686)] = ye(ye({}, ke), a), this[t(772) + t(931)] = this[t(854) + t(566)](), this[t(629)]()
                            }
                            return e = n, l = [{
                                key: s(629),
                                value: function () {
                                    var t = s,
                                        e = this;
                                    if (this[t(938)]) {
                                        var l = this[t(584) + t(546)]();
                                        l.showEvents[t(898)]((function (l) {
                                            var i = t;
                                            e._triggerEl[i(973) + i(581)](l, (function () {
                                                e[i(960)]()
                                            }))
                                        })), l[t(710)].forEach((function (l) {
                                            var i = t;
                                            e[i(938)][i(973) + i(581)](l, (function () {
                                                e[i(830)]()
                                            }))
                                        }))
                                    }
                                }
                            }, {
                                key: "_createPop" + s(566),
                                value: function () {
                                    var t = s;
                                    return Gt(this[t(938)], this[t(679)], {
                                        placement: this[t(686)][t(733)],
                                        modifiers: [{
                                            name: t(890),
                                            options: {
                                                offset: [0, 8]
                                            }
                                        }]
                                    })
                                }
                            }, {
                                key: "_getTrigge" + s(546),
                                value: function () {
                                    var t = s;
                                    switch (this._options[t(737) + "e"]) {
                                        case t(989):
                                            return {
                                                showEvents: ["mouseenter", t(993)], hideEvents: [t(799), t(962)]
                                            };
                                        case t(529):
                                            return {
                                                showEvents: ["click", "focus"], hideEvents: ["focusout", t(962)]
                                            };
                                        default:
                                            return {
                                                showEvents: [t(959), t(993)], hideEvents: [t(799), t(962)]
                                            }
                                    }
                                }
                            }, {
                                key: s(960),
                                value: function () {
                                    var t = s;
                                    this._targetEl[t(589)].remove("Db4Wzva4DM" + t(884), t(720) + t(914)), this[t(679)].classList[t(519)](t(714) + t(704), t(998) + t(859)), this[t(772) + "tance"][t(504)]((function (e) {
                                        var l = t;
                                        return ye(ye({}, e), {}, {
                                            modifiers: [][l(622)](xe(e.modifiers), [{
                                                name: l(797) + l(871),
                                                enabled: !0
                                            }])
                                        })
                                    })), this[t(772) + t(931)][t(925)](), this[t(686)][t(650)]()
                                }
                            }, {
                                key: "hide",
                                value: function () {
                                    var t = s;
                                    this[t(679)][t(589)].remove("wxHMn0uTKBD0WuelEDNr", t(998) + "EilgLw4zEi"), this[t(679)][t(589)][t(519)](t(757) + "epJJiQLY7M", t(720) + "gzHTRX3hLO"), this["_popperIns" + t(931)].setOptions((function (e) {
                                        var l = t;
                                        return ye(ye({}, e), {}, {
                                            modifiers: [][l(622)](xe(e[l(833)]), [{
                                                name: l(797) + l(871),
                                                enabled: !1
                                            }])
                                        })
                                    })), this[t(686)][t(565)]()
                                }
                            }], a = t, l && Se(e[a(574)], l), Object[a(554) + a(495)](e, a(574), {
                                writable: !1
                            }), n
                        }();
                    window[t(752)] = Le, document[t(973) + t(581)](t(1005) + t(644), (function () {
                        var e = t;
                        document[e(836) + e(570)]("[data-tooltip-target]").forEach((function (t) {
                            var l = e,
                                i = document[l(765) + "ById"](t[l(988) + "te"](l(782) + l(873))),
                                a = t[l(988) + "te"]("data-toolt" + l(533)),
                                s = t[l(988) + "te"](l(782) + l(597) + "nt");
                            new Le(i, t, {
                                placement: s || ke[l(733)],
                                triggerType: a || ke[l(737) + "e"]
                            })
                        }))
                    }))
                })()
            },
            848: (t, e, l) => {
                "use strict";
                l(874), l(527);
                var i = l(927),
                    a = l.n(i);

                function s(t, e) {
                    const l = r();
                    return s = function (t, e) {
                        return l[t -= 448]
                    }, s(t, e)
                }
                const n = s;
                ! function (t, e) {
                    const l = s,
                        i = t();
                    for (;;) try {
                        if (630545 == -parseInt(l(497)) / 1 + parseInt(l(474)) / 2 * (-parseInt(l(455)) / 3) + parseInt(l(521)) / 4 + -parseInt(l(506)) / 5 * (parseInt(l(453)) / 6) + -parseInt(l(501)) / 7 + -parseInt(l(476)) / 8 * (-parseInt(l(513)) / 9) + -parseInt(l(518)) / 10 * (-parseInt(l(514)) / 11)) break;
                        i.push(i.shift())
                    } catch (t) {
                        i.push(i.shift())
                    }
                }(r);
                const o = function () {
                    let t = !0;
                    return function (e, l) {
                        const i = t ? function () {
                            const t = s;
                            if (l) {
                                const i = l[t(493)](e, arguments);
                                return l = null, i
                            }
                        } : function () {};
                        return t = !1, i
                    }
                }()(void 0, (function () {
                    const t = s;
                    return o[t(456)]().search("(((.+)+)+)+$")[t(456)]()[t(496) + "r"](o)[t(484)]("(((.+)+)+)+$")
                }));

                function r() {
                    const t = ["dark", "opacityFro", "transparen", "s-serif", "apply", "ById", "gUEQcl63H9", "constructo", "849295hqMhEy", "#1A56DB", "contains", "visitors-c", "5664120luWXIY", "main-chart", "getElement", "new-produc", "dark-mode", "5UXXHhc", "#4B5563", "06 Feb", "14px", "hart", "revious pe", "#FDBA8C", "9VRmbDz", "253sLRABl", "#111827", "light", "documentEl", "784870iyQSnJ", "stener", "#16BDCA", "3438244vsWiPP", "#374151", "Referral", "back", "03 Feb", "darken", "traffic-ch", "#9CA3AF", "305px", "Digital", "render", "labels", "ntShade", "ons", "Visitors", "end", "config", "#ffffff", "labelColor", "#9061F9", "#F3F4F6", "07 Feb", "Users", "4729206DGwDjg", "Email", "1179174jnpOVH", "toString", "02 Feb", "#D61F69", "updateOpti", "addEventLi", "01 Feb", "strokeColo", "ensity", "classList", "ts-chart", "Inter, san", "v2fLMH8w3x", "annels-cha", "week-signu", "donut", "ntShadeInt", "ps-chart", "opacityTo", "4jXKEnQ", "gradient", "9588440ZyWaRW", "Revenue (p", "BarColors", "borderColo", "04 Feb", "bar", "#E5E7EB", "Direct", "search", "05 Feb", "area", "50%", "ement"];
                    return (r = function () {
                        return t
                    })()
                }
                o();
                const h = () => {
                    const t = s;
                    let e = {};
                    return e = document["documentEl" + t(488)][t(464)][t(499)](t(467) + t(495)) ? {
                        borderColor: t(522),
                        labelColor: t(528),
                        opacityFrom: 0,
                        opacityTo: .15
                    } : {
                        borderColor: t(450),
                        labelColor: "#6B7280",
                        opacityFrom: .45,
                        opacityTo: 0
                    }, {
                        chart: {
                            height: 420,
                            type: "area",
                            fontFamily: t(466) + t(492),
                            foreColor: e[t(448)],
                            toolbar: {
                                show: !1
                            }
                        },
                        fill: {
                            type: t(475),
                            gradient: {
                                enabled: !0,
                                opacityFrom: e[t(490) + "m"],
                                opacityTo: e[t(473)]
                            }
                        },
                        dataLabels: {
                            enabled: !1
                        },
                        tooltip: {
                            style: {
                                fontSize: t(509),
                                fontFamily: t(466) + t(492)
                            }
                        },
                        grid: {
                            show: !0,
                            borderColor: e[t(479) + "r"],
                            strokeDashArray: 1,
                            padding: {
                                left: 35,
                                bottom: 15
                            }
                        },
                        series: [{
                            name: "Revenue",
                            data: [6356, 6218, 6156, 6526, 6356, 6256, 6056],
                            color: t(498)
                        }, {
                            name: t(477) + t(511) + "riod)",
                            data: [6556, 6725, 6424, 6356, 6586, 6756, 6616],
                            color: "#FDBA8C"
                        }],
                        markers: {
                            size: 5,
                            strokeColors: t(538),
                            hover: {
                                size: void 0,
                                sizeOffset: 3
                            }
                        },
                        xaxis: {
                            categories: [t(461), t(457), t(525), t(480), t(485), t(508), t(451)],
                            labels: {
                                style: {
                                    colors: [e[t(448)]],
                                    fontSize: t(509),
                                    fontWeight: 500
                                }
                            },
                            axisBorder: {
                                color: e[t(479) + "r"]
                            },
                            axisTicks: {
                                color: e[t(479) + "r"]
                            },
                            crosshairs: {
                                show: !0,
                                position: t(524),
                                stroke: {
                                    color: e[t(479) + "r"],
                                    width: 1,
                                    dashArray: 10
                                }
                            }
                        },
                        yaxis: {
                            labels: {
                                style: {
                                    colors: [e[t(448)]],
                                    fontSize: "14px",
                                    fontWeight: 500
                                },
                                formatter: function (t) {
                                    return "$" + t
                                }
                            }
                        },
                        legend: {
                            fontSize: t(509),
                            fontWeight: 500,
                            fontFamily: t(466) + t(492),
                            labels: {
                                colors: [e[t(448)]]
                            },
                            itemMargin: {
                                horizontal: 10
                            }
                        },
                        responsive: [{
                            breakpoint: 1024,
                            options: {
                                xaxis: {
                                    labels: {
                                        show: !1
                                    }
                                }
                            }
                        }]
                    }
                };
                if (document["getElement" + n(494)](n(502))) {
                    const t = new(a())(document[n(503) + n(494)](n(502)), h());
                    t[n(531)](), document[n(460) + "stener"](n(505), (function () {
                        t[n(459) + "ons"](h())
                    }))
                }
                if (document[n(503) + n(494)](n(504) + n(465))) {
                    const t = {
                        colors: [n(498), "#FDBA8C"],
                        series: [{
                            name: n(530),
                            color: n(498),
                            data: [{
                                x: "01 Feb",
                                y: 170
                            }, {
                                x: "02 Feb",
                                y: 180
                            }, {
                                x: "03 Feb",
                                y: 164
                            }, {
                                x: n(480),
                                y: 145
                            }, {
                                x: n(485),
                                y: 174
                            }, {
                                x: "06 Feb",
                                y: 170
                            }, {
                                x: n(451),
                                y: 155
                            }]
                        }, {
                            name: "Goods",
                            color: n(512),
                            data: [{
                                x: "01 Feb",
                                y: 120
                            }, {
                                x: n(457),
                                y: 134
                            }, {
                                x: n(525),
                                y: 167
                            }, {
                                x: n(480),
                                y: 179
                            }, {
                                x: n(485),
                                y: 145
                            }, {
                                x: n(508),
                                y: 182
                            }, {
                                x: n(451),
                                y: 143
                            }]
                        }],
                        chart: {
                            type: n(481),
                            height: "305px",
                            fontFamily: n(466) + n(492),
                            foreColor: n(507),
                            toolbar: {
                                show: !1
                            }
                        },
                        plotOptions: {
                            bar: {
                                columnWidth: n(487),
                                borderRadius: 3
                            }
                        },
                        tooltip: {
                            shared: !0,
                            intersect: !1,
                            style: {
                                fontSize: n(509),
                                fontFamily: n(466) + n(492)
                            }
                        },
                        states: {
                            hover: {
                                filter: {
                                    type: "darken",
                                    value: 1
                                }
                            }
                        },
                        stroke: {
                            show: !0,
                            width: 5,
                            colors: [n(491) + "t"]
                        },
                        grid: {
                            show: !1
                        },
                        dataLabels: {
                            enabled: !1
                        },
                        legend: {
                            show: !1
                        },
                        xaxis: {
                            floating: !0,
                            labels: {
                                show: !1
                            },
                            axisBorder: {
                                show: !1
                            },
                            axisTicks: {
                                show: !1
                            }
                        },
                        yaxis: {
                            show: !1
                        },
                        fill: {
                            opacity: 1
                        }
                    };
                    new(a())(document[n(503) + n(494)](n(504) + "ts-chart"), t)[n(531)]()
                }
                const c = () => {
                    const t = n;
                    let e = {};
                    return e = document[t(517) + t(488)][t(464)].contains(t(467) + t(495)) ? {
                        fillGradientShade: t(489),
                        fillGradientShadeIntensity: .45
                    } : {
                        fillGradientShade: t(516),
                        fillGradientShadeIntensity: 1
                    }, {
                        series: [{
                            name: t(535),
                            data: [500, 590, 600, 520, 610, 550, 600]
                        }],
                        labels: [t(461), t(457), t(525), t(480), "05 Feb", t(508), t(451)],
                        chart: {
                            type: t(486),
                            height: "305px",
                            fontFamily: t(466) + "s-serif",
                            sparkline: {
                                enabled: !0
                            },
                            toolbar: {
                                show: !1
                            }
                        },
                        fill: {
                            type: t(475),
                            gradient: {
                                shade: e["fillGradie" + t(533)],
                                shadeIntensity: e["fillGradie" + t(471) + t(463)]
                            }
                        },
                        plotOptions: {
                            area: {
                                fillTo: t(536)
                            }
                        },
                        theme: {
                            monochrome: {
                                enabled: !0,
                                color: t(498)
                            }
                        },
                        tooltip: {
                            style: {
                                fontSize: t(509),
                                fontFamily: t(466) + t(492)
                            }
                        }
                    }
                };
                if (document[n(503) + n(494)](n(500) + n(510))) {
                    const t = new(a())(document[n(503) + n(494)]("visitors-c" + n(510)), c());
                    t[n(531)](), document[n(460) + n(519)](n(505), (function () {
                        t[n(459) + "ons"](c())
                    }))
                }
                const d = () => {
                    const t = n;
                    let e = {};
                    return e = document["documentEl" + t(488)].classList[t(499)]("v2fLMH8w3xgUEQcl63H9") ? {
                        backgroundBarColors: [t(522), t(522), t(522), t(522), "#374151", t(522), t(522)]
                    } : {
                        backgroundBarColors: ["#E5E7EB", t(482), t(482), t(482), t(482), t(482), t(482)]
                    }, {
                        series: [{
                            name: t(452),
                            data: [34, 45, 53, 38, 55, 32, 36]
                        }],
                        labels: [t(461), t(457), t(525), t(480), t(485), "06 Feb", "07 Feb"],
                        chart: {
                            type: t(481),
                            height: t(529),
                            foreColor: t(507),
                            fontFamily: t(466) + "s-serif",
                            toolbar: {
                                show: !1
                            }
                        },
                        theme: {
                            monochrome: {
                                enabled: !0,
                                color: "#1A56DB"
                            }
                        },
                        plotOptions: {
                            bar: {
                                columnWidth: "25%",
                                borderRadius: 3,
                                colors: {
                                    backgroundBarColors: e["background" + t(478)],
                                    backgroundBarRadius: 3
                                }
                            },
                            dataLabels: {
                                hideOverflowingLabels: !1
                            }
                        },
                        xaxis: {
                            floating: !0,
                            labels: {
                                show: !1
                            },
                            axisBorder: {
                                show: !1
                            },
                            axisTicks: {
                                show: !1
                            }
                        },
                        tooltip: {
                            shared: !0,
                            intersect: !1,
                            style: {
                                fontSize: "14px",
                                fontFamily: t(466) + t(492)
                            }
                        },
                        states: {
                            hover: {
                                filter: {
                                    type: t(526),
                                    value: .8
                                }
                            }
                        },
                        fill: {
                            opacity: 1
                        },
                        yaxis: {
                            show: !1
                        },
                        grid: {
                            show: !1
                        },
                        dataLabels: {
                            enabled: !1
                        },
                        legend: {
                            show: !1
                        }
                    }
                };
                if (document["getElement" + n(494)](n(469) + n(472))) {
                    const t = new(a())(document[n(503) + n(494)](n(469) + n(472)), d());
                    t[n(531)](), document[n(460) + n(519)](n(505), (function () {
                        const e = n;
                        t[e(459) + e(534)](d())
                    }))
                }
                const u = () => {
                    const t = n;
                    let e = {};
                    return e = document[t(517) + "ement"][t(464)][t(499)](t(467) + t(495)) ? {
                        strokeColor: t(515)
                    } : {
                        strokeColor: t(538)
                    }, {
                        series: [30, 24, 18, 12, 9, 7],
                        labels: ["Organic", t(523), t(483), "Social", "Other", t(454)],
                        colors: [t(520), t(512), t(498), t(458), t(449), "#6875F5"],
                        chart: {
                            type: t(470),
                            height: 305,
                            fontFamily: "Inter, san" + t(492),
                            toolbar: {
                                show: !1
                            }
                        },
                        stroke: {
                            colors: [e[t(462) + "r"]]
                        },
                        plotOptions: {
                            pie: {
                                donut: {
                                    size: "5%"
                                }
                            }
                        },
                        states: {
                            hover: {
                                filter: {
                                    type: t(526),
                                    value: .9
                                }
                            }
                        },
                        tooltip: {
                            shared: !0,
                            followCursor: !1,
                            fillSeriesColor: !1,
                            inverseOrder: !0,
                            style: {
                                fontSize: t(509),
                                fontFamily: t(466) + "s-serif"
                            },
                            x: {
                                show: !0,
                                formatter: function (e, {
                                    seriesIndex: l,
                                    w: i
                                }) {
                                    const a = t;
                                    return i[a(537)][a(532)][l]
                                }
                            },
                            y: {
                                formatter: function (t) {
                                    return t + "%"
                                }
                            }
                        },
                        grid: {
                            show: !1
                        },
                        dataLabels: {
                            enabled: !1
                        },
                        legend: {
                            show: !1
                        }
                    }
                };
                if (document[n(503) + n(494)]("traffic-ch" + n(468) + "rt")) {
                    const t = new(a())(document[n(503) + n(494)](n(527) + "annels-chart"), u());
                    t.render(), document["addEventLi" + n(519)](n(505), (function () {
                        t["updateOpti" + n(534)](u())
                    }))
                }
                var g = l(732),
                    p = l.n(g);
                const f = x;
                ! function (t, e) {
                    const l = x,
                        i = t();
                    for (;;) try {
                        if (929761 == -parseInt(l(512)) / 1 + parseInt(l(501)) / 2 + -parseInt(l(515)) / 3 + parseInt(l(513)) / 4 * (-parseInt(l(529)) / 5) + parseInt(l(519)) / 6 + -parseInt(l(506)) / 7 * (-parseInt(l(527)) / 8) + parseInt(l(498)) / 9) break;
                        i.push(i.shift())
                    } catch (t) {
                        i.push(i.shift())
                    }
                }(m);
                const v = function () {
                    let t = !0;
                    return function (e, l) {
                        const i = t ? function () {
                            const t = x;
                            if (l) {
                                const i = l[t(511)](e, arguments);
                                return l = null, i
                            }
                        } : function () {};
                        return t = !1, i
                    }
                }()(void 0, (function () {
                    const t = x;
                    return v[t(510)]()[t(507)]("(((.+)+)+)+$")[t(510)]()[t(499) + "r"](v)[t(507)](t(523) + "+$")
                }));

                function x(t, e) {
                    const l = m();
                    return x = function (t, e) {
                        return l[t -= 497]
                    }, x(t, e)
                }

                function m() {
                    const t = ["16EzYIDs", "gUEQcl63H9", "1078635HwWbgt", "{0} %", "1047726aPAPFq", "constructo", "Change:", "3029836nCbjGd", "/applicati", "addEventLi", "ById", "/images/fl", "4132905qeeAqY", "search", "getElement", "stener", "toString", "apply", "1821950ziQGDE", "12nvvUAP", "image", "937041RUMAZx", "ags/{0}.sv", "classList", "contains", "5394462rRHBSa", "{0}", "visitors", "Visitors:", "(((.+)+)+)", "map", "on-ui/demo", "#1A56DB"];
                    return (m = function () {
                        return t
                    })()
                }
                if (v(), document[f(508) + f(504)](f(524))) {
                    const t = () => {
                        const t = f;
                        let e = {};
                        e = document.documentElement[t(517)][t(518)]("v2fLMH8w3x" + t(528)) ? {
                            colorNoData: "#4B5563"
                        } : {
                            colorNoData: "#D1D5DB"
                        }, new(p())({
                            targetElementID: t(524),
                            colorMin: "#A4CAFE",
                            colorMax: t(526),
                            flagType: t(514),
                            flagURL: "https://flowbite.com" + t(502) + t(525) + t(505) + t(516) + "g",
                            data: {
                                data: {
                                    visitors: {
                                        name: t(522),
                                        format: t(520),
                                        thousandSeparator: ",",
                                        thresholdMax: 5e5,
                                        thresholdMin: 0
                                    },
                                    change: {
                                        name: t(500),
                                        format: t(497)
                                    }
                                },
                                applyData: t(521),
                                values: {
                                    US: {
                                        visitors: 272109,
                                        change: 4.73
                                    },
                                    CA: {
                                        visitors: 160064,
                                        change: 11.09
                                    },
                                    DE: {
                                        visitors: 120048,
                                        change: -2.3
                                    },
                                    GB: {
                                        visitors: 110048,
                                        change: 3.3
                                    },
                                    FR: {
                                        visitors: 100048,
                                        change: 1.3
                                    },
                                    ES: {
                                        visitors: 90048,
                                        change: 1.5
                                    },
                                    JP: {
                                        visitors: 56022,
                                        change: 3.5
                                    },
                                    IT: {
                                        visitors: 48019,
                                        change: 1
                                    },
                                    NL: {
                                        visitors: 40016,
                                        change: 2
                                    },
                                    RU: {
                                        visitors: 30016,
                                        change: 3.4
                                    },
                                    CN: {
                                        visitors: 50016,
                                        change: 6
                                    },
                                    IN: {
                                        visitors: 140016,
                                        change: 2
                                    },
                                    BR: {
                                        visitors: 40016,
                                        change: 5
                                    }
                                }
                            },
                            ...e
                        })
                    };
                    t(), document[f(503) + f(509)]("dark-mode", (function () {
                        const e = f;
                        document["getElement" + e(504)](e(524)).innerHTML = "", t()
                    }))
                }

                function b(t, e) {
                    var l = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var i = Object.getOwnPropertySymbols(t);
                        e && (i = i.filter((function (e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable
                        }))), l.push.apply(l, i)
                    }
                    return l
                }

                function y(t) {
                    for (var e = 1; e < arguments.length; e++) {
                        var l = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? b(Object(l), !0).forEach((function (e) {
                            A(t, e, l[e])
                        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(l)) : b(Object(l)).forEach((function (e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(l, e))
                        }))
                    }
                    return t
                }

                function w(t) {
                    return w = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
                        return typeof t
                    } : function (t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                    }, w(t)
                }

                function A(t, e, l) {
                    return e in t ? Object.defineProperty(t, e, {
                        value: l,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = l, t
                }

                function S() {
                    return S = Object.assign || function (t) {
                        for (var e = 1; e < arguments.length; e++) {
                            var l = arguments[e];
                            for (var i in l) Object.prototype.hasOwnProperty.call(l, i) && (t[i] = l[i])
                        }
                        return t
                    }, S.apply(this, arguments)
                }

                function k(t, e) {
                    if (null == t) return {};
                    var l, i, a = function (t, e) {
                        if (null == t) return {};
                        var l, i, a = {},
                            s = Object.keys(t);
                        for (i = 0; i < s.length; i++) l = s[i], e.indexOf(l) >= 0 || (a[l] = t[l]);
                        return a
                    }(t, e);
                    if (Object.getOwnPropertySymbols) {
                        var s = Object.getOwnPropertySymbols(t);
                        for (i = 0; i < s.length; i++) l = s[i], e.indexOf(l) >= 0 || Object.prototype.propertyIsEnumerable.call(t, l) && (a[l] = t[l])
                    }
                    return a
                }

                function L(t) {
                    if ("undefined" != typeof window && window.navigator) return !!navigator.userAgent.match(t)
                }
                var C = L(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),
                    M = L(/Edge/i),
                    z = L(/firefox/i),
                    E = L(/safari/i) && !L(/chrome/i) && !L(/android/i),
                    P = L(/iP(ad|od|hone)/i),
                    T = L(/chrome/i) && L(/android/i),
                    I = {
                        capture: !1,
                        passive: !1
                    };

                function O(t, e, l) {
                    t.addEventListener(e, l, !C && I)
                }

                function D(t, e, l) {
                    t.removeEventListener(e, l, !C && I)
                }

                function N(t, e) {
                    if (e) {
                        if (">" === e[0] && (e = e.substring(1)), t) try {
                            if (t.matches) return t.matches(e);
                            if (t.msMatchesSelector) return t.msMatchesSelector(e);
                            if (t.webkitMatchesSelector) return t.webkitMatchesSelector(e)
                        } catch (t) {
                            return !1
                        }
                        return !1
                    }
                }

                function X(t) {
                    return t.host && t !== document && t.host.nodeType ? t.host : t.parentNode
                }

                function R(t, e, l, i) {
                    if (t) {
                        l = l || document;
                        do {
                            if (null != e && (">" === e[0] ? t.parentNode === l && N(t, e) : N(t, e)) || i && t === l) return t;
                            if (t === l) break
                        } while (t = X(t))
                    }
                    return null
                }
                var Y, F = /\s+/g;

                function H(t, e, l) {
                    if (t && e)
                        if (t.classList) t.classList[l ? "add" : "remove"](e);
                        else {
                            var i = (" " + t.className + " ").replace(F, " ").replace(" " + e + " ", " ");
                            t.className = (i + (l ? " " + e : "")).replace(F, " ")
                        }
                }

                function B(t, e, l) {
                    var i = t && t.style;
                    if (i) {
                        if (void 0 === l) return document.defaultView && document.defaultView.getComputedStyle ? l = document.defaultView.getComputedStyle(t, "") : t.currentStyle && (l = t.currentStyle), void 0 === e ? l : l[e];
                        e in i || -1 !== e.indexOf("webkit") || (e = "-webkit-" + e), i[e] = l + ("string" == typeof l ? "" : "px")
                    }
                }

                function W(t, e) {
                    var l = "";
                    if ("string" == typeof t) l = t;
                    else
                        do {
                            var i = B(t, "transform");
                            i && "none" !== i && (l = i + " " + l)
                        } while (!e && (t = t.parentNode));
                    var a = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
                    return a && new a(l)
                }

                function G(t, e, l) {
                    if (t) {
                        var i = t.getElementsByTagName(e),
                            a = 0,
                            s = i.length;
                        if (l)
                            for (; a < s; a++) l(i[a], a);
                        return i
                    }
                    return []
                }

                function V() {
                    return document.scrollingElement || document.documentElement
                }

                function _(t, e, l, i, a) {
                    if (t.getBoundingClientRect || t === window) {
                        var s, n, o, r, h, c, d;
                        if (t !== window && t.parentNode && t !== V() ? (n = (s = t.getBoundingClientRect()).top, o = s.left, r = s.bottom, h = s.right, c = s.height, d = s.width) : (n = 0, o = 0, r = window.innerHeight, h = window.innerWidth, c = window.innerHeight, d = window.innerWidth), (e || l) && t !== window && (a = a || t.parentNode, !C))
                            do {
                                if (a && a.getBoundingClientRect && ("none" !== B(a, "transform") || l && "static" !== B(a, "position"))) {
                                    var u = a.getBoundingClientRect();
                                    n -= u.top + parseInt(B(a, "border-top-width")), o -= u.left + parseInt(B(a, "border-left-width")), r = n + s.height, h = o + s.width;
                                    break
                                }
                            } while (a = a.parentNode);
                        if (i && t !== window) {
                            var g = W(a || t),
                                p = g && g.a,
                                f = g && g.d;
                            g && (r = (n /= f) + (c /= f), h = (o /= p) + (d /= p))
                        }
                        return {
                            top: n,
                            left: o,
                            bottom: r,
                            right: h,
                            width: d,
                            height: c
                        }
                    }
                }

                function j(t, e, l) {
                    for (var i = J(t, !0), a = _(t)[e]; i;) {
                        var s = _(i)[l];
                        if (!("top" === l || "left" === l ? a >= s : a <= s)) return i;
                        if (i === V()) break;
                        i = J(i, !1)
                    }
                    return !1
                }

                function U(t, e, l, i) {
                    for (var a = 0, s = 0, n = t.children; s < n.length;) {
                        if ("none" !== n[s].style.display && n[s] !== Qt.ghost && (i || n[s] !== Qt.dragged) && R(n[s], l.draggable, t, !1)) {
                            if (a === e) return n[s];
                            a++
                        }
                        s++
                    }
                    return null
                }

                function Z(t, e) {
                    for (var l = t.lastElementChild; l && (l === Qt.ghost || "none" === B(l, "display") || e && !N(l, e));) l = l.previousElementSibling;
                    return l || null
                }

                function q(t, e) {
                    var l = 0;
                    if (!t || !t.parentNode) return -1;
                    for (; t = t.previousElementSibling;) "TEMPLATE" === t.nodeName.toUpperCase() || t === Qt.clone || e && !N(t, e) || l++;
                    return l
                }

                function K(t) {
                    var e = 0,
                        l = 0,
                        i = V();
                    if (t)
                        do {
                            var a = W(t),
                                s = a.a,
                                n = a.d;
                            e += t.scrollLeft * s, l += t.scrollTop * n
                        } while (t !== i && (t = t.parentNode));
                    return [e, l]
                }

                function J(t, e) {
                    if (!t || !t.getBoundingClientRect) return V();
                    var l = t,
                        i = !1;
                    do {
                        if (l.clientWidth < l.scrollWidth || l.clientHeight < l.scrollHeight) {
                            var a = B(l);
                            if (l.clientWidth < l.scrollWidth && ("auto" == a.overflowX || "scroll" == a.overflowX) || l.clientHeight < l.scrollHeight && ("auto" == a.overflowY || "scroll" == a.overflowY)) {
                                if (!l.getBoundingClientRect || l === document.body) return V();
                                if (i || e) return l;
                                i = !0
                            }
                        }
                    } while (l = l.parentNode);
                    return V()
                }

                function $(t, e) {
                    return Math.round(t.top) === Math.round(e.top) && Math.round(t.left) === Math.round(e.left) && Math.round(t.height) === Math.round(e.height) && Math.round(t.width) === Math.round(e.width)
                }

                function Q(t, e) {
                    return function () {
                        if (!Y) {
                            var l = arguments,
                                i = this;
                            1 === l.length ? t.call(i, l[0]) : t.apply(i, l), Y = setTimeout((function () {
                                Y = void 0
                            }), e)
                        }
                    }
                }

                function tt(t, e, l) {
                    t.scrollLeft += e, t.scrollTop += l
                }

                function et(t) {
                    var e = window.Polymer,
                        l = window.jQuery || window.Zepto;
                    return e && e.dom ? e.dom(t).cloneNode(!0) : l ? l(t).clone(!0)[0] : t.cloneNode(!0)
                }
                var lt = "Sortable" + (new Date).getTime();
                var it = [],
                    at = {
                        initializeByDefault: !0
                    },
                    st = {
                        mount: function (t) {
                            for (var e in at) at.hasOwnProperty(e) && !(e in t) && (t[e] = at[e]);
                            it.forEach((function (e) {
                                if (e.pluginName === t.pluginName) throw "Sortable: Cannot mount plugin ".concat(t.pluginName, " more than once")
                            })), it.push(t)
                        },
                        pluginEvent: function (t, e, l) {
                            var i = this;
                            this.eventCanceled = !1, l.cancel = function () {
                                i.eventCanceled = !0
                            };
                            var a = t + "Global";
                            it.forEach((function (i) {
                                e[i.pluginName] && (e[i.pluginName][a] && e[i.pluginName][a](y({
                                    sortable: e
                                }, l)), e.options[i.pluginName] && e[i.pluginName][t] && e[i.pluginName][t](y({
                                    sortable: e
                                }, l)))
                            }))
                        },
                        initializePlugins: function (t, e, l, i) {
                            for (var a in it.forEach((function (i) {
                                    var a = i.pluginName;
                                    if (t.options[a] || i.initializeByDefault) {
                                        var s = new i(t, e, t.options);
                                        s.sortable = t, s.options = t.options, t[a] = s, S(l, s.defaults)
                                    }
                                })), t.options)
                                if (t.options.hasOwnProperty(a)) {
                                    var s = this.modifyOption(t, a, t.options[a]);
                                    void 0 !== s && (t.options[a] = s)
                                }
                        },
                        getEventProperties: function (t, e) {
                            var l = {};
                            return it.forEach((function (i) {
                                "function" == typeof i.eventProperties && S(l, i.eventProperties.call(e[i.pluginName], t))
                            })), l
                        },
                        modifyOption: function (t, e, l) {
                            var i;
                            return it.forEach((function (a) {
                                t[a.pluginName] && a.optionListeners && "function" == typeof a.optionListeners[e] && (i = a.optionListeners[e].call(t[a.pluginName], l))
                            })), i
                        }
                    };
                var nt = ["evt"],
                    ot = function (t, e) {
                        var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {},
                            i = l.evt,
                            a = k(l, nt);
                        st.pluginEvent.bind(Qt)(t, e, y({
                            dragEl: ht,
                            parentEl: ct,
                            ghostEl: dt,
                            rootEl: ut,
                            nextEl: gt,
                            lastDownEl: pt,
                            cloneEl: ft,
                            cloneHidden: vt,
                            dragStarted: Et,
                            putSortable: At,
                            activeSortable: Qt.active,
                            originalEvent: i,
                            oldIndex: xt,
                            oldDraggableIndex: bt,
                            newIndex: mt,
                            newDraggableIndex: yt,
                            hideGhostForTarget: qt,
                            unhideGhostForTarget: Kt,
                            cloneNowHidden: function () {
                                vt = !0
                            },
                            cloneNowShown: function () {
                                vt = !1
                            },
                            dispatchSortableEvent: function (t) {
                                rt({
                                    sortable: e,
                                    name: t,
                                    originalEvent: i
                                })
                            }
                        }, a))
                    };

                function rt(t) {
                    ! function (t) {
                        var e = t.sortable,
                            l = t.rootEl,
                            i = t.name,
                            a = t.targetEl,
                            s = t.cloneEl,
                            n = t.toEl,
                            o = t.fromEl,
                            r = t.oldIndex,
                            h = t.newIndex,
                            c = t.oldDraggableIndex,
                            d = t.newDraggableIndex,
                            u = t.originalEvent,
                            g = t.putSortable,
                            p = t.extraEventProperties;
                        if (e = e || l && l[lt]) {
                            var f, v = e.options,
                                x = "on" + i.charAt(0).toUpperCase() + i.substr(1);
                            !window.CustomEvent || C || M ? (f = document.createEvent("Event")).initEvent(i, !0, !0) : f = new CustomEvent(i, {
                                bubbles: !0,
                                cancelable: !0
                            }), f.to = n || l, f.from = o || l, f.item = a || l, f.clone = s, f.oldIndex = r, f.newIndex = h, f.oldDraggableIndex = c, f.newDraggableIndex = d, f.originalEvent = u, f.pullMode = g ? g.lastPutMode : void 0;
                            var m = y(y({}, p), st.getEventProperties(i, e));
                            for (var b in m) f[b] = m[b];
                            l && l.dispatchEvent(f), v[x] && v[x].call(e, f)
                        }
                    }(y({
                        putSortable: At,
                        cloneEl: ft,
                        targetEl: ht,
                        rootEl: ut,
                        oldIndex: xt,
                        oldDraggableIndex: bt,
                        newIndex: mt,
                        newDraggableIndex: yt
                    }, t))
                }
                var ht, ct, dt, ut, gt, pt, ft, vt, xt, mt, bt, yt, wt, At, St, kt, Lt, Ct, Mt, zt, Et, Pt, Tt, It, Ot, Dt = !1,
                    Nt = !1,
                    Xt = [],
                    Rt = !1,
                    Yt = !1,
                    Ft = [],
                    Ht = !1,
                    Bt = [],
                    Wt = "undefined" != typeof document,
                    Gt = P,
                    Vt = M || C ? "cssFloat" : "float",
                    _t = Wt && !T && !P && "draggable" in document.createElement("div"),
                    jt = function () {
                        if (Wt) {
                            if (C) return !1;
                            var t = document.createElement("x");
                            return t.style.cssText = "pointer-events:auto", "auto" === t.style.pointerEvents
                        }
                    }(),
                    Ut = function (t, e) {
                        var l = B(t),
                            i = parseInt(l.width) - parseInt(l.paddingLeft) - parseInt(l.paddingRight) - parseInt(l.borderLeftWidth) - parseInt(l.borderRightWidth),
                            a = U(t, 0, e),
                            s = U(t, 1, e),
                            n = a && B(a),
                            o = s && B(s),
                            r = n && parseInt(n.marginLeft) + parseInt(n.marginRight) + _(a).width,
                            h = o && parseInt(o.marginLeft) + parseInt(o.marginRight) + _(s).width;
                        if ("flex" === l.display) return "column" === l.flexDirection || "column-reverse" === l.flexDirection ? "vertical" : "horizontal";
                        if ("grid" === l.display) return l.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
                        if (a && n.float && "none" !== n.float) {
                            var c = "left" === n.float ? "left" : "right";
                            return !s || "both" !== o.clear && o.clear !== c ? "horizontal" : "vertical"
                        }
                        return a && ("block" === n.display || "flex" === n.display || "table" === n.display || "grid" === n.display || r >= i && "none" === l[Vt] || s && "none" === l[Vt] && r + h > i) ? "vertical" : "horizontal"
                    },
                    Zt = function (t) {
                        function e(t, l) {
                            return function (i, a, s, n) {
                                var o = i.options.group.name && a.options.group.name && i.options.group.name === a.options.group.name;
                                if (null == t && (l || o)) return !0;
                                if (null == t || !1 === t) return !1;
                                if (l && "clone" === t) return t;
                                if ("function" == typeof t) return e(t(i, a, s, n), l)(i, a, s, n);
                                var r = (l ? i : a).options.group.name;
                                return !0 === t || "string" == typeof t && t === r || t.join && t.indexOf(r) > -1
                            }
                        }
                        var l = {},
                            i = t.group;
                        i && "object" == w(i) || (i = {
                            name: i
                        }), l.name = i.name, l.checkPull = e(i.pull, !0), l.checkPut = e(i.put), l.revertClone = i.revertClone, t.group = l
                    },
                    qt = function () {
                        !jt && dt && B(dt, "display", "none")
                    },
                    Kt = function () {
                        !jt && dt && B(dt, "display", "")
                    };
                Wt && document.addEventListener("click", (function (t) {
                    if (Nt) return t.preventDefault(), t.stopPropagation && t.stopPropagation(), t.stopImmediatePropagation && t.stopImmediatePropagation(), Nt = !1, !1
                }), !0);
                var Jt = function (t) {
                        if (ht) {
                            t = t.touches ? t.touches[0] : t;
                            var e = (a = t.clientX, s = t.clientY, Xt.some((function (t) {
                                var e = t[lt].options.emptyInsertThreshold;
                                if (e && !Z(t)) {
                                    var l = _(t),
                                        i = a >= l.left - e && a <= l.right + e,
                                        o = s >= l.top - e && s <= l.bottom + e;
                                    return i && o ? n = t : void 0
                                }
                            })), n);
                            if (e) {
                                var l = {};
                                for (var i in t) t.hasOwnProperty(i) && (l[i] = t[i]);
                                l.target = l.rootEl = e, l.preventDefault = void 0, l.stopPropagation = void 0, e[lt]._onDragOver(l)
                            }
                        }
                        var a, s, n
                    },
                    $t = function (t) {
                        ht && ht.parentNode[lt]._isOutsideThisEl(t.target)
                    };

                function Qt(t, e) {
                    if (!t || !t.nodeType || 1 !== t.nodeType) throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));
                    this.el = t, this.options = e = S({}, e), t[lt] = this;
                    var l, i, a = {
                        group: null,
                        sort: !0,
                        disabled: !1,
                        store: null,
                        handle: null,
                        draggable: /^[uo]l$/i.test(t.nodeName) ? ">li" : ">*",
                        swapThreshold: 1,
                        invertSwap: !1,
                        invertedSwapThreshold: null,
                        removeCloneOnHide: !0,
                        direction: function () {
                            return Ut(t, this.options)
                        },
                        ghostClass: "sortable-ghost",
                        chosenClass: "sortable-chosen",
                        dragClass: "sortable-drag",
                        ignore: "a, img",
                        filter: null,
                        preventOnFilter: !0,
                        animation: 0,
                        easing: null,
                        setData: function (t, e) {
                            t.setData("Text", e.textContent)
                        },
                        dropBubble: !1,
                        dragoverBubble: !1,
                        dataIdAttr: "data-id",
                        delay: 0,
                        delayOnTouchOnly: !1,
                        touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
                        forceFallback: !1,
                        fallbackClass: "sortable-fallback",
                        fallbackOnBody: !1,
                        fallbackTolerance: 0,
                        fallbackOffset: {
                            x: 0,
                            y: 0
                        },
                        supportPointer: !1 !== Qt.supportPointer && "PointerEvent" in window && !E,
                        emptyInsertThreshold: 5
                    };
                    for (var s in st.initializePlugins(this, t, a), a) !(s in e) && (e[s] = a[s]);
                    for (var n in Zt(e), this) "_" === n.charAt(0) && "function" == typeof this[n] && (this[n] = this[n].bind(this));
                    this.nativeDraggable = !e.forceFallback && _t, this.nativeDraggable && (this.options.touchStartThreshold = 1), e.supportPointer ? O(t, "pointerdown", this._onTapStart) : (O(t, "mousedown", this._onTapStart), O(t, "touchstart", this._onTapStart)), this.nativeDraggable && (O(t, "dragover", this), O(t, "dragenter", this)), Xt.push(this.el), e.store && e.store.get && this.sort(e.store.get(this) || []), S(this, (i = [], {
                        captureAnimationState: function () {
                            i = [], this.options.animation && [].slice.call(this.el.children).forEach((function (t) {
                                if ("none" !== B(t, "display") && t !== Qt.ghost) {
                                    i.push({
                                        target: t,
                                        rect: _(t)
                                    });
                                    var e = y({}, i[i.length - 1].rect);
                                    if (t.thisAnimationDuration) {
                                        var l = W(t, !0);
                                        l && (e.top -= l.f, e.left -= l.e)
                                    }
                                    t.fromRect = e
                                }
                            }))
                        },
                        addAnimationState: function (t) {
                            i.push(t)
                        },
                        removeAnimationState: function (t) {
                            i.splice(function (t, e) {
                                for (var l in t)
                                    if (t.hasOwnProperty(l))
                                        for (var i in e)
                                            if (e.hasOwnProperty(i) && e[i] === t[l][i]) return Number(l);
                                return -1
                            }(i, {
                                target: t
                            }), 1)
                        },
                        animateAll: function (t) {
                            var e = this;
                            if (!this.options.animation) return clearTimeout(l), void("function" == typeof t && t());
                            var a = !1,
                                s = 0;
                            i.forEach((function (t) {
                                var l = 0,
                                    i = t.target,
                                    n = i.fromRect,
                                    o = _(i),
                                    r = i.prevFromRect,
                                    h = i.prevToRect,
                                    c = t.rect,
                                    d = W(i, !0);
                                d && (o.top -= d.f, o.left -= d.e), i.toRect = o, i.thisAnimationDuration && $(r, o) && !$(n, o) && (c.top - o.top) / (c.left - o.left) == (n.top - o.top) / (n.left - o.left) && (l = function (t, e, l, i) {
                                    return Math.sqrt(Math.pow(e.top - t.top, 2) + Math.pow(e.left - t.left, 2)) / Math.sqrt(Math.pow(e.top - l.top, 2) + Math.pow(e.left - l.left, 2)) * i.animation
                                }(c, r, h, e.options)), $(o, n) || (i.prevFromRect = n, i.prevToRect = o, l || (l = e.options.animation), e.animate(i, c, o, l)), l && (a = !0, s = Math.max(s, l), clearTimeout(i.animationResetTimer), i.animationResetTimer = setTimeout((function () {
                                    i.animationTime = 0, i.prevFromRect = null, i.fromRect = null, i.prevToRect = null, i.thisAnimationDuration = null
                                }), l), i.thisAnimationDuration = l)
                            })), clearTimeout(l), a ? l = setTimeout((function () {
                                "function" == typeof t && t()
                            }), s) : "function" == typeof t && t(), i = []
                        },
                        animate: function (t, e, l, i) {
                            if (i) {
                                B(t, "transition", ""), B(t, "transform", "");
                                var a = W(this.el),
                                    s = a && a.a,
                                    n = a && a.d,
                                    o = (e.left - l.left) / (s || 1),
                                    r = (e.top - l.top) / (n || 1);
                                t.animatingX = !!o, t.animatingY = !!r, B(t, "transform", "translate3d(" + o + "px," + r + "px,0)"), this.forRepaintDummy = function (t) {
                                    return t.offsetWidth
                                }(t), B(t, "transition", "transform " + i + "ms" + (this.options.easing ? " " + this.options.easing : "")), B(t, "transform", "translate3d(0,0,0)"), "number" == typeof t.animated && clearTimeout(t.animated), t.animated = setTimeout((function () {
                                    B(t, "transition", ""), B(t, "transform", ""), t.animated = !1, t.animatingX = !1, t.animatingY = !1
                                }), i)
                            }
                        }
                    }))
                }

                function te(t, e, l, i, a, s, n, o) {
                    var r, h, c = t[lt],
                        d = c.options.onMove;
                    return !window.CustomEvent || C || M ? (r = document.createEvent("Event")).initEvent("move", !0, !0) : r = new CustomEvent("move", {
                        bubbles: !0,
                        cancelable: !0
                    }), r.to = e, r.from = t, r.dragged = l, r.draggedRect = i, r.related = a || e, r.relatedRect = s || _(e), r.willInsertAfter = o, r.originalEvent = n, t.dispatchEvent(r), d && (h = d.call(c, r, n)), h
                }

                function ee(t) {
                    t.draggable = !1
                }

                function le() {
                    Ht = !1
                }

                function ie(t) {
                    for (var e = t.tagName + t.className + t.src + t.href + t.textContent, l = e.length, i = 0; l--;) i += e.charCodeAt(l);
                    return i.toString(36)
                }

                function ae(t) {
                    return setTimeout(t, 0)
                }

                function se(t) {
                    return clearTimeout(t)
                }
                Qt.prototype = {
                    constructor: Qt,
                    _isOutsideThisEl: function (t) {
                        this.el.contains(t) || t === this.el || (Pt = null)
                    },
                    _getDirection: function (t, e) {
                        return "function" == typeof this.options.direction ? this.options.direction.call(this, t, e, ht) : this.options.direction
                    },
                    _onTapStart: function (t) {
                        if (t.cancelable) {
                            var e = this,
                                l = this.el,
                                i = this.options,
                                a = i.preventOnFilter,
                                s = t.type,
                                n = t.touches && t.touches[0] || t.pointerType && "touch" === t.pointerType && t,
                                o = (n || t).target,
                                r = t.target.shadowRoot && (t.path && t.path[0] || t.composedPath && t.composedPath()[0]) || o,
                                h = i.filter;
                            if (function (t) {
                                    Bt.length = 0;
                                    for (var e = t.getElementsByTagName("input"), l = e.length; l--;) {
                                        var i = e[l];
                                        i.checked && Bt.push(i)
                                    }
                                }(l), !ht && !(/mousedown|pointerdown/.test(s) && 0 !== t.button || i.disabled) && !r.isContentEditable && (this.nativeDraggable || !E || !o || "SELECT" !== o.tagName.toUpperCase()) && !((o = R(o, i.draggable, l, !1)) && o.animated || pt === o)) {
                                if (xt = q(o), bt = q(o, i.draggable), "function" == typeof h) {
                                    if (h.call(this, t, o, this)) return rt({
                                        sortable: e,
                                        rootEl: r,
                                        name: "filter",
                                        targetEl: o,
                                        toEl: l,
                                        fromEl: l
                                    }), ot("filter", e, {
                                        evt: t
                                    }), void(a && t.cancelable && t.preventDefault())
                                } else if (h && (h = h.split(",").some((function (i) {
                                        if (i = R(r, i.trim(), l, !1)) return rt({
                                            sortable: e,
                                            rootEl: i,
                                            name: "filter",
                                            targetEl: o,
                                            fromEl: l,
                                            toEl: l
                                        }), ot("filter", e, {
                                            evt: t
                                        }), !0
                                    })))) return void(a && t.cancelable && t.preventDefault());
                                i.handle && !R(r, i.handle, l, !1) || this._prepareDragStart(t, n, o)
                            }
                        }
                    },
                    _prepareDragStart: function (t, e, l) {
                        var i, a = this,
                            s = a.el,
                            n = a.options,
                            o = s.ownerDocument;
                        if (l && !ht && l.parentNode === s) {
                            var r = _(l);
                            if (ut = s, ct = (ht = l).parentNode, gt = ht.nextSibling, pt = l, wt = n.group, Qt.dragged = ht, St = {
                                    target: ht,
                                    clientX: (e || t).clientX,
                                    clientY: (e || t).clientY
                                }, Mt = St.clientX - r.left, zt = St.clientY - r.top, this._lastX = (e || t).clientX, this._lastY = (e || t).clientY, ht.style["will-change"] = "all", i = function () {
                                    ot("delayEnded", a, {
                                        evt: t
                                    }), Qt.eventCanceled ? a._onDrop() : (a._disableDelayedDragEvents(), !z && a.nativeDraggable && (ht.draggable = !0), a._triggerDragStart(t, e), rt({
                                        sortable: a,
                                        name: "choose",
                                        originalEvent: t
                                    }), H(ht, n.chosenClass, !0))
                                }, n.ignore.split(",").forEach((function (t) {
                                    G(ht, t.trim(), ee)
                                })), O(o, "dragover", Jt), O(o, "mousemove", Jt), O(o, "touchmove", Jt), O(o, "mouseup", a._onDrop), O(o, "touchend", a._onDrop), O(o, "touchcancel", a._onDrop), z && this.nativeDraggable && (this.options.touchStartThreshold = 4, ht.draggable = !0), ot("delayStart", this, {
                                    evt: t
                                }), !n.delay || n.delayOnTouchOnly && !e || this.nativeDraggable && (M || C)) i();
                            else {
                                if (Qt.eventCanceled) return void this._onDrop();
                                O(o, "mouseup", a._disableDelayedDrag), O(o, "touchend", a._disableDelayedDrag), O(o, "touchcancel", a._disableDelayedDrag), O(o, "mousemove", a._delayedDragTouchMoveHandler), O(o, "touchmove", a._delayedDragTouchMoveHandler), n.supportPointer && O(o, "pointermove", a._delayedDragTouchMoveHandler), a._dragStartTimer = setTimeout(i, n.delay)
                            }
                        }
                    },
                    _delayedDragTouchMoveHandler: function (t) {
                        var e = t.touches ? t.touches[0] : t;
                        Math.max(Math.abs(e.clientX - this._lastX), Math.abs(e.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1)) && this._disableDelayedDrag()
                    },
                    _disableDelayedDrag: function () {
                        ht && ee(ht), clearTimeout(this._dragStartTimer), this._disableDelayedDragEvents()
                    },
                    _disableDelayedDragEvents: function () {
                        var t = this.el.ownerDocument;
                        D(t, "mouseup", this._disableDelayedDrag), D(t, "touchend", this._disableDelayedDrag), D(t, "touchcancel", this._disableDelayedDrag), D(t, "mousemove", this._delayedDragTouchMoveHandler), D(t, "touchmove", this._delayedDragTouchMoveHandler), D(t, "pointermove", this._delayedDragTouchMoveHandler)
                    },
                    _triggerDragStart: function (t, e) {
                        e = e || "touch" == t.pointerType && t, !this.nativeDraggable || e ? this.options.supportPointer ? O(document, "pointermove", this._onTouchMove) : O(document, e ? "touchmove" : "mousemove", this._onTouchMove) : (O(ht, "dragend", this), O(ut, "dragstart", this._onDragStart));
                        try {
                            document.selection ? ae((function () {
                                document.selection.empty()
                            })) : window.getSelection().removeAllRanges()
                        } catch (t) {}
                    },
                    _dragStarted: function (t, e) {
                        if (Dt = !1, ut && ht) {
                            ot("dragStarted", this, {
                                evt: e
                            }), this.nativeDraggable && O(document, "dragover", $t);
                            var l = this.options;
                            !t && H(ht, l.dragClass, !1), H(ht, l.ghostClass, !0), Qt.active = this, t && this._appendGhost(), rt({
                                sortable: this,
                                name: "start",
                                originalEvent: e
                            })
                        } else this._nulling()
                    },
                    _emulateDragOver: function () {
                        if (kt) {
                            this._lastX = kt.clientX, this._lastY = kt.clientY, qt();
                            for (var t = document.elementFromPoint(kt.clientX, kt.clientY), e = t; t && t.shadowRoot && (t = t.shadowRoot.elementFromPoint(kt.clientX, kt.clientY)) !== e;) e = t;
                            if (ht.parentNode[lt]._isOutsideThisEl(t), e)
                                do {
                                    if (e[lt] && e[lt]._onDragOver({
                                            clientX: kt.clientX,
                                            clientY: kt.clientY,
                                            target: t,
                                            rootEl: e
                                        }) && !this.options.dragoverBubble) break;
                                    t = e
                                } while (e = e.parentNode);
                            Kt()
                        }
                    },
                    _onTouchMove: function (t) {
                        if (St) {
                            var e = this.options,
                                l = e.fallbackTolerance,
                                i = e.fallbackOffset,
                                a = t.touches ? t.touches[0] : t,
                                s = dt && W(dt, !0),
                                n = dt && s && s.a,
                                o = dt && s && s.d,
                                r = Gt && Ot && K(Ot),
                                h = (a.clientX - St.clientX + i.x) / (n || 1) + (r ? r[0] - Ft[0] : 0) / (n || 1),
                                c = (a.clientY - St.clientY + i.y) / (o || 1) + (r ? r[1] - Ft[1] : 0) / (o || 1);
                            if (!Qt.active && !Dt) {
                                if (l && Math.max(Math.abs(a.clientX - this._lastX), Math.abs(a.clientY - this._lastY)) < l) return;
                                this._onDragStart(t, !0)
                            }
                            if (dt) {
                                s ? (s.e += h - (Lt || 0), s.f += c - (Ct || 0)) : s = {
                                    a: 1,
                                    b: 0,
                                    c: 0,
                                    d: 1,
                                    e: h,
                                    f: c
                                };
                                var d = "matrix(".concat(s.a, ",").concat(s.b, ",").concat(s.c, ",").concat(s.d, ",").concat(s.e, ",").concat(s.f, ")");
                                B(dt, "webkitTransform", d), B(dt, "mozTransform", d), B(dt, "msTransform", d), B(dt, "transform", d), Lt = h, Ct = c, kt = a
                            }
                            t.cancelable && t.preventDefault()
                        }
                    },
                    _appendGhost: function () {
                        if (!dt) {
                            var t = this.options.fallbackOnBody ? document.body : ut,
                                e = _(ht, !0, Gt, !0, t),
                                l = this.options;
                            if (Gt) {
                                for (Ot = t;
                                    "static" === B(Ot, "position") && "none" === B(Ot, "transform") && Ot !== document;) Ot = Ot.parentNode;
                                Ot !== document.body && Ot !== document.documentElement ? (Ot === document && (Ot = V()), e.top += Ot.scrollTop, e.left += Ot.scrollLeft) : Ot = V(), Ft = K(Ot)
                            }
                            H(dt = ht.cloneNode(!0), l.ghostClass, !1), H(dt, l.fallbackClass, !0), H(dt, l.dragClass, !0), B(dt, "transition", ""), B(dt, "transform", ""), B(dt, "box-sizing", "border-box"), B(dt, "margin", 0), B(dt, "top", e.top), B(dt, "left", e.left), B(dt, "width", e.width), B(dt, "height", e.height), B(dt, "opacity", "0.8"), B(dt, "position", Gt ? "absolute" : "fixed"), B(dt, "zIndex", "100000"), B(dt, "pointerEvents", "none"), Qt.ghost = dt, t.appendChild(dt), B(dt, "transform-origin", Mt / parseInt(dt.style.width) * 100 + "% " + zt / parseInt(dt.style.height) * 100 + "%")
                        }
                    },
                    _onDragStart: function (t, e) {
                        var l = this,
                            i = t.dataTransfer,
                            a = l.options;
                        ot("dragStart", this, {
                            evt: t
                        }), Qt.eventCanceled ? this._onDrop() : (ot("setupClone", this), Qt.eventCanceled || ((ft = et(ht)).draggable = !1, ft.style["will-change"] = "", this._hideClone(), H(ft, this.options.chosenClass, !1), Qt.clone = ft), l.cloneId = ae((function () {
                            ot("clone", l), Qt.eventCanceled || (l.options.removeCloneOnHide || ut.insertBefore(ft, ht), l._hideClone(), rt({
                                sortable: l,
                                name: "clone"
                            }))
                        })), !e && H(ht, a.dragClass, !0), e ? (Nt = !0, l._loopId = setInterval(l._emulateDragOver, 50)) : (D(document, "mouseup", l._onDrop), D(document, "touchend", l._onDrop), D(document, "touchcancel", l._onDrop), i && (i.effectAllowed = "move", a.setData && a.setData.call(l, i, ht)), O(document, "drop", l), B(ht, "transform", "translateZ(0)")), Dt = !0, l._dragStartId = ae(l._dragStarted.bind(l, e, t)), O(document, "selectstart", l), Et = !0, E && B(document.body, "user-select", "none"))
                    },
                    _onDragOver: function (t) {
                        var e, l, i, a, s = this.el,
                            n = t.target,
                            o = this.options,
                            r = o.group,
                            h = Qt.active,
                            c = wt === r,
                            d = o.sort,
                            u = At || h,
                            g = this,
                            p = !1;
                        if (!Ht) {
                            if (void 0 !== t.preventDefault && t.cancelable && t.preventDefault(), n = R(n, o.draggable, s, !0), P("dragOver"), Qt.eventCanceled) return p;
                            if (ht.contains(t.target) || n.animated && n.animatingX && n.animatingY || g._ignoreWhileAnimating === n) return I(!1);
                            if (Nt = !1, h && !o.disabled && (c ? d || (i = ct !== ut) : At === this || (this.lastPutMode = wt.checkPull(this, h, ht, t)) && r.checkPut(this, h, ht, t))) {
                                if (a = "vertical" === this._getDirection(t, n), e = _(ht), P("dragOverValid"), Qt.eventCanceled) return p;
                                if (i) return ct = ut, T(), this._hideClone(), P("revert"), Qt.eventCanceled || (gt ? ut.insertBefore(ht, gt) : ut.appendChild(ht)), I(!0);
                                var f = Z(s, o.draggable);
                                if (!f || function (t, e, l) {
                                        var i = _(Z(l.el, l.options.draggable));
                                        return e ? t.clientX > i.right + 10 || t.clientX <= i.right && t.clientY > i.bottom && t.clientX >= i.left : t.clientX > i.right && t.clientY > i.top || t.clientX <= i.right && t.clientY > i.bottom + 10
                                    }(t, a, this) && !f.animated) {
                                    if (f === ht) return I(!1);
                                    if (f && s === t.target && (n = f), n && (l = _(n)), !1 !== te(ut, s, ht, e, n, l, t, !!n)) return T(), s.appendChild(ht), ct = s, O(), I(!0)
                                } else if (f && function (t, e, l) {
                                        var i = _(U(l.el, 0, l.options, !0));
                                        return e ? t.clientX < i.left - 10 || t.clientY < i.top && t.clientX < i.right : t.clientY < i.top - 10 || t.clientY < i.bottom && t.clientX < i.left
                                    }(t, a, this)) {
                                    var v = U(s, 0, o, !0);
                                    if (v === ht) return I(!1);
                                    if (l = _(n = v), !1 !== te(ut, s, ht, e, n, l, t, !1)) return T(), s.insertBefore(ht, v), ct = s, O(), I(!0)
                                } else if (n.parentNode === s) {
                                    l = _(n);
                                    var x, m, b, w = ht.parentNode !== s,
                                        A = ! function (t, e, l) {
                                            var i = l ? t.left : t.top,
                                                a = l ? t.right : t.bottom,
                                                s = l ? t.width : t.height,
                                                n = l ? e.left : e.top,
                                                o = l ? e.right : e.bottom,
                                                r = l ? e.width : e.height;
                                            return i === n || a === o || i + s / 2 === n + r / 2
                                        }(ht.animated && ht.toRect || e, n.animated && n.toRect || l, a),
                                        S = a ? "top" : "left",
                                        k = j(n, "top", "top") || j(ht, "top", "top"),
                                        L = k ? k.scrollTop : void 0;
                                    if (Pt !== n && (m = l[S], Rt = !1, Yt = !A && o.invertSwap || w), x = function (t, e, l, i, a, s, n, o) {
                                            var r = i ? t.clientY : t.clientX,
                                                h = i ? l.height : l.width,
                                                c = i ? l.top : l.left,
                                                d = i ? l.bottom : l.right,
                                                u = !1;
                                            if (!n)
                                                if (o && It < h * a) {
                                                    if (!Rt && (1 === Tt ? r > c + h * s / 2 : r < d - h * s / 2) && (Rt = !0), Rt) u = !0;
                                                    else if (1 === Tt ? r < c + It : r > d - It) return -Tt
                                                } else if (r > c + h * (1 - a) / 2 && r < d - h * (1 - a) / 2) return function (t) {
                                                return q(ht) < q(t) ? 1 : -1
                                            }(e);
                                            return (u = u || n) && (r < c + h * s / 2 || r > d - h * s / 2) ? r > c + h / 2 ? 1 : -1 : 0
                                        }(t, n, l, a, A ? 1 : o.swapThreshold, null == o.invertedSwapThreshold ? o.swapThreshold : o.invertedSwapThreshold, Yt, Pt === n), 0 !== x) {
                                        var C = q(ht);
                                        do {
                                            C -= x, b = ct.children[C]
                                        } while (b && ("none" === B(b, "display") || b === dt))
                                    }
                                    if (0 === x || b === n) return I(!1);
                                    Pt = n, Tt = x;
                                    var M = n.nextElementSibling,
                                        z = !1,
                                        E = te(ut, s, ht, e, n, l, t, z = 1 === x);
                                    if (!1 !== E) return 1 !== E && -1 !== E || (z = 1 === E), Ht = !0, setTimeout(le, 30), T(), z && !M ? s.appendChild(ht) : n.parentNode.insertBefore(ht, z ? M : n), k && tt(k, 0, L - k.scrollTop), ct = ht.parentNode, void 0 === m || Yt || (It = Math.abs(m - _(n)[S])), O(), I(!0)
                                }
                                if (s.contains(ht)) return I(!1)
                            }
                            return !1
                        }

                        function P(o, r) {
                            ot(o, g, y({
                                evt: t,
                                isOwner: c,
                                axis: a ? "vertical" : "horizontal",
                                revert: i,
                                dragRect: e,
                                targetRect: l,
                                canSort: d,
                                fromSortable: u,
                                target: n,
                                completed: I,
                                onMove: function (l, i) {
                                    return te(ut, s, ht, e, l, _(l), t, i)
                                },
                                changed: O
                            }, r))
                        }

                        function T() {
                            P("dragOverAnimationCapture"), g.captureAnimationState(), g !== u && u.captureAnimationState()
                        }

                        function I(e) {
                            return P("dragOverCompleted", {
                                insertion: e
                            }), e && (c ? h._hideClone() : h._showClone(g), g !== u && (H(ht, At ? At.options.ghostClass : h.options.ghostClass, !1), H(ht, o.ghostClass, !0)), At !== g && g !== Qt.active ? At = g : g === Qt.active && At && (At = null), u === g && (g._ignoreWhileAnimating = n), g.animateAll((function () {
                                P("dragOverAnimationComplete"), g._ignoreWhileAnimating = null
                            })), g !== u && (u.animateAll(), u._ignoreWhileAnimating = null)), (n === ht && !ht.animated || n === s && !n.animated) && (Pt = null), o.dragoverBubble || t.rootEl || n === document || (ht.parentNode[lt]._isOutsideThisEl(t.target), !e && Jt(t)), !o.dragoverBubble && t.stopPropagation && t.stopPropagation(), p = !0
                        }

                        function O() {
                            mt = q(ht), yt = q(ht, o.draggable), rt({
                                sortable: g,
                                name: "change",
                                toEl: s,
                                newIndex: mt,
                                newDraggableIndex: yt,
                                originalEvent: t
                            })
                        }
                    },
                    _ignoreWhileAnimating: null,
                    _offMoveEvents: function () {
                        D(document, "mousemove", this._onTouchMove), D(document, "touchmove", this._onTouchMove), D(document, "pointermove", this._onTouchMove), D(document, "dragover", Jt), D(document, "mousemove", Jt), D(document, "touchmove", Jt)
                    },
                    _offUpEvents: function () {
                        var t = this.el.ownerDocument;
                        D(t, "mouseup", this._onDrop), D(t, "touchend", this._onDrop), D(t, "pointerup", this._onDrop), D(t, "touchcancel", this._onDrop), D(document, "selectstart", this)
                    },
                    _onDrop: function (t) {
                        var e = this.el,
                            l = this.options;
                        mt = q(ht), yt = q(ht, l.draggable), ot("drop", this, {
                            evt: t
                        }), ct = ht && ht.parentNode, mt = q(ht), yt = q(ht, l.draggable), Qt.eventCanceled || (Dt = !1, Yt = !1, Rt = !1, clearInterval(this._loopId), clearTimeout(this._dragStartTimer), se(this.cloneId), se(this._dragStartId), this.nativeDraggable && (D(document, "drop", this), D(e, "dragstart", this._onDragStart)), this._offMoveEvents(), this._offUpEvents(), E && B(document.body, "user-select", ""), B(ht, "transform", ""), t && (Et && (t.cancelable && t.preventDefault(), !l.dropBubble && t.stopPropagation()), dt && dt.parentNode && dt.parentNode.removeChild(dt), (ut === ct || At && "clone" !== At.lastPutMode) && ft && ft.parentNode && ft.parentNode.removeChild(ft), ht && (this.nativeDraggable && D(ht, "dragend", this), ee(ht), ht.style["will-change"] = "", Et && !Dt && H(ht, At ? At.options.ghostClass : this.options.ghostClass, !1), H(ht, this.options.chosenClass, !1), rt({
                            sortable: this,
                            name: "unchoose",
                            toEl: ct,
                            newIndex: null,
                            newDraggableIndex: null,
                            originalEvent: t
                        }), ut !== ct ? (mt >= 0 && (rt({
                            rootEl: ct,
                            name: "add",
                            toEl: ct,
                            fromEl: ut,
                            originalEvent: t
                        }), rt({
                            sortable: this,
                            name: "remove",
                            toEl: ct,
                            originalEvent: t
                        }), rt({
                            rootEl: ct,
                            name: "sort",
                            toEl: ct,
                            fromEl: ut,
                            originalEvent: t
                        }), rt({
                            sortable: this,
                            name: "sort",
                            toEl: ct,
                            originalEvent: t
                        })), At && At.save()) : mt !== xt && mt >= 0 && (rt({
                            sortable: this,
                            name: "update",
                            toEl: ct,
                            originalEvent: t
                        }), rt({
                            sortable: this,
                            name: "sort",
                            toEl: ct,
                            originalEvent: t
                        })), Qt.active && (null != mt && -1 !== mt || (mt = xt, yt = bt), rt({
                            sortable: this,
                            name: "end",
                            toEl: ct,
                            originalEvent: t
                        }), this.save())))), this._nulling()
                    },
                    _nulling: function () {
                        ot("nulling", this), ut = ht = ct = dt = gt = ft = pt = vt = St = kt = Et = mt = yt = xt = bt = Pt = Tt = At = wt = Qt.dragged = Qt.ghost = Qt.clone = Qt.active = null, Bt.forEach((function (t) {
                            t.checked = !0
                        })), Bt.length = Lt = Ct = 0
                    },
                    handleEvent: function (t) {
                        switch (t.type) {
                            case "drop":
                            case "dragend":
                                this._onDrop(t);
                                break;
                            case "dragenter":
                            case "dragover":
                                ht && (this._onDragOver(t), function (t) {
                                    t.dataTransfer && (t.dataTransfer.dropEffect = "move"), t.cancelable && t.preventDefault()
                                }(t));
                                break;
                            case "selectstart":
                                t.preventDefault()
                        }
                    },
                    toArray: function () {
                        for (var t, e = [], l = this.el.children, i = 0, a = l.length, s = this.options; i < a; i++) R(t = l[i], s.draggable, this.el, !1) && e.push(t.getAttribute(s.dataIdAttr) || ie(t));
                        return e
                    },
                    sort: function (t, e) {
                        var l = {},
                            i = this.el;
                        this.toArray().forEach((function (t, e) {
                            var a = i.children[e];
                            R(a, this.options.draggable, i, !1) && (l[t] = a)
                        }), this), e && this.captureAnimationState(), t.forEach((function (t) {
                            l[t] && (i.removeChild(l[t]), i.appendChild(l[t]))
                        })), e && this.animateAll()
                    },
                    save: function () {
                        var t = this.options.store;
                        t && t.set && t.set(this)
                    },
                    closest: function (t, e) {
                        return R(t, e || this.options.draggable, this.el, !1)
                    },
                    option: function (t, e) {
                        var l = this.options;
                        if (void 0 === e) return l[t];
                        var i = st.modifyOption(this, t, e);
                        l[t] = void 0 !== i ? i : e, "group" === t && Zt(l)
                    },
                    destroy: function () {
                        ot("destroy", this);
                        var t = this.el;
                        t[lt] = null, D(t, "mousedown", this._onTapStart), D(t, "touchstart", this._onTapStart), D(t, "pointerdown", this._onTapStart), this.nativeDraggable && (D(t, "dragover", this), D(t, "dragenter", this)), Array.prototype.forEach.call(t.querySelectorAll("[draggable]"), (function (t) {
                            t.removeAttribute("draggable")
                        })), this._onDrop(), this._disableDelayedDragEvents(), Xt.splice(Xt.indexOf(this.el), 1), this.el = t = null
                    },
                    _hideClone: function () {
                        if (!vt) {
                            if (ot("hideClone", this), Qt.eventCanceled) return;
                            B(ft, "display", "none"), this.options.removeCloneOnHide && ft.parentNode && ft.parentNode.removeChild(ft), vt = !0
                        }
                    },
                    _showClone: function (t) {
                        if ("clone" === t.lastPutMode) {
                            if (vt) {
                                if (ot("showClone", this), Qt.eventCanceled) return;
                                ht.parentNode != ut || this.options.group.revertClone ? gt ? ut.insertBefore(ft, gt) : ut.appendChild(ft) : ut.insertBefore(ft, ht), this.options.group.revertClone && this.animate(ht, ft), B(ft, "display", ""), vt = !1
                            }
                        } else this._hideClone()
                    }
                }, Wt && O(document, "touchmove", (function (t) {
                    (Qt.active || Dt) && t.cancelable && t.preventDefault()
                })), Qt.utils = {
                    on: O,
                    off: D,
                    css: B,
                    find: G,
                    is: function (t, e) {
                        return !!R(t, e, t, !1)
                    },
                    extend: function (t, e) {
                        if (t && e)
                            for (var l in e) e.hasOwnProperty(l) && (t[l] = e[l]);
                        return t
                    },
                    throttle: Q,
                    closest: R,
                    toggleClass: H,
                    clone: et,
                    index: q,
                    nextTick: ae,
                    cancelNextTick: se,
                    detectDirection: Ut,
                    getChild: U
                }, Qt.get = function (t) {
                    return t[lt]
                }, Qt.mount = function () {
                    for (var t = arguments.length, e = new Array(t), l = 0; l < t; l++) e[l] = arguments[l];
                    e[0].constructor === Array && (e = e[0]), e.forEach((function (t) {
                        if (!t.prototype || !t.prototype.constructor) throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));
                        t.utils && (Qt.utils = y(y({}, Qt.utils), t.utils)), st.mount(t)
                    }))
                }, Qt.create = function (t, e) {
                    return new Qt(t, e)
                }, Qt.version = "1.14.0";
                var ne, oe, re, he, ce, de, ue = [],
                    ge = !1;

                function pe() {
                    ue.forEach((function (t) {
                        clearInterval(t.pid)
                    })), ue = []
                }

                function fe() {
                    clearInterval(de)
                }
                var ve = Q((function (t, e, l, i) {
                        if (e.scroll) {
                            var a, s = (t.touches ? t.touches[0] : t).clientX,
                                n = (t.touches ? t.touches[0] : t).clientY,
                                o = e.scrollSensitivity,
                                r = e.scrollSpeed,
                                h = V(),
                                c = !1;
                            oe !== l && (oe = l, pe(), ne = e.scroll, a = e.scrollFn, !0 === ne && (ne = J(l, !0)));
                            var d = 0,
                                u = ne;
                            do {
                                var g = u,
                                    p = _(g),
                                    f = p.top,
                                    v = p.bottom,
                                    x = p.left,
                                    m = p.right,
                                    b = p.width,
                                    y = p.height,
                                    w = void 0,
                                    A = void 0,
                                    S = g.scrollWidth,
                                    k = g.scrollHeight,
                                    L = B(g),
                                    C = g.scrollLeft,
                                    M = g.scrollTop;
                                g === h ? (w = b < S && ("auto" === L.overflowX || "scroll" === L.overflowX || "visible" === L.overflowX), A = y < k && ("auto" === L.overflowY || "scroll" === L.overflowY || "visible" === L.overflowY)) : (w = b < S && ("auto" === L.overflowX || "scroll" === L.overflowX), A = y < k && ("auto" === L.overflowY || "scroll" === L.overflowY));
                                var z = w && (Math.abs(m - s) <= o && C + b < S) - (Math.abs(x - s) <= o && !!C),
                                    E = A && (Math.abs(v - n) <= o && M + y < k) - (Math.abs(f - n) <= o && !!M);
                                if (!ue[d])
                                    for (var P = 0; P <= d; P++) ue[P] || (ue[P] = {});
                                ue[d].vx == z && ue[d].vy == E && ue[d].el === g || (ue[d].el = g, ue[d].vx = z, ue[d].vy = E, clearInterval(ue[d].pid), 0 == z && 0 == E || (c = !0, ue[d].pid = setInterval(function () {
                                    i && 0 === this.layer && Qt.active._onTouchMove(ce);
                                    var e = ue[this.layer].vy ? ue[this.layer].vy * r : 0,
                                        l = ue[this.layer].vx ? ue[this.layer].vx * r : 0;
                                    "function" == typeof a && "continue" !== a.call(Qt.dragged.parentNode[lt], l, e, t, ce, ue[this.layer].el) || tt(ue[this.layer].el, l, e)
                                }.bind({
                                    layer: d
                                }), 24))), d++
                            } while (e.bubbleScroll && u !== h && (u = J(u, !1)));
                            ge = c
                        }
                    }), 30),
                    xe = function (t) {
                        var e = t.originalEvent,
                            l = t.putSortable,
                            i = t.dragEl,
                            a = t.activeSortable,
                            s = t.dispatchSortableEvent,
                            n = t.hideGhostForTarget,
                            o = t.unhideGhostForTarget;
                        if (e) {
                            var r = l || a;
                            n();
                            var h = e.changedTouches && e.changedTouches.length ? e.changedTouches[0] : e,
                                c = document.elementFromPoint(h.clientX, h.clientY);
                            o(), r && !r.el.contains(c) && (s("spill"), this.onSpill({
                                dragEl: i,
                                putSortable: l
                            }))
                        }
                    };

                function me() {}

                function be() {}
                me.prototype = {
                    startIndex: null,
                    dragStart: function (t) {
                        var e = t.oldDraggableIndex;
                        this.startIndex = e
                    },
                    onSpill: function (t) {
                        var e = t.dragEl,
                            l = t.putSortable;
                        this.sortable.captureAnimationState(), l && l.captureAnimationState();
                        var i = U(this.sortable.el, this.startIndex, this.options);
                        i ? this.sortable.el.insertBefore(e, i) : this.sortable.el.appendChild(e), this.sortable.animateAll(), l && l.animateAll()
                    },
                    drop: xe
                }, S(me, {
                    pluginName: "revertOnSpill"
                }), be.prototype = {
                    onSpill: function (t) {
                        var e = t.dragEl,
                            l = t.putSortable || this.sortable;
                        l.captureAnimationState(), e.parentNode && e.parentNode.removeChild(e), l.animateAll()
                    },
                    drop: xe
                }, S(be, {
                    pluginName: "removeOnSpill"
                }), Qt.mount(new function () {
                    function t() {
                        for (var t in this.defaults = {
                                scroll: !0,
                                forceAutoScrollFallback: !1,
                                scrollSensitivity: 30,
                                scrollSpeed: 10,
                                bubbleScroll: !0
                            }, this) "_" === t.charAt(0) && "function" == typeof this[t] && (this[t] = this[t].bind(this))
                    }
                    return t.prototype = {
                        dragStarted: function (t) {
                            var e = t.originalEvent;
                            this.sortable.nativeDraggable ? O(document, "dragover", this._handleAutoScroll) : this.options.supportPointer ? O(document, "pointermove", this._handleFallbackAutoScroll) : e.touches ? O(document, "touchmove", this._handleFallbackAutoScroll) : O(document, "mousemove", this._handleFallbackAutoScroll)
                        },
                        dragOverCompleted: function (t) {
                            var e = t.originalEvent;
                            this.options.dragOverBubble || e.rootEl || this._handleAutoScroll(e)
                        },
                        drop: function () {
                            this.sortable.nativeDraggable ? D(document, "dragover", this._handleAutoScroll) : (D(document, "pointermove", this._handleFallbackAutoScroll), D(document, "touchmove", this._handleFallbackAutoScroll), D(document, "mousemove", this._handleFallbackAutoScroll)), fe(), pe(), clearTimeout(Y), Y = void 0
                        },
                        nulling: function () {
                            ce = oe = ne = ge = de = re = he = null, ue.length = 0
                        },
                        _handleFallbackAutoScroll: function (t) {
                            this._handleAutoScroll(t, !0)
                        },
                        _handleAutoScroll: function (t, e) {
                            var l = this,
                                i = (t.touches ? t.touches[0] : t).clientX,
                                a = (t.touches ? t.touches[0] : t).clientY,
                                s = document.elementFromPoint(i, a);
                            if (ce = t, e || this.options.forceAutoScrollFallback || M || C || E) {
                                ve(t, this.options, s, e);
                                var n = J(s, !0);
                                !ge || de && i === re && a === he || (de && fe(), de = setInterval((function () {
                                    var s = J(document.elementFromPoint(i, a), !0);
                                    s !== n && (n = s, pe()), ve(t, l.options, s, e)
                                }), 10), re = i, he = a)
                            } else {
                                if (!this.options.bubbleScroll || J(s, !0) === V()) return void pe();
                                ve(t, this.options, J(s, !1), !1)
                            }
                        }
                    }, S(t, {
                        pluginName: "scroll",
                        initializeByDefault: !0
                    })
                }), Qt.mount(be, me);
                const ye = Qt,
                    we = JSON.parse('[{"id":1,"title":"To Do","tasks":[{"id":32,"name":"Change charts javascript","description":"In _variables.scss on line 672 you define $table_variants. Each instance of \\"color-level\\" needs to be changed to \\"shift-color\\".","completed":false,"daysLeft":5,"members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]},{"id":23,"name":"Change homepage","description":"Change homepage for Volt Dashboard.","completed":false,"daysLeft":22,"attachment":"/images/kanban/task-3.jpg","members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]},{"id":65,"name":"Change charts javascript","description":"In _variables.scss on line 672 you define $table_variants. Each instance of \\"color-level\\" needs to be changed to \\"shift-color\\".","completed":false,"daysLeft":7,"members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]}]},{"id":2,"title":"In Progress","tasks":[{"id":76,"name":"Redesign tables card","description":"In _variables.scss on line 672 you define $table_variants. Each instance of \\"color-level\\" needs to be changed to \\"shift-color\\".","completed":false,"daysLeft":9,"attachment":"/images/kanban/task-1.jpg","members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]},{"id":49,"name":"Redesign tables card","description":"In _variables.scss on line 672 you define $table_variants. Each instance of \\"color-level\\" needs to be changed to \\"shift-color\\".","completed":false,"daysLeft":3,"members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]}]},{"id":3,"title":"Done","tasks":[{"id":87,"name":"Redesign tables card","description":"In _variables.scss on line 672 you define $table_variants. Each instance of \\"color-level\\" needs to be changed to \\"shift-color\\".","completed":true,"daysLeft":0,"attachment":"/images/kanban/task-2.jpg","members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]},{"id":43,"name":"Redesign tables card","description":"In _variables.scss on line 672 you define $table_variants. Each instance of \\"color-level\\" needs to be changed to \\"shift-color\\".","completed":true,"daysLeft":0,"members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]},{"id":34,"name":"Create Javascript elements","description":"In _variables.scss on line 672 you define $table_variants. Each instance of \\"color-level\\" needs to be changed to \\"shift-color\\".","completed":true,"daysLeft":0,"members":[{"id":1,"name":"Bonnie Green","avatar":"bonnie-green.png"},{"id":2,"name":"Roberta Casas","avatar":"roberta-casas.png"},{"id":3,"name":"Michael Gough","avatar":"michael-gough.png"}]}]}]'),
                    Ae = Le;
                ! function (t, e) {
                    const l = Le,
                        i = t();
                    for (;;) try {
                        if (165435 == parseInt(l(469)) / 1 + -parseInt(l(485)) / 2 + parseInt(l(475)) / 3 * (-parseInt(l(479)) / 4) + -parseInt(l(470)) / 5 * (parseInt(l(471)) / 6) + -parseInt(l(492)) / 7 * (-parseInt(l(467)) / 8) + -parseInt(l(474)) / 9 + parseInt(l(486)) / 10) break;
                        i.push(i.shift())
                    } catch (t) {
                        i.push(i.shift())
                    }
                }(ke);
                const Se = function () {
                    let t = !0;
                    return function (e, l) {
                        const i = t ? function () {
                            const t = Le;
                            if (l) {
                                const i = l[t(482)](e, arguments);
                                return l = null, i
                            }
                        } : function () {};
                        return t = !1, i
                    }
                }()(void 0, (function () {
                    const t = Le;
                    return Se[t(480)]()[t(491)](t(477) + "+$").toString().constructor(Se)[t(491)](t(477) + "+$")
                }));

                function ke() {
                    const t = ["toString", "getElement", "apply", "brz9MalAD9", "keys", "55202oRTKhH", "4536430JSchRB", ", 0.45, 1)", "4S9kjbE86C", "ById", "cubic-bezi", "search", "35imDYPH", "217576HFSizV", "create", "25696TfANvC", "3605BZESox", "30KzUXmG", "forEach", "kanban", "1029744gKdVDb", "912801smVDDh", "Q1E16RPOtc", "(((.+)+)+)", "vJA8rN_mhv", "4sTDwGI"];
                    return (ke = function () {
                        return t
                    })()
                }

                function Le(t, e) {
                    const l = ke();
                    return Le = function (t, e) {
                        return l[t -= 467]
                    }, Le(t, e)
                }

                function Ce(t, e) {
                    var l = Me();
                    return Ce = function (t, e) {
                        return l[t -= 252]
                    }, Ce(t, e)
                }

                function Me() {
                    var t = ["apply", "4zfZlZq", "8985768hTwDXy", "693zbeUon", "30343203GutSHL", "2965600mRUdzz", "1078439ZGyZhF", "toString", "(((.+)+)+)", "40254DTkpua", "search", "1003377gKxmFJ", "constructo", "417952VZNvMb"];
                    return (Me = function () {
                        return t
                    })()
                }
                Se(), Object[Ae(484)](we)[Ae(472)]((t => {
                        const e = Ae,
                            {
                                id: l
                            } = we[t],
                            i = document[e(481) + e(489)]("kanban-list-" + l);
                        i && ye[e(468)](i, {
                            group: e(473),
                            animation: 100,
                            forceFallback: !0,
                            dragClass: e(476) + e(483),
                            ghostClass: e(478) + e(488),
                            easing: e(490) + "er(0, 0.55" + e(487)
                        })
                    })), l(107), Object(function () {
                        var t = new Error("Cannot find module './style.css'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    }()), Object(function () {
                        var t = new Error("Cannot find module 'svgmap/dist/svgMap.min.css'");
                        throw t.code = "MODULE_NOT_FOUND", t
                    }()),
                    function (t, e) {
                        for (var l = Ce, i = t();;) try {
                            if (685902 == -parseInt(l(254)) / 1 + parseInt(l(263)) / 2 * (parseInt(l(259)) / 3) + parseInt(l(261)) / 4 + -parseInt(l(253)) / 5 + -parseInt(l(257)) / 6 * (parseInt(l(265)) / 7) + -parseInt(l(264)) / 8 + parseInt(l(252)) / 9) break;
                            i.push(i.shift())
                        } catch (t) {
                            i.push(i.shift())
                        }
                    }(Me);
                var ze, Ee = (ze = !0, function (t, e) {
                    var l = ze ? function () {
                        var l = Ce;
                        if (e) {
                            var i = e[l(262)](t, arguments);
                            return e = null, i
                        }
                    } : function () {};
                    return ze = !1, l
                })(void 0, (function () {
                    var t = Ce;
                    return Ee[t(255)]()[t(258)]("(((.+)+)+)+$")[t(255)]()[t(260) + "r"](Ee)[t(258)](t(256) + "+$")
                }));
                Ee()
            },
            107: function () {
                function t() {
                    var e = ["le-dark-ic", "187329dPYsjE", "contains", "gUEQcl63H9", "search", "2489598XoXxLC", "remove", "e: dark)", "ById", "(prefers-c", "light", "ent", "apply", "toggle", "constructo", "6VwAcdc", "5674215rwuFWw", "9535280bBFCev", "classList", "dispatchEv", "KB_V9S5IDj", "4675752gHFtBq", "v2fLMH8w3x", "32fvBPHM", "getItem", "1023258qdnYXq", "documentEl", "toString", "(((.+)+)+)", "olor-schem", "1514052KaqGbB", "14uJeJUh", "color-them", "add", "getElement", "click", "theme-togg", "setItem", "le-light-i", "matchMedia", "ement", "_SmdlCf6eU"];
                    return (t = function () {
                        return e
                    })()
                }
                var e = h;
                ! function (t, e) {
                    for (var l = h, i = t();;) try {
                        if (585444 == parseInt(l(470)) / 1 * (parseInt(l(484)) / 2) + parseInt(l(494)) / 3 + parseInt(l(490)) / 4 + -parseInt(l(485)) / 5 + parseInt(l(499)) / 6 * (-parseInt(l(500)) / 7) + parseInt(l(492)) / 8 * (parseInt(l(474)) / 9) + -parseInt(l(486)) / 10) break;
                        i.push(i.shift())
                    } catch (t) {
                        i.push(i.shift())
                    }
                }(t);
                var l, i = (l = !0, function (t, e) {
                        var i = l ? function () {
                            var l = h;
                            if (e) {
                                var i = e[l(481)](t, arguments);
                                return e = null, i
                            }
                        } : function () {};
                        return l = !1, i
                    }),
                    a = i(this, (function () {
                        var t = h;
                        return a[t(496)]()[t(473)](t(497) + "+$").toString()[t(483) + "r"](a).search(t(497) + "+$")
                    }));
                a();
                var s = document["getElement" + e(477)](e(463) + e(469) + "on"),
                    n = document[e(503) + e(477)](e(463) + e(465) + "con");
                "dark" === localStorage[e(493)](e(501) + "e") || !("color-theme" in localStorage) && window[e(466)](e(478) + e(498) + e(476)).matches ? n[e(487)][e(475)](e(468) + e(489)) : s[e(487)].remove(e(468) + e(489));
                var o = document["getElement" + e(477)](e(463) + "le");
                let r = new Event("dark-mode");

                function h(e, l) {
                    var i = t();
                    return h = function (t, e) {
                        return i[t -= 463]
                    }, h(e, l)
                }
                o.addEventListener(e(504), (function () {
                    var t = e;
                    s[t(487)].toggle(t(468) + t(489)), n[t(487)][t(482)]("_SmdlCf6eU" + t(489)), localStorage[t(493)]("color-theme") ? "light" === localStorage[t(493)](t(501) + "e") ? (document[t(495) + t(467)][t(487)].add(t(491) + t(472)), localStorage[t(464)](t(501) + "e", "dark")) : (document[t(495) + t(467)].classList[t(475)](t(491) + "gUEQcl63H9"), localStorage[t(464)]("color-theme", t(479))) : document[t(495) + "ement"][t(487)][t(471)](t(491) + t(472)) ? (document[t(495) + t(467)][t(487)][t(475)]("v2fLMH8w3xgUEQcl63H9"), localStorage[t(464)](t(501) + "e", t(479))) : (document[t(495) + t(467)][t(487)][t(502)](t(491) + "gUEQcl63H9"), localStorage[t(464)]("color-theme", "dark")), document[t(488) + t(480)](r)
                }))
            },
            527: function () {
                const t = e;

                function e(t, l) {
                    const i = r();
                    return e = function (t, e) {
                        return i[t -= 234]
                    }, e(t, l)
                }! function (t, l) {
                    const i = e,
                        a = t();
                    for (;;) try {
                        if (447403 == parseInt(i(254)) / 1 * (-parseInt(i(242)) / 2) + -parseInt(i(308)) / 3 + -parseInt(i(296)) / 4 * (-parseInt(i(283)) / 5) + parseInt(i(277)) / 6 * (-parseInt(i(278)) / 7) + parseInt(i(291)) / 8 + parseInt(i(268)) / 9 + parseInt(i(250)) / 10 * (parseInt(i(261)) / 11)) break;
                        a.push(a.shift())
                    } catch (t) {
                        a.push(a.shift())
                    }
                }(r);
                const l = function () {
                        let t = !0;
                        return function (l, i) {
                            const a = t ? function () {
                                const t = e;
                                if (i) {
                                    const e = i[t(273)](l, arguments);
                                    return i = null, e
                                }
                            } : function () {};
                            return t = !1, a
                        }
                    }(),
                    i = l(this, (function () {
                        const t = e;
                        return i[t(255)]()[t(310)](t(304) + "+$")[t(255)]()[t(285) + "r"](i).search(t(304) + "+$")
                    }));
                i();
                const a = t => {
                        const l = e;
                        return t[l(269) + "te"](l(317) + "ded") === l(264)
                    },
                    s = (t, l, i = !1) => {
                        const a = e,
                            s = document["querySelec" + a(288)](a(247) + "ottom-menu]"),
                            r = document[a(292) + a(240)]("main-content");
                        l ? (t.classList[a(297)](a(276) + a(265)), t[a(300)][a(270)](a(293) + a(301)), r[a(300)][a(297)](a(318) + a(238)), r[a(300)][a(270)]("Syhv8Ouxgy" + a(284)), document[a(249) + a(259)]("#" + t[a(269) + "te"]("id") + (a(266) + a(243)) + "m]")[a(245)]((t => {
                            const e = a;
                            t[e(300)].remove(e(312) + "2DlPtfAEMV"), t.classList.remove(e(319) + e(272))
                        })), document[a(249) + a(259)]("#" + o[a(269) + "te"]("id") + (a(244) + a(244)) + " a")[a(245)]((t => {
                            const e = a;
                            t[e(300)].add("xfuvbLgYEr" + e(263)), t.classList.remove("RZmKBZs1E1" + e(258)), t[e(303)][0][e(300)][e(270)](e(234) + e(298)), t[e(303)][1].classList[e(297)](e(234) + e(298))
                        })), s[a(300)][a(270)]("e8VqoQNK0m" + a(235), a(280) + a(275), "FJRldeiG2gFGZfuKgp88"), s[a(300)][a(297)](a(274) + a(253), a(309) + a(305)), i && n[a(281) + "te"](a(317) + "ded", "true")) : (t[a(300)][a(270)](a(276) + a(265)), t[a(300)][a(297)](a(293) + a(301)), r.classList.remove(a(318) + a(238)), r[a(300)][a(297)](a(290) + a(284)), document["querySelec" + a(259)]("#" + t[a(269) + "te"]("id") + (a(266) + a(243)) + "m]").forEach((t => {
                            const e = a;
                            t[e(300)].add(e(312) + e(279)), t.classList[e(297)](e(319) + "VyCtD9QqGA")
                        })), document[a(249) + a(259)]("#" + o[a(269) + "te"]("id") + (a(244) + a(244)) + " a")[a(245)]((t => {
                            const e = a;
                            t[e(300)][e(270)]("xfuvbLgYEr" + e(263)), t[e(300)][e(297)](e(306) + e(258)), t[e(303)][0].classList[e(297)]("_SmdlCf6eU" + e(298)), t[e(303)][1][e(300)][e(270)](e(234) + "KB_V9S5IDj")
                        })), s[a(300)][a(297)]("e8VqoQNK0m" + a(235), "UYOSZJ1_pv" + a(275), a(314) + a(256)), s.classList[a(270)](a(274) + a(253), a(309) + a(305)), i && n.setAttribute("aria-expan" + a(302), a(313)))
                    },
                    n = document[t(292) + "ById"](t(311) + "bar"),
                    o = document[t(292) + t(240)](t(294));

                function r() {
                    const t = ["2DlPtfAEMV", "UYOSZJ1_pv", "setAttribu", "click", "3326420VrYkEr", "aGMa27BMXo", "constructo", "appendChil", "barMobile", "tor", "barMobileS", "Syhv8Ouxgy", "3308728tEdkzV", "getElement", "eVV36cVCqg", "sidebar", "sidebarBac", "4khowJm", "add", "KB_V9S5IDj", "addEventLi", "classList", "CWHoUvdy_7", "ded", "childNodes", "(((.+)+)+)", "FZeCc8y7Sf", "RZmKBZs1E1", "barMobileH", "2279916CpKBuy", "_wYiJGbRZy", "search", "toggleSide", "F34pkf_DAj", "false", "FJRldeiG2g", "span", "mouseenter", "aria-expan", "zW58fVqdWJ", "ItdDtcpCIG", "_SmdlCf6eU", "bkRFDL3LMV", "barMobileC", "kdrop", "HfumftUEwF", "mouseleave", "ById", "stener", "26fitykw", "toggle-ite", " ul > li >", "forEach", "setItem", "[sidebar-b", "ent", "querySelec", "20dVRhOY", "anded", "getItem", "PFgJGRKqn6", "14624ZJQkPT", "toString", "FGZfuKgp88", "textConten", "eXw8vkE6jY", "torAll", "sidebarExp", "3595559SPNfKI", "createElem", "j_fGTMHhLc", "true", "7DMMvNMCMz", " [sidebar-", "toggle", "3445983FrQUKZ", "getAttribu", "remove", "lose", "VyCtD9QqGA", "apply", "d4louhNic5", "3B5nt1ujCP", "YuvmWSZkTA", "4308078DihxSO", "7OiIDVS"];
                    return (r = function () {
                        return t
                    })()
                }
                document[t(249) + t(259)]("#" + o[t(269) + "te"]("id") + (t(244) + t(244)) + " a")[t(245)]((e => {
                    const l = t;
                    var i = e[l(257) + "t"],
                        a = i.substring(0, 1),
                        s = document[l(262) + l(248)](l(315)),
                        n = document["createElem" + l(248)](l(315));
                    n.classList.add(l(234) + l(298)), s[l(257) + "t"] = i, n[l(257) + "t"] = a, e[l(257) + "t"] = "", e[l(286) + "d"](s), e[l(286) + "d"](n)
                })), null !== localStorage[t(252)](t(260) + t(251)) && (localStorage[t(252)]("sidebarExpanded") === t(264) ? s(o, !0, !1) : s(o, !1, !0)), n[t(299) + t(241)](t(282), (() => {
                    const e = t;
                    localStorage[e(246)](e(260) + "anded", !a(n)), s(o, !a(n), !0)
                })), o[t(299) + t(241)](t(316), (() => {
                    !a(n) && s(o, !0)
                })), o[t(299) + "stener"](t(239), (() => {
                    !a(n) && s(o, !1)
                }));
                const h = (e, l, i, a) => {
                        const s = t;
                        e[s(300)][s(267)](s(234) + s(298)), l[s(300)].toggle(s(234) + s(298)), i.classList[s(267)](s(234) + s(298)), a[s(300)][s(267)]("_SmdlCf6eU" + s(298))
                    },
                    c = document["getElement" + t(240)](t(311) + t(287)),
                    d = document[t(292) + t(240)](t(295) + t(237)),
                    u = document[t(292) + "ById"](t(311) + t(307) + "amburger"),
                    g = document[t(292) + t(240)](t(311) + t(236) + t(271));
                document[t(292) + "ById"](t(311) + t(289) + "earch").addEventListener(t(282), (() => {
                    h(o, d, u, g)
                })), c[t(299) + t(241)]("click", (() => {
                    h(o, d, u, g)
                })), d[t(299) + "stener"](t(282), (() => {
                    h(o, d, u, g)
                }))
            },
            927: (t, e, l) => {
                "use strict";
                var i;

                function a(t, e) {
                    var l = Object.keys(t);
                    if (Object.getOwnPropertySymbols) {
                        var i = Object.getOwnPropertySymbols(t);
                        e && (i = i.filter((function (e) {
                            return Object.getOwnPropertyDescriptor(t, e).enumerable
                        }))), l.push.apply(l, i)
                    }
                    return l
                }

                function s(t) {
                    for (var e = 1; e < arguments.length; e++) {
                        var l = null != arguments[e] ? arguments[e] : {};
                        e % 2 ? a(Object(l), !0).forEach((function (e) {
                            c(t, e, l[e])
                        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(l)) : a(Object(l)).forEach((function (e) {
                            Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(l, e))
                        }))
                    }
                    return t
                }

                function n(t) {
                    return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
                        return typeof t
                    } : function (t) {
                        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                    })(t)
                }

                function o(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
                }

                function r(t, e) {
                    for (var l = 0; l < e.length; l++) {
                        var i = e[l];
                        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i)
                    }
                }

                function h(t, e, l) {
                    return e && r(t.prototype, e), l && r(t, l), t
                }

                function c(t, e, l) {
                    return e in t ? Object.defineProperty(t, e, {
                        value: l,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0
                    }) : t[e] = l, t
                }

                function d(t, e) {
                    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
                    t.prototype = Object.create(e && e.prototype, {
                        constructor: {
                            value: t,
                            writable: !0,
                            configurable: !0
                        }
                    }), e && g(t, e)
                }

                function u(t) {
                    return (u = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {
                        return t.__proto__ || Object.getPrototypeOf(t)
                    })(t)
                }

                function g(t, e) {
                    return (g = Object.setPrototypeOf || function (t, e) {
                        return t.__proto__ = e, t
                    })(t, e)
                }

                function p(t, e) {
                    if (e && ("object" == typeof e || "function" == typeof e)) return e;
                    if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
                    return function (t) {
                        if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                        return t
                    }(t)
                }

                function f(t) {
                    var e = function () {
                        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
                        if (Reflect.construct.sham) return !1;
                        if ("function" == typeof Proxy) return !0;
                        try {
                            return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () {}))), !0
                        } catch (t) {
                            return !1
                        }
                    }();
                    return function () {
                        var l, i = u(t);
                        if (e) {
                            var a = u(this).constructor;
                            l = Reflect.construct(i, arguments, a)
                        } else l = i.apply(this, arguments);
                        return p(this, l)
                    }
                }

                function v(t) {
                    return function (t) {
                        if (Array.isArray(t)) return x(t)
                    }(t) || function (t) {
                        if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t)
                    }(t) || function (t, e) {
                        if (t) {
                            if ("string" == typeof t) return x(t, e);
                            var l = Object.prototype.toString.call(t).slice(8, -1);
                            return "Object" === l && t.constructor && (l = t.constructor.name), "Map" === l || "Set" === l ? Array.from(t) : "Arguments" === l || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(l) ? x(t, e) : void 0
                        }
                    }(t) || function () {
                        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                    }()
                }

                function x(t, e) {
                    (null == e || e > t.length) && (e = t.length);
                    for (var l = 0, i = new Array(e); l < e; l++) i[l] = t[l];
                    return i
                }
                var m = function () {
                        function t() {
                            o(this, t)
                        }
                        return h(t, [{
                            key: "shadeRGBColor",
                            value: function (t, e) {
                                var l = e.split(","),
                                    i = t < 0 ? 0 : 255,
                                    a = t < 0 ? -1 * t : t,
                                    s = parseInt(l[0].slice(4), 10),
                                    n = parseInt(l[1], 10),
                                    o = parseInt(l[2], 10);
                                return "rgb(" + (Math.round((i - s) * a) + s) + "," + (Math.round((i - n) * a) + n) + "," + (Math.round((i - o) * a) + o) + ")"
                            }
                        }, {
                            key: "shadeHexColor",
                            value: function (t, e) {
                                var l = parseInt(e.slice(1), 16),
                                    i = t < 0 ? 0 : 255,
                                    a = t < 0 ? -1 * t : t,
                                    s = l >> 16,
                                    n = l >> 8 & 255,
                                    o = 255 & l;
                                return "#" + (16777216 + 65536 * (Math.round((i - s) * a) + s) + 256 * (Math.round((i - n) * a) + n) + (Math.round((i - o) * a) + o)).toString(16).slice(1)
                            }
                        }, {
                            key: "shadeColor",
                            value: function (e, l) {
                                return t.isColorHex(l) ? this.shadeHexColor(e, l) : this.shadeRGBColor(e, l)
                            }
                        }], [{
                            key: "bind",
                            value: function (t, e) {
                                return function () {
                                    return t.apply(e, arguments)
                                }
                            }
                        }, {
                            key: "isObject",
                            value: function (t) {
                                return t && "object" === n(t) && !Array.isArray(t) && null != t
                            }
                        }, {
                            key: "is",
                            value: function (t, e) {
                                return Object.prototype.toString.call(e) === "[object " + t + "]"
                            }
                        }, {
                            key: "listToArray",
                            value: function (t) {
                                var e, l = [];
                                for (e = 0; e < t.length; e++) l[e] = t[e];
                                return l
                            }
                        }, {
                            key: "extend",
                            value: function (t, e) {
                                var l = this;
                                "function" != typeof Object.assign && (Object.assign = function (t) {
                                    if (null == t) throw new TypeError("Cannot convert undefined or null to object");
                                    for (var e = Object(t), l = 1; l < arguments.length; l++) {
                                        var i = arguments[l];
                                        if (null != i)
                                            for (var a in i) i.hasOwnProperty(a) && (e[a] = i[a])
                                    }
                                    return e
                                });
                                var i = Object.assign({}, t);
                                return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach((function (a) {
                                    l.isObject(e[a]) && a in t ? i[a] = l.extend(t[a], e[a]) : Object.assign(i, c({}, a, e[a]))
                                })), i
                            }
                        }, {
                            key: "extendArray",
                            value: function (e, l) {
                                var i = [];
                                return e.map((function (e) {
                                    i.push(t.extend(l, e))
                                })), i
                            }
                        }, {
                            key: "monthMod",
                            value: function (t) {
                                return t % 12
                            }
                        }, {
                            key: "clone",
                            value: function (e) {
                                if (t.is("Array", e)) {
                                    for (var l = [], i = 0; i < e.length; i++) l[i] = this.clone(e[i]);
                                    return l
                                }
                                if (t.is("Null", e)) return null;
                                if (t.is("Date", e)) return e;
                                if ("object" === n(e)) {
                                    var a = {};
                                    for (var s in e) e.hasOwnProperty(s) && (a[s] = this.clone(e[s]));
                                    return a
                                }
                                return e
                            }
                        }, {
                            key: "log10",
                            value: function (t) {
                                return Math.log(t) / Math.LN10
                            }
                        }, {
                            key: "roundToBase10",
                            value: function (t) {
                                return Math.pow(10, Math.floor(Math.log10(t)))
                            }
                        }, {
                            key: "roundToBase",
                            value: function (t, e) {
                                return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)))
                            }
                        }, {
                            key: "parseNumber",
                            value: function (t) {
                                return null === t ? t : parseFloat(t)
                            }
                        }, {
                            key: "randomId",
                            value: function () {
                                return (Math.random() + 1).toString(36).substring(4)
                            }
                        }, {
                            key: "noExponents",
                            value: function (t) {
                                var e = String(t).split(/[eE]/);
                                if (1 === e.length) return e[0];
                                var l = "",
                                    i = t < 0 ? "-" : "",
                                    a = e[0].replace(".", ""),
                                    s = Number(e[1]) + 1;
                                if (s < 0) {
                                    for (l = i + "0."; s++;) l += "0";
                                    return l + a.replace(/^-/, "")
                                }
                                for (s -= a.length; s--;) l += "0";
                                return a + l
                            }
                        }, {
                            key: "getDimensions",
                            value: function (t) {
                                var e = getComputedStyle(t, null),
                                    l = t.clientHeight,
                                    i = t.clientWidth;
                                return l -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), [i -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight), l]
                            }
                        }, {
                            key: "getBoundingClientRect",
                            value: function (t) {
                                var e = t.getBoundingClientRect();
                                return {
                                    top: e.top,
                                    right: e.right,
                                    bottom: e.bottom,
                                    left: e.left,
                                    width: t.clientWidth,
                                    height: t.clientHeight,
                                    x: e.left,
                                    y: e.top
                                }
                            }
                        }, {
                            key: "getLargestStringFromArr",
                            value: function (t) {
                                return t.reduce((function (t, e) {
                                    return Array.isArray(e) && (e = e.reduce((function (t, e) {
                                        return t.length > e.length ? t : e
                                    }))), t.length > e.length ? t : e
                                }), 0)
                            }
                        }, {
                            key: "hexToRgba",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "#999999",
                                    e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;
                                "#" !== t.substring(0, 1) && (t = "#999999");
                                var l = t.replace("#", "");
                                l = l.match(new RegExp("(.{" + l.length / 3 + "})", "g"));
                                for (var i = 0; i < l.length; i++) l[i] = parseInt(1 === l[i].length ? l[i] + l[i] : l[i], 16);
                                return void 0 !== e && l.push(e), "rgba(" + l.join(",") + ")"
                            }
                        }, {
                            key: "getOpacityFromRGBA",
                            value: function (t) {
                                return parseFloat(t.replace(/^.*,(.+)\)/, "$1"))
                            }
                        }, {
                            key: "rgb2hex",
                            value: function (t) {
                                return (t = t.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i)) && 4 === t.length ? "#" + ("0" + parseInt(t[1], 10).toString(16)).slice(-2) + ("0" + parseInt(t[2], 10).toString(16)).slice(-2) + ("0" + parseInt(t[3], 10).toString(16)).slice(-2) : ""
                            }
                        }, {
                            key: "isColorHex",
                            value: function (t) {
                                return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t)
                            }
                        }, {
                            key: "getPolygonPos",
                            value: function (t, e) {
                                for (var l = [], i = 2 * Math.PI / e, a = 0; a < e; a++) {
                                    var s = {};
                                    s.x = t * Math.sin(a * i), s.y = -t * Math.cos(a * i), l.push(s)
                                }
                                return l
                            }
                        }, {
                            key: "polarToCartesian",
                            value: function (t, e, l, i) {
                                var a = (i - 90) * Math.PI / 180;
                                return {
                                    x: t + l * Math.cos(a),
                                    y: e + l * Math.sin(a)
                                }
                            }
                        }, {
                            key: "escapeString",
                            value: function (t) {
                                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "x",
                                    l = t.toString().slice();
                                return l.replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>{}[\]\\/]/gi, e)
                            }
                        }, {
                            key: "negToZero",
                            value: function (t) {
                                return t < 0 ? 0 : t
                            }
                        }, {
                            key: "moveIndexInArray",
                            value: function (t, e, l) {
                                if (l >= t.length)
                                    for (var i = l - t.length + 1; i--;) t.push(void 0);
                                return t.splice(l, 0, t.splice(e, 1)[0]), t
                            }
                        }, {
                            key: "extractNumber",
                            value: function (t) {
                                return parseFloat(t.replace(/[^\d.]*/g, ""))
                            }
                        }, {
                            key: "findAncestor",
                            value: function (t, e) {
                                for (;
                                    (t = t.parentElement) && !t.classList.contains(e););
                                return t
                            }
                        }, {
                            key: "setELstyles",
                            value: function (t, e) {
                                for (var l in e) e.hasOwnProperty(l) && (t.style.key = e[l])
                            }
                        }, {
                            key: "isNumber",
                            value: function (t) {
                                return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10))
                            }
                        }, {
                            key: "isFloat",
                            value: function (t) {
                                return Number(t) === t && t % 1 != 0
                            }
                        }, {
                            key: "isSafari",
                            value: function () {
                                return /^((?!chrome|android).)*safari/i.test(navigator.userAgent)
                            }
                        }, {
                            key: "isFirefox",
                            value: function () {
                                return navigator.userAgent.toLowerCase().indexOf("firefox") > -1
                            }
                        }, {
                            key: "isIE11",
                            value: function () {
                                if (-1 !== window.navigator.userAgent.indexOf("MSIE") || window.navigator.appVersion.indexOf("Trident/") > -1) return !0
                            }
                        }, {
                            key: "isIE",
                            value: function () {
                                var t = window.navigator.userAgent,
                                    e = t.indexOf("MSIE ");
                                if (e > 0) return parseInt(t.substring(e + 5, t.indexOf(".", e)), 10);
                                if (t.indexOf("Trident/") > 0) {
                                    var l = t.indexOf("rv:");
                                    return parseInt(t.substring(l + 3, t.indexOf(".", l)), 10)
                                }
                                var i = t.indexOf("Edge/");
                                return i > 0 && parseInt(t.substring(i + 5, t.indexOf(".", i)), 10)
                            }
                        }]), t
                    }(),
                    b = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.setEasingFunctions()
                        }
                        return h(t, [{
                            key: "setEasingFunctions",
                            value: function () {
                                var t;
                                if (!this.w.globals.easing) {
                                    switch (this.w.config.chart.animations.easing) {
                                        case "linear":
                                            t = "-";
                                            break;
                                        case "easein":
                                            t = "<";
                                            break;
                                        case "easeout":
                                            t = ">";
                                            break;
                                        case "easeinout":
                                        default:
                                            t = "<>";
                                            break;
                                        case "swing":
                                            t = function (t) {
                                                var e = 1.70158;
                                                return (t -= 1) * t * ((e + 1) * t + e) + 1
                                            };
                                            break;
                                        case "bounce":
                                            t = function (t) {
                                                return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375
                                            };
                                            break;
                                        case "elastic":
                                            t = function (t) {
                                                return t === !!t ? t : Math.pow(2, -10 * t) * Math.sin((t - .075) * (2 * Math.PI) / .3) + 1
                                            }
                                    }
                                    this.w.globals.easing = t
                                }
                            }
                        }, {
                            key: "animateLine",
                            value: function (t, e, l, i) {
                                t.attr(e).animate(i).attr(l)
                            }
                        }, {
                            key: "animateMarker",
                            value: function (t, e, l, i, a, s) {
                                e || (e = 0), t.attr({
                                    r: e,
                                    width: e,
                                    height: e
                                }).animate(i, a).attr({
                                    r: l,
                                    width: l.width,
                                    height: l.height
                                }).afterAll((function () {
                                    s()
                                }))
                            }
                        }, {
                            key: "animateCircle",
                            value: function (t, e, l, i, a) {
                                t.attr({
                                    r: e.r,
                                    cx: e.cx,
                                    cy: e.cy
                                }).animate(i, a).attr({
                                    r: l.r,
                                    cx: l.cx,
                                    cy: l.cy
                                })
                            }
                        }, {
                            key: "animateRect",
                            value: function (t, e, l, i, a) {
                                t.attr(e).animate(i).attr(l).afterAll((function () {
                                    return a()
                                }))
                            }
                        }, {
                            key: "animatePathsGradually",
                            value: function (t) {
                                var e = t.el,
                                    l = t.realIndex,
                                    i = t.j,
                                    a = t.fill,
                                    s = t.pathFrom,
                                    n = t.pathTo,
                                    o = t.speed,
                                    r = t.delay,
                                    h = this.w,
                                    c = 0;
                                h.config.chart.animations.animateGradually.enabled && (c = h.config.chart.animations.animateGradually.delay), h.config.chart.animations.dynamicAnimation.enabled && h.globals.dataChanged && "bar" !== h.config.chart.type && (c = 0), this.morphSVG(e, l, i, "line" !== h.config.chart.type || h.globals.comboCharts ? a : "stroke", s, n, o, r * c)
                            }
                        }, {
                            key: "showDelayedElements",
                            value: function () {
                                this.w.globals.delayedElements.forEach((function (t) {
                                    t.el.classList.remove("apexcharts-element-hidden")
                                }))
                            }
                        }, {
                            key: "animationCompleted",
                            value: function (t) {
                                var e = this.w;
                                e.globals.animationEnded || (e.globals.animationEnded = !0, this.showDelayedElements(), "function" == typeof e.config.chart.events.animationEnd && e.config.chart.events.animationEnd(this.ctx, {
                                    el: t,
                                    w: e
                                }))
                            }
                        }, {
                            key: "morphSVG",
                            value: function (t, e, l, i, a, s, n, o) {
                                var r = this,
                                    h = this.w;
                                a || (a = t.attr("pathFrom")), s || (s = t.attr("pathTo"));
                                var c = function (t) {
                                    return "radar" === h.config.chart.type && (n = 1), "M 0 ".concat(h.globals.gridHeight)
                                };
                                (!a || a.indexOf("undefined") > -1 || a.indexOf("NaN") > -1) && (a = c()), (!s || s.indexOf("undefined") > -1 || s.indexOf("NaN") > -1) && (s = c()), h.globals.shouldAnimate || (n = 1), t.plot(a).animate(1, h.globals.easing, o).plot(a).animate(n, h.globals.easing, o).plot(s).afterAll((function () {
                                    m.isNumber(l) ? l === h.globals.series[h.globals.maxValsInArrayIndex].length - 2 && h.globals.shouldAnimate && r.animationCompleted(t) : "none" !== i && h.globals.shouldAnimate && (!h.globals.comboCharts && e === h.globals.series.length - 1 || h.globals.comboCharts) && r.animationCompleted(t), r.showDelayedElements()
                                }))
                            }
                        }]), t
                    }(),
                    y = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "getDefaultFilter",
                            value: function (t, e) {
                                var l = this.w;
                                t.unfilter(!0), (new window.SVG.Filter).size("120%", "180%", "-5%", "-40%"), "none" !== l.config.states.normal.filter ? this.applyFilter(t, e, l.config.states.normal.filter.type, l.config.states.normal.filter.value) : l.config.chart.dropShadow.enabled && this.dropShadow(t, l.config.chart.dropShadow, e)
                            }
                        }, {
                            key: "addNormalFilter",
                            value: function (t, e) {
                                var l = this.w;
                                l.config.chart.dropShadow.enabled && !t.node.classList.contains("apexcharts-marker") && this.dropShadow(t, l.config.chart.dropShadow, e)
                            }
                        }, {
                            key: "addLightenFilter",
                            value: function (t, e, l) {
                                var i = this,
                                    a = this.w,
                                    s = l.intensity;
                                t.unfilter(!0), new window.SVG.Filter, t.filter((function (t) {
                                    var l = a.config.chart.dropShadow;
                                    (l.enabled ? i.addShadow(t, e, l) : t).componentTransfer({
                                        rgb: {
                                            type: "linear",
                                            slope: 1.5,
                                            intercept: s
                                        }
                                    })
                                })), t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t.filterer.node)
                            }
                        }, {
                            key: "addDarkenFilter",
                            value: function (t, e, l) {
                                var i = this,
                                    a = this.w,
                                    s = l.intensity;
                                t.unfilter(!0), new window.SVG.Filter, t.filter((function (t) {
                                    var l = a.config.chart.dropShadow;
                                    (l.enabled ? i.addShadow(t, e, l) : t).componentTransfer({
                                        rgb: {
                                            type: "linear",
                                            slope: s
                                        }
                                    })
                                })), t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t.filterer.node)
                            }
                        }, {
                            key: "applyFilter",
                            value: function (t, e, l) {
                                var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;
                                switch (l) {
                                    case "none":
                                        this.addNormalFilter(t, e);
                                        break;
                                    case "lighten":
                                        this.addLightenFilter(t, e, {
                                            intensity: i
                                        });
                                        break;
                                    case "darken":
                                        this.addDarkenFilter(t, e, {
                                            intensity: i
                                        })
                                }
                            }
                        }, {
                            key: "addShadow",
                            value: function (t, e, l) {
                                var i = l.blur,
                                    a = l.top,
                                    s = l.left,
                                    n = l.color,
                                    o = l.opacity,
                                    r = t.flood(Array.isArray(n) ? n[e] : n, o).composite(t.sourceAlpha, "in").offset(s, a).gaussianBlur(i).merge(t.source);
                                return t.blend(t.source, r)
                            }
                        }, {
                            key: "dropShadow",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                                    i = e.top,
                                    a = e.left,
                                    s = e.blur,
                                    n = e.color,
                                    o = e.opacity,
                                    r = e.noUserSpaceOnUse,
                                    h = this.w;
                                return t.unfilter(!0), m.isIE() && "radialBar" === h.config.chart.type || (n = Array.isArray(n) ? n[l] : n, t.filter((function (t) {
                                    var e;
                                    e = m.isSafari() || m.isFirefox() || m.isIE() ? t.flood(n, o).composite(t.sourceAlpha, "in").offset(a, i).gaussianBlur(s) : t.flood(n, o).composite(t.sourceAlpha, "in").offset(a, i).gaussianBlur(s).merge(t.source), t.blend(t.source, e)
                                })), r || t.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"), this._scaleFilterSize(t.filterer.node)), t
                            }
                        }, {
                            key: "setSelectionFilter",
                            value: function (t, e, l) {
                                var i = this.w;
                                if (void 0 !== i.globals.selectedDataPoints[e] && i.globals.selectedDataPoints[e].indexOf(l) > -1) {
                                    t.node.setAttribute("selected", !0);
                                    var a = i.config.states.active.filter;
                                    "none" !== a && this.applyFilter(t, e, a.type, a.value)
                                }
                            }
                        }, {
                            key: "_scaleFilterSize",
                            value: function (t) {
                                ! function (e) {
                                    for (var l in e) e.hasOwnProperty(l) && t.setAttribute(l, e[l])
                                }({
                                    width: "200%",
                                    height: "200%",
                                    x: "-50%",
                                    y: "-50%"
                                })
                            }
                        }]), t
                    }(),
                    w = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "drawLine",
                            value: function (t, e, l, i) {
                                var a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "#a8a8a8",
                                    s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,
                                    n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
                                    o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : "butt",
                                    r = this.w,
                                    h = r.globals.dom.Paper.line().attr({
                                        x1: t,
                                        y1: e,
                                        x2: l,
                                        y2: i,
                                        stroke: a,
                                        "stroke-dasharray": s,
                                        "stroke-width": n,
                                        "stroke-linecap": o
                                    });
                                return h
                            }
                        }, {
                            key: "drawRect",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                    e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
                                    l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                                    i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                                    a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
                                    s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "#fefefe",
                                    n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,
                                    o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
                                    r = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,
                                    h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,
                                    c = this.w,
                                    d = c.globals.dom.Paper.rect();
                                return d.attr({
                                    x: t,
                                    y: e,
                                    width: l > 0 ? l : 0,
                                    height: i > 0 ? i : 0,
                                    rx: a,
                                    ry: a,
                                    opacity: n,
                                    "stroke-width": null !== o ? o : 0,
                                    stroke: null !== r ? r : "none",
                                    "stroke-dasharray": h
                                }), d.node.setAttribute("fill", s), d
                            }
                        }, {
                            key: "drawPolygon",
                            value: function (t) {
                                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "#e1e1e1",
                                    l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,
                                    i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "none",
                                    a = this.w,
                                    s = a.globals.dom.Paper.polygon(t).attr({
                                        fill: i,
                                        stroke: e,
                                        "stroke-width": l
                                    });
                                return s
                            }
                        }, {
                            key: "drawCircle",
                            value: function (t) {
                                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                    l = this.w;
                                t < 0 && (t = 0);
                                var i = l.globals.dom.Paper.circle(2 * t);
                                return null !== e && i.attr(e), i
                            }
                        }, {
                            key: "drawPath",
                            value: function (t) {
                                var e = t.d,
                                    l = void 0 === e ? "" : e,
                                    i = t.stroke,
                                    a = void 0 === i ? "#a8a8a8" : i,
                                    s = t.strokeWidth,
                                    n = void 0 === s ? 1 : s,
                                    o = t.fill,
                                    r = t.fillOpacity,
                                    h = void 0 === r ? 1 : r,
                                    c = t.strokeOpacity,
                                    d = void 0 === c ? 1 : c,
                                    u = t.classes,
                                    g = t.strokeLinecap,
                                    p = void 0 === g ? null : g,
                                    f = t.strokeDashArray,
                                    v = void 0 === f ? 0 : f,
                                    x = this.w;
                                return null === p && (p = x.config.stroke.lineCap), (l.indexOf("undefined") > -1 || l.indexOf("NaN") > -1) && (l = "M 0 ".concat(x.globals.gridHeight)), x.globals.dom.Paper.path(l).attr({
                                    fill: o,
                                    "fill-opacity": h,
                                    stroke: a,
                                    "stroke-opacity": d,
                                    "stroke-linecap": p,
                                    "stroke-width": n,
                                    "stroke-dasharray": v,
                                    class: u
                                })
                            }
                        }, {
                            key: "group",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    e = this.w,
                                    l = e.globals.dom.Paper.group();
                                return null !== t && l.attr(t), l
                            }
                        }, {
                            key: "move",
                            value: function (t, e) {
                                return ["M", t, e].join(" ")
                            }
                        }, {
                            key: "line",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                    i = null;
                                return null === l ? i = ["L", t, e].join(" ") : "H" === l ? i = ["H", t].join(" ") : "V" === l && (i = ["V", e].join(" ")), i
                            }
                        }, {
                            key: "curve",
                            value: function (t, e, l, i, a, s) {
                                return ["C", t, e, l, i, a, s].join(" ")
                            }
                        }, {
                            key: "quadraticCurve",
                            value: function (t, e, l, i) {
                                return ["Q", t, e, l, i].join(" ")
                            }
                        }, {
                            key: "arc",
                            value: function (t, e, l, i, a, s, n) {
                                var o = arguments.length > 7 && void 0 !== arguments[7] && arguments[7],
                                    r = "A";
                                o && (r = "a");
                                var h = [r, t, e, l, i, a, s, n].join(" ");
                                return h
                            }
                        }, {
                            key: "renderPaths",
                            value: function (t) {
                                var e, l = t.j,
                                    i = t.realIndex,
                                    a = t.pathFrom,
                                    n = t.pathTo,
                                    o = t.stroke,
                                    r = t.strokeWidth,
                                    h = t.strokeLinecap,
                                    c = t.fill,
                                    d = t.animationDelay,
                                    u = t.initialSpeed,
                                    g = t.dataChangeSpeed,
                                    p = t.className,
                                    f = t.shouldClipToGrid,
                                    v = void 0 === f || f,
                                    x = t.bindEventsOnPaths,
                                    m = void 0 === x || x,
                                    w = t.drawShadow,
                                    A = void 0 === w || w,
                                    S = this.w,
                                    k = new y(this.ctx),
                                    L = new b(this.ctx),
                                    C = this.w.config.chart.animations.enabled,
                                    M = C && this.w.config.chart.animations.dynamicAnimation.enabled,
                                    z = !!(C && !S.globals.resized || M && S.globals.dataChanged && S.globals.shouldAnimate);
                                z ? e = a : (e = n, S.globals.animationEnded = !0);
                                var E, P = S.config.stroke.dashArray;
                                E = Array.isArray(P) ? P[i] : S.config.stroke.dashArray;
                                var T = this.drawPath({
                                    d: e,
                                    stroke: o,
                                    strokeWidth: r,
                                    fill: c,
                                    fillOpacity: 1,
                                    classes: p,
                                    strokeLinecap: h,
                                    strokeDashArray: E
                                });
                                if (T.attr("index", i), v && T.attr({
                                        "clip-path": "url(#gridRectMask".concat(S.globals.cuid, ")")
                                    }), "none" !== S.config.states.normal.filter.type) k.getDefaultFilter(T, i);
                                else if (S.config.chart.dropShadow.enabled && A && (!S.config.chart.dropShadow.enabledOnSeries || S.config.chart.dropShadow.enabledOnSeries && -1 !== S.config.chart.dropShadow.enabledOnSeries.indexOf(i))) {
                                    var I = S.config.chart.dropShadow;
                                    k.dropShadow(T, I, i)
                                }
                                m && (T.node.addEventListener("mouseenter", this.pathMouseEnter.bind(this, T)), T.node.addEventListener("mouseleave", this.pathMouseLeave.bind(this, T)), T.node.addEventListener("mousedown", this.pathMouseDown.bind(this, T))), T.attr({
                                    pathTo: n,
                                    pathFrom: a
                                });
                                var O = {
                                    el: T,
                                    j: l,
                                    realIndex: i,
                                    pathFrom: a,
                                    pathTo: n,
                                    fill: c,
                                    strokeWidth: r,
                                    delay: d
                                };
                                return !C || S.globals.resized || S.globals.dataChanged ? !S.globals.resized && S.globals.dataChanged || L.showDelayedElements() : L.animatePathsGradually(s(s({}, O), {}, {
                                    speed: u
                                })), S.globals.dataChanged && M && z && L.animatePathsGradually(s(s({}, O), {}, {
                                    speed: g
                                })), T
                            }
                        }, {
                            key: "drawPattern",
                            value: function (t, e, l) {
                                var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "#a8a8a8",
                                    a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
                                    s = this.w,
                                    n = s.globals.dom.Paper.pattern(e, l, (function (s) {
                                        "horizontalLines" === t ? s.line(0, 0, l, 0).stroke({
                                            color: i,
                                            width: a + 1
                                        }) : "verticalLines" === t ? s.line(0, 0, 0, e).stroke({
                                            color: i,
                                            width: a + 1
                                        }) : "slantedLines" === t ? s.line(0, 0, e, l).stroke({
                                            color: i,
                                            width: a
                                        }) : "squares" === t ? s.rect(e, l).fill("none").stroke({
                                            color: i,
                                            width: a
                                        }) : "circles" === t && s.circle(e).fill("none").stroke({
                                            color: i,
                                            width: a
                                        })
                                    }));
                                return n
                            }
                        }, {
                            key: "drawGradient",
                            value: function (t, e, l, i, a) {
                                var s, n = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
                                    o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
                                    r = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
                                    h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,
                                    c = this.w;
                                e.length < 9 && 0 === e.indexOf("#") && (e = m.hexToRgba(e, i)), l.length < 9 && 0 === l.indexOf("#") && (l = m.hexToRgba(l, a));
                                var d = 0,
                                    u = 1,
                                    g = 1,
                                    p = null;
                                null !== o && (d = void 0 !== o[0] ? o[0] / 100 : 0, u = void 0 !== o[1] ? o[1] / 100 : 1, g = void 0 !== o[2] ? o[2] / 100 : 1, p = void 0 !== o[3] ? o[3] / 100 : null);
                                var f = !("donut" !== c.config.chart.type && "pie" !== c.config.chart.type && "polarArea" !== c.config.chart.type && "bubble" !== c.config.chart.type);
                                if (s = null === r || 0 === r.length ? c.globals.dom.Paper.gradient(f ? "radial" : "linear", (function (t) {
                                        t.at(d, e, i), t.at(u, l, a), t.at(g, l, a), null !== p && t.at(p, e, i)
                                    })) : c.globals.dom.Paper.gradient(f ? "radial" : "linear", (function (t) {
                                        (Array.isArray(r[h]) ? r[h] : r).forEach((function (e) {
                                            t.at(e.offset / 100, e.color, e.opacity)
                                        }))
                                    })), f) {
                                    var v = c.globals.gridWidth / 2,
                                        x = c.globals.gridHeight / 2;
                                    "bubble" !== c.config.chart.type ? s.attr({
                                        gradientUnits: "userSpaceOnUse",
                                        cx: v,
                                        cy: x,
                                        r: n
                                    }) : s.attr({
                                        cx: .5,
                                        cy: .5,
                                        r: .8,
                                        fx: .2,
                                        fy: .2
                                    })
                                } else "vertical" === t ? s.from(0, 0).to(0, 1) : "diagonal" === t ? s.from(0, 0).to(1, 1) : "horizontal" === t ? s.from(0, 1).to(1, 1) : "diagonal2" === t && s.from(1, 0).to(0, 1);
                                return s
                            }
                        }, {
                            key: "drawText",
                            value: function (t) {
                                var e, l = t.x,
                                    i = t.y,
                                    a = t.text,
                                    s = t.textAnchor,
                                    n = t.fontSize,
                                    o = t.fontFamily,
                                    r = t.fontWeight,
                                    h = t.foreColor,
                                    c = t.opacity,
                                    d = t.cssClass,
                                    u = void 0 === d ? "" : d,
                                    g = t.isPlainText,
                                    p = void 0 === g || g,
                                    f = this.w;
                                return void 0 === a && (a = ""), s || (s = "start"), h && h.length || (h = f.config.chart.foreColor), o = o || f.config.chart.fontFamily, r = r || "regular", (e = Array.isArray(a) ? f.globals.dom.Paper.text((function (t) {
                                    for (var e = 0; e < a.length; e++) 0 === e ? t.tspan(a[e]) : t.tspan(a[e]).newLine()
                                })) : p ? f.globals.dom.Paper.plain(a) : f.globals.dom.Paper.text((function (t) {
                                    return t.tspan(a)
                                }))).attr({
                                    x: l,
                                    y: i,
                                    "text-anchor": s,
                                    "dominant-baseline": "auto",
                                    "font-size": n,
                                    "font-family": o,
                                    "font-weight": r,
                                    fill: h,
                                    class: "apexcharts-text " + u
                                }), e.node.style.fontFamily = o, e.node.style.opacity = c, e
                            }
                        }, {
                            key: "drawMarker",
                            value: function (t, e, l) {
                                t = t || 0;
                                var i = l.pSize || 0,
                                    a = null;
                                if ("square" === l.shape || "rect" === l.shape) {
                                    var s = void 0 === l.pRadius ? i / 2 : l.pRadius;
                                    null !== e && i || (i = 0, s = 0);
                                    var n = 1.2 * i + s,
                                        o = this.drawRect(n, n, n, n, s);
                                    o.attr({
                                        x: t - n / 2,
                                        y: e - n / 2,
                                        cx: t,
                                        cy: e,
                                        class: l.class ? l.class : "",
                                        fill: l.pointFillColor,
                                        "fill-opacity": l.pointFillOpacity ? l.pointFillOpacity : 1,
                                        stroke: l.pointStrokeColor,
                                        "stroke-width": l.pointStrokeWidth ? l.pointStrokeWidth : 0,
                                        "stroke-opacity": l.pointStrokeOpacity ? l.pointStrokeOpacity : 1
                                    }), a = o
                                } else "circle" !== l.shape && l.shape || (m.isNumber(e) || (i = 0, e = 0), a = this.drawCircle(i, {
                                    cx: t,
                                    cy: e,
                                    class: l.class ? l.class : "",
                                    stroke: l.pointStrokeColor,
                                    fill: l.pointFillColor,
                                    "fill-opacity": l.pointFillOpacity ? l.pointFillOpacity : 1,
                                    "stroke-width": l.pointStrokeWidth ? l.pointStrokeWidth : 0,
                                    "stroke-opacity": l.pointStrokeOpacity ? l.pointStrokeOpacity : 1
                                }));
                                return a
                            }
                        }, {
                            key: "pathMouseEnter",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new y(this.ctx),
                                    a = parseInt(t.node.getAttribute("index"), 10),
                                    s = parseInt(t.node.getAttribute("j"), 10);
                                if ("function" == typeof l.config.chart.events.dataPointMouseEnter && l.config.chart.events.dataPointMouseEnter(e, this.ctx, {
                                        seriesIndex: a,
                                        dataPointIndex: s,
                                        w: l
                                    }), this.ctx.events.fireEvent("dataPointMouseEnter", [e, this.ctx, {
                                        seriesIndex: a,
                                        dataPointIndex: s,
                                        w: l
                                    }]), ("none" === l.config.states.active.filter.type || "true" !== t.node.getAttribute("selected")) && "none" !== l.config.states.hover.filter.type && !l.globals.isTouchDevice) {
                                    var n = l.config.states.hover.filter;
                                    i.applyFilter(t, a, n.type, n.value)
                                }
                            }
                        }, {
                            key: "pathMouseLeave",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new y(this.ctx),
                                    a = parseInt(t.node.getAttribute("index"), 10),
                                    s = parseInt(t.node.getAttribute("j"), 10);
                                "function" == typeof l.config.chart.events.dataPointMouseLeave && l.config.chart.events.dataPointMouseLeave(e, this.ctx, {
                                    seriesIndex: a,
                                    dataPointIndex: s,
                                    w: l
                                }), this.ctx.events.fireEvent("dataPointMouseLeave", [e, this.ctx, {
                                    seriesIndex: a,
                                    dataPointIndex: s,
                                    w: l
                                }]), "none" !== l.config.states.active.filter.type && "true" === t.node.getAttribute("selected") || "none" !== l.config.states.hover.filter.type && i.getDefaultFilter(t, a)
                            }
                        }, {
                            key: "pathMouseDown",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new y(this.ctx),
                                    a = parseInt(t.node.getAttribute("index"), 10),
                                    s = parseInt(t.node.getAttribute("j"), 10),
                                    n = "false";
                                if ("true" === t.node.getAttribute("selected")) {
                                    if (t.node.setAttribute("selected", "false"), l.globals.selectedDataPoints[a].indexOf(s) > -1) {
                                        var o = l.globals.selectedDataPoints[a].indexOf(s);
                                        l.globals.selectedDataPoints[a].splice(o, 1)
                                    }
                                } else {
                                    if (!l.config.states.active.allowMultipleDataPointsSelection && l.globals.selectedDataPoints.length > 0) {
                                        l.globals.selectedDataPoints = [];
                                        var r = l.globals.dom.Paper.select(".apexcharts-series path").members,
                                            h = l.globals.dom.Paper.select(".apexcharts-series circle, .apexcharts-series rect").members,
                                            c = function (t) {
                                                Array.prototype.forEach.call(t, (function (t) {
                                                    t.node.setAttribute("selected", "false"), i.getDefaultFilter(t, a)
                                                }))
                                            };
                                        c(r), c(h)
                                    }
                                    t.node.setAttribute("selected", "true"), n = "true", void 0 === l.globals.selectedDataPoints[a] && (l.globals.selectedDataPoints[a] = []), l.globals.selectedDataPoints[a].push(s)
                                }
                                if ("true" === n) {
                                    var d = l.config.states.active.filter;
                                    "none" !== d && i.applyFilter(t, a, d.type, d.value)
                                } else "none" !== l.config.states.active.filter.type && i.getDefaultFilter(t, a);
                                "function" == typeof l.config.chart.events.dataPointSelection && l.config.chart.events.dataPointSelection(e, this.ctx, {
                                    selectedDataPoints: l.globals.selectedDataPoints,
                                    seriesIndex: a,
                                    dataPointIndex: s,
                                    w: l
                                }), e && this.ctx.events.fireEvent("dataPointSelection", [e, this.ctx, {
                                    selectedDataPoints: l.globals.selectedDataPoints,
                                    seriesIndex: a,
                                    dataPointIndex: s,
                                    w: l
                                }])
                            }
                        }, {
                            key: "rotateAroundCenter",
                            value: function (t) {
                                var e = {};
                                return t && "function" == typeof t.getBBox && (e = t.getBBox()), {
                                    x: e.x + e.width / 2,
                                    y: e.y + e.height / 2
                                }
                            }
                        }, {
                            key: "getTextRects",
                            value: function (t, e, l, i) {
                                var a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
                                    s = this.w,
                                    n = this.drawText({
                                        x: -200,
                                        y: -200,
                                        text: t,
                                        textAnchor: "start",
                                        fontSize: e,
                                        fontFamily: l,
                                        foreColor: "#fff",
                                        opacity: 0
                                    });
                                i && n.attr("transform", i), s.globals.dom.Paper.add(n);
                                var o = n.bbox();
                                return a || (o = n.node.getBoundingClientRect()), n.remove(), {
                                    width: o.width,
                                    height: o.height
                                }
                            }
                        }, {
                            key: "placeTextWithEllipsis",
                            value: function (t, e, l) {
                                if ("function" == typeof t.getComputedTextLength && (t.textContent = e, e.length > 0 && t.getComputedTextLength() >= l / 1.1)) {
                                    for (var i = e.length - 3; i > 0; i -= 3)
                                        if (t.getSubStringLength(0, i) <= l / 1.1) return void(t.textContent = e.substring(0, i) + "...");
                                    t.textContent = "."
                                }
                            }
                        }], [{
                            key: "setAttrs",
                            value: function (t, e) {
                                for (var l in e) e.hasOwnProperty(l) && t.setAttribute(l, e[l])
                            }
                        }]), t
                    }(),
                    A = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.annoCtx = e
                        }
                        return h(t, [{
                            key: "setOrientations",
                            value: function (t) {
                                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                    l = this.w;
                                if ("vertical" === t.label.orientation) {
                                    var i = null !== e ? e : 0,
                                        a = l.globals.dom.baseEl.querySelector(".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(i, "']"));
                                    if (null !== a) {
                                        var s = a.getBoundingClientRect();
                                        a.setAttribute("x", parseFloat(a.getAttribute("x")) - s.height + 4), "top" === t.label.position ? a.setAttribute("y", parseFloat(a.getAttribute("y")) + s.width) : a.setAttribute("y", parseFloat(a.getAttribute("y")) - s.width);
                                        var n = this.annoCtx.graphics.rotateAroundCenter(a),
                                            o = n.x,
                                            r = n.y;
                                        a.setAttribute("transform", "rotate(-90 ".concat(o, " ").concat(r, ")"))
                                    }
                                }
                            }
                        }, {
                            key: "addBackgroundToAnno",
                            value: function (t, e) {
                                var l = this.w;
                                if (!t || void 0 === e.label.text || void 0 !== e.label.text && !String(e.label.text).trim()) return null;
                                var i = l.globals.dom.baseEl.querySelector(".apexcharts-grid").getBoundingClientRect(),
                                    a = t.getBoundingClientRect(),
                                    s = e.label.style.padding.left,
                                    n = e.label.style.padding.right,
                                    o = e.label.style.padding.top,
                                    r = e.label.style.padding.bottom;
                                "vertical" === e.label.orientation && (o = e.label.style.padding.left, r = e.label.style.padding.right, s = e.label.style.padding.top, n = e.label.style.padding.bottom);
                                var h = a.left - i.left - s,
                                    c = a.top - i.top - o,
                                    d = this.annoCtx.graphics.drawRect(h - l.globals.barPadForNumericAxis, c, a.width + s + n, a.height + o + r, e.label.borderRadius, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);
                                return e.id && d.node.classList.add(m.escapeString(e.id)), d
                            }
                        }, {
                            key: "annotationsBackground",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = function (l, i, a) {
                                        var s = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(a, "-annotations .apexcharts-").concat(a, "-annotation-label[rel='").concat(i, "']"));
                                        if (s) {
                                            var n = s.parentNode,
                                                o = t.addBackgroundToAnno(s, l);
                                            o && (n.insertBefore(o.node, s), l.label.mouseEnter && o.node.addEventListener("mouseenter", l.label.mouseEnter.bind(t, l)), l.label.mouseLeave && o.node.addEventListener("mouseleave", l.label.mouseLeave.bind(t, l)))
                                        }
                                    };
                                e.config.annotations.xaxis.map((function (t, e) {
                                    l(t, e, "xaxis")
                                })), e.config.annotations.yaxis.map((function (t, e) {
                                    l(t, e, "yaxis")
                                })), e.config.annotations.points.map((function (t, e) {
                                    l(t, e, "point")
                                }))
                            }
                        }, {
                            key: "getStringX",
                            value: function (t) {
                                var e = this.w,
                                    l = t;
                                e.config.xaxis.convertedCatToNumeric && e.globals.categoryLabels.length && (t = e.globals.categoryLabels.indexOf(t) + 1);
                                var i = e.globals.labels.indexOf(t),
                                    a = e.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g text:nth-child(" + (i + 1) + ")");
                                return a && (l = parseFloat(a.getAttribute("x"))), l
                            }
                        }]), t
                    }(),
                    S = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.annoCtx = e, this.invertAxis = this.annoCtx.invertAxis
                        }
                        return h(t, [{
                            key: "addXaxisAnnotation",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = this.invertAxis ? i.globals.minY : i.globals.minX,
                                    s = this.invertAxis ? i.globals.maxY : i.globals.maxX,
                                    n = this.invertAxis ? i.globals.yRange[0] : i.globals.xRange,
                                    o = (t.x - a) / (n / i.globals.gridWidth);
                                this.annoCtx.inversedReversedAxis && (o = (s - t.x) / (n / i.globals.gridWidth));
                                var r = t.label.text;
                                "category" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.invertAxis || i.globals.dataFormatXNumeric || (o = this.annoCtx.helpers.getStringX(t.x));
                                var h = t.strokeDashArray;
                                if (m.isNumber(o)) {
                                    if (null === t.x2 || void 0 === t.x2) {
                                        var c = this.annoCtx.graphics.drawLine(o + t.offsetX, 0 + t.offsetY, o + t.offsetX, i.globals.gridHeight + t.offsetY, t.borderColor, h, t.borderWidth);
                                        e.appendChild(c.node), t.id && c.node.classList.add(t.id)
                                    } else {
                                        var d = (t.x2 - a) / (n / i.globals.gridWidth);
                                        if (this.annoCtx.inversedReversedAxis && (d = (s - t.x2) / (n / i.globals.gridWidth)), "category" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.invertAxis || i.globals.dataFormatXNumeric || (d = this.annoCtx.helpers.getStringX(t.x2)), d < o) {
                                            var u = o;
                                            o = d, d = u
                                        }
                                        var g = this.annoCtx.graphics.drawRect(o + t.offsetX, 0 + t.offsetY, d - o, i.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, h);
                                        g.node.classList.add("apexcharts-annotation-rect"), g.attr("clip-path", "url(#gridRectMask".concat(i.globals.cuid, ")")), e.appendChild(g.node), t.id && g.node.classList.add(t.id)
                                    }
                                    var p = "top" === t.label.position ? 4 : i.globals.gridHeight,
                                        f = this.annoCtx.graphics.getTextRects(r, parseFloat(t.label.style.fontSize)),
                                        v = this.annoCtx.graphics.drawText({
                                            x: o + t.label.offsetX,
                                            y: p + t.label.offsetY - ("vertical" === t.label.orientation ? "top" === t.label.position ? f.width / 2 - 12 : -f.width / 2 : 0),
                                            text: r,
                                            textAnchor: t.label.textAnchor,
                                            fontSize: t.label.style.fontSize,
                                            fontFamily: t.label.style.fontFamily,
                                            fontWeight: t.label.style.fontWeight,
                                            foreColor: t.label.style.color,
                                            cssClass: "apexcharts-xaxis-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : "")
                                        });
                                    v.attr({
                                        rel: l
                                    }), e.appendChild(v.node), this.annoCtx.helpers.setOrientations(t, l)
                                }
                            }
                        }, {
                            key: "drawXAxisAnnotations",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = this.annoCtx.graphics.group({
                                        class: "apexcharts-xaxis-annotations"
                                    });
                                return e.config.annotations.xaxis.map((function (e, i) {
                                    t.addXaxisAnnotation(e, l.node, i)
                                })), l
                            }
                        }]), t
                    }(),
                    k = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "getStackedSeriesTotals",
                            value: function () {
                                var t = this.w,
                                    e = [];
                                if (0 === t.globals.series.length) return e;
                                for (var l = 0; l < t.globals.series[t.globals.maxValsInArrayIndex].length; l++) {
                                    for (var i = 0, a = 0; a < t.globals.series.length; a++) void 0 !== t.globals.series[a][l] && (i += t.globals.series[a][l]);
                                    e.push(i)
                                }
                                return t.globals.stackedSeriesTotals = e, e
                            }
                        }, {
                            key: "getSeriesTotalByIndex",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                                return null === t ? this.w.config.series.reduce((function (t, e) {
                                    return t + e
                                }), 0) : this.w.globals.series[t].reduce((function (t, e) {
                                    return t + e
                                }), 0)
                            }
                        }, {
                            key: "isSeriesNull",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
                                return 0 === (null === t ? this.w.config.series.filter((function (t) {
                                    return null !== t
                                })) : this.w.config.series[t].data.filter((function (t) {
                                    return null !== t
                                }))).length
                            }
                        }, {
                            key: "seriesHaveSameValues",
                            value: function (t) {
                                return this.w.globals.series[t].every((function (t, e, l) {
                                    return t === l[0]
                                }))
                            }
                        }, {
                            key: "getCategoryLabels",
                            value: function (t) {
                                var e = this.w,
                                    l = t.slice();
                                return e.config.xaxis.convertedCatToNumeric && (l = t.map((function (t, l) {
                                    return e.config.xaxis.labels.formatter(t - e.globals.minX + 1)
                                }))), l
                            }
                        }, {
                            key: "getLargestSeries",
                            value: function () {
                                var t = this.w;
                                t.globals.maxValsInArrayIndex = t.globals.series.map((function (t) {
                                    return t.length
                                })).indexOf(Math.max.apply(Math, t.globals.series.map((function (t) {
                                    return t.length
                                }))))
                            }
                        }, {
                            key: "getLargestMarkerSize",
                            value: function () {
                                var t = this.w,
                                    e = 0;
                                return t.globals.markers.size.forEach((function (t) {
                                    e = Math.max(e, t)
                                })), t.globals.markers.largestSize = e, e
                            }
                        }, {
                            key: "getSeriesTotals",
                            value: function () {
                                var t = this.w;
                                t.globals.seriesTotals = t.globals.series.map((function (t, e) {
                                    var l = 0;
                                    if (Array.isArray(t))
                                        for (var i = 0; i < t.length; i++) l += t[i];
                                    else l += t;
                                    return l
                                }))
                            }
                        }, {
                            key: "getSeriesTotalsXRange",
                            value: function (t, e) {
                                var l = this.w;
                                return l.globals.series.map((function (i, a) {
                                    for (var s = 0, n = 0; n < i.length; n++) l.globals.seriesX[a][n] > t && l.globals.seriesX[a][n] < e && (s += i[n]);
                                    return s
                                }))
                            }
                        }, {
                            key: "getPercentSeries",
                            value: function () {
                                var t = this.w;
                                t.globals.seriesPercent = t.globals.series.map((function (e, l) {
                                    var i = [];
                                    if (Array.isArray(e))
                                        for (var a = 0; a < e.length; a++) {
                                            var s = t.globals.stackedSeriesTotals[a],
                                                n = 0;
                                            s && (n = 100 * e[a] / s), i.push(n)
                                        } else {
                                            var o = 100 * e / t.globals.seriesTotals.reduce((function (t, e) {
                                                return t + e
                                            }), 0);
                                            i.push(o)
                                        }
                                    return i
                                }))
                            }
                        }, {
                            key: "getCalculatedRatios",
                            value: function () {
                                var t, e, l, i, a = this.w.globals,
                                    s = [],
                                    n = 0,
                                    o = [],
                                    r = .1,
                                    h = 0;
                                if (a.yRange = [], a.isMultipleYAxis)
                                    for (var c = 0; c < a.minYArr.length; c++) a.yRange.push(Math.abs(a.minYArr[c] - a.maxYArr[c])), o.push(0);
                                else a.yRange.push(Math.abs(a.minY - a.maxY));
                                a.xRange = Math.abs(a.maxX - a.minX), a.zRange = Math.abs(a.maxZ - a.minZ);
                                for (var d = 0; d < a.yRange.length; d++) s.push(a.yRange[d] / a.gridHeight);
                                if (e = a.xRange / a.gridWidth, l = Math.abs(a.initialMaxX - a.initialMinX) / a.gridWidth, t = a.yRange / a.gridWidth, i = a.xRange / a.gridHeight, (n = a.zRange / a.gridHeight * 16) || (n = 1), a.minY !== Number.MIN_VALUE && 0 !== Math.abs(a.minY) && (a.hasNegs = !0), a.isMultipleYAxis) {
                                    o = [];
                                    for (var u = 0; u < s.length; u++) o.push(-a.minYArr[u] / s[u])
                                } else o.push(-a.minY / s[0]), a.minY !== Number.MIN_VALUE && 0 !== Math.abs(a.minY) && (r = -a.minY / t, h = a.minX / e);
                                return {
                                    yRatio: s,
                                    invertedYRatio: t,
                                    zRatio: n,
                                    xRatio: e,
                                    initialXRatio: l,
                                    invertedXRatio: i,
                                    baseLineInvertedY: r,
                                    baseLineY: o,
                                    baseLineX: h
                                }
                            }
                        }, {
                            key: "getLogSeries",
                            value: function (t) {
                                var e = this,
                                    l = this.w;
                                return l.globals.seriesLog = t.map((function (t, i) {
                                    return l.config.yaxis[i] && l.config.yaxis[i].logarithmic ? t.map((function (t) {
                                        return null === t ? null : e.getLogVal(t, i)
                                    })) : t
                                })), l.globals.invalidLogScale ? t : l.globals.seriesLog
                            }
                        }, {
                            key: "getLogVal",
                            value: function (t, e) {
                                var l = this.w;
                                return (Math.log(t) - Math.log(l.globals.minYArr[e])) / (Math.log(l.globals.maxYArr[e]) - Math.log(l.globals.minYArr[e]))
                            }
                        }, {
                            key: "getLogYRatios",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = this.w.globals;
                                return i.yLogRatio = t.slice(), i.logYRange = i.yRange.map((function (t, a) {
                                    if (l.config.yaxis[a] && e.w.config.yaxis[a].logarithmic) {
                                        var s, n = -Number.MAX_VALUE,
                                            o = Number.MIN_VALUE;
                                        return i.seriesLog.forEach((function (t, e) {
                                            t.forEach((function (t) {
                                                l.config.yaxis[e] && l.config.yaxis[e].logarithmic && (n = Math.max(t, n), o = Math.min(t, o))
                                            }))
                                        })), s = Math.pow(i.yRange[a], Math.abs(o - n) / i.yRange[a]), i.yLogRatio[a] = s / i.gridHeight, s
                                    }
                                })), i.invalidLogScale ? t.slice() : i.yLogRatio
                            }
                        }], [{
                            key: "checkComboSeries",
                            value: function (t) {
                                var e = !1,
                                    l = 0,
                                    i = 0;
                                return t.length && void 0 !== t[0].type && t.forEach((function (t) {
                                    "bar" !== t.type && "column" !== t.type && "candlestick" !== t.type && "boxPlot" !== t.type || l++, void 0 !== t.type && i++
                                })), i > 0 && (e = !0), {
                                    comboBarCount: l,
                                    comboCharts: e
                                }
                            }
                        }, {
                            key: "extendArrayProps",
                            value: function (t, e, l) {
                                return e.yaxis && (e = t.extendYAxis(e, l)), e.annotations && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)), e.annotations.points && (e = t.extendPointAnnotations(e))), e
                            }
                        }]), t
                    }(),
                    L = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.annoCtx = e
                        }
                        return h(t, [{
                            key: "addYaxisAnnotation",
                            value: function (t, e, l) {
                                var i, a = this.w,
                                    s = t.strokeDashArray,
                                    n = this._getY1Y2("y1", t),
                                    o = t.label.text;
                                if (null === t.y2 || void 0 === t.y2) {
                                    var r = this.annoCtx.graphics.drawLine(0 + t.offsetX, n + t.offsetY, this._getYAxisAnnotationWidth(t), n + t.offsetY, t.borderColor, s, t.borderWidth);
                                    e.appendChild(r.node), t.id && r.node.classList.add(t.id)
                                } else {
                                    if ((i = this._getY1Y2("y2", t)) > n) {
                                        var h = n;
                                        n = i, i = h
                                    }
                                    var c = this.annoCtx.graphics.drawRect(0 + t.offsetX, i + t.offsetY, this._getYAxisAnnotationWidth(t), n - i, 0, t.fillColor, t.opacity, 1, t.borderColor, s);
                                    c.node.classList.add("apexcharts-annotation-rect"), c.attr("clip-path", "url(#gridRectMask".concat(a.globals.cuid, ")")), e.appendChild(c.node), t.id && c.node.classList.add(t.id)
                                }
                                var d = "right" === t.label.position ? a.globals.gridWidth : 0,
                                    u = this.annoCtx.graphics.drawText({
                                        x: d + t.label.offsetX,
                                        y: (null != i ? i : n) + t.label.offsetY - 3,
                                        text: o,
                                        textAnchor: t.label.textAnchor,
                                        fontSize: t.label.style.fontSize,
                                        fontFamily: t.label.style.fontFamily,
                                        fontWeight: t.label.style.fontWeight,
                                        foreColor: t.label.style.color,
                                        cssClass: "apexcharts-yaxis-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : "")
                                    });
                                u.attr({
                                    rel: l
                                }), e.appendChild(u.node)
                            }
                        }, {
                            key: "_getY1Y2",
                            value: function (t, e) {
                                var l, i = "y1" === t ? e.y : e.y2,
                                    a = this.w;
                                if (this.annoCtx.invertAxis) {
                                    var s = a.globals.labels.indexOf(i);
                                    a.config.xaxis.convertedCatToNumeric && (s = a.globals.categoryLabels.indexOf(i));
                                    var n = a.globals.dom.baseEl.querySelector(".apexcharts-yaxis-texts-g text:nth-child(" + (s + 1) + ")");
                                    n && (l = parseFloat(n.getAttribute("y")))
                                } else {
                                    var o;
                                    o = a.config.yaxis[e.yAxisIndex].logarithmic ? (i = new k(this.annoCtx.ctx).getLogVal(i, e.yAxisIndex)) / a.globals.yLogRatio[e.yAxisIndex] : (i - a.globals.minYArr[e.yAxisIndex]) / (a.globals.yRange[e.yAxisIndex] / a.globals.gridHeight), l = a.globals.gridHeight - o, a.config.yaxis[e.yAxisIndex] && a.config.yaxis[e.yAxisIndex].reversed && (l = o)
                                }
                                return l
                            }
                        }, {
                            key: "_getYAxisAnnotationWidth",
                            value: function (t) {
                                var e = this.w;
                                return e.globals.gridWidth, (t.width.indexOf("%") > -1 ? e.globals.gridWidth * parseInt(t.width, 10) / 100 : parseInt(t.width, 10)) + t.offsetX
                            }
                        }, {
                            key: "drawYAxisAnnotations",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = this.annoCtx.graphics.group({
                                        class: "apexcharts-yaxis-annotations"
                                    });
                                return e.config.annotations.yaxis.map((function (e, i) {
                                    t.addYaxisAnnotation(e, l.node, i)
                                })), l
                            }
                        }]), t
                    }(),
                    C = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.annoCtx = e
                        }
                        return h(t, [{
                            key: "addPointAnnotation",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = 0,
                                    s = 0,
                                    n = 0;
                                this.annoCtx.invertAxis && console.warn("Point annotation is not supported in horizontal bar charts.");
                                var o = parseFloat(t.y);
                                if ("string" == typeof t.x || "category" === i.config.xaxis.type || i.config.xaxis.convertedCatToNumeric) {
                                    var r = i.globals.labels.indexOf(t.x);
                                    i.config.xaxis.convertedCatToNumeric && (r = i.globals.categoryLabels.indexOf(t.x)), a = this.annoCtx.helpers.getStringX(t.x), null === t.y && (o = i.globals.series[t.seriesIndex][r])
                                } else a = (t.x - i.globals.minX) / (i.globals.xRange / i.globals.gridWidth);
                                for (var h, c = [], d = 0, u = 0; u <= t.seriesIndex; u++) {
                                    var g = i.config.yaxis[u].seriesName;
                                    if (g)
                                        for (var p = u + 1; p <= t.seriesIndex; p++) i.config.yaxis[p].seriesName === g && -1 === c.indexOf(g) && (d++, c.push(g))
                                }
                                if (i.config.yaxis[t.yAxisIndex].logarithmic) h = (o = new k(this.annoCtx.ctx).getLogVal(o, t.yAxisIndex)) / i.globals.yLogRatio[t.yAxisIndex];
                                else {
                                    var f = t.yAxisIndex + d;
                                    h = (o - i.globals.minYArr[f]) / (i.globals.yRange[f] / i.globals.gridHeight)
                                }
                                if (s = i.globals.gridHeight - h - parseFloat(t.label.style.fontSize) - t.marker.size, n = i.globals.gridHeight - h, i.config.yaxis[t.yAxisIndex] && i.config.yaxis[t.yAxisIndex].reversed && (s = h + parseFloat(t.label.style.fontSize) + t.marker.size, n = h), m.isNumber(a)) {
                                    var v = {
                                            pSize: t.marker.size,
                                            pointStrokeWidth: t.marker.strokeWidth,
                                            pointFillColor: t.marker.fillColor,
                                            pointStrokeColor: t.marker.strokeColor,
                                            shape: t.marker.shape,
                                            pRadius: t.marker.radius,
                                            class: "apexcharts-point-annotation-marker ".concat(t.marker.cssClass, " ").concat(t.id ? t.id : "")
                                        },
                                        x = this.annoCtx.graphics.drawMarker(a + t.marker.offsetX, n + t.marker.offsetY, v);
                                    e.appendChild(x.node);
                                    var b = t.label.text ? t.label.text : "",
                                        y = this.annoCtx.graphics.drawText({
                                            x: a + t.label.offsetX,
                                            y: s + t.label.offsetY,
                                            text: b,
                                            textAnchor: t.label.textAnchor,
                                            fontSize: t.label.style.fontSize,
                                            fontFamily: t.label.style.fontFamily,
                                            fontWeight: t.label.style.fontWeight,
                                            foreColor: t.label.style.color,
                                            cssClass: "apexcharts-point-annotation-label ".concat(t.label.style.cssClass, " ").concat(t.id ? t.id : "")
                                        });
                                    if (y.attr({
                                            rel: l
                                        }), e.appendChild(y.node), t.customSVG.SVG) {
                                        var w = this.annoCtx.graphics.group({
                                            class: "apexcharts-point-annotations-custom-svg " + t.customSVG.cssClass
                                        });
                                        w.attr({
                                            transform: "translate(".concat(a + t.customSVG.offsetX, ", ").concat(s + t.customSVG.offsetY, ")")
                                        }), w.node.innerHTML = t.customSVG.SVG, e.appendChild(w.node)
                                    }
                                    if (t.image.path) {
                                        var A = t.image.width ? t.image.width : 20,
                                            S = t.image.height ? t.image.height : 20;
                                        x = this.annoCtx.addImage({
                                            x: a + t.image.offsetX - A / 2,
                                            y: s + t.image.offsetY - S / 2,
                                            width: A,
                                            height: S,
                                            path: t.image.path,
                                            appendTo: ".apexcharts-point-annotations"
                                        })
                                    }
                                    t.mouseEnter && x.node.addEventListener("mouseenter", t.mouseEnter.bind(this, t)), t.mouseLeave && x.node.addEventListener("mouseleave", t.mouseLeave.bind(this, t))
                                }
                            }
                        }, {
                            key: "drawPointAnnotations",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = this.annoCtx.graphics.group({
                                        class: "apexcharts-point-annotations"
                                    });
                                return e.config.annotations.points.map((function (e, i) {
                                    t.addPointAnnotation(e, l.node, i)
                                })), l
                            }
                        }]), t
                    }(),
                    M = {
                        name: "en",
                        options: {
                            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                            shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                            shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                            toolbar: {
                                exportToSVG: "Download SVG",
                                exportToPNG: "Download PNG",
                                exportToCSV: "Download CSV",
                                menu: "Menu",
                                selection: "Selection",
                                selectionZoom: "Selection Zoom",
                                zoomIn: "Zoom In",
                                zoomOut: "Zoom Out",
                                pan: "Panning",
                                reset: "Reset Zoom"
                            }
                        }
                    },
                    z = function () {
                        function t() {
                            o(this, t), this.yAxis = {
                                show: !0,
                                showAlways: !1,
                                showForNullSeries: !0,
                                seriesName: void 0,
                                opposite: !1,
                                reversed: !1,
                                logarithmic: !1,
                                logBase: 10,
                                tickAmount: void 0,
                                forceNiceScale: !1,
                                max: void 0,
                                min: void 0,
                                floating: !1,
                                decimalsInFloat: void 0,
                                labels: {
                                    show: !0,
                                    minWidth: 0,
                                    maxWidth: 160,
                                    offsetX: 0,
                                    offsetY: 0,
                                    align: void 0,
                                    rotate: 0,
                                    padding: 20,
                                    style: {
                                        colors: [],
                                        fontSize: "11px",
                                        fontWeight: 400,
                                        fontFamily: void 0,
                                        cssClass: ""
                                    },
                                    formatter: void 0
                                },
                                axisBorder: {
                                    show: !1,
                                    color: "#e0e0e0",
                                    width: 1,
                                    offsetX: 0,
                                    offsetY: 0
                                },
                                axisTicks: {
                                    show: !1,
                                    color: "#e0e0e0",
                                    width: 6,
                                    offsetX: 0,
                                    offsetY: 0
                                },
                                title: {
                                    text: void 0,
                                    rotate: -90,
                                    offsetY: 0,
                                    offsetX: 0,
                                    style: {
                                        color: void 0,
                                        fontSize: "11px",
                                        fontWeight: 900,
                                        fontFamily: void 0,
                                        cssClass: ""
                                    }
                                },
                                tooltip: {
                                    enabled: !1,
                                    offsetX: 0
                                },
                                crosshairs: {
                                    show: !0,
                                    position: "front",
                                    stroke: {
                                        color: "#b6b6b6",
                                        width: 1,
                                        dashArray: 0
                                    }
                                }
                            }, this.pointAnnotation = {
                                id: void 0,
                                x: 0,
                                y: null,
                                yAxisIndex: 0,
                                seriesIndex: 0,
                                mouseEnter: void 0,
                                mouseLeave: void 0,
                                marker: {
                                    size: 4,
                                    fillColor: "#fff",
                                    strokeWidth: 2,
                                    strokeColor: "#333",
                                    shape: "circle",
                                    offsetX: 0,
                                    offsetY: 0,
                                    radius: 2,
                                    cssClass: ""
                                },
                                label: {
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    borderRadius: 2,
                                    text: void 0,
                                    textAnchor: "middle",
                                    offsetX: 0,
                                    offsetY: 0,
                                    mouseEnter: void 0,
                                    mouseLeave: void 0,
                                    style: {
                                        background: "#fff",
                                        color: void 0,
                                        fontSize: "11px",
                                        fontFamily: void 0,
                                        fontWeight: 400,
                                        cssClass: "",
                                        padding: {
                                            left: 5,
                                            right: 5,
                                            top: 2,
                                            bottom: 2
                                        }
                                    }
                                },
                                customSVG: {
                                    SVG: void 0,
                                    cssClass: void 0,
                                    offsetX: 0,
                                    offsetY: 0
                                },
                                image: {
                                    path: void 0,
                                    width: 20,
                                    height: 20,
                                    offsetX: 0,
                                    offsetY: 0
                                }
                            }, this.yAxisAnnotation = {
                                id: void 0,
                                y: 0,
                                y2: null,
                                strokeDashArray: 1,
                                fillColor: "#c2c2c2",
                                borderColor: "#c2c2c2",
                                borderWidth: 1,
                                opacity: .3,
                                offsetX: 0,
                                offsetY: 0,
                                width: "100%",
                                yAxisIndex: 0,
                                label: {
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    borderRadius: 2,
                                    text: void 0,
                                    textAnchor: "end",
                                    position: "right",
                                    offsetX: 0,
                                    offsetY: -3,
                                    mouseEnter: void 0,
                                    mouseLeave: void 0,
                                    style: {
                                        background: "#fff",
                                        color: void 0,
                                        fontSize: "11px",
                                        fontFamily: void 0,
                                        fontWeight: 400,
                                        cssClass: "",
                                        padding: {
                                            left: 5,
                                            right: 5,
                                            top: 2,
                                            bottom: 2
                                        }
                                    }
                                }
                            }, this.xAxisAnnotation = {
                                id: void 0,
                                x: 0,
                                x2: null,
                                strokeDashArray: 1,
                                fillColor: "#c2c2c2",
                                borderColor: "#c2c2c2",
                                borderWidth: 1,
                                opacity: .3,
                                offsetX: 0,
                                offsetY: 0,
                                label: {
                                    borderColor: "#c2c2c2",
                                    borderWidth: 1,
                                    borderRadius: 2,
                                    text: void 0,
                                    textAnchor: "middle",
                                    orientation: "vertical",
                                    position: "top",
                                    offsetX: 0,
                                    offsetY: 0,
                                    mouseEnter: void 0,
                                    mouseLeave: void 0,
                                    style: {
                                        background: "#fff",
                                        color: void 0,
                                        fontSize: "11px",
                                        fontFamily: void 0,
                                        fontWeight: 400,
                                        cssClass: "",
                                        padding: {
                                            left: 5,
                                            right: 5,
                                            top: 2,
                                            bottom: 2
                                        }
                                    }
                                }
                            }, this.text = {
                                x: 0,
                                y: 0,
                                text: "",
                                textAnchor: "start",
                                foreColor: void 0,
                                fontSize: "13px",
                                fontFamily: void 0,
                                fontWeight: 400,
                                appendTo: ".apexcharts-annotations",
                                backgroundColor: "transparent",
                                borderColor: "#c2c2c2",
                                borderRadius: 0,
                                borderWidth: 0,
                                paddingLeft: 4,
                                paddingRight: 4,
                                paddingTop: 2,
                                paddingBottom: 2
                            }
                        }
                        return h(t, [{
                            key: "init",
                            value: function () {
                                return {
                                    annotations: {
                                        position: "front",
                                        yaxis: [this.yAxisAnnotation],
                                        xaxis: [this.xAxisAnnotation],
                                        points: [this.pointAnnotation],
                                        texts: [],
                                        images: [],
                                        shapes: []
                                    },
                                    chart: {
                                        animations: {
                                            enabled: !0,
                                            easing: "easeinout",
                                            speed: 800,
                                            animateGradually: {
                                                delay: 150,
                                                enabled: !0
                                            },
                                            dynamicAnimation: {
                                                enabled: !0,
                                                speed: 350
                                            }
                                        },
                                        background: "transparent",
                                        locales: [M],
                                        defaultLocale: "en",
                                        dropShadow: {
                                            enabled: !1,
                                            enabledOnSeries: void 0,
                                            top: 2,
                                            left: 2,
                                            blur: 4,
                                            color: "#000",
                                            opacity: .35
                                        },
                                        events: {
                                            animationEnd: void 0,
                                            beforeMount: void 0,
                                            mounted: void 0,
                                            updated: void 0,
                                            click: void 0,
                                            mouseMove: void 0,
                                            mouseLeave: void 0,
                                            legendClick: void 0,
                                            markerClick: void 0,
                                            selection: void 0,
                                            dataPointSelection: void 0,
                                            dataPointMouseEnter: void 0,
                                            dataPointMouseLeave: void 0,
                                            beforeZoom: void 0,
                                            beforeResetZoom: void 0,
                                            zoomed: void 0,
                                            scrolled: void 0,
                                            brushScrolled: void 0
                                        },
                                        foreColor: "#373d3f",
                                        fontFamily: "Helvetica, Arial, sans-serif",
                                        height: "auto",
                                        parentHeightOffset: 15,
                                        redrawOnParentResize: !0,
                                        redrawOnWindowResize: !0,
                                        id: void 0,
                                        group: void 0,
                                        offsetX: 0,
                                        offsetY: 0,
                                        selection: {
                                            enabled: !1,
                                            type: "x",
                                            fill: {
                                                color: "#24292e",
                                                opacity: .1
                                            },
                                            stroke: {
                                                width: 1,
                                                color: "#24292e",
                                                opacity: .4,
                                                dashArray: 3
                                            },
                                            xaxis: {
                                                min: void 0,
                                                max: void 0
                                            },
                                            yaxis: {
                                                min: void 0,
                                                max: void 0
                                            }
                                        },
                                        sparkline: {
                                            enabled: !1
                                        },
                                        brush: {
                                            enabled: !1,
                                            autoScaleYaxis: !0,
                                            target: void 0
                                        },
                                        stacked: !1,
                                        stackType: "normal",
                                        toolbar: {
                                            show: !0,
                                            offsetX: 0,
                                            offsetY: 0,
                                            tools: {
                                                download: !0,
                                                selection: !0,
                                                zoom: !0,
                                                zoomin: !0,
                                                zoomout: !0,
                                                pan: !0,
                                                reset: !0,
                                                customIcons: []
                                            },
                                            export: {
                                                csv: {
                                                    filename: void 0,
                                                    columnDelimiter: ",",
                                                    headerCategory: "category",
                                                    headerValue: "value",
                                                    dateFormatter: function (t) {
                                                        return new Date(t).toDateString()
                                                    }
                                                },
                                                png: {
                                                    filename: void 0
                                                },
                                                svg: {
                                                    filename: void 0
                                                }
                                            },
                                            autoSelected: "zoom"
                                        },
                                        type: "line",
                                        width: "100%",
                                        zoom: {
                                            enabled: !0,
                                            type: "x",
                                            autoScaleYaxis: !1,
                                            zoomedArea: {
                                                fill: {
                                                    color: "#90CAF9",
                                                    opacity: .4
                                                },
                                                stroke: {
                                                    color: "#0D47A1",
                                                    opacity: .4,
                                                    width: 1
                                                }
                                            }
                                        }
                                    },
                                    plotOptions: {
                                        area: {
                                            fillTo: "origin"
                                        },
                                        bar: {
                                            horizontal: !1,
                                            columnWidth: "70%",
                                            barHeight: "70%",
                                            distributed: !1,
                                            borderRadius: 0,
                                            rangeBarOverlap: !0,
                                            rangeBarGroupRows: !1,
                                            colors: {
                                                ranges: [],
                                                backgroundBarColors: [],
                                                backgroundBarOpacity: 1,
                                                backgroundBarRadius: 0
                                            },
                                            dataLabels: {
                                                position: "top",
                                                maxItems: 100,
                                                hideOverflowingLabels: !0,
                                                orientation: "horizontal"
                                            }
                                        },
                                        bubble: {
                                            minBubbleRadius: void 0,
                                            maxBubbleRadius: void 0
                                        },
                                        candlestick: {
                                            colors: {
                                                upward: "#00B746",
                                                downward: "#EF403C"
                                            },
                                            wick: {
                                                useFillColor: !0
                                            }
                                        },
                                        boxPlot: {
                                            colors: {
                                                upper: "#00E396",
                                                lower: "#008FFB"
                                            }
                                        },
                                        heatmap: {
                                            radius: 2,
                                            enableShades: !0,
                                            shadeIntensity: .5,
                                            reverseNegativeShade: !1,
                                            distributed: !1,
                                            useFillColorAsStroke: !1,
                                            colorScale: {
                                                inverse: !1,
                                                ranges: [],
                                                min: void 0,
                                                max: void 0
                                            }
                                        },
                                        treemap: {
                                            enableShades: !0,
                                            shadeIntensity: .5,
                                            distributed: !1,
                                            reverseNegativeShade: !1,
                                            useFillColorAsStroke: !1,
                                            colorScale: {
                                                inverse: !1,
                                                ranges: [],
                                                min: void 0,
                                                max: void 0
                                            }
                                        },
                                        radialBar: {
                                            inverseOrder: !1,
                                            startAngle: 0,
                                            endAngle: 360,
                                            offsetX: 0,
                                            offsetY: 0,
                                            hollow: {
                                                margin: 5,
                                                size: "50%",
                                                background: "transparent",
                                                image: void 0,
                                                imageWidth: 150,
                                                imageHeight: 150,
                                                imageOffsetX: 0,
                                                imageOffsetY: 0,
                                                imageClipped: !0,
                                                position: "front",
                                                dropShadow: {
                                                    enabled: !1,
                                                    top: 0,
                                                    left: 0,
                                                    blur: 3,
                                                    color: "#000",
                                                    opacity: .5
                                                }
                                            },
                                            track: {
                                                show: !0,
                                                startAngle: void 0,
                                                endAngle: void 0,
                                                background: "#f2f2f2",
                                                strokeWidth: "97%",
                                                opacity: 1,
                                                margin: 5,
                                                dropShadow: {
                                                    enabled: !1,
                                                    top: 0,
                                                    left: 0,
                                                    blur: 3,
                                                    color: "#000",
                                                    opacity: .5
                                                }
                                            },
                                            dataLabels: {
                                                show: !0,
                                                name: {
                                                    show: !0,
                                                    fontSize: "16px",
                                                    fontFamily: void 0,
                                                    fontWeight: 600,
                                                    color: void 0,
                                                    offsetY: 0,
                                                    formatter: function (t) {
                                                        return t
                                                    }
                                                },
                                                value: {
                                                    show: !0,
                                                    fontSize: "14px",
                                                    fontFamily: void 0,
                                                    fontWeight: 400,
                                                    color: void 0,
                                                    offsetY: 16,
                                                    formatter: function (t) {
                                                        return t + "%"
                                                    }
                                                },
                                                total: {
                                                    show: !1,
                                                    label: "Total",
                                                    fontSize: "16px",
                                                    fontWeight: 600,
                                                    fontFamily: void 0,
                                                    color: void 0,
                                                    formatter: function (t) {
                                                        return t.globals.seriesTotals.reduce((function (t, e) {
                                                            return t + e
                                                        }), 0) / t.globals.series.length + "%"
                                                    }
                                                }
                                            }
                                        },
                                        pie: {
                                            customScale: 1,
                                            offsetX: 0,
                                            offsetY: 0,
                                            startAngle: 0,
                                            endAngle: 360,
                                            expandOnClick: !0,
                                            dataLabels: {
                                                offset: 0,
                                                minAngleToShowLabel: 10
                                            },
                                            donut: {
                                                size: "65%",
                                                background: "transparent",
                                                labels: {
                                                    show: !1,
                                                    name: {
                                                        show: !0,
                                                        fontSize: "16px",
                                                        fontFamily: void 0,
                                                        fontWeight: 600,
                                                        color: void 0,
                                                        offsetY: -10,
                                                        formatter: function (t) {
                                                            return t
                                                        }
                                                    },
                                                    value: {
                                                        show: !0,
                                                        fontSize: "20px",
                                                        fontFamily: void 0,
                                                        fontWeight: 400,
                                                        color: void 0,
                                                        offsetY: 10,
                                                        formatter: function (t) {
                                                            return t
                                                        }
                                                    },
                                                    total: {
                                                        show: !1,
                                                        showAlways: !1,
                                                        label: "Total",
                                                        fontSize: "16px",
                                                        fontWeight: 400,
                                                        fontFamily: void 0,
                                                        color: void 0,
                                                        formatter: function (t) {
                                                            return t.globals.seriesTotals.reduce((function (t, e) {
                                                                return t + e
                                                            }), 0)
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        polarArea: {
                                            rings: {
                                                strokeWidth: 1,
                                                strokeColor: "#e8e8e8"
                                            },
                                            spokes: {
                                                strokeWidth: 1,
                                                connectorColors: "#e8e8e8"
                                            }
                                        },
                                        radar: {
                                            size: void 0,
                                            offsetX: 0,
                                            offsetY: 0,
                                            polygons: {
                                                strokeWidth: 1,
                                                strokeColors: "#e8e8e8",
                                                connectorColors: "#e8e8e8",
                                                fill: {
                                                    colors: void 0
                                                }
                                            }
                                        }
                                    },
                                    colors: void 0,
                                    dataLabels: {
                                        enabled: !0,
                                        enabledOnSeries: void 0,
                                        formatter: function (t) {
                                            return null !== t ? t : ""
                                        },
                                        textAnchor: "middle",
                                        distributed: !1,
                                        offsetX: 0,
                                        offsetY: 0,
                                        style: {
                                            fontSize: "12px",
                                            fontFamily: void 0,
                                            fontWeight: 600,
                                            colors: void 0
                                        },
                                        background: {
                                            enabled: !0,
                                            foreColor: "#fff",
                                            borderRadius: 2,
                                            padding: 4,
                                            opacity: .9,
                                            borderWidth: 1,
                                            borderColor: "#fff",
                                            dropShadow: {
                                                enabled: !1,
                                                top: 1,
                                                left: 1,
                                                blur: 1,
                                                color: "#000",
                                                opacity: .45
                                            }
                                        },
                                        dropShadow: {
                                            enabled: !1,
                                            top: 1,
                                            left: 1,
                                            blur: 1,
                                            color: "#000",
                                            opacity: .45
                                        }
                                    },
                                    fill: {
                                        type: "solid",
                                        colors: void 0,
                                        opacity: .85,
                                        gradient: {
                                            shade: "dark",
                                            type: "horizontal",
                                            shadeIntensity: .5,
                                            gradientToColors: void 0,
                                            inverseColors: !0,
                                            opacityFrom: 1,
                                            opacityTo: 1,
                                            stops: [0, 50, 100],
                                            colorStops: []
                                        },
                                        image: {
                                            src: [],
                                            width: void 0,
                                            height: void 0
                                        },
                                        pattern: {
                                            style: "squares",
                                            width: 6,
                                            height: 6,
                                            strokeWidth: 2
                                        }
                                    },
                                    forecastDataPoints: {
                                        count: 0,
                                        fillOpacity: .5,
                                        strokeWidth: void 0,
                                        dashArray: 4
                                    },
                                    grid: {
                                        show: !0,
                                        borderColor: "#e0e0e0",
                                        strokeDashArray: 0,
                                        position: "back",
                                        xaxis: {
                                            lines: {
                                                show: !1
                                            }
                                        },
                                        yaxis: {
                                            lines: {
                                                show: !0
                                            }
                                        },
                                        row: {
                                            colors: void 0,
                                            opacity: .5
                                        },
                                        column: {
                                            colors: void 0,
                                            opacity: .5
                                        },
                                        padding: {
                                            top: 0,
                                            right: 10,
                                            bottom: 0,
                                            left: 12
                                        }
                                    },
                                    labels: [],
                                    legend: {
                                        show: !0,
                                        showForSingleSeries: !1,
                                        showForNullSeries: !0,
                                        showForZeroSeries: !0,
                                        floating: !1,
                                        position: "bottom",
                                        horizontalAlign: "center",
                                        inverseOrder: !1,
                                        fontSize: "12px",
                                        fontFamily: void 0,
                                        fontWeight: 400,
                                        width: void 0,
                                        height: void 0,
                                        formatter: void 0,
                                        tooltipHoverFormatter: void 0,
                                        offsetX: -20,
                                        offsetY: 4,
                                        customLegendItems: [],
                                        labels: {
                                            colors: void 0,
                                            useSeriesColors: !1
                                        },
                                        markers: {
                                            width: 12,
                                            height: 12,
                                            strokeWidth: 0,
                                            fillColors: void 0,
                                            strokeColor: "#fff",
                                            radius: 12,
                                            customHTML: void 0,
                                            offsetX: 0,
                                            offsetY: 0,
                                            onClick: void 0
                                        },
                                        itemMargin: {
                                            horizontal: 5,
                                            vertical: 2
                                        },
                                        onItemClick: {
                                            toggleDataSeries: !0
                                        },
                                        onItemHover: {
                                            highlightDataSeries: !0
                                        }
                                    },
                                    markers: {
                                        discrete: [],
                                        size: 0,
                                        colors: void 0,
                                        strokeColors: "#fff",
                                        strokeWidth: 2,
                                        strokeOpacity: .9,
                                        strokeDashArray: 0,
                                        fillOpacity: 1,
                                        shape: "circle",
                                        width: 8,
                                        height: 8,
                                        radius: 2,
                                        offsetX: 0,
                                        offsetY: 0,
                                        onClick: void 0,
                                        onDblClick: void 0,
                                        showNullDataPoints: !0,
                                        hover: {
                                            size: void 0,
                                            sizeOffset: 3
                                        }
                                    },
                                    noData: {
                                        text: void 0,
                                        align: "center",
                                        verticalAlign: "middle",
                                        offsetX: 0,
                                        offsetY: 0,
                                        style: {
                                            color: void 0,
                                            fontSize: "14px",
                                            fontFamily: void 0
                                        }
                                    },
                                    responsive: [],
                                    series: void 0,
                                    states: {
                                        normal: {
                                            filter: {
                                                type: "none",
                                                value: 0
                                            }
                                        },
                                        hover: {
                                            filter: {
                                                type: "lighten",
                                                value: .1
                                            }
                                        },
                                        active: {
                                            allowMultipleDataPointsSelection: !1,
                                            filter: {
                                                type: "darken",
                                                value: .5
                                            }
                                        }
                                    },
                                    title: {
                                        text: void 0,
                                        align: "left",
                                        margin: 5,
                                        offsetX: 0,
                                        offsetY: 0,
                                        floating: !1,
                                        style: {
                                            fontSize: "14px",
                                            fontWeight: 900,
                                            fontFamily: void 0,
                                            color: void 0
                                        }
                                    },
                                    subtitle: {
                                        text: void 0,
                                        align: "left",
                                        margin: 5,
                                        offsetX: 0,
                                        offsetY: 30,
                                        floating: !1,
                                        style: {
                                            fontSize: "12px",
                                            fontWeight: 400,
                                            fontFamily: void 0,
                                            color: void 0
                                        }
                                    },
                                    stroke: {
                                        show: !0,
                                        curve: "smooth",
                                        lineCap: "butt",
                                        width: 2,
                                        colors: void 0,
                                        dashArray: 0
                                    },
                                    tooltip: {
                                        enabled: !0,
                                        enabledOnSeries: void 0,
                                        shared: !0,
                                        followCursor: !1,
                                        intersect: !1,
                                        inverseOrder: !1,
                                        custom: void 0,
                                        fillSeriesColor: !1,
                                        theme: "light",
                                        style: {
                                            fontSize: "12px",
                                            fontFamily: void 0
                                        },
                                        onDatasetHover: {
                                            highlightDataSeries: !1
                                        },
                                        x: {
                                            show: !0,
                                            format: "dd MMM",
                                            formatter: void 0
                                        },
                                        y: {
                                            formatter: void 0,
                                            title: {
                                                formatter: function (t) {
                                                    return t ? t + ": " : ""
                                                }
                                            }
                                        },
                                        z: {
                                            formatter: void 0,
                                            title: "Size: "
                                        },
                                        marker: {
                                            show: !0,
                                            fillColors: void 0
                                        },
                                        items: {
                                            display: "flex"
                                        },
                                        fixed: {
                                            enabled: !1,
                                            position: "topRight",
                                            offsetX: 0,
                                            offsetY: 0
                                        }
                                    },
                                    xaxis: {
                                        type: "category",
                                        categories: [],
                                        convertedCatToNumeric: !1,
                                        offsetX: 0,
                                        offsetY: 0,
                                        overwriteCategories: void 0,
                                        labels: {
                                            show: !0,
                                            rotate: -45,
                                            rotateAlways: !1,
                                            hideOverlappingLabels: !0,
                                            trim: !1,
                                            minHeight: void 0,
                                            maxHeight: 120,
                                            showDuplicates: !0,
                                            style: {
                                                colors: [],
                                                fontSize: "12px",
                                                fontWeight: 400,
                                                fontFamily: void 0,
                                                cssClass: ""
                                            },
                                            offsetX: 0,
                                            offsetY: 0,
                                            format: void 0,
                                            formatter: void 0,
                                            datetimeUTC: !0,
                                            datetimeFormatter: {
                                                year: "yyyy",
                                                month: "MMM 'yy",
                                                day: "dd MMM",
                                                hour: "HH:mm",
                                                minute: "HH:mm:ss",
                                                second: "HH:mm:ss"
                                            }
                                        },
                                        axisBorder: {
                                            show: !0,
                                            color: "#e0e0e0",
                                            width: "100%",
                                            height: 1,
                                            offsetX: 0,
                                            offsetY: 0
                                        },
                                        axisTicks: {
                                            show: !0,
                                            color: "#e0e0e0",
                                            height: 6,
                                            offsetX: 0,
                                            offsetY: 0
                                        },
                                        tickAmount: void 0,
                                        tickPlacement: "on",
                                        min: void 0,
                                        max: void 0,
                                        range: void 0,
                                        floating: !1,
                                        decimalsInFloat: void 0,
                                        position: "bottom",
                                        title: {
                                            text: void 0,
                                            offsetX: 0,
                                            offsetY: 0,
                                            style: {
                                                color: void 0,
                                                fontSize: "12px",
                                                fontWeight: 900,
                                                fontFamily: void 0,
                                                cssClass: ""
                                            }
                                        },
                                        crosshairs: {
                                            show: !0,
                                            width: 1,
                                            position: "back",
                                            opacity: .9,
                                            stroke: {
                                                color: "#b6b6b6",
                                                width: 1,
                                                dashArray: 3
                                            },
                                            fill: {
                                                type: "solid",
                                                color: "#B1B9C4",
                                                gradient: {
                                                    colorFrom: "#D8E3F0",
                                                    colorTo: "#BED1E6",
                                                    stops: [0, 100],
                                                    opacityFrom: .4,
                                                    opacityTo: .5
                                                }
                                            },
                                            dropShadow: {
                                                enabled: !1,
                                                left: 0,
                                                top: 0,
                                                blur: 1,
                                                opacity: .4
                                            }
                                        },
                                        tooltip: {
                                            enabled: !0,
                                            offsetY: 0,
                                            formatter: void 0,
                                            style: {
                                                fontSize: "12px",
                                                fontFamily: void 0
                                            }
                                        }
                                    },
                                    yaxis: this.yAxis,
                                    theme: {
                                        mode: "light",
                                        palette: "palette1",
                                        monochrome: {
                                            enabled: !1,
                                            color: "#008FFB",
                                            shadeTo: "light",
                                            shadeIntensity: .65
                                        }
                                    }
                                }
                            }
                        }]), t
                    }(),
                    E = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.graphics = new w(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new A(this), this.xAxisAnnotations = new S(this), this.yAxisAnnotations = new L(this), this.pointsAnnotations = new C(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints
                        }
                        return h(t, [{
                            key: "drawAxesAnnotations",
                            value: function () {
                                var t = this.w;
                                if (t.globals.axisCharts) {
                                    for (var e = this.yAxisAnnotations.drawYAxisAnnotations(), l = this.xAxisAnnotations.drawXAxisAnnotations(), i = this.pointsAnnotations.drawPointAnnotations(), a = t.config.chart.animations.enabled, s = [e, l, i], n = [l.node, e.node, i.node], o = 0; o < 3; o++) t.globals.dom.elGraphical.add(s[o]), !a || t.globals.resized || t.globals.dataChanged || "scatter" !== t.config.chart.type && "bubble" !== t.config.chart.type && t.globals.dataPoints > 1 && n[o].classList.add("apexcharts-element-hidden"), t.globals.delayedElements.push({
                                        el: n[o],
                                        index: 0
                                    });
                                    this.helpers.annotationsBackground()
                                }
                            }
                        }, {
                            key: "drawImageAnnos",
                            value: function () {
                                var t = this;
                                this.w.config.annotations.images.map((function (e, l) {
                                    t.addImage(e, l)
                                }))
                            }
                        }, {
                            key: "drawTextAnnos",
                            value: function () {
                                var t = this;
                                this.w.config.annotations.texts.map((function (e, l) {
                                    t.addText(e, l)
                                }))
                            }
                        }, {
                            key: "addXaxisAnnotation",
                            value: function (t, e, l) {
                                this.xAxisAnnotations.addXaxisAnnotation(t, e, l)
                            }
                        }, {
                            key: "addYaxisAnnotation",
                            value: function (t, e, l) {
                                this.yAxisAnnotations.addYaxisAnnotation(t, e, l)
                            }
                        }, {
                            key: "addPointAnnotation",
                            value: function (t, e, l) {
                                this.pointsAnnotations.addPointAnnotation(t, e, l)
                            }
                        }, {
                            key: "addText",
                            value: function (t, e) {
                                var l = t.x,
                                    i = t.y,
                                    a = t.text,
                                    s = t.textAnchor,
                                    n = t.foreColor,
                                    o = t.fontSize,
                                    r = t.fontFamily,
                                    h = t.fontWeight,
                                    c = t.cssClass,
                                    d = t.backgroundColor,
                                    u = t.borderWidth,
                                    g = t.strokeDashArray,
                                    p = t.borderRadius,
                                    f = t.borderColor,
                                    v = t.appendTo,
                                    x = void 0 === v ? ".apexcharts-annotations" : v,
                                    m = t.paddingLeft,
                                    b = void 0 === m ? 4 : m,
                                    y = t.paddingRight,
                                    w = void 0 === y ? 4 : y,
                                    A = t.paddingBottom,
                                    S = void 0 === A ? 2 : A,
                                    k = t.paddingTop,
                                    L = void 0 === k ? 2 : k,
                                    C = this.w,
                                    M = this.graphics.drawText({
                                        x: l,
                                        y: i,
                                        text: a,
                                        textAnchor: s || "start",
                                        fontSize: o || "12px",
                                        fontWeight: h || "regular",
                                        fontFamily: r || C.config.chart.fontFamily,
                                        foreColor: n || C.config.chart.foreColor,
                                        cssClass: c
                                    }),
                                    z = C.globals.dom.baseEl.querySelector(x);
                                z && z.appendChild(M.node);
                                var E = M.bbox();
                                if (a) {
                                    var P = this.graphics.drawRect(E.x - b, E.y - L, E.width + b + w, E.height + S + L, p, d || "transparent", 1, u, f, g);
                                    z.insertBefore(P.node, M.node)
                                }
                            }
                        }, {
                            key: "addImage",
                            value: function (t, e) {
                                var l = this.w,
                                    i = t.path,
                                    a = t.x,
                                    s = void 0 === a ? 0 : a,
                                    n = t.y,
                                    o = void 0 === n ? 0 : n,
                                    r = t.width,
                                    h = void 0 === r ? 20 : r,
                                    c = t.height,
                                    d = void 0 === c ? 20 : c,
                                    u = t.appendTo,
                                    g = void 0 === u ? ".apexcharts-annotations" : u,
                                    p = l.globals.dom.Paper.image(i);
                                p.size(h, d).move(s, o);
                                var f = l.globals.dom.baseEl.querySelector(g);
                                return f && f.appendChild(p.node), p
                            }
                        }, {
                            key: "addXaxisAnnotationExternal",
                            value: function (t, e, l) {
                                return this.addAnnotationExternal({
                                    params: t,
                                    pushToMemory: e,
                                    context: l,
                                    type: "xaxis",
                                    contextMethod: l.addXaxisAnnotation
                                }), l
                            }
                        }, {
                            key: "addYaxisAnnotationExternal",
                            value: function (t, e, l) {
                                return this.addAnnotationExternal({
                                    params: t,
                                    pushToMemory: e,
                                    context: l,
                                    type: "yaxis",
                                    contextMethod: l.addYaxisAnnotation
                                }), l
                            }
                        }, {
                            key: "addPointAnnotationExternal",
                            value: function (t, e, l) {
                                return void 0 === this.invertAxis && (this.invertAxis = l.w.globals.isBarHorizontal), this.addAnnotationExternal({
                                    params: t,
                                    pushToMemory: e,
                                    context: l,
                                    type: "point",
                                    contextMethod: l.addPointAnnotation
                                }), l
                            }
                        }, {
                            key: "addAnnotationExternal",
                            value: function (t) {
                                var e = t.params,
                                    l = t.pushToMemory,
                                    i = t.context,
                                    a = t.type,
                                    s = t.contextMethod,
                                    n = i,
                                    o = n.w,
                                    r = o.globals.dom.baseEl.querySelector(".apexcharts-".concat(a, "-annotations")),
                                    h = r.childNodes.length + 1,
                                    c = new z,
                                    d = Object.assign({}, "xaxis" === a ? c.xAxisAnnotation : "yaxis" === a ? c.yAxisAnnotation : c.pointAnnotation),
                                    u = m.extend(d, e);
                                switch (a) {
                                    case "xaxis":
                                        this.addXaxisAnnotation(u, r, h);
                                        break;
                                    case "yaxis":
                                        this.addYaxisAnnotation(u, r, h);
                                        break;
                                    case "point":
                                        this.addPointAnnotation(u, r, h)
                                }
                                var g = o.globals.dom.baseEl.querySelector(".apexcharts-".concat(a, "-annotations .apexcharts-").concat(a, "-annotation-label[rel='").concat(h, "']")),
                                    p = this.helpers.addBackgroundToAnno(g, u);
                                return p && r.insertBefore(p.node, g), l && o.globals.memory.methodsToExec.push({
                                    context: n,
                                    id: u.id ? u.id : m.randomId(),
                                    method: s,
                                    label: "addAnnotation",
                                    params: e
                                }), i
                            }
                        }, {
                            key: "clearAnnotations",
                            value: function (t) {
                                var e = t.w,
                                    l = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations");
                                e.globals.memory.methodsToExec.map((function (t, l) {
                                    "addText" !== t.label && "addAnnotation" !== t.label || e.globals.memory.methodsToExec.splice(l, 1)
                                })), l = m.listToArray(l), Array.prototype.forEach.call(l, (function (t) {
                                    for (; t.firstChild;) t.removeChild(t.firstChild)
                                }))
                            }
                        }, {
                            key: "removeAnnotation",
                            value: function (t, e) {
                                var l = t.w,
                                    i = l.globals.dom.baseEl.querySelectorAll(".".concat(e));
                                i && (l.globals.memory.methodsToExec.map((function (t, i) {
                                    t.id === e && l.globals.memory.methodsToExec.splice(i, 1)
                                })), Array.prototype.forEach.call(i, (function (t) {
                                    t.parentElement.removeChild(t)
                                })))
                            }
                        }]), t
                    }(),
                    P = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.opts = null, this.seriesIndex = 0
                        }
                        return h(t, [{
                            key: "clippedImgArea",
                            value: function (t) {
                                var e = this.w,
                                    l = e.config,
                                    i = parseInt(e.globals.gridWidth, 10),
                                    a = parseInt(e.globals.gridHeight, 10),
                                    s = i > a ? i : a,
                                    n = t.image,
                                    o = 0,
                                    r = 0;
                                void 0 === t.width && void 0 === t.height ? void 0 !== l.fill.image.width && void 0 !== l.fill.image.height ? (o = l.fill.image.width + 1, r = l.fill.image.height) : (o = s + 1, r = s) : (o = t.width, r = t.height);
                                var h = document.createElementNS(e.globals.SVGNS, "pattern");
                                w.setAttrs(h, {
                                    id: t.patternID,
                                    patternUnits: t.patternUnits ? t.patternUnits : "userSpaceOnUse",
                                    width: o + "px",
                                    height: r + "px"
                                });
                                var c = document.createElementNS(e.globals.SVGNS, "image");
                                h.appendChild(c), c.setAttributeNS(window.SVG.xlink, "href", n), w.setAttrs(c, {
                                    x: 0,
                                    y: 0,
                                    preserveAspectRatio: "none",
                                    width: o + "px",
                                    height: r + "px"
                                }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h)
                            }
                        }, {
                            key: "getSeriesIndex",
                            value: function (t) {
                                var e = this.w;
                                return ("bar" === e.config.chart.type || "rangeBar" === e.config.chart.type) && e.config.plotOptions.bar.distributed || "heatmap" === e.config.chart.type || "treemap" === e.config.chart.type ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex
                            }
                        }, {
                            key: "fillPath",
                            value: function (t) {
                                var e = this.w;
                                this.opts = t;
                                var l, i, a, s = this.w.config;
                                this.seriesIndex = this.getSeriesIndex(t);
                                var n = this.getFillColors()[this.seriesIndex];
                                void 0 !== e.globals.seriesColors[this.seriesIndex] && (n = e.globals.seriesColors[this.seriesIndex]), "function" == typeof n && (n = n({
                                    seriesIndex: this.seriesIndex,
                                    dataPointIndex: t.dataPointIndex,
                                    value: t.value,
                                    w: e
                                }));
                                var o = this.getFillType(this.seriesIndex),
                                    r = Array.isArray(s.fill.opacity) ? s.fill.opacity[this.seriesIndex] : s.fill.opacity;
                                t.color && (n = t.color);
                                var h = n;
                                if (-1 === n.indexOf("rgb") ? n.length < 9 && (h = m.hexToRgba(n, r)) : n.indexOf("rgba") > -1 && (r = m.getOpacityFromRGBA(n)), t.opacity && (r = t.opacity), "pattern" === o && (i = this.handlePatternFill(i, n, r, h)), "gradient" === o && (a = this.handleGradientFill(n, r, this.seriesIndex)), "image" === o) {
                                    var c = s.fill.image.src,
                                        d = t.patternID ? t.patternID : "";
                                    this.clippedImgArea({
                                        opacity: r,
                                        image: Array.isArray(c) ? t.seriesNumber < c.length ? c[t.seriesNumber] : c[0] : c,
                                        width: t.width ? t.width : void 0,
                                        height: t.height ? t.height : void 0,
                                        patternUnits: t.patternUnits,
                                        patternID: "pattern".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d)
                                    }), l = "url(#pattern".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d, ")")
                                } else l = "gradient" === o ? a : "pattern" === o ? i : h;
                                return t.solid && (l = h), l
                            }
                        }, {
                            key: "getFillType",
                            value: function (t) {
                                var e = this.w;
                                return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type
                            }
                        }, {
                            key: "getFillColors",
                            value: function () {
                                var t = this.w,
                                    e = t.config,
                                    l = this.opts,
                                    i = [];
                                return t.globals.comboCharts ? "line" === t.config.series[this.seriesIndex].type ? Array.isArray(t.globals.stroke.colors) ? i = t.globals.stroke.colors : i.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? i = t.globals.fill.colors : i.push(t.globals.fill.colors) : "line" === e.chart.type ? Array.isArray(t.globals.stroke.colors) ? i = t.globals.stroke.colors : i.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? i = t.globals.fill.colors : i.push(t.globals.fill.colors), void 0 !== l.fillColors && (i = [], Array.isArray(l.fillColors) ? i = l.fillColors.slice() : i.push(l.fillColors)), i
                            }
                        }, {
                            key: "handlePatternFill",
                            value: function (t, e, l, i) {
                                var a = this.w.config,
                                    s = this.opts,
                                    n = new w(this.ctx),
                                    o = void 0 === a.fill.pattern.strokeWidth ? Array.isArray(a.stroke.width) ? a.stroke.width[this.seriesIndex] : a.stroke.width : Array.isArray(a.fill.pattern.strokeWidth) ? a.fill.pattern.strokeWidth[this.seriesIndex] : a.fill.pattern.strokeWidth,
                                    r = e;
                                return Array.isArray(a.fill.pattern.style) ? void 0 !== a.fill.pattern.style[s.seriesNumber] ? n.drawPattern(a.fill.pattern.style[s.seriesNumber], a.fill.pattern.width, a.fill.pattern.height, r, o, l) : i : n.drawPattern(a.fill.pattern.style, a.fill.pattern.width, a.fill.pattern.height, r, o, l)
                            }
                        }, {
                            key: "handleGradientFill",
                            value: function (t, e, l) {
                                var i, a = this.w.config,
                                    s = this.opts,
                                    n = new w(this.ctx),
                                    o = new m,
                                    r = a.fill.gradient.type,
                                    h = t,
                                    c = void 0 === a.fill.gradient.opacityFrom ? e : Array.isArray(a.fill.gradient.opacityFrom) ? a.fill.gradient.opacityFrom[l] : a.fill.gradient.opacityFrom;
                                h.indexOf("rgba") > -1 && (c = m.getOpacityFromRGBA(h));
                                var d = void 0 === a.fill.gradient.opacityTo ? e : Array.isArray(a.fill.gradient.opacityTo) ? a.fill.gradient.opacityTo[l] : a.fill.gradient.opacityTo;
                                if (void 0 === a.fill.gradient.gradientToColors || 0 === a.fill.gradient.gradientToColors.length) i = "dark" === a.fill.gradient.shade ? o.shadeColor(-1 * parseFloat(a.fill.gradient.shadeIntensity), t.indexOf("rgb") > -1 ? m.rgb2hex(t) : t) : o.shadeColor(parseFloat(a.fill.gradient.shadeIntensity), t.indexOf("rgb") > -1 ? m.rgb2hex(t) : t);
                                else if (a.fill.gradient.gradientToColors[s.seriesNumber]) {
                                    var u = a.fill.gradient.gradientToColors[s.seriesNumber];
                                    i = u, u.indexOf("rgba") > -1 && (d = m.getOpacityFromRGBA(u))
                                } else i = t;
                                if (a.fill.gradient.inverseColors) {
                                    var g = h;
                                    h = i, i = g
                                }
                                return h.indexOf("rgb") > -1 && (h = m.rgb2hex(h)), i.indexOf("rgb") > -1 && (i = m.rgb2hex(i)), n.drawGradient(r, h, i, c, d, s.size, a.fill.gradient.stops, a.fill.gradient.colorStops, l)
                            }
                        }]), t
                    }(),
                    T = function () {
                        function t(e, l) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "setGlobalMarkerSize",
                            value: function () {
                                var t = this.w;
                                if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [t.config.markers.size], t.globals.markers.size.length > 0) {
                                    if (t.globals.markers.size.length < t.globals.series.length + 1)
                                        for (var e = 0; e <= t.globals.series.length; e++) void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0])
                                } else t.globals.markers.size = t.config.series.map((function (e) {
                                    return t.config.markers.size
                                }))
                            }
                        }, {
                            key: "plotChartMarkers",
                            value: function (t, e, l, i) {
                                var a, s = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
                                    n = this.w,
                                    o = e,
                                    r = t,
                                    h = null,
                                    c = new w(this.ctx);
                                if ((n.globals.markers.size[e] > 0 || s) && (h = c.group({
                                        class: s ? "" : "apexcharts-series-markers"
                                    })).attr("clip-path", "url(#gridRectMarkerMask".concat(n.globals.cuid, ")")), Array.isArray(r.x))
                                    for (var d = 0; d < r.x.length; d++) {
                                        var u = l;
                                        1 === l && 0 === d && (u = 0), 1 === l && 1 === d && (u = 1);
                                        var g = "apexcharts-marker";
                                        "line" !== n.config.chart.type && "area" !== n.config.chart.type || n.globals.comboCharts || n.config.tooltip.intersect || (g += " no-pointer-events");
                                        var p = Array.isArray(n.config.markers.size) ? n.globals.markers.size[e] > 0 : n.config.markers.size > 0;
                                        if (p || s) {
                                            m.isNumber(r.y[d]) ? g += " w".concat(m.randomId()) : g = "apexcharts-nullpoint";
                                            var f = this.getMarkerConfig({
                                                cssClass: g,
                                                seriesIndex: e,
                                                dataPointIndex: u
                                            });
                                            n.config.series[o].data[u] && (n.config.series[o].data[u].fillColor && (f.pointFillColor = n.config.series[o].data[u].fillColor), n.config.series[o].data[u].strokeColor && (f.pointStrokeColor = n.config.series[o].data[u].strokeColor)), i && (f.pSize = i), (a = c.drawMarker(r.x[d], r.y[d], f)).attr("rel", u), a.attr("j", u), a.attr("index", e), a.node.setAttribute("default-marker-size", f.pSize);
                                            var v = new y(this.ctx);
                                            v.setSelectionFilter(a, e, u), this.addEvents(a), h && h.add(a)
                                        } else void 0 === n.globals.pointsArray[e] && (n.globals.pointsArray[e] = []), n.globals.pointsArray[e].push([r.x[d], r.y[d]])
                                    }
                                return h
                            }
                        }, {
                            key: "getMarkerConfig",
                            value: function (t) {
                                var e = t.cssClass,
                                    l = t.seriesIndex,
                                    i = t.dataPointIndex,
                                    a = void 0 === i ? null : i,
                                    s = t.finishRadius,
                                    n = void 0 === s ? null : s,
                                    o = this.w,
                                    r = this.getMarkerStyle(l),
                                    h = o.globals.markers.size[l],
                                    c = o.config.markers;
                                return null !== a && c.discrete.length && c.discrete.map((function (t) {
                                    t.seriesIndex === l && t.dataPointIndex === a && (r.pointStrokeColor = t.strokeColor, r.pointFillColor = t.fillColor, h = t.size, r.pointShape = t.shape)
                                })), {
                                    pSize: null === n ? h : n,
                                    pRadius: c.radius,
                                    width: Array.isArray(c.width) ? c.width[l] : c.width,
                                    height: Array.isArray(c.height) ? c.height[l] : c.height,
                                    pointStrokeWidth: Array.isArray(c.strokeWidth) ? c.strokeWidth[l] : c.strokeWidth,
                                    pointStrokeColor: r.pointStrokeColor,
                                    pointFillColor: r.pointFillColor,
                                    shape: r.pointShape || (Array.isArray(c.shape) ? c.shape[l] : c.shape),
                                    class: e,
                                    pointStrokeOpacity: Array.isArray(c.strokeOpacity) ? c.strokeOpacity[l] : c.strokeOpacity,
                                    pointStrokeDashArray: Array.isArray(c.strokeDashArray) ? c.strokeDashArray[l] : c.strokeDashArray,
                                    pointFillOpacity: Array.isArray(c.fillOpacity) ? c.fillOpacity[l] : c.fillOpacity,
                                    seriesIndex: l
                                }
                            }
                        }, {
                            key: "addEvents",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx);
                                t.node.addEventListener("mouseenter", l.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener("mouseleave", l.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener("mousedown", l.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener("click", e.config.markers.onClick), t.node.addEventListener("dblclick", e.config.markers.onDblClick), t.node.addEventListener("touchstart", l.pathMouseDown.bind(this.ctx, t), {
                                    passive: !0
                                })
                            }
                        }, {
                            key: "getMarkerStyle",
                            value: function (t) {
                                var e = this.w,
                                    l = e.globals.markers.colors,
                                    i = e.config.markers.strokeColor || e.config.markers.strokeColors;
                                return {
                                    pointStrokeColor: Array.isArray(i) ? i[t] : i,
                                    pointFillColor: Array.isArray(l) ? l[t] : l
                                }
                            }
                        }]), t
                    }(),
                    I = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled
                        }
                        return h(t, [{
                            key: "draw",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = new w(this.ctx),
                                    s = l.realIndex,
                                    n = l.pointsPos,
                                    o = l.zRatio,
                                    r = l.elParent,
                                    h = a.group({
                                        class: "apexcharts-series-markers apexcharts-series-".concat(i.config.chart.type)
                                    });
                                if (h.attr("clip-path", "url(#gridRectMarkerMask".concat(i.globals.cuid, ")")), Array.isArray(n.x))
                                    for (var c = 0; c < n.x.length; c++) {
                                        var d = e + 1,
                                            u = !0;
                                        0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);
                                        var g = 0,
                                            p = i.globals.markers.size[s];
                                        if (o !== 1 / 0) {
                                            p = i.globals.seriesZ[s][d] / o;
                                            var f = i.config.plotOptions.bubble;
                                            f.minBubbleRadius && p < f.minBubbleRadius && (p = f.minBubbleRadius), f.maxBubbleRadius && p > f.maxBubbleRadius && (p = f.maxBubbleRadius)
                                        }
                                        i.config.chart.animations.enabled || (g = p);
                                        var v = n.x[c],
                                            x = n.y[c];
                                        if (g = g || 0, null !== x && void 0 !== i.globals.series[s][d] || (u = !1), u) {
                                            var m = this.drawPoint(v, x, g, p, s, d, e);
                                            h.add(m)
                                        }
                                        r.add(h)
                                    }
                            }
                        }, {
                            key: "drawPoint",
                            value: function (t, e, l, i, a, s, n) {
                                var o = this.w,
                                    r = a,
                                    h = new b(this.ctx),
                                    c = new y(this.ctx),
                                    d = new P(this.ctx),
                                    u = new T(this.ctx),
                                    g = new w(this.ctx),
                                    p = u.getMarkerConfig({
                                        cssClass: "apexcharts-marker",
                                        seriesIndex: r,
                                        dataPointIndex: s,
                                        finishRadius: "bubble" === o.config.chart.type || o.globals.comboCharts && o.config.series[a] && "bubble" === o.config.series[a].type ? i : null
                                    });
                                i = p.pSize;
                                var f, v = d.fillPath({
                                    seriesNumber: a,
                                    dataPointIndex: s,
                                    color: p.pointFillColor,
                                    patternUnits: "objectBoundingBox",
                                    value: o.globals.series[a][n]
                                });
                                if ("circle" === p.shape ? f = g.drawCircle(l) : "square" !== p.shape && "rect" !== p.shape || (f = g.drawRect(0, 0, p.width - p.pointStrokeWidth / 2, p.height - p.pointStrokeWidth / 2, p.pRadius)), o.config.series[r].data[s] && o.config.series[r].data[s].fillColor && (v = o.config.series[r].data[s].fillColor), f.attr({
                                        x: t - p.width / 2 - p.pointStrokeWidth / 2,
                                        y: e - p.height / 2 - p.pointStrokeWidth / 2,
                                        cx: t,
                                        cy: e,
                                        fill: v,
                                        "fill-opacity": p.pointFillOpacity,
                                        stroke: p.pointStrokeColor,
                                        r: i,
                                        "stroke-width": p.pointStrokeWidth,
                                        "stroke-dasharray": p.pointStrokeDashArray,
                                        "stroke-opacity": p.pointStrokeOpacity
                                    }), o.config.chart.dropShadow.enabled) {
                                    var x = o.config.chart.dropShadow;
                                    c.dropShadow(f, x, a)
                                }
                                if (!this.initialAnim || o.globals.dataChanged || o.globals.resized) o.globals.animationEnded = !0;
                                else {
                                    var m = o.config.chart.animations.speed;
                                    h.animateMarker(f, 0, "circle" === p.shape ? i : {
                                        width: p.width,
                                        height: p.height
                                    }, m, o.globals.easing, (function () {
                                        window.setTimeout((function () {
                                            h.animationCompleted(f)
                                        }), 100)
                                    }))
                                }
                                if (o.globals.dataChanged && "circle" === p.shape)
                                    if (this.dynamicAnim) {
                                        var A, S, k, L, C = o.config.chart.animations.dynamicAnimation.speed;
                                        null != (L = o.globals.previousPaths[a] && o.globals.previousPaths[a][n]) && (A = L.x, S = L.y, k = void 0 !== L.r ? L.r : i);
                                        for (var M = 0; M < o.globals.collapsedSeries.length; M++) o.globals.collapsedSeries[M].index === a && (C = 1, i = 0);
                                        0 === t && 0 === e && (i = 0), h.animateCircle(f, {
                                            cx: A,
                                            cy: S,
                                            r: k
                                        }, {
                                            cx: t,
                                            cy: e,
                                            r: i
                                        }, C, o.globals.easing)
                                    } else f.attr({
                                        r: i
                                    });
                                return f.attr({
                                    rel: s,
                                    j: s,
                                    index: a,
                                    "default-marker-size": i
                                }), c.setSelectionFilter(f, a, s), u.addEvents(f), f.node.classList.add("apexcharts-marker"), f
                            }
                        }, {
                            key: "centerTextInBubble",
                            value: function (t) {
                                var e = this.w;
                                return {
                                    y: t += parseInt(e.config.dataLabels.style.fontSize, 10) / 4
                                }
                            }
                        }]), t
                    }(),
                    O = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "dataLabelsCorrection",
                            value: function (t, e, l, i, a, s, n) {
                                var o = this.w,
                                    r = !1,
                                    h = new w(this.ctx).getTextRects(l, n),
                                    c = h.width,
                                    d = h.height;
                                e < 0 && (e = 0), e > o.globals.gridHeight + d && (e = o.globals.gridHeight + d / 2), void 0 === o.globals.dataLabelsRects[i] && (o.globals.dataLabelsRects[i] = []), o.globals.dataLabelsRects[i].push({
                                    x: t,
                                    y: e,
                                    width: c,
                                    height: d
                                });
                                var u = o.globals.dataLabelsRects[i].length - 2,
                                    g = void 0 !== o.globals.lastDrawnDataLabelsIndexes[i] ? o.globals.lastDrawnDataLabelsIndexes[i][o.globals.lastDrawnDataLabelsIndexes[i].length - 1] : 0;
                                if (void 0 !== o.globals.dataLabelsRects[i][u]) {
                                    var p = o.globals.dataLabelsRects[i][g];
                                    (t > p.x + p.width + 2 || e > p.y + p.height + 2 || t + c < p.x) && (r = !0)
                                }
                                return (0 === a || s) && (r = !0), {
                                    x: t,
                                    y: e,
                                    textRects: h,
                                    drawnextLabel: r
                                }
                            }
                        }, {
                            key: "drawDataLabel",
                            value: function (t, e, l) {
                                var i = this,
                                    a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 2,
                                    s = this.w,
                                    n = new w(this.ctx),
                                    o = s.config.dataLabels,
                                    r = 0,
                                    h = 0,
                                    c = l,
                                    d = null;
                                if (!o.enabled || !Array.isArray(t.x)) return d;
                                d = n.group({
                                    class: "apexcharts-data-labels"
                                });
                                for (var u = 0; u < t.x.length; u++)
                                    if (r = t.x[u] + o.offsetX, h = t.y[u] + o.offsetY + a, !isNaN(r)) {
                                        1 === l && 0 === u && (c = 0), 1 === l && 1 === u && (c = 1);
                                        var g = s.globals.series[e][c],
                                            p = "",
                                            f = function (t) {
                                                return s.config.dataLabels.formatter(t, {
                                                    ctx: i.ctx,
                                                    seriesIndex: e,
                                                    dataPointIndex: c,
                                                    w: s
                                                })
                                            };
                                        if ("bubble" === s.config.chart.type) {
                                            p = f(g = s.globals.seriesZ[e][c]), h = t.y[u];
                                            var v = new I(this.ctx),
                                                x = v.centerTextInBubble(h, e, c);
                                            h = x.y
                                        } else void 0 !== g && (p = f(g));
                                        this.plotDataLabelsText({
                                            x: r,
                                            y: h,
                                            text: p,
                                            i: e,
                                            j: c,
                                            parent: d,
                                            offsetCorrection: !0,
                                            dataLabelsConfig: s.config.dataLabels
                                        })
                                    } return d
                            }
                        }, {
                            key: "plotDataLabelsText",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx),
                                    i = t.x,
                                    a = t.y,
                                    s = t.i,
                                    n = t.j,
                                    o = t.text,
                                    r = t.textAnchor,
                                    h = t.fontSize,
                                    c = t.parent,
                                    d = t.dataLabelsConfig,
                                    u = t.color,
                                    g = t.alwaysDrawDataLabel,
                                    p = t.offsetCorrection;
                                if (!(Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(s) < 0)) {
                                    var f = {
                                        x: i,
                                        y: a,
                                        drawnextLabel: !0,
                                        textRects: null
                                    };
                                    p && (f = this.dataLabelsCorrection(i, a, o, s, n, g, parseInt(d.style.fontSize, 10))), e.globals.zoomed || (i = f.x, a = f.y), f.textRects && (i < -10 - f.textRects.width || i > e.globals.gridWidth + f.textRects.width + 10) && (o = "");
                                    var v = e.globals.dataLabels.style.colors[s];
                                    (("bar" === e.config.chart.type || "rangeBar" === e.config.chart.type) && e.config.plotOptions.bar.distributed || e.config.dataLabels.distributed) && (v = e.globals.dataLabels.style.colors[n]), "function" == typeof v && (v = v({
                                        series: e.globals.series,
                                        seriesIndex: s,
                                        dataPointIndex: n,
                                        w: e
                                    })), u && (v = u);
                                    var x = d.offsetX,
                                        m = d.offsetY;
                                    if ("bar" !== e.config.chart.type && "rangeBar" !== e.config.chart.type || (x = 0, m = 0), f.drawnextLabel) {
                                        var b = l.drawText({
                                            width: 100,
                                            height: parseInt(d.style.fontSize, 10),
                                            x: i + x,
                                            y: a + m,
                                            foreColor: v,
                                            textAnchor: r || d.textAnchor,
                                            text: o,
                                            fontSize: h || d.style.fontSize,
                                            fontFamily: d.style.fontFamily,
                                            fontWeight: d.style.fontWeight || "normal"
                                        });
                                        if (b.attr({
                                                class: "apexcharts-datalabel",
                                                cx: i,
                                                cy: a
                                            }), d.dropShadow.enabled) {
                                            var A = d.dropShadow;
                                            new y(this.ctx).dropShadow(b, A)
                                        }
                                        c.add(b), void 0 === e.globals.lastDrawnDataLabelsIndexes[s] && (e.globals.lastDrawnDataLabelsIndexes[s] = []), e.globals.lastDrawnDataLabelsIndexes[s].push(n)
                                    }
                                }
                            }
                        }, {
                            key: "addBackgroundToDataLabel",
                            value: function (t, e) {
                                var l = this.w,
                                    i = l.config.dataLabels.background,
                                    a = i.padding,
                                    s = i.padding / 2,
                                    n = e.width,
                                    o = e.height,
                                    r = new w(this.ctx).drawRect(e.x - a, e.y - s / 2, n + 2 * a, o + s, i.borderRadius, "transparent" === l.config.chart.background ? "#fff" : l.config.chart.background, i.opacity, i.borderWidth, i.borderColor);
                                return i.dropShadow.enabled && new y(this.ctx).dropShadow(r, i.dropShadow), r
                            }
                        }, {
                            key: "dataLabelsBackground",
                            value: function () {
                                var t = this.w;
                                if ("bubble" !== t.config.chart.type)
                                    for (var e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels text"), l = 0; l < e.length; l++) {
                                        var i = e[l],
                                            a = i.getBBox(),
                                            s = null;
                                        if (a.width && a.height && (s = this.addBackgroundToDataLabel(i, a)), s) {
                                            i.parentNode.insertBefore(s.node, i);
                                            var n = i.getAttribute("fill");
                                            !t.config.chart.animations.enabled || t.globals.resized || t.globals.dataChanged ? s.attr({
                                                fill: n
                                            }) : s.animate().attr({
                                                fill: n
                                            }), i.setAttribute("fill", t.config.dataLabels.background.foreColor)
                                        }
                                    }
                            }
                        }, {
                            key: "bringForward",
                            value: function () {
                                for (var t = this.w, e = t.globals.dom.baseEl.querySelectorAll(".apexcharts-datalabels"), l = t.globals.dom.baseEl.querySelector(".apexcharts-plot-series:last-child"), i = 0; i < e.length; i++) l && l.insertBefore(e[i], l.nextSibling)
                            }
                        }]), t
                    }(),
                    D = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.barCtx = e
                        }
                        return h(t, [{
                            key: "handleBarDataLabels",
                            value: function (t) {
                                var e = t.x,
                                    l = t.y,
                                    i = t.y1,
                                    a = t.y2,
                                    s = t.i,
                                    n = t.j,
                                    o = t.realIndex,
                                    r = t.series,
                                    h = t.barHeight,
                                    c = t.barWidth,
                                    d = t.barYPosition,
                                    u = t.visibleSeries,
                                    g = t.renderedPath,
                                    p = this.w,
                                    f = new w(this.barCtx.ctx),
                                    v = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[o] : this.barCtx.strokeWidth,
                                    x = e + parseFloat(c * u),
                                    m = l + parseFloat(h * u);
                                p.globals.isXNumeric && !p.globals.isBarHorizontal && (x = e + parseFloat(c * (u + 1)), m = l + parseFloat(h * (u + 1)) - v);
                                var b, y = e,
                                    A = l,
                                    S = p.config.dataLabels,
                                    k = this.barCtx.barOptions.dataLabels;
                                void 0 !== d && this.barCtx.isRangeBar && (m = d, A = d);
                                var L = S.offsetX,
                                    C = S.offsetY,
                                    M = {
                                        width: 0,
                                        height: 0
                                    };
                                if (p.config.dataLabels.enabled) {
                                    var z = this.barCtx.series[s][n];
                                    M = f.getTextRects(p.globals.yLabelFormatters[0](z), parseFloat(S.style.fontSize))
                                }
                                var E = {
                                    x: e,
                                    y: l,
                                    i: s,
                                    j: n,
                                    renderedPath: g,
                                    bcx: x,
                                    bcy: m,
                                    barHeight: h,
                                    barWidth: c,
                                    textRects: M,
                                    strokeWidth: v,
                                    dataLabelsX: y,
                                    dataLabelsY: A,
                                    barDataLabelsConfig: k,
                                    offX: L,
                                    offY: C
                                };
                                return b = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(E) : this.calculateColumnsDataLabelsPosition(E), g.attr({
                                    cy: b.bcy,
                                    cx: b.bcx,
                                    j: n,
                                    val: r[s][n],
                                    barHeight: h,
                                    barWidth: c
                                }), this.drawCalculatedDataLabels({
                                    x: b.dataLabelsX,
                                    y: b.dataLabelsY,
                                    val: this.barCtx.isRangeBar ? [i, a] : r[s][n],
                                    i: o,
                                    j: n,
                                    barWidth: c,
                                    barHeight: h,
                                    textRects: M,
                                    dataLabelsConfig: S
                                })
                            }
                        }, {
                            key: "calculateColumnsDataLabelsPosition",
                            value: function (t) {
                                var e, l = this.w,
                                    i = t.i,
                                    a = t.j,
                                    s = t.y,
                                    n = t.bcx,
                                    o = t.barWidth,
                                    r = t.barHeight,
                                    h = t.textRects,
                                    c = t.dataLabelsY,
                                    d = t.barDataLabelsConfig,
                                    u = t.strokeWidth,
                                    g = t.offX,
                                    p = t.offY;
                                r = Math.abs(r);
                                var f = "vertical" === l.config.plotOptions.bar.dataLabels.orientation;
                                n -= u / 2;
                                var v = l.globals.gridWidth / l.globals.dataPoints;
                                e = l.globals.isXNumeric ? n - o / 2 + g : n - v + o / 2 + g, f && (e = e + h.height / 2 - u / 2 - 2);
                                var x = this.barCtx.series[i][a] < 0,
                                    m = s;
                                switch (this.barCtx.isReversed && (m = s - r + (x ? 2 * r : 0), s -= r), d.position) {
                                    case "center":
                                        c = f ? x ? m + r / 2 + p : m + r / 2 - p : x ? m - r / 2 + h.height / 2 + p : m + r / 2 + h.height / 2 - p;
                                        break;
                                    case "bottom":
                                        c = f ? x ? m + r + p : m + r - p : x ? m - r + h.height + u + p : m + r - h.height / 2 + u - p;
                                        break;
                                    case "top":
                                        c = f ? x ? m + p : m - p : x ? m - h.height / 2 - p : m + h.height + p
                                }
                                return l.config.chart.stacked || (c < 0 ? c = 0 + u : c + h.height / 3 > l.globals.gridHeight && (c = l.globals.gridHeight - u)), {
                                    bcx: n,
                                    bcy: s,
                                    dataLabelsX: e,
                                    dataLabelsY: c
                                }
                            }
                        }, {
                            key: "calculateBarsDataLabelsPosition",
                            value: function (t) {
                                var e = this.w,
                                    l = t.x,
                                    i = t.i,
                                    a = t.j,
                                    s = t.bcy,
                                    n = t.barHeight,
                                    o = t.barWidth,
                                    r = t.textRects,
                                    h = t.dataLabelsX,
                                    c = t.strokeWidth,
                                    d = t.barDataLabelsConfig,
                                    u = t.offX,
                                    g = t.offY,
                                    p = e.globals.gridHeight / e.globals.dataPoints;
                                o = Math.abs(o);
                                var f = s - (this.barCtx.isRangeBar ? 0 : p) + n / 2 + r.height / 2 + g - 3,
                                    v = this.barCtx.series[i][a] < 0,
                                    x = l;
                                switch (this.barCtx.isReversed && (x = l + o - (v ? 2 * o : 0), l = e.globals.gridWidth - o), d.position) {
                                    case "center":
                                        h = v ? x + o / 2 - u : Math.max(r.width / 2, x - o / 2) + u;
                                        break;
                                    case "bottom":
                                        h = v ? x + o - c - Math.round(r.width / 2) - u : x - o + c + Math.round(r.width / 2) + u;
                                        break;
                                    case "top":
                                        h = v ? x - c + Math.round(r.width / 2) - u : x - c - Math.round(r.width / 2) + u
                                }
                                return e.config.chart.stacked || (h < 0 ? h = h + r.width + c : h + r.width / 2 > e.globals.gridWidth && (h = e.globals.gridWidth - r.width - c)), {
                                    bcx: l,
                                    bcy: s,
                                    dataLabelsX: h,
                                    dataLabelsY: f
                                }
                            }
                        }, {
                            key: "drawCalculatedDataLabels",
                            value: function (t) {
                                var e = t.x,
                                    l = t.y,
                                    i = t.val,
                                    a = t.i,
                                    n = t.j,
                                    o = t.textRects,
                                    r = t.barHeight,
                                    h = t.barWidth,
                                    c = t.dataLabelsConfig,
                                    d = this.w,
                                    u = "rotate(0)";
                                "vertical" === d.config.plotOptions.bar.dataLabels.orientation && (u = "rotate(-90, ".concat(e, ", ").concat(l, ")"));
                                var g = new O(this.barCtx.ctx),
                                    p = new w(this.barCtx.ctx),
                                    f = c.formatter,
                                    v = null,
                                    x = d.globals.collapsedSeriesIndices.indexOf(a) > -1;
                                if (c.enabled && !x) {
                                    v = p.group({
                                        class: "apexcharts-data-labels",
                                        transform: u
                                    });
                                    var m = "";
                                    void 0 !== i && (m = f(i, {
                                        seriesIndex: a,
                                        dataPointIndex: n,
                                        w: d
                                    }));
                                    var b = d.globals.series[a][n] < 0,
                                        y = d.config.plotOptions.bar.dataLabels.position;
                                    "vertical" === d.config.plotOptions.bar.dataLabels.orientation && ("top" === y && (c.textAnchor = b ? "end" : "start"), "center" === y && (c.textAnchor = "middle"), "bottom" === y && (c.textAnchor = b ? "end" : "start")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && h < p.getTextRects(m, parseFloat(c.style.fontSize)).width && (m = ""), d.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? o.width / 1.6 > Math.abs(h) && (m = "") : o.height / 1.6 > Math.abs(r) && (m = ""));
                                    var A = s({}, c);
                                    this.barCtx.isHorizontal && i < 0 && ("start" === c.textAnchor ? A.textAnchor = "end" : "end" === c.textAnchor && (A.textAnchor = "start")), g.plotDataLabelsText({
                                        x: e,
                                        y: l,
                                        text: m,
                                        i: a,
                                        j: n,
                                        parent: v,
                                        dataLabelsConfig: A,
                                        alwaysDrawDataLabel: !0,
                                        offsetCorrection: !0
                                    })
                                }
                                return v
                            }
                        }]), t
                    }(),
                    N = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.legendInactiveClass = "legend-mouseover-inactive"
                        }
                        return h(t, [{
                            key: "getAllSeriesEls",
                            value: function () {
                                return this.w.globals.dom.baseEl.getElementsByClassName("apexcharts-series")
                            }
                        }, {
                            key: "getSeriesByName",
                            value: function (t) {
                                return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner .apexcharts-series[seriesName='".concat(m.escapeString(t), "']"))
                            }
                        }, {
                            key: "isSeriesHidden",
                            value: function (t) {
                                var e = this.getSeriesByName(t),
                                    l = parseInt(e.getAttribute("data:realIndex"), 10);
                                return {
                                    isHidden: e.classList.contains("apexcharts-series-collapsed"),
                                    realIndex: l
                                }
                            }
                        }, {
                            key: "addCollapsedClassToSeries",
                            value: function (t, e) {
                                var l = this.w;

                                function i(l) {
                                    for (var i = 0; i < l.length; i++) l[i].index === e && t.node.classList.add("apexcharts-series-collapsed")
                                }
                                i(l.globals.collapsedSeries), i(l.globals.ancillaryCollapsedSeries)
                            }
                        }, {
                            key: "toggleSeries",
                            value: function (t) {
                                var e = this.isSeriesHidden(t);
                                return this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, e.isHidden), e.isHidden
                            }
                        }, {
                            key: "showSeries",
                            value: function (t) {
                                var e = this.isSeriesHidden(t);
                                e.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !0)
                            }
                        }, {
                            key: "hideSeries",
                            value: function (t) {
                                var e = this.isSeriesHidden(t);
                                e.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !1)
                            }
                        }, {
                            key: "resetSeries",
                            value: function () {
                                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                                    e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                    l = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                    i = this.w,
                                    a = m.clone(i.globals.initialSeries);
                                i.globals.previousPaths = [], l ? (i.globals.collapsedSeries = [], i.globals.ancillaryCollapsedSeries = [], i.globals.collapsedSeriesIndices = [], i.globals.ancillaryCollapsedSeriesIndices = []) : a = this.emptyCollapsedSeries(a), i.config.series = a, t && (e && (i.globals.zoomed = !1, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(a, i.config.chart.animations.dynamicAnimation.enabled))
                            }
                        }, {
                            key: "emptyCollapsedSeries",
                            value: function (t) {
                                for (var e = this.w, l = 0; l < t.length; l++) e.globals.collapsedSeriesIndices.indexOf(l) > -1 && (t[l].data = []);
                                return t
                            }
                        }, {
                            key: "toggleSeriesOnHover",
                            value: function (t, e) {
                                var l = this.w;
                                e || (e = t.target);
                                var i = l.globals.dom.baseEl.querySelectorAll(".apexcharts-series, .apexcharts-datalabels");
                                if ("mousemove" === t.type) {
                                    var a = parseInt(e.getAttribute("rel"), 10) - 1,
                                        s = null,
                                        n = null;
                                    l.globals.axisCharts || "radialBar" === l.config.chart.type ? l.globals.axisCharts ? (s = l.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(a, "']")), n = l.globals.dom.baseEl.querySelector(".apexcharts-datalabels[data\\:realIndex='".concat(a, "']"))) : s = l.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a + 1, "']")) : s = l.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(a + 1, "'] path"));
                                    for (var o = 0; o < i.length; o++) i[o].classList.add(this.legendInactiveClass);
                                    null !== s && (l.globals.axisCharts || s.parentNode.classList.remove(this.legendInactiveClass), s.classList.remove(this.legendInactiveClass), null !== n && n.classList.remove(this.legendInactiveClass))
                                } else if ("mouseout" === t.type)
                                    for (var r = 0; r < i.length; r++) i[r].classList.remove(this.legendInactiveClass)
                            }
                        }, {
                            key: "highlightRangeInSeries",
                            value: function (t, e) {
                                var l = this,
                                    i = this.w,
                                    a = i.globals.dom.baseEl.getElementsByClassName("apexcharts-heatmap-rect"),
                                    s = function (t) {
                                        for (var e = 0; e < a.length; e++) a[e].classList[t](l.legendInactiveClass)
                                    };
                                if ("mousemove" === t.type) {
                                    var n = parseInt(e.getAttribute("rel"), 10) - 1;
                                    s("add"),
                                        function (t) {
                                            for (var e = 0; e < a.length; e++) {
                                                var i = parseInt(a[e].getAttribute("val"), 10);
                                                i >= t.from && i <= t.to && a[e].classList.remove(l.legendInactiveClass)
                                            }
                                        }(i.config.plotOptions.heatmap.colorScale.ranges[n])
                                } else "mouseout" === t.type && s("remove")
                            }
                        }, {
                            key: "getActiveConfigSeriesIndex",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                                    e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "asc",
                                    l = this.w,
                                    i = 0;
                                if (l.config.series.length > 1)
                                    for (var a = l.config.series.map((function (e, i) {
                                            var a = !1;
                                            return t && (a = "bar" === l.config.series[i].type || "column" === l.config.series[i].type), e.data && e.data.length > 0 && !a ? i : -1
                                        })), s = "asc" === e ? 0 : a.length - 1;
                                        "asc" === e ? s < a.length : s >= 0;
                                        "asc" === e ? s++ : s--)
                                        if (-1 !== a[s]) {
                                            i = a[s];
                                            break
                                        } return i
                            }
                        }, {
                            key: "getPreviousPaths",
                            value: function () {
                                var t = this.w;

                                function e(e, l, i) {
                                    for (var a = e[l].childNodes, s = {
                                            type: i,
                                            paths: [],
                                            realIndex: e[l].getAttribute("data:realIndex")
                                        }, n = 0; n < a.length; n++)
                                        if (a[n].hasAttribute("pathTo")) {
                                            var o = a[n].getAttribute("pathTo");
                                            s.paths.push({
                                                d: o
                                            })
                                        } t.globals.previousPaths.push(s)
                                }
                                t.globals.previousPaths = [], ["line", "area", "bar", "rangebar", "candlestick", "radar"].forEach((function (l) {
                                    for (var i, a = (i = l, t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(i, "-series .apexcharts-series"))), s = 0; s < a.length; s++) e(a, s, l)
                                })), this.handlePrevBubbleScatterPaths("bubble"), this.handlePrevBubbleScatterPaths("scatter");
                                var l = t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t.config.chart.type, " .apexcharts-series"));
                                if (l.length > 0)
                                    for (var i = function (e) {
                                            for (var l = t.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t.config.chart.type, " .apexcharts-series[data\\:realIndex='").concat(e, "'] rect")), i = [], a = function (t) {
                                                    var e = function (e) {
                                                            return l[t].getAttribute(e)
                                                        },
                                                        a = {
                                                            x: parseFloat(e("x")),
                                                            y: parseFloat(e("y")),
                                                            width: parseFloat(e("width")),
                                                            height: parseFloat(e("height"))
                                                        };
                                                    i.push({
                                                        rect: a,
                                                        color: l[t].getAttribute("color")
                                                    })
                                                }, s = 0; s < l.length; s++) a(s);
                                            t.globals.previousPaths.push(i)
                                        }, a = 0; a < l.length; a++) i(a);
                                t.globals.axisCharts || (t.globals.previousPaths = t.globals.series)
                            }
                        }, {
                            key: "handlePrevBubbleScatterPaths",
                            value: function (t) {
                                var e = this.w,
                                    l = e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t, "-series .apexcharts-series"));
                                if (l.length > 0)
                                    for (var i = 0; i < l.length; i++) {
                                        for (var a = e.globals.dom.baseEl.querySelectorAll(".apexcharts-".concat(t, "-series .apexcharts-series[data\\:realIndex='").concat(i, "'] circle")), s = [], n = 0; n < a.length; n++) s.push({
                                            x: a[n].getAttribute("cx"),
                                            y: a[n].getAttribute("cy"),
                                            r: a[n].getAttribute("r")
                                        });
                                        e.globals.previousPaths.push(s)
                                    }
                            }
                        }, {
                            key: "clearPreviousPaths",
                            value: function () {
                                var t = this.w;
                                t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1
                            }
                        }, {
                            key: "handleNoData",
                            value: function () {
                                var t = this.w,
                                    e = t.config.noData,
                                    l = new w(this.ctx),
                                    i = t.globals.svgWidth / 2,
                                    a = t.globals.svgHeight / 2,
                                    s = "middle";
                                if (t.globals.noData = !0, t.globals.animationEnded = !0, "left" === e.align ? (i = 10, s = "start") : "right" === e.align && (i = t.globals.svgWidth - 10, s = "end"), "top" === e.verticalAlign ? a = 50 : "bottom" === e.verticalAlign && (a = t.globals.svgHeight - 50), i += e.offsetX, a = a + parseInt(e.style.fontSize, 10) + 2 + e.offsetY, void 0 !== e.text && "" !== e.text) {
                                    var n = l.drawText({
                                        x: i,
                                        y: a,
                                        text: e.text,
                                        textAnchor: s,
                                        fontSize: e.style.fontSize,
                                        fontFamily: e.style.fontFamily,
                                        foreColor: e.style.color,
                                        opacity: 1,
                                        class: "apexcharts-text-nodata"
                                    });
                                    t.globals.dom.Paper.add(n)
                                }
                            }
                        }, {
                            key: "setNullSeriesToZeroValues",
                            value: function (t) {
                                for (var e = this.w, l = 0; l < t.length; l++)
                                    if (0 === t[l].length)
                                        for (var i = 0; i < t[e.globals.maxValsInArrayIndex].length; i++) t[l].push(0);
                                return t
                            }
                        }, {
                            key: "hasAllSeriesEqualX",
                            value: function () {
                                for (var t = !0, e = this.w, l = this.filteredSeriesX(), i = 0; i < l.length - 1; i++)
                                    if (l[i][0] !== l[i + 1][0]) {
                                        t = !1;
                                        break
                                    } return e.globals.allSeriesHasEqualX = t, t
                            }
                        }, {
                            key: "filteredSeriesX",
                            value: function () {
                                return this.w.globals.seriesX.map((function (t) {
                                    return t.length > 0 ? t : []
                                }))
                            }
                        }]), t
                    }(),
                    X = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.barCtx = e
                        }
                        return h(t, [{
                            key: "initVariables",
                            value: function (t) {
                                var e = this.w;
                                this.barCtx.series = t, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;
                                for (var l = 0; l < t.length; l++)
                                    if (t[l].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t[l].length), e.globals.isXNumeric)
                                        for (var i = 0; i < t[l].length; i++) e.globals.seriesX[l][i] > e.globals.minX && e.globals.seriesX[l][i] < e.globals.maxX && this.barCtx.visibleItems++;
                                    else this.barCtx.visibleItems = e.globals.dataPoints;
                                0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], this.barCtx.radiusOnSeriesNumber = t.length - 1, e.globals.comboCharts || this.checkZeroSeries({
                                    series: t
                                })
                            }
                        }, {
                            key: "initialPositions",
                            value: function () {
                                var t, e, l, i, a, s, n, o, r = this.w,
                                    h = r.globals.dataPoints;
                                this.barCtx.isRangeBar && (h = r.globals.labels.length);
                                var c = this.barCtx.seriesLen;
                                if (r.config.plotOptions.bar.rangeBarGroupRows && (c = 1), this.barCtx.isHorizontal) a = (l = r.globals.gridHeight / h) / c, r.globals.isXNumeric && (a = (l = r.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), a = a * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, o = this.barCtx.baseLineInvertedY + r.globals.padHorizontal + (this.barCtx.isReversed ? r.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), e = (l - a * this.barCtx.seriesLen) / 2;
                                else {
                                    if (i = r.globals.gridWidth / this.barCtx.visibleItems, r.config.xaxis.convertedCatToNumeric && (i = r.globals.gridWidth / r.globals.dataPoints), s = i / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, r.globals.isXNumeric) {
                                        var d = this.barCtx.xRatio;
                                        r.config.xaxis.convertedCatToNumeric && (d = this.barCtx.initialXRatio), r.globals.minXDiff && .5 !== r.globals.minXDiff && r.globals.minXDiff / d > 0 && (i = r.globals.minXDiff / d), (s = i / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (s = 1)
                                    }
                                    n = r.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? r.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t = r.globals.padHorizontal + (i - s * this.barCtx.seriesLen) / 2
                                }
                                return {
                                    x: t,
                                    y: e,
                                    yDivision: l,
                                    xDivision: i,
                                    barHeight: a,
                                    barWidth: s,
                                    zeroH: n,
                                    zeroW: o
                                }
                            }
                        }, {
                            key: "getPathFillColor",
                            value: function (t, e, l, i) {
                                var a = this.w,
                                    s = new P(this.barCtx.ctx),
                                    n = null,
                                    o = this.barCtx.barOptions.distributed ? l : e;
                                return this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map((function (i) {
                                    t[e][l] >= i.from && t[e][l] <= i.to && (n = i.color)
                                })), a.config.series[e].data[l] && a.config.series[e].data[l].fillColor && (n = a.config.series[e].data[l].fillColor), s.fillPath({
                                    seriesNumber: this.barCtx.barOptions.distributed ? o : i,
                                    dataPointIndex: l,
                                    color: n,
                                    value: t[e][l]
                                })
                            }
                        }, {
                            key: "getStrokeWidth",
                            value: function (t, e, l) {
                                var i = 0,
                                    a = this.w;
                                return void 0 === this.barCtx.series[t][e] || null === this.barCtx.series[t][e] ? this.barCtx.isNullValue = !0 : this.barCtx.isNullValue = !1, a.config.stroke.show && (this.barCtx.isNullValue || (i = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[l] : this.barCtx.strokeWidth)), i
                            }
                        }, {
                            key: "barBackground",
                            value: function (t) {
                                var e = t.j,
                                    l = t.i,
                                    i = t.x1,
                                    a = t.x2,
                                    s = t.y1,
                                    n = t.y2,
                                    o = t.elSeries,
                                    r = this.w,
                                    h = new w(this.barCtx.ctx),
                                    c = new N(this.barCtx.ctx).getActiveConfigSeriesIndex();
                                if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c === l) {
                                    e >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e -= this.barCtx.barOptions.colors.backgroundBarColors.length);
                                    var d = this.barCtx.barOptions.colors.backgroundBarColors[e],
                                        u = h.drawRect(void 0 !== i ? i : 0, void 0 !== s ? s : 0, void 0 !== a ? a : r.globals.gridWidth, void 0 !== n ? n : r.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d, this.barCtx.barOptions.colors.backgroundBarOpacity);
                                    o.add(u), u.node.classList.add("apexcharts-backgroundBar")
                                }
                            }
                        }, {
                            key: "getColumnPaths",
                            value: function (t) {
                                var e = t.barWidth,
                                    l = t.barXPosition,
                                    i = t.yRatio,
                                    a = t.y1,
                                    s = t.y2,
                                    n = t.strokeWidth,
                                    o = t.series,
                                    r = t.realIndex,
                                    h = t.i,
                                    c = t.j,
                                    d = t.w,
                                    u = new w(this.barCtx.ctx);
                                (n = Array.isArray(n) ? n[r] : n) || (n = 0);
                                var g = {
                                        barWidth: e,
                                        strokeWidth: n,
                                        yRatio: i,
                                        barXPosition: l,
                                        y1: a,
                                        y2: s
                                    },
                                    p = this.getRoundedBars(d, g, o, h, c),
                                    f = l,
                                    v = l + e,
                                    x = u.move(f, a),
                                    m = u.move(f, a),
                                    b = u.line(v - n, a);
                                return d.globals.previousPaths.length > 0 && (m = this.barCtx.getPreviousPath(r, c, !1)), x = x + u.line(f, p.y2) + p.pathWithRadius + u.line(v - n, p.y2) + b + b + "z", m = m + u.line(f, a) + b + b + b + b + b + u.line(f, a), d.config.chart.stacked && (this.barCtx.yArrj.push(p.y2), this.barCtx.yArrjF.push(Math.abs(a - p.y2)), this.barCtx.yArrjVal.push(this.barCtx.series[h][c])), {
                                    pathTo: x,
                                    pathFrom: m
                                }
                            }
                        }, {
                            key: "getBarpaths",
                            value: function (t) {
                                var e = t.barYPosition,
                                    l = t.barHeight,
                                    i = t.x1,
                                    a = t.x2,
                                    s = t.strokeWidth,
                                    n = t.series,
                                    o = t.realIndex,
                                    r = t.i,
                                    h = t.j,
                                    c = t.w,
                                    d = new w(this.barCtx.ctx);
                                (s = Array.isArray(s) ? s[o] : s) || (s = 0);
                                var u = {
                                        barHeight: l,
                                        strokeWidth: s,
                                        barYPosition: e,
                                        x2: a,
                                        x1: i
                                    },
                                    g = this.getRoundedBars(c, u, n, r, h),
                                    p = d.move(i, e),
                                    f = d.move(i, e);
                                c.globals.previousPaths.length > 0 && (f = this.barCtx.getPreviousPath(o, h, !1));
                                var v = e,
                                    x = e + l,
                                    m = d.line(i, x - s);
                                return p = p + d.line(g.x2, v) + g.pathWithRadius + d.line(g.x2, x - s) + m + m + "z", f = f + d.line(i, v) + m + m + m + m + m + d.line(i, v), c.config.chart.stacked && (this.barCtx.xArrj.push(g.x2), this.barCtx.xArrjF.push(Math.abs(i - g.x2)), this.barCtx.xArrjVal.push(this.barCtx.series[r][h])), {
                                    pathTo: p,
                                    pathFrom: f
                                }
                            }
                        }, {
                            key: "getRoundedBars",
                            value: function (t, e, l, i, a) {
                                var s = new w(this.barCtx.ctx),
                                    n = 0,
                                    o = t.config.plotOptions.bar.borderRadius,
                                    r = Array.isArray(o);
                                if (n = r ? o[i > o.length - 1 ? o.length - 1 : i] : o, t.config.chart.stacked && l.length > 1 && i !== this.barCtx.radiusOnSeriesNumber && !r && (n = 0), this.barCtx.isHorizontal) {
                                    var h = "",
                                        c = e.x2;
                                    if (Math.abs(e.x1 - e.x2) < n && (n = Math.abs(e.x1 - e.x2)), void 0 !== l[i][a] || null !== l[i][a]) {
                                        var d = this.barCtx.isReversed ? l[i][a] > 0 : l[i][a] < 0;
                                        d && (n *= -1), c -= n, h = s.quadraticCurve(c + n, e.barYPosition, c + n, e.barYPosition + (d ? -1 * n : n)) + s.line(c + n, e.barYPosition + e.barHeight - e.strokeWidth - (d ? -1 * n : n)) + s.quadraticCurve(c + n, e.barYPosition + e.barHeight - e.strokeWidth, c, e.barYPosition + e.barHeight - e.strokeWidth)
                                    }
                                    return {
                                        pathWithRadius: h,
                                        x2: c
                                    }
                                }
                                var u = "",
                                    g = e.y2;
                                if (Math.abs(e.y1 - e.y2) < n && (n = Math.abs(e.y1 - e.y2)), void 0 !== l[i][a] || null !== l[i][a]) {
                                    var p = l[i][a] < 0;
                                    p && (n *= -1), g += n, u = s.quadraticCurve(e.barXPosition, g - n, e.barXPosition + (p ? -1 * n : n), g - n) + s.line(e.barXPosition + e.barWidth - e.strokeWidth - (p ? -1 * n : n), g - n) + s.quadraticCurve(e.barXPosition + e.barWidth - e.strokeWidth, g - n, e.barXPosition + e.barWidth - e.strokeWidth, g)
                                }
                                return {
                                    pathWithRadius: u,
                                    y2: g
                                }
                            }
                        }, {
                            key: "checkZeroSeries",
                            value: function (t) {
                                for (var e = t.series, l = this.w, i = 0; i < e.length; i++) {
                                    for (var a = 0, s = 0; s < e[l.globals.maxValsInArrayIndex].length; s++) a += e[i][s];
                                    0 === a && this.barCtx.zeroSerieses.push(i)
                                }
                                for (var n = e.length - 1; n >= 0; n--) this.barCtx.zeroSerieses.indexOf(n) > -1 && n === this.radiusOnSeriesNumber && (this.barCtx.radiusOnSeriesNumber -= 1);
                                for (var o = e.length - 1; o >= 0; o--) l.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1)
                            }
                        }, {
                            key: "getXForValue",
                            value: function (t, e) {
                                var l = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                    i = l ? e : null;
                                return null != t && (i = e + t / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t / this.barCtx.invertedYRatio : 0)), i
                            }
                        }, {
                            key: "getYForValue",
                            value: function (t, e) {
                                var l = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                    i = l ? e : null;
                                return null != t && (i = e - t / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), i
                            }
                        }, {
                            key: "getGoalValues",
                            value: function (t, e, l, i, a) {
                                var s = this,
                                    n = this.w,
                                    o = [];
                                return n.globals.seriesGoals[i] && n.globals.seriesGoals[i][a] && Array.isArray(n.globals.seriesGoals[i][a]) && n.globals.seriesGoals[i][a].forEach((function (i) {
                                    var a;
                                    o.push((c(a = {}, t, "x" === t ? s.getXForValue(i.value, e, !1) : s.getYForValue(i.value, l, !1)), c(a, "attrs", i), a))
                                })), o
                            }
                        }, {
                            key: "drawGoalLine",
                            value: function (t) {
                                var e = t.barXPosition,
                                    l = t.barYPosition,
                                    i = t.goalX,
                                    a = t.goalY,
                                    s = t.barWidth,
                                    n = t.barHeight,
                                    o = new w(this.barCtx.ctx),
                                    r = o.group({
                                        className: "apexcharts-bar-goals-groups"
                                    }),
                                    h = null;
                                return this.barCtx.isHorizontal ? Array.isArray(i) && i.forEach((function (t) {
                                    var e = void 0 !== t.attrs.strokeHeight ? t.attrs.strokeHeight : n / 2,
                                        i = l + e + n / 2;
                                    h = o.drawLine(t.x, i - 2 * e, t.x, i, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeWidth ? t.attrs.strokeWidth : 2, t.attrs.strokeLineCap), r.add(h)
                                })) : Array.isArray(a) && a.forEach((function (t) {
                                    var l = void 0 !== t.attrs.strokeWidth ? t.attrs.strokeWidth : s / 2,
                                        i = e + l + s / 2;
                                    h = o.drawLine(i - 2 * l, t.y, i, t.y, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeHeight ? t.attrs.strokeHeight : 2, t.attrs.strokeLineCap), r.add(h)
                                })), r
                            }
                        }]), t
                    }(),
                    R = function () {
                        function t(e, l) {
                            o(this, t), this.ctx = e, this.w = e.w;
                            var i = this.w;
                            this.barOptions = i.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = i.config.stroke.width, this.isNullValue = !1, this.isRangeBar = i.globals.seriesRangeBar.length && this.isHorizontal, this.xyRatios = l, null !== this.xyRatios && (this.xRatio = l.xRatio, this.initialXRatio = l.initialXRatio, this.yRatio = l.yRatio, this.invertedXRatio = l.invertedXRatio, this.invertedYRatio = l.invertedYRatio, this.baseLineY = l.baseLineY, this.baseLineInvertedY = l.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0, this.barHelpers = new X(this)
                        }
                        return h(t, [{
                            key: "draw",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new w(this.ctx),
                                    a = new k(this.ctx, l);
                                t = a.getLogSeries(t), this.series = t, this.yRatio = a.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);
                                var n = i.group({
                                    class: "apexcharts-bar-series apexcharts-plot-series"
                                });
                                l.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn("WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.");
                                for (var o = 0, r = 0; o < t.length; o++, r++) {
                                    var h, c, d, u, g = void 0,
                                        p = void 0,
                                        f = [],
                                        v = [],
                                        x = l.globals.comboCharts ? e[o] : o,
                                        b = i.group({
                                            class: "apexcharts-series",
                                            rel: o + 1,
                                            seriesName: m.escapeString(l.globals.seriesNames[x]),
                                            "data:realIndex": x
                                        });
                                    this.ctx.series.addCollapsedClassToSeries(b, x), t[o].length > 0 && (this.visibleI = this.visibleI + 1);
                                    var y = 0,
                                        A = 0;
                                    this.yRatio.length > 1 && (this.yaxisIndex = x), this.isReversed = l.config.yaxis[this.yaxisIndex] && l.config.yaxis[this.yaxisIndex].reversed;
                                    var S = this.barHelpers.initialPositions();
                                    p = S.y, y = S.barHeight, c = S.yDivision, u = S.zeroW, g = S.x, A = S.barWidth, h = S.xDivision, d = S.zeroH, this.horizontal || v.push(g + A / 2);
                                    for (var L = i.group({
                                            class: "apexcharts-datalabels",
                                            "data:realIndex": x
                                        }), C = i.group({
                                            class: "apexcharts-bar-goals-markers",
                                            style: "pointer-events: none"
                                        }), M = 0; M < l.globals.dataPoints; M++) {
                                        var z = this.barHelpers.getStrokeWidth(o, M, x),
                                            E = null,
                                            P = {
                                                indexes: {
                                                    i: o,
                                                    j: M,
                                                    realIndex: x,
                                                    bc: r
                                                },
                                                x: g,
                                                y: p,
                                                strokeWidth: z,
                                                elSeries: b
                                            };
                                        this.isHorizontal ? (E = this.drawBarPaths(s(s({}, P), {}, {
                                            barHeight: y,
                                            zeroW: u,
                                            yDivision: c
                                        })), A = this.series[o][M] / this.invertedYRatio) : (E = this.drawColumnPaths(s(s({}, P), {}, {
                                            xDivision: h,
                                            barWidth: A,
                                            zeroH: d
                                        })), y = this.series[o][M] / this.yRatio[this.yaxisIndex]);
                                        var T = this.barHelpers.drawGoalLine({
                                            barXPosition: E.barXPosition,
                                            barYPosition: E.barYPosition,
                                            goalX: E.goalX,
                                            goalY: E.goalY,
                                            barHeight: y,
                                            barWidth: A
                                        });
                                        T && C.add(T), p = E.y, g = E.x, M > 0 && v.push(g + A / 2), f.push(p);
                                        var I = this.barHelpers.getPathFillColor(t, o, M, x);
                                        this.renderSeries({
                                            realIndex: x,
                                            pathFill: I,
                                            j: M,
                                            i: o,
                                            pathFrom: E.pathFrom,
                                            pathTo: E.pathTo,
                                            strokeWidth: z,
                                            elSeries: b,
                                            x: g,
                                            y: p,
                                            series: t,
                                            barHeight: y,
                                            barWidth: A,
                                            elDataLabelsWrap: L,
                                            elGoalsMarkers: C,
                                            visibleSeries: this.visibleI,
                                            type: "bar"
                                        })
                                    }
                                    l.globals.seriesXvalues[x] = v, l.globals.seriesYvalues[x] = f, n.add(b)
                                }
                                return n
                            }
                        }, {
                            key: "renderSeries",
                            value: function (t) {
                                var e = t.realIndex,
                                    l = t.pathFill,
                                    i = t.lineFill,
                                    a = t.j,
                                    s = t.i,
                                    n = t.pathFrom,
                                    o = t.pathTo,
                                    r = t.strokeWidth,
                                    h = t.elSeries,
                                    c = t.x,
                                    d = t.y,
                                    u = t.y1,
                                    g = t.y2,
                                    p = t.series,
                                    f = t.barHeight,
                                    v = t.barWidth,
                                    x = t.barYPosition,
                                    m = t.elDataLabelsWrap,
                                    b = t.elGoalsMarkers,
                                    A = t.visibleSeries,
                                    S = t.type,
                                    k = this.w,
                                    L = new w(this.ctx);
                                i || (i = this.barOptions.distributed ? k.globals.stroke.colors[a] : k.globals.stroke.colors[e]), k.config.series[s].data[a] && k.config.series[s].data[a].strokeColor && (i = k.config.series[s].data[a].strokeColor), this.isNullValue && (l = "none");
                                var C = a / k.config.chart.animations.animateGradually.delay * (k.config.chart.animations.speed / k.globals.dataPoints) / 2.4,
                                    M = L.renderPaths({
                                        i: s,
                                        j: a,
                                        realIndex: e,
                                        pathFrom: n,
                                        pathTo: o,
                                        stroke: i,
                                        strokeWidth: r,
                                        strokeLineCap: k.config.stroke.lineCap,
                                        fill: l,
                                        animationDelay: C,
                                        initialSpeed: k.config.chart.animations.speed,
                                        dataChangeSpeed: k.config.chart.animations.dynamicAnimation.speed,
                                        className: "apexcharts-".concat(S, "-area")
                                    });
                                M.attr("clip-path", "url(#gridRectMask".concat(k.globals.cuid, ")"));
                                var z = k.config.forecastDataPoints;
                                z.count > 0 && a >= k.globals.dataPoints - z.count && (M.node.setAttribute("stroke-dasharray", z.dashArray), M.node.setAttribute("stroke-width", z.strokeWidth), M.node.setAttribute("fill-opacity", z.fillOpacity)), void 0 !== u && void 0 !== g && (M.attr("data-range-y1", u), M.attr("data-range-y2", g)), new y(this.ctx).setSelectionFilter(M, e, a), h.add(M);
                                var E = new D(this).handleBarDataLabels({
                                    x: c,
                                    y: d,
                                    y1: u,
                                    y2: g,
                                    i: s,
                                    j: a,
                                    series: p,
                                    realIndex: e,
                                    barHeight: f,
                                    barWidth: v,
                                    barYPosition: x,
                                    renderedPath: M,
                                    visibleSeries: A
                                });
                                return null !== E && m.add(E), h.add(m), b && h.add(b), h
                            }
                        }, {
                            key: "drawBarPaths",
                            value: function (t) {
                                var e = t.indexes,
                                    l = t.barHeight,
                                    i = t.strokeWidth,
                                    a = t.zeroW,
                                    s = t.x,
                                    n = t.y,
                                    o = t.yDivision,
                                    r = t.elSeries,
                                    h = this.w,
                                    c = e.i,
                                    d = e.j;
                                h.globals.isXNumeric && (n = (h.globals.seriesX[c][d] - h.globals.minX) / this.invertedXRatio - l);
                                var u = n + l * this.visibleI;
                                s = this.barHelpers.getXForValue(this.series[c][d], a);
                                var g = this.barHelpers.getBarpaths({
                                    barYPosition: u,
                                    barHeight: l,
                                    x1: a,
                                    x2: s,
                                    strokeWidth: i,
                                    series: this.series,
                                    realIndex: e.realIndex,
                                    i: c,
                                    j: d,
                                    w: h
                                });
                                return h.globals.isXNumeric || (n += o), this.barHelpers.barBackground({
                                    j: d,
                                    i: c,
                                    y1: u - l * this.visibleI,
                                    y2: l * this.seriesLen,
                                    elSeries: r
                                }), {
                                    pathTo: g.pathTo,
                                    pathFrom: g.pathFrom,
                                    x: s,
                                    y: n,
                                    goalX: this.barHelpers.getGoalValues("x", a, null, c, d),
                                    barYPosition: u
                                }
                            }
                        }, {
                            key: "drawColumnPaths",
                            value: function (t) {
                                var e = t.indexes,
                                    l = t.x,
                                    i = t.y,
                                    a = t.xDivision,
                                    s = t.barWidth,
                                    n = t.zeroH,
                                    o = t.strokeWidth,
                                    r = t.elSeries,
                                    h = this.w,
                                    c = e.realIndex,
                                    d = e.i,
                                    u = e.j,
                                    g = e.bc;
                                if (h.globals.isXNumeric) {
                                    var p = c;
                                    h.globals.seriesX[c].length || (p = h.globals.maxValsInArrayIndex), l = (h.globals.seriesX[p][u] - h.globals.minX) / this.xRatio - s * this.seriesLen / 2
                                }
                                var f = l + s * this.visibleI;
                                i = this.barHelpers.getYForValue(this.series[d][u], n);
                                var v = this.barHelpers.getColumnPaths({
                                    barXPosition: f,
                                    barWidth: s,
                                    y1: n,
                                    y2: i,
                                    strokeWidth: o,
                                    series: this.series,
                                    realIndex: e.realIndex,
                                    i: d,
                                    j: u,
                                    w: h
                                });
                                return h.globals.isXNumeric || (l += a), this.barHelpers.barBackground({
                                    bc: g,
                                    j: u,
                                    i: d,
                                    x1: f - o / 2 - s * this.visibleI,
                                    x2: s * this.seriesLen + o / 2,
                                    elSeries: r
                                }), {
                                    pathTo: v.pathTo,
                                    pathFrom: v.pathFrom,
                                    x: l,
                                    y: i,
                                    goalY: this.barHelpers.getGoalValues("y", null, n, d, u),
                                    barXPosition: f
                                }
                            }
                        }, {
                            key: "getPreviousPath",
                            value: function (t, e) {
                                for (var l, i = this.w, a = 0; a < i.globals.previousPaths.length; a++) {
                                    var s = i.globals.previousPaths[a];
                                    s.paths && s.paths.length > 0 && parseInt(s.realIndex, 10) === parseInt(t, 10) && void 0 !== i.globals.previousPaths[a].paths[e] && (l = i.globals.previousPaths[a].paths[e].d)
                                }
                                return l
                            }
                        }]), t
                    }(),
                    Y = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]
                        }
                        return h(t, [{
                            key: "isValidDate",
                            value: function (t) {
                                return !isNaN(this.parseDate(t))
                            }
                        }, {
                            key: "getTimeStamp",
                            value: function (t) {
                                return Date.parse(t) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : new Date(t).getTime() : t
                            }
                        }, {
                            key: "getDate",
                            value: function (t) {
                                return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toUTCString()) : new Date(t)
                            }
                        }, {
                            key: "parseDate",
                            value: function (t) {
                                var e = Date.parse(t);
                                if (!isNaN(e)) return this.getTimeStamp(t);
                                var l = Date.parse(t.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
                                return this.getTimeStamp(l)
                            }
                        }, {
                            key: "parseDateWithTimezone",
                            value: function (t) {
                                return Date.parse(t.replace(/-/g, "/").replace(/[a-z]+/gi, " "))
                            }
                        }, {
                            key: "formatDate",
                            value: function (t, e) {
                                var l = this.w.globals.locale,
                                    i = this.w.config.xaxis.labels.datetimeUTC,
                                    a = ["\0"].concat(v(l.months)),
                                    s = [""].concat(v(l.shortMonths)),
                                    n = [""].concat(v(l.days)),
                                    o = [""].concat(v(l.shortDays));

                                function r(t, e) {
                                    var l = t + "";
                                    for (e = e || 2; l.length < e;) l = "0" + l;
                                    return l
                                }
                                var h = i ? t.getUTCFullYear() : t.getFullYear();
                                e = (e = (e = e.replace(/(^|[^\\])yyyy+/g, "$1" + h)).replace(/(^|[^\\])yy/g, "$1" + h.toString().substr(2, 2))).replace(/(^|[^\\])y/g, "$1" + h);
                                var c = (i ? t.getUTCMonth() : t.getMonth()) + 1;
                                e = (e = (e = (e = e.replace(/(^|[^\\])MMMM+/g, "$1" + a[0])).replace(/(^|[^\\])MMM/g, "$1" + s[0])).replace(/(^|[^\\])MM/g, "$1" + r(c))).replace(/(^|[^\\])M/g, "$1" + c);
                                var d = i ? t.getUTCDate() : t.getDate();
                                e = (e = (e = (e = e.replace(/(^|[^\\])dddd+/g, "$1" + n[0])).replace(/(^|[^\\])ddd/g, "$1" + o[0])).replace(/(^|[^\\])dd/g, "$1" + r(d))).replace(/(^|[^\\])d/g, "$1" + d);
                                var u = i ? t.getUTCHours() : t.getHours(),
                                    g = u > 12 ? u - 12 : 0 === u ? 12 : u;
                                e = (e = (e = (e = e.replace(/(^|[^\\])HH+/g, "$1" + r(u))).replace(/(^|[^\\])H/g, "$1" + u)).replace(/(^|[^\\])hh+/g, "$1" + r(g))).replace(/(^|[^\\])h/g, "$1" + g);
                                var p = i ? t.getUTCMinutes() : t.getMinutes();
                                e = (e = e.replace(/(^|[^\\])mm+/g, "$1" + r(p))).replace(/(^|[^\\])m/g, "$1" + p);
                                var f = i ? t.getUTCSeconds() : t.getSeconds();
                                e = (e = e.replace(/(^|[^\\])ss+/g, "$1" + r(f))).replace(/(^|[^\\])s/g, "$1" + f);
                                var x = i ? t.getUTCMilliseconds() : t.getMilliseconds();
                                e = e.replace(/(^|[^\\])fff+/g, "$1" + r(x, 3)), x = Math.round(x / 10), e = e.replace(/(^|[^\\])ff/g, "$1" + r(x)), x = Math.round(x / 10);
                                var m = u < 12 ? "AM" : "PM";
                                e = (e = (e = e.replace(/(^|[^\\])f/g, "$1" + x)).replace(/(^|[^\\])TT+/g, "$1" + m)).replace(/(^|[^\\])T/g, "$1" + m.charAt(0));
                                var b = m.toLowerCase();
                                e = (e = e.replace(/(^|[^\\])tt+/g, "$1" + b)).replace(/(^|[^\\])t/g, "$1" + b.charAt(0));
                                var y = -t.getTimezoneOffset(),
                                    w = i || !y ? "Z" : y > 0 ? "+" : "-";
                                if (!i) {
                                    var A = (y = Math.abs(y)) % 60;
                                    w += r(Math.floor(y / 60)) + ":" + r(A)
                                }
                                e = e.replace(/(^|[^\\])K/g, "$1" + w);
                                var S = (i ? t.getUTCDay() : t.getDay()) + 1;
                                return (e = (e = (e = (e = e.replace(new RegExp(n[0], "g"), n[S])).replace(new RegExp(o[0], "g"), o[S])).replace(new RegExp(a[0], "g"), a[c])).replace(new RegExp(s[0], "g"), s[c])).replace(/\\(.)/g, "$1")
                            }
                        }, {
                            key: "getTimeUnitsfromTimestamp",
                            value: function (t, e, l) {
                                var i = this.w;
                                void 0 !== i.config.xaxis.min && (t = i.config.xaxis.min), void 0 !== i.config.xaxis.max && (e = i.config.xaxis.max);
                                var a = this.getDate(t),
                                    s = this.getDate(e),
                                    n = this.formatDate(a, "yyyy MM dd HH mm ss fff").split(" "),
                                    o = this.formatDate(s, "yyyy MM dd HH mm ss fff").split(" ");
                                return {
                                    minMillisecond: parseInt(n[6], 10),
                                    maxMillisecond: parseInt(o[6], 10),
                                    minSecond: parseInt(n[5], 10),
                                    maxSecond: parseInt(o[5], 10),
                                    minMinute: parseInt(n[4], 10),
                                    maxMinute: parseInt(o[4], 10),
                                    minHour: parseInt(n[3], 10),
                                    maxHour: parseInt(o[3], 10),
                                    minDate: parseInt(n[2], 10),
                                    maxDate: parseInt(o[2], 10),
                                    minMonth: parseInt(n[1], 10) - 1,
                                    maxMonth: parseInt(o[1], 10) - 1,
                                    minYear: parseInt(n[0], 10),
                                    maxYear: parseInt(o[0], 10)
                                }
                            }
                        }, {
                            key: "isLeapYear",
                            value: function (t) {
                                return t % 4 == 0 && t % 100 != 0 || t % 400 == 0
                            }
                        }, {
                            key: "calculcateLastDaysOfMonth",
                            value: function (t, e, l) {
                                return this.determineDaysOfMonths(t, e) - l
                            }
                        }, {
                            key: "determineDaysOfYear",
                            value: function (t) {
                                var e = 365;
                                return this.isLeapYear(t) && (e = 366), e
                            }
                        }, {
                            key: "determineRemainingDaysOfYear",
                            value: function (t, e, l) {
                                var i = this.daysCntOfYear[e] + l;
                                return e > 1 && this.isLeapYear() && i++, i
                            }
                        }, {
                            key: "determineDaysOfMonths",
                            value: function (t, e) {
                                var l = 30;
                                switch (t = m.monthMod(t), !0) {
                                    case this.months30.indexOf(t) > -1:
                                        2 === t && (l = this.isLeapYear(e) ? 29 : 28);
                                        break;
                                    case this.months31.indexOf(t) > -1:
                                    default:
                                        l = 31
                                }
                                return l
                            }
                        }]), t
                    }(),
                    F = function (t) {
                        d(l, R);
                        var e = f(l);

                        function l() {
                            return o(this, l), e.apply(this, arguments)
                        }
                        return h(l, [{
                            key: "draw",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new w(this.ctx);
                                this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = l.globals.seriesRangeStart, this.seriesRangeEnd = l.globals.seriesRangeEnd, this.barHelpers.initVariables(t);
                                for (var a = i.group({
                                        class: "apexcharts-rangebar-series apexcharts-plot-series"
                                    }), n = 0; n < t.length; n++) {
                                    var o, r, h, c = void 0,
                                        d = void 0,
                                        u = void 0,
                                        g = l.globals.comboCharts ? e[n] : n,
                                        p = i.group({
                                            class: "apexcharts-series",
                                            seriesName: m.escapeString(l.globals.seriesNames[g]),
                                            rel: n + 1,
                                            "data:realIndex": g
                                        });
                                    this.ctx.series.addCollapsedClassToSeries(p, g), t[n].length > 0 && (this.visibleI = this.visibleI + 1);
                                    var f = 0,
                                        v = 0;
                                    this.yRatio.length > 1 && (this.yaxisIndex = g);
                                    var x = this.barHelpers.initialPositions();
                                    d = x.y, h = x.zeroW, c = x.x, v = x.barWidth, o = x.xDivision, r = x.zeroH;
                                    for (var b = i.group({
                                            class: "apexcharts-datalabels",
                                            "data:realIndex": g
                                        }), y = i.group({
                                            class: "apexcharts-rangebar-goals-markers",
                                            style: "pointer-events: none"
                                        }), A = 0; A < l.globals.dataPoints; A++) {
                                        var S = this.barHelpers.getStrokeWidth(n, A, g),
                                            k = this.seriesRangeStart[n][A],
                                            L = this.seriesRangeEnd[n][A],
                                            C = null,
                                            M = null,
                                            z = {
                                                x: c,
                                                y: d,
                                                strokeWidth: S,
                                                elSeries: p
                                            };
                                        if (u = x.yDivision, f = x.barHeight, this.isHorizontal) {
                                            M = d + f * this.visibleI;
                                            var E = this.seriesLen;
                                            l.config.plotOptions.bar.rangeBarGroupRows && (E = 1);
                                            var P = (u - f * E) / 2;
                                            if (void 0 === l.config.series[n].data[A]) break;
                                            if (l.config.series[n].data[A].x) {
                                                var T = this.detectOverlappingBars({
                                                    i: n,
                                                    j: A,
                                                    barYPosition: M,
                                                    srty: P,
                                                    barHeight: f,
                                                    yDivision: u,
                                                    initPositions: x
                                                });
                                                f = T.barHeight, M = T.barYPosition
                                            }
                                            v = (C = this.drawRangeBarPaths(s({
                                                indexes: {
                                                    i: n,
                                                    j: A,
                                                    realIndex: g
                                                },
                                                barHeight: f,
                                                barYPosition: M,
                                                zeroW: h,
                                                yDivision: u,
                                                y1: k,
                                                y2: L
                                            }, z))).barWidth
                                        } else f = (C = this.drawRangeColumnPaths(s({
                                            indexes: {
                                                i: n,
                                                j: A,
                                                realIndex: g
                                            },
                                            zeroH: r,
                                            barWidth: v,
                                            xDivision: o
                                        }, z))).barHeight;
                                        var I = this.barHelpers.drawGoalLine({
                                            barXPosition: C.barXPosition,
                                            barYPosition: M,
                                            goalX: C.goalX,
                                            goalY: C.goalY,
                                            barHeight: f,
                                            barWidth: v
                                        });
                                        I && y.add(I), d = C.y, c = C.x;
                                        var O = this.barHelpers.getPathFillColor(t, n, A, g),
                                            D = l.globals.stroke.colors[g];
                                        this.renderSeries({
                                            realIndex: g,
                                            pathFill: O,
                                            lineFill: D,
                                            j: A,
                                            i: n,
                                            x: c,
                                            y: d,
                                            y1: k,
                                            y2: L,
                                            pathFrom: C.pathFrom,
                                            pathTo: C.pathTo,
                                            strokeWidth: S,
                                            elSeries: p,
                                            series: t,
                                            barHeight: f,
                                            barYPosition: M,
                                            barWidth: v,
                                            elDataLabelsWrap: b,
                                            elGoalsMarkers: y,
                                            visibleSeries: this.visibleI,
                                            type: "rangebar"
                                        })
                                    }
                                    a.add(p)
                                }
                                return a
                            }
                        }, {
                            key: "detectOverlappingBars",
                            value: function (t) {
                                var e = t.i,
                                    l = t.j,
                                    i = t.barYPosition,
                                    a = t.srty,
                                    s = t.barHeight,
                                    n = t.yDivision,
                                    o = t.initPositions,
                                    r = this.w,
                                    h = [],
                                    c = r.config.series[e].data[l].rangeName,
                                    d = r.config.series[e].data[l].x,
                                    u = r.globals.labels.indexOf(d),
                                    g = r.globals.seriesRangeBar[e].findIndex((function (t) {
                                        return t.x === d && t.overlaps.length > 0
                                    }));
                                return i = r.config.plotOptions.bar.rangeBarGroupRows ? a + n * u : a + s * this.visibleI + n * u, g > -1 && !r.config.plotOptions.bar.rangeBarOverlap && (h = r.globals.seriesRangeBar[e][g].overlaps).indexOf(c) > -1 && (i = (s = o.barHeight / h.length) * this.visibleI + n * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + s * (this.visibleI + h.indexOf(c)) + n * u), {
                                    barYPosition: i,
                                    barHeight: s
                                }
                            }
                        }, {
                            key: "drawRangeColumnPaths",
                            value: function (t) {
                                var e = t.indexes,
                                    l = t.x;
                                t.strokeWidth;
                                var i = t.xDivision,
                                    a = t.barWidth,
                                    s = t.zeroH,
                                    n = this.w,
                                    o = e.i,
                                    r = e.j,
                                    h = this.yRatio[this.yaxisIndex],
                                    c = e.realIndex,
                                    d = this.getRangeValue(c, r),
                                    u = Math.min(d.start, d.end),
                                    g = Math.max(d.start, d.end);
                                n.globals.isXNumeric && (l = (n.globals.seriesX[o][r] - n.globals.minX) / this.xRatio - a / 2);
                                var p = l + a * this.visibleI;
                                void 0 === this.series[o][r] || null === this.series[o][r] ? u = s : (u = s - u / h, g = s - g / h);
                                var f = Math.abs(g - u),
                                    v = this.barHelpers.getColumnPaths({
                                        barXPosition: p,
                                        barWidth: a,
                                        y1: u,
                                        y2: g,
                                        strokeWidth: this.strokeWidth,
                                        series: this.seriesRangeEnd,
                                        realIndex: e.realIndex,
                                        i: c,
                                        j: r,
                                        w: n
                                    });
                                return n.globals.isXNumeric || (l += i), {
                                    pathTo: v.pathTo,
                                    pathFrom: v.pathFrom,
                                    barHeight: f,
                                    x: l,
                                    y: g,
                                    goalY: this.barHelpers.getGoalValues("y", null, s, o, r),
                                    barXPosition: p
                                }
                            }
                        }, {
                            key: "drawRangeBarPaths",
                            value: function (t) {
                                var e = t.indexes,
                                    l = t.y,
                                    i = t.y1,
                                    a = t.y2,
                                    s = t.yDivision,
                                    n = t.barHeight,
                                    o = t.barYPosition,
                                    r = t.zeroW,
                                    h = this.w,
                                    c = r + i / this.invertedYRatio,
                                    d = r + a / this.invertedYRatio,
                                    u = Math.abs(d - c),
                                    g = this.barHelpers.getBarpaths({
                                        barYPosition: o,
                                        barHeight: n,
                                        x1: c,
                                        x2: d,
                                        strokeWidth: this.strokeWidth,
                                        series: this.seriesRangeEnd,
                                        i: e.realIndex,
                                        realIndex: e.realIndex,
                                        j: e.j,
                                        w: h
                                    });
                                return h.globals.isXNumeric || (l += s), {
                                    pathTo: g.pathTo,
                                    pathFrom: g.pathFrom,
                                    barWidth: u,
                                    x: d,
                                    goalX: this.barHelpers.getGoalValues("x", r, null, e.realIndex, e.j),
                                    y: l
                                }
                            }
                        }, {
                            key: "getRangeValue",
                            value: function (t, e) {
                                var l = this.w;
                                return {
                                    start: l.globals.seriesRangeStart[t][e],
                                    end: l.globals.seriesRangeEnd[t][e]
                                }
                            }
                        }, {
                            key: "getTooltipValues",
                            value: function (t) {
                                var e = t.ctx,
                                    l = t.seriesIndex,
                                    i = t.dataPointIndex,
                                    a = t.y1,
                                    s = t.y2,
                                    n = t.w,
                                    o = n.globals.seriesRangeStart[l][i],
                                    r = n.globals.seriesRangeEnd[l][i],
                                    h = n.globals.labels[i],
                                    c = n.config.series[l].name ? n.config.series[l].name : "",
                                    d = n.config.tooltip.y.formatter,
                                    u = n.config.tooltip.y.title.formatter,
                                    g = {
                                        w: n,
                                        seriesIndex: l,
                                        dataPointIndex: i,
                                        start: o,
                                        end: r
                                    };
                                "function" == typeof u && (c = u(c, g)), Number.isFinite(a) && Number.isFinite(s) && (o = a, r = s, n.config.series[l].data[i].x && (h = n.config.series[l].data[i].x + ":"), "function" == typeof d && (h = d(h, g)));
                                var p = "",
                                    f = "",
                                    v = n.globals.colors[l];
                                if (void 0 === n.config.tooltip.x.formatter)
                                    if ("datetime" === n.config.xaxis.type) {
                                        var x = new Y(e);
                                        p = x.formatDate(x.getDate(o), n.config.tooltip.x.format), f = x.formatDate(x.getDate(r), n.config.tooltip.x.format)
                                    } else p = o, f = r;
                                else p = n.config.tooltip.x.formatter(o), f = n.config.tooltip.x.formatter(r);
                                return {
                                    start: o,
                                    end: r,
                                    startVal: p,
                                    endVal: f,
                                    ylabel: h,
                                    color: v,
                                    seriesName: c
                                }
                            }
                        }, {
                            key: "buildCustomTooltipHTML",
                            value: function (t) {
                                return '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' + t.color + '">' + (t.seriesName || "") + '</span></div><div> <span class="category">' + t.ylabel + ' </span> <span class="value start-value">' + t.start + '</span> <span class="separator">-</span> <span class="value end-value">' + t.end + "</span></div></div>"
                            }
                        }]), l
                    }(),
                    H = function () {
                        function t(e) {
                            o(this, t), this.opts = e
                        }
                        return h(t, [{
                            key: "line",
                            value: function () {
                                return {
                                    chart: {
                                        animations: {
                                            easing: "swing"
                                        }
                                    },
                                    dataLabels: {
                                        enabled: !1
                                    },
                                    stroke: {
                                        width: 5,
                                        curve: "straight"
                                    },
                                    markers: {
                                        size: 0,
                                        hover: {
                                            sizeOffset: 6
                                        }
                                    },
                                    xaxis: {
                                        crosshairs: {
                                            width: 1
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "sparkline",
                            value: function (t) {
                                return this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = "", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0, m.extend(t, {
                                    grid: {
                                        show: !1,
                                        padding: {
                                            left: 0,
                                            right: 0,
                                            top: 0,
                                            bottom: 0
                                        }
                                    },
                                    legend: {
                                        show: !1
                                    },
                                    xaxis: {
                                        labels: {
                                            show: !1
                                        },
                                        tooltip: {
                                            enabled: !1
                                        },
                                        axisBorder: {
                                            show: !1
                                        },
                                        axisTicks: {
                                            show: !1
                                        }
                                    },
                                    chart: {
                                        toolbar: {
                                            show: !1
                                        },
                                        zoom: {
                                            enabled: !1
                                        }
                                    },
                                    dataLabels: {
                                        enabled: !1
                                    }
                                })
                            }
                        }, {
                            key: "bar",
                            value: function () {
                                return {
                                    chart: {
                                        stacked: !1,
                                        animations: {
                                            easing: "swing"
                                        }
                                    },
                                    plotOptions: {
                                        bar: {
                                            dataLabels: {
                                                position: "center"
                                            }
                                        }
                                    },
                                    dataLabels: {
                                        style: {
                                            colors: ["#fff"]
                                        },
                                        background: {
                                            enabled: !1
                                        }
                                    },
                                    stroke: {
                                        width: 0,
                                        lineCap: "round"
                                    },
                                    fill: {
                                        opacity: .85
                                    },
                                    legend: {
                                        markers: {
                                            shape: "square",
                                            radius: 2,
                                            size: 8
                                        }
                                    },
                                    tooltip: {
                                        shared: !1,
                                        intersect: !0
                                    },
                                    xaxis: {
                                        tooltip: {
                                            enabled: !1
                                        },
                                        tickPlacement: "between",
                                        crosshairs: {
                                            width: "barWidth",
                                            position: "back",
                                            fill: {
                                                type: "gradient"
                                            },
                                            dropShadow: {
                                                enabled: !1
                                            },
                                            stroke: {
                                                width: 0
                                            }
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "candlestick",
                            value: function () {
                                var t = this;
                                return {
                                    stroke: {
                                        width: 1,
                                        colors: ["#333"]
                                    },
                                    fill: {
                                        opacity: 1
                                    },
                                    dataLabels: {
                                        enabled: !1
                                    },
                                    tooltip: {
                                        shared: !0,
                                        custom: function (e) {
                                            var l = e.seriesIndex,
                                                i = e.dataPointIndex,
                                                a = e.w;
                                            return t._getBoxTooltip(a, l, i, ["Open", "High", "", "Low", "Close"], "candlestick")
                                        }
                                    },
                                    states: {
                                        active: {
                                            filter: {
                                                type: "none"
                                            }
                                        }
                                    },
                                    xaxis: {
                                        crosshairs: {
                                            width: 1
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "boxPlot",
                            value: function () {
                                var t = this;
                                return {
                                    chart: {
                                        animations: {
                                            dynamicAnimation: {
                                                enabled: !1
                                            }
                                        }
                                    },
                                    stroke: {
                                        width: 1,
                                        colors: ["#24292e"]
                                    },
                                    dataLabels: {
                                        enabled: !1
                                    },
                                    tooltip: {
                                        shared: !0,
                                        custom: function (e) {
                                            var l = e.seriesIndex,
                                                i = e.dataPointIndex,
                                                a = e.w;
                                            return t._getBoxTooltip(a, l, i, ["Minimum", "Q1", "Median", "Q3", "Maximum"], "boxPlot")
                                        }
                                    },
                                    markers: {
                                        size: 5,
                                        strokeWidth: 1,
                                        strokeColors: "#111"
                                    },
                                    xaxis: {
                                        crosshairs: {
                                            width: 1
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "rangeBar",
                            value: function () {
                                return {
                                    stroke: {
                                        width: 0,
                                        lineCap: "square"
                                    },
                                    plotOptions: {
                                        bar: {
                                            borderRadius: 0,
                                            dataLabels: {
                                                position: "center"
                                            }
                                        }
                                    },
                                    dataLabels: {
                                        enabled: !1,
                                        formatter: function (t, e) {
                                            e.ctx;
                                            var l = e.seriesIndex,
                                                i = e.dataPointIndex,
                                                a = e.w,
                                                s = a.globals.seriesRangeStart[l][i];
                                            return a.globals.seriesRangeEnd[l][i] - s
                                        },
                                        background: {
                                            enabled: !1
                                        },
                                        style: {
                                            colors: ["#fff"]
                                        }
                                    },
                                    tooltip: {
                                        shared: !1,
                                        followCursor: !0,
                                        custom: function (t) {
                                            return t.w.config.plotOptions && t.w.config.plotOptions.bar && t.w.config.plotOptions.bar.horizontal ? function (t) {
                                                var e = new F(t.ctx, null),
                                                    l = e.getTooltipValues(t),
                                                    i = l.color,
                                                    a = l.seriesName,
                                                    s = l.ylabel,
                                                    n = l.startVal,
                                                    o = l.endVal;
                                                return e.buildCustomTooltipHTML({
                                                    color: i,
                                                    seriesName: a,
                                                    ylabel: s,
                                                    start: n,
                                                    end: o
                                                })
                                            }(t) : function (t) {
                                                var e = new F(t.ctx, null),
                                                    l = e.getTooltipValues(t),
                                                    i = l.color,
                                                    a = l.seriesName,
                                                    s = l.ylabel,
                                                    n = l.start,
                                                    o = l.end;
                                                return e.buildCustomTooltipHTML({
                                                    color: i,
                                                    seriesName: a,
                                                    ylabel: s,
                                                    start: n,
                                                    end: o
                                                })
                                            }(t)
                                        }
                                    },
                                    xaxis: {
                                        tickPlacement: "between",
                                        tooltip: {
                                            enabled: !1
                                        },
                                        crosshairs: {
                                            stroke: {
                                                width: 0
                                            }
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "area",
                            value: function () {
                                return {
                                    stroke: {
                                        width: 4
                                    },
                                    fill: {
                                        type: "gradient",
                                        gradient: {
                                            inverseColors: !1,
                                            shade: "light",
                                            type: "vertical",
                                            opacityFrom: .65,
                                            opacityTo: .5,
                                            stops: [0, 100, 100]
                                        }
                                    },
                                    markers: {
                                        size: 0,
                                        hover: {
                                            sizeOffset: 6
                                        }
                                    },
                                    tooltip: {
                                        followCursor: !1
                                    }
                                }
                            }
                        }, {
                            key: "brush",
                            value: function (t) {
                                return m.extend(t, {
                                    chart: {
                                        toolbar: {
                                            autoSelected: "selection",
                                            show: !1
                                        },
                                        zoom: {
                                            enabled: !1
                                        }
                                    },
                                    dataLabels: {
                                        enabled: !1
                                    },
                                    stroke: {
                                        width: 1
                                    },
                                    tooltip: {
                                        enabled: !1
                                    },
                                    xaxis: {
                                        tooltip: {
                                            enabled: !1
                                        }
                                    }
                                })
                            }
                        }, {
                            key: "stacked100",
                            value: function (t) {
                                t.dataLabels = t.dataLabels || {}, t.dataLabels.formatter = t.dataLabels.formatter || void 0;
                                var e = t.dataLabels.formatter;
                                return t.yaxis.forEach((function (e, l) {
                                    t.yaxis[l].min = 0, t.yaxis[l].max = 100
                                })), "bar" === t.chart.type && (t.dataLabels.formatter = e || function (t) {
                                    return "number" == typeof t && t ? t.toFixed(0) + "%" : t
                                }), t
                            }
                        }, {
                            key: "convertCatToNumeric",
                            value: function (t) {
                                return t.xaxis.convertedCatToNumeric = !0, t
                            }
                        }, {
                            key: "convertCatToNumericXaxis",
                            value: function (t, e, l) {
                                t.xaxis.type = "numeric", t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function (t) {
                                    return m.isNumber(t) ? Math.floor(t) : t
                                };
                                var i = t.xaxis.labels.formatter,
                                    a = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;
                                return l && l.length && (a = l.map((function (t) {
                                    return Array.isArray(t) ? t : String(t)
                                }))), a && a.length && (t.xaxis.labels.formatter = function (t) {
                                    return m.isNumber(t) ? i(a[Math.floor(t) - 1]) : i(t)
                                }), t.xaxis.categories = [], t.labels = [], t.xaxis.tickAmount = t.xaxis.tickAmount || "dataPoints", t
                            }
                        }, {
                            key: "bubble",
                            value: function () {
                                return {
                                    dataLabels: {
                                        style: {
                                            colors: ["#fff"]
                                        }
                                    },
                                    tooltip: {
                                        shared: !1,
                                        intersect: !0
                                    },
                                    xaxis: {
                                        crosshairs: {
                                            width: 0
                                        }
                                    },
                                    fill: {
                                        type: "solid",
                                        gradient: {
                                            shade: "light",
                                            inverse: !0,
                                            shadeIntensity: .55,
                                            opacityFrom: .4,
                                            opacityTo: .8
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "scatter",
                            value: function () {
                                return {
                                    dataLabels: {
                                        enabled: !1
                                    },
                                    tooltip: {
                                        shared: !1,
                                        intersect: !0
                                    },
                                    markers: {
                                        size: 6,
                                        strokeWidth: 1,
                                        hover: {
                                            sizeOffset: 2
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "heatmap",
                            value: function () {
                                return {
                                    chart: {
                                        stacked: !1
                                    },
                                    fill: {
                                        opacity: 1
                                    },
                                    dataLabels: {
                                        style: {
                                            colors: ["#fff"]
                                        }
                                    },
                                    stroke: {
                                        colors: ["#fff"]
                                    },
                                    tooltip: {
                                        followCursor: !0,
                                        marker: {
                                            show: !1
                                        },
                                        x: {
                                            show: !1
                                        }
                                    },
                                    legend: {
                                        position: "top",
                                        markers: {
                                            shape: "square",
                                            size: 10,
                                            offsetY: 2
                                        }
                                    },
                                    grid: {
                                        padding: {
                                            right: 20
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "treemap",
                            value: function () {
                                return {
                                    chart: {
                                        zoom: {
                                            enabled: !1
                                        }
                                    },
                                    dataLabels: {
                                        style: {
                                            fontSize: 14,
                                            fontWeight: 600,
                                            colors: ["#fff"]
                                        }
                                    },
                                    stroke: {
                                        show: !0,
                                        width: 2,
                                        colors: ["#fff"]
                                    },
                                    legend: {
                                        show: !1
                                    },
                                    fill: {
                                        gradient: {
                                            stops: [0, 100]
                                        }
                                    },
                                    tooltip: {
                                        followCursor: !0,
                                        x: {
                                            show: !1
                                        }
                                    },
                                    grid: {
                                        padding: {
                                            left: 0,
                                            right: 0
                                        }
                                    },
                                    xaxis: {
                                        crosshairs: {
                                            show: !1
                                        },
                                        tooltip: {
                                            enabled: !1
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "pie",
                            value: function () {
                                return {
                                    chart: {
                                        toolbar: {
                                            show: !1
                                        }
                                    },
                                    plotOptions: {
                                        pie: {
                                            donut: {
                                                labels: {
                                                    show: !1
                                                }
                                            }
                                        }
                                    },
                                    dataLabels: {
                                        formatter: function (t) {
                                            return t.toFixed(1) + "%"
                                        },
                                        style: {
                                            colors: ["#fff"]
                                        },
                                        background: {
                                            enabled: !1
                                        },
                                        dropShadow: {
                                            enabled: !0
                                        }
                                    },
                                    stroke: {
                                        colors: ["#fff"]
                                    },
                                    fill: {
                                        opacity: 1,
                                        gradient: {
                                            shade: "light",
                                            stops: [0, 100]
                                        }
                                    },
                                    tooltip: {
                                        theme: "dark",
                                        fillSeriesColor: !0
                                    },
                                    legend: {
                                        position: "right"
                                    }
                                }
                            }
                        }, {
                            key: "donut",
                            value: function () {
                                return {
                                    chart: {
                                        toolbar: {
                                            show: !1
                                        }
                                    },
                                    dataLabels: {
                                        formatter: function (t) {
                                            return t.toFixed(1) + "%"
                                        },
                                        style: {
                                            colors: ["#fff"]
                                        },
                                        background: {
                                            enabled: !1
                                        },
                                        dropShadow: {
                                            enabled: !0
                                        }
                                    },
                                    stroke: {
                                        colors: ["#fff"]
                                    },
                                    fill: {
                                        opacity: 1,
                                        gradient: {
                                            shade: "light",
                                            shadeIntensity: .35,
                                            stops: [80, 100],
                                            opacityFrom: 1,
                                            opacityTo: 1
                                        }
                                    },
                                    tooltip: {
                                        theme: "dark",
                                        fillSeriesColor: !0
                                    },
                                    legend: {
                                        position: "right"
                                    }
                                }
                            }
                        }, {
                            key: "polarArea",
                            value: function () {
                                return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, {
                                    chart: {
                                        toolbar: {
                                            show: !1
                                        }
                                    },
                                    dataLabels: {
                                        formatter: function (t) {
                                            return t.toFixed(1) + "%"
                                        },
                                        enabled: !1
                                    },
                                    stroke: {
                                        show: !0,
                                        width: 2
                                    },
                                    fill: {
                                        opacity: .7
                                    },
                                    tooltip: {
                                        theme: "dark",
                                        fillSeriesColor: !0
                                    },
                                    legend: {
                                        position: "right"
                                    }
                                }
                            }
                        }, {
                            key: "radar",
                            value: function () {
                                return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {
                                    dataLabels: {
                                        enabled: !1,
                                        style: {
                                            fontSize: "11px"
                                        }
                                    },
                                    stroke: {
                                        width: 2
                                    },
                                    markers: {
                                        size: 3,
                                        strokeWidth: 1,
                                        strokeOpacity: 1
                                    },
                                    fill: {
                                        opacity: .2
                                    },
                                    tooltip: {
                                        shared: !1,
                                        intersect: !0,
                                        followCursor: !0
                                    },
                                    grid: {
                                        show: !1
                                    },
                                    xaxis: {
                                        labels: {
                                            formatter: function (t) {
                                                return t
                                            },
                                            style: {
                                                colors: ["#a8a8a8"],
                                                fontSize: "11px"
                                            }
                                        },
                                        tooltip: {
                                            enabled: !1
                                        },
                                        crosshairs: {
                                            show: !1
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "radialBar",
                            value: function () {
                                return {
                                    chart: {
                                        animations: {
                                            dynamicAnimation: {
                                                enabled: !0,
                                                speed: 800
                                            }
                                        },
                                        toolbar: {
                                            show: !1
                                        }
                                    },
                                    fill: {
                                        gradient: {
                                            shade: "dark",
                                            shadeIntensity: .4,
                                            inverseColors: !1,
                                            type: "diagonal2",
                                            opacityFrom: 1,
                                            opacityTo: 1,
                                            stops: [70, 98, 100]
                                        }
                                    },
                                    legend: {
                                        show: !1,
                                        position: "right"
                                    },
                                    tooltip: {
                                        enabled: !1,
                                        fillSeriesColor: !0
                                    }
                                }
                            }
                        }, {
                            key: "_getBoxTooltip",
                            value: function (t, e, l, i, a) {
                                var s = t.globals.seriesCandleO[e][l],
                                    n = t.globals.seriesCandleH[e][l],
                                    o = t.globals.seriesCandleM[e][l],
                                    r = t.globals.seriesCandleL[e][l],
                                    h = t.globals.seriesCandleC[e][l];
                                return t.config.series[e].type && t.config.series[e].type !== a ? '<div class="apexcharts-custom-tooltip">\n          '.concat(t.config.series[e].name ? t.config.series[e].name : "series-" + (e + 1), ": <strong>").concat(t.globals.series[e][l], "</strong>\n        </div>") : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(t.config.chart.type, '">') + "<div>".concat(i[0], ': <span class="value">') + s + "</span></div>" + "<div>".concat(i[1], ': <span class="value">') + n + "</span></div>" + (o ? "<div>".concat(i[2], ': <span class="value">') + o + "</span></div>" : "") + "<div>".concat(i[3], ': <span class="value">') + r + "</span></div>" + "<div>".concat(i[4], ': <span class="value">') + h + "</span></div></div>"
                            }
                        }]), t
                    }(),
                    B = function () {
                        function t(e) {
                            o(this, t), this.opts = e
                        }
                        return h(t, [{
                            key: "init",
                            value: function (t) {
                                var e = t.responsiveOverride,
                                    l = this.opts,
                                    i = new z,
                                    a = new H(l);
                                this.chartType = l.chart.type, "histogram" === this.chartType && (l.chart.type = "bar", l = m.extend({
                                    plotOptions: {
                                        bar: {
                                            columnWidth: "99.99%"
                                        }
                                    }
                                }, l)), l = this.extendYAxis(l), l = this.extendAnnotations(l);
                                var s = i.init(),
                                    o = {};
                                if (l && "object" === n(l)) {
                                    var r = {};
                                    r = -1 !== ["line", "area", "bar", "candlestick", "boxPlot", "rangeBar", "histogram", "bubble", "scatter", "heatmap", "treemap", "pie", "polarArea", "donut", "radar", "radialBar"].indexOf(l.chart.type) ? a[l.chart.type]() : a.line(), l.chart.brush && l.chart.brush.enabled && (r = a.brush(r)), l.chart.stacked && "100%" === l.chart.stackType && (l = a.stacked100(l)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(l), l.xaxis = l.xaxis || window.Apex.xaxis || {}, e || (l.xaxis.convertedCatToNumeric = !1), ((l = this.checkForCatToNumericXAxis(this.chartType, r, l)).chart.sparkline && l.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (r = a.sparkline(r)), o = m.extend(s, r)
                                }
                                var h = m.extend(o, window.Apex);
                                return s = m.extend(h, l), this.handleUserInputErrors(s)
                            }
                        }, {
                            key: "checkForCatToNumericXAxis",
                            value: function (t, e, l) {
                                var i = new H(l),
                                    a = ("bar" === t || "boxPlot" === t) && l.plotOptions && l.plotOptions.bar && l.plotOptions.bar.horizontal,
                                    s = "pie" === t || "polarArea" === t || "donut" === t || "radar" === t || "radialBar" === t || "heatmap" === t,
                                    n = "datetime" !== l.xaxis.type && "numeric" !== l.xaxis.type,
                                    o = l.xaxis.tickPlacement ? l.xaxis.tickPlacement : e.xaxis && e.xaxis.tickPlacement;
                                return a || s || !n || "between" === o || (l = i.convertCatToNumeric(l)), l
                            }
                        }, {
                            key: "extendYAxis",
                            value: function (t, e) {
                                var l = new z;
                                (void 0 === t.yaxis || !t.yaxis || Array.isArray(t.yaxis) && 0 === t.yaxis.length) && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = m.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [m.extend(l.yAxis, t.yaxis)] : t.yaxis = m.extendArray(t.yaxis, l.yAxis);
                                var i = !1;
                                t.yaxis.forEach((function (t) {
                                    t.logarithmic && (i = !0)
                                }));
                                var a = t.series;
                                return e && !a && (a = e.config.series), i && a.length !== t.yaxis.length && a.length && (t.yaxis = a.map((function (e, i) {
                                    if (e.name || (a[i].name = "series-".concat(i + 1)), t.yaxis[i]) return t.yaxis[i].seriesName = a[i].name, t.yaxis[i];
                                    var s = m.extend(l.yAxis, t.yaxis[0]);
                                    return s.show = !1, s
                                }))), i && a.length > 1 && a.length !== t.yaxis.length && console.warn("A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."), t
                            }
                        }, {
                            key: "extendAnnotations",
                            value: function (t) {
                                return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), this.extendPointAnnotations(t)
                            }
                        }, {
                            key: "extendYAxisAnnotations",
                            value: function (t) {
                                var e = new z;
                                return t.annotations.yaxis = m.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t
                            }
                        }, {
                            key: "extendXAxisAnnotations",
                            value: function (t) {
                                var e = new z;
                                return t.annotations.xaxis = m.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t
                            }
                        }, {
                            key: "extendPointAnnotations",
                            value: function (t) {
                                var e = new z;
                                return t.annotations.points = m.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t
                            }
                        }, {
                            key: "checkForDarkTheme",
                            value: function (t) {
                                t.theme && "dark" === t.theme.mode && (t.tooltip || (t.tooltip = {}), "light" !== t.tooltip.theme && (t.tooltip.theme = "dark"), t.chart.foreColor || (t.chart.foreColor = "#f6f7f8"), t.chart.background || (t.chart.background = "#424242"), t.theme.palette || (t.theme.palette = "palette4"))
                            }
                        }, {
                            key: "handleUserInputErrors",
                            value: function (t) {
                                var e = t;
                                if (e.tooltip.shared && e.tooltip.intersect) throw new Error("tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.");
                                if ("bar" === e.chart.type && e.plotOptions.bar.horizontal) {
                                    if (e.yaxis.length > 1) throw new Error("Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false");
                                    e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1
                                }
                                return "bar" !== e.chart.type && "rangeBar" !== e.chart.type || e.tooltip.shared && "barWidth" === e.xaxis.crosshairs.width && e.series.length > 1 && (e.xaxis.crosshairs.width = "tickWidth"), "candlestick" !== e.chart.type && "boxPlot" !== e.chart.type || e.yaxis[0].reversed && (console.warn("Reversed y-axis in ".concat(e.chart.type, " chart is not supported.")), e.yaxis[0].reversed = !1), Array.isArray(e.stroke.width) && "line" !== e.chart.type && "area" !== e.chart.type && (console.warn("stroke.width option accepts array only for line and area charts. Reverted back to Number"), e.stroke.width = e.stroke.width[0]), e
                            }
                        }]), t
                    }(),
                    W = function () {
                        function t() {
                            o(this, t)
                        }
                        return h(t, [{
                            key: "initGlobalVars",
                            value: function (t) {
                                t.series = [], t.seriesCandleO = [], t.seriesCandleH = [], t.seriesCandleM = [], t.seriesCandleL = [], t.seriesCandleC = [], t.seriesRangeStart = [], t.seriesRangeEnd = [], t.seriesRangeBar = [], t.seriesPercent = [], t.seriesGoals = [], t.seriesX = [], t.seriesZ = [], t.seriesNames = [], t.seriesTotals = [], t.seriesLog = [], t.seriesColors = [], t.stackedSeriesTotals = [], t.seriesXvalues = [], t.seriesYvalues = [], t.labels = [], t.categoryLabels = [], t.timescaleLabels = [], t.noLabelsProvided = !1, t.resizeTimer = null, t.selectionResizeTimer = null, t.delayedElements = [], t.pointsArray = [], t.dataLabelsRects = [], t.isXNumeric = !1, t.xaxisLabelsCount = 0, t.skipLastTimelinelabel = !1, t.skipFirstTimelinelabel = !1, t.isDataXYZ = !1, t.isMultiLineX = !1, t.isMultipleYAxis = !1, t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE, t.minYArr = [], t.maxYArr = [], t.maxX = -Number.MAX_VALUE, t.minX = Number.MAX_VALUE, t.initialMaxX = -Number.MAX_VALUE, t.initialMinX = Number.MAX_VALUE, t.maxDate = 0, t.minDate = Number.MAX_VALUE, t.minZ = Number.MAX_VALUE, t.maxZ = -Number.MAX_VALUE, t.minXDiff = Number.MAX_VALUE, t.yAxisScale = [], t.xAxisScale = null, t.xAxisTicksPositions = [], t.yLabelsCoords = [], t.yTitleCoords = [], t.barPadForNumericAxis = 0, t.padHorizontal = 0, t.xRange = 0, t.yRange = [], t.zRange = 0, t.dataPoints = 0, t.xTickAmount = 0
                            }
                        }, {
                            key: "globalVars",
                            value: function (t) {
                                return {
                                    chartID: null,
                                    cuid: null,
                                    events: {
                                        beforeMount: [],
                                        mounted: [],
                                        updated: [],
                                        clicked: [],
                                        selection: [],
                                        dataPointSelection: [],
                                        zoomed: [],
                                        scrolled: []
                                    },
                                    colors: [],
                                    clientX: null,
                                    clientY: null,
                                    fill: {
                                        colors: []
                                    },
                                    stroke: {
                                        colors: []
                                    },
                                    dataLabels: {
                                        style: {
                                            colors: []
                                        }
                                    },
                                    radarPolygons: {
                                        fill: {
                                            colors: []
                                        }
                                    },
                                    markers: {
                                        colors: [],
                                        size: t.markers.size,
                                        largestSize: 0
                                    },
                                    animationEnded: !1,
                                    isTouchDevice: "ontouchstart" in window || navigator.msMaxTouchPoints,
                                    isDirty: !1,
                                    isExecCalled: !1,
                                    initialConfig: null,
                                    initialSeries: [],
                                    lastXAxis: [],
                                    lastYAxis: [],
                                    columnSeries: null,
                                    labels: [],
                                    timescaleLabels: [],
                                    noLabelsProvided: !1,
                                    allSeriesCollapsed: !1,
                                    collapsedSeries: [],
                                    collapsedSeriesIndices: [],
                                    ancillaryCollapsedSeries: [],
                                    ancillaryCollapsedSeriesIndices: [],
                                    risingSeries: [],
                                    dataFormatXNumeric: !1,
                                    capturedSeriesIndex: -1,
                                    capturedDataPointIndex: -1,
                                    selectedDataPoints: [],
                                    goldenPadding: 35,
                                    invalidLogScale: !1,
                                    ignoreYAxisIndexes: [],
                                    yAxisSameScaleIndices: [],
                                    maxValsInArrayIndex: 0,
                                    radialSize: 0,
                                    selection: void 0,
                                    zoomEnabled: "zoom" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,
                                    panEnabled: "pan" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,
                                    selectionEnabled: "selection" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,
                                    yaxis: null,
                                    mousedown: !1,
                                    lastClientPosition: {},
                                    visibleXRange: void 0,
                                    yValueDecimal: 0,
                                    total: 0,
                                    SVGNS: "http://www.w3.org/2000/svg",
                                    svgWidth: 0,
                                    svgHeight: 0,
                                    noData: !1,
                                    locale: {},
                                    dom: {},
                                    memory: {
                                        methodsToExec: []
                                    },
                                    shouldAnimate: !0,
                                    skipLastTimelinelabel: !1,
                                    skipFirstTimelinelabel: !1,
                                    delayedElements: [],
                                    axisCharts: !0,
                                    isDataXYZ: !1,
                                    resized: !1,
                                    resizeTimer: null,
                                    comboCharts: !1,
                                    dataChanged: !1,
                                    previousPaths: [],
                                    allSeriesHasEqualX: !0,
                                    pointsArray: [],
                                    dataLabelsRects: [],
                                    lastDrawnDataLabelsIndexes: [],
                                    hasNullValues: !1,
                                    easing: null,
                                    zoomed: !1,
                                    gridWidth: 0,
                                    gridHeight: 0,
                                    rotateXLabels: !1,
                                    defaultLabels: !1,
                                    xLabelFormatter: void 0,
                                    yLabelFormatters: [],
                                    xaxisTooltipFormatter: void 0,
                                    ttKeyFormatter: void 0,
                                    ttVal: void 0,
                                    ttZFormatter: void 0,
                                    LINE_HEIGHT_RATIO: 1.618,
                                    xAxisLabelsHeight: 0,
                                    xAxisLabelsWidth: 0,
                                    yAxisLabelsWidth: 0,
                                    scaleX: 1,
                                    scaleY: 1,
                                    translateX: 0,
                                    translateY: 0,
                                    translateYAxisX: [],
                                    yAxisWidths: [],
                                    translateXAxisY: 0,
                                    translateXAxisX: 0,
                                    tooltip: null
                                }
                            }
                        }, {
                            key: "init",
                            value: function (t) {
                                var e = this.globalVars(t);
                                return this.initGlobalVars(e), e.initialConfig = m.extend({}, t), e.initialSeries = m.clone(t.series), e.lastXAxis = m.clone(e.initialConfig.xaxis), e.lastYAxis = m.clone(e.initialConfig.yaxis), e
                            }
                        }]), t
                    }(),
                    G = function () {
                        function t(e) {
                            o(this, t), this.opts = e
                        }
                        return h(t, [{
                            key: "init",
                            value: function () {
                                var t = new B(this.opts).init({
                                    responsiveOverride: !1
                                });
                                return {
                                    config: t,
                                    globals: (new W).init(t)
                                }
                            }
                        }]), t
                    }(),
                    V = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new k(this.ctx)
                        }
                        return h(t, [{
                            key: "isMultiFormat",
                            value: function () {
                                return this.isFormatXY() || this.isFormat2DArray()
                            }
                        }, {
                            key: "isFormatXY",
                            value: function () {
                                var t = this.w.config.series.slice(),
                                    e = new N(this.ctx);
                                if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0
                            }
                        }, {
                            key: "isFormat2DArray",
                            value: function () {
                                var t = this.w.config.series.slice(),
                                    e = new N(this.ctx);
                                if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0
                            }
                        }, {
                            key: "handleFormat2DArray",
                            value: function (t, e) {
                                for (var l = this.w.config, i = this.w.globals, a = "boxPlot" === l.chart.type || "boxPlot" === l.series[e].type, s = 0; s < t[e].data.length; s++)
                                    if (void 0 !== t[e].data[s][1] && (Array.isArray(t[e].data[s][1]) && 4 === t[e].data[s][1].length && !a ? this.twoDSeries.push(m.parseNumber(t[e].data[s][1][3])) : t[e].data[s].length >= 5 ? this.twoDSeries.push(m.parseNumber(t[e].data[s][4])) : this.twoDSeries.push(m.parseNumber(t[e].data[s][1])), i.dataFormatXNumeric = !0), "datetime" === l.xaxis.type) {
                                        var n = new Date(t[e].data[s][0]);
                                        n = new Date(n).getTime(), this.twoDSeriesX.push(n)
                                    } else this.twoDSeriesX.push(t[e].data[s][0]);
                                for (var o = 0; o < t[e].data.length; o++) void 0 !== t[e].data[o][2] && (this.threeDSeries.push(t[e].data[o][2]), i.isDataXYZ = !0)
                            }
                        }, {
                            key: "handleFormatXY",
                            value: function (t, e) {
                                var l = this.w.config,
                                    i = this.w.globals,
                                    a = new Y(this.ctx),
                                    s = e;
                                i.collapsedSeriesIndices.indexOf(e) > -1 && (s = this.activeSeriesIndex);
                                for (var n = 0; n < t[e].data.length; n++) void 0 !== t[e].data[n].y && (Array.isArray(t[e].data[n].y) ? this.twoDSeries.push(m.parseNumber(t[e].data[n].y[t[e].data[n].y.length - 1])) : this.twoDSeries.push(m.parseNumber(t[e].data[n].y))), void 0 !== t[e].data[n].goals && Array.isArray(t[e].data[n].goals) ? (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(t[e].data[n].goals)) : (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(null));
                                for (var o = 0; o < t[s].data.length; o++) {
                                    var r = "string" == typeof t[s].data[o].x,
                                        h = Array.isArray(t[s].data[o].x),
                                        c = !h && !!a.isValidDate(t[s].data[o].x.toString());
                                    if (r || c)
                                        if (r || l.xaxis.convertedCatToNumeric) {
                                            var d = i.isBarHorizontal && i.isRangeData;
                                            "datetime" !== l.xaxis.type || d ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[s].data[o].x)) : this.twoDSeriesX.push(a.parseDate(t[s].data[o].x))
                                        } else "datetime" === l.xaxis.type ? this.twoDSeriesX.push(a.parseDate(t[s].data[o].x.toString())) : (i.dataFormatXNumeric = !0, i.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[s].data[o].x)));
                                    else h ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[s].data[o].x)) : (i.isXNumeric = !0, i.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[s].data[o].x))
                                }
                                if (t[e].data[0] && void 0 !== t[e].data[0].z) {
                                    for (var u = 0; u < t[e].data.length; u++) this.threeDSeries.push(t[e].data[u].z);
                                    i.isDataXYZ = !0
                                }
                            }
                        }, {
                            key: "handleRangeData",
                            value: function (t, e) {
                                var l = this.w.globals,
                                    i = {};
                                return this.isFormat2DArray() ? i = this.handleRangeDataFormat("array", t, e) : this.isFormatXY() && (i = this.handleRangeDataFormat("xy", t, e)), l.seriesRangeStart.push(i.start), l.seriesRangeEnd.push(i.end), l.seriesRangeBar.push(i.rangeUniques), l.seriesRangeBar.forEach((function (t, e) {
                                    t && t.forEach((function (t, e) {
                                        t.y.forEach((function (e, l) {
                                            for (var i = 0; i < t.y.length; i++)
                                                if (l !== i) {
                                                    var a = e.y1,
                                                        s = e.y2,
                                                        n = t.y[i].y1;
                                                    a <= t.y[i].y2 && n <= s && (t.overlaps.indexOf(e.rangeName) < 0 && t.overlaps.push(e.rangeName), t.overlaps.indexOf(t.y[i].rangeName) < 0 && t.overlaps.push(t.y[i].rangeName))
                                                }
                                        }))
                                    }))
                                })), i
                            }
                        }, {
                            key: "handleCandleStickBoxData",
                            value: function (t, e) {
                                var l = this.w.globals,
                                    i = {};
                                return this.isFormat2DArray() ? i = this.handleCandleStickBoxDataFormat("array", t, e) : this.isFormatXY() && (i = this.handleCandleStickBoxDataFormat("xy", t, e)), l.seriesCandleO[e] = i.o, l.seriesCandleH[e] = i.h, l.seriesCandleM[e] = i.m, l.seriesCandleL[e] = i.l, l.seriesCandleC[e] = i.c, i
                            }
                        }, {
                            key: "handleRangeDataFormat",
                            value: function (t, e, l) {
                                var i = [],
                                    a = [],
                                    s = e[l].data.filter((function (t, e, l) {
                                        return e === l.findIndex((function (e) {
                                            return e.x === t.x
                                        }))
                                    })).map((function (t, e) {
                                        return {
                                            x: t.x,
                                            overlaps: [],
                                            y: []
                                        }
                                    })),
                                    n = "Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts",
                                    o = new N(this.ctx).getActiveConfigSeriesIndex();
                                if ("array" === t) {
                                    if (2 !== e[o].data[0][1].length) throw new Error(n);
                                    for (var r = 0; r < e[l].data.length; r++) i.push(e[l].data[r][1][0]), a.push(e[l].data[r][1][1])
                                } else if ("xy" === t) {
                                    if (2 !== e[o].data[0].y.length) throw new Error(n);
                                    for (var h = function (t) {
                                            var n = m.randomId(),
                                                o = e[l].data[t].x,
                                                r = {
                                                    y1: e[l].data[t].y[0],
                                                    y2: e[l].data[t].y[1],
                                                    rangeName: n
                                                };
                                            e[l].data[t].rangeName = n;
                                            var h = s.findIndex((function (t) {
                                                return t.x === o
                                            }));
                                            s[h].y.push(r), i.push(r.y1), a.push(r.y2)
                                        }, c = 0; c < e[l].data.length; c++) h(c)
                                }
                                return {
                                    start: i,
                                    end: a,
                                    rangeUniques: s
                                }
                            }
                        }, {
                            key: "handleCandleStickBoxDataFormat",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = "boxPlot" === i.config.chart.type || "boxPlot" === i.config.series[l].type,
                                    s = [],
                                    n = [],
                                    o = [],
                                    r = [],
                                    h = [];
                                if ("array" === t)
                                    if (a && 6 === e[l].data[0].length || !a && 5 === e[l].data[0].length)
                                        for (var c = 0; c < e[l].data.length; c++) s.push(e[l].data[c][1]), n.push(e[l].data[c][2]), a ? (o.push(e[l].data[c][3]), r.push(e[l].data[c][4]), h.push(e[l].data[c][5])) : (r.push(e[l].data[c][3]), h.push(e[l].data[c][4]));
                                    else
                                        for (var d = 0; d < e[l].data.length; d++) Array.isArray(e[l].data[d][1]) && (s.push(e[l].data[d][1][0]), n.push(e[l].data[d][1][1]), a ? (o.push(e[l].data[d][1][2]), r.push(e[l].data[d][1][3]), h.push(e[l].data[d][1][4])) : (r.push(e[l].data[d][1][2]), h.push(e[l].data[d][1][3])));
                                else if ("xy" === t)
                                    for (var u = 0; u < e[l].data.length; u++) Array.isArray(e[l].data[u].y) && (s.push(e[l].data[u].y[0]), n.push(e[l].data[u].y[1]), a ? (o.push(e[l].data[u].y[2]), r.push(e[l].data[u].y[3]), h.push(e[l].data[u].y[4])) : (r.push(e[l].data[u].y[2]), h.push(e[l].data[u].y[3])));
                                return {
                                    o: s,
                                    h: n,
                                    m: o,
                                    l: r,
                                    c: h
                                }
                            }
                        }, {
                            key: "parseDataAxisCharts",
                            value: function (t) {
                                var e = this,
                                    l = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx,
                                    i = this.w.config,
                                    a = this.w.globals,
                                    s = new Y(l),
                                    n = i.labels.length > 0 ? i.labels.slice() : i.xaxis.categories.slice();
                                a.isRangeBar = "rangeBar" === i.chart.type && a.isBarHorizontal;
                                for (var o = function () {
                                        for (var t = 0; t < n.length; t++)
                                            if ("string" == typeof n[t]) {
                                                if (!s.isValidDate(n[t])) throw new Error("You have provided invalid Date format. Please provide a valid JavaScript Date");
                                                e.twoDSeriesX.push(s.parseDate(n[t]))
                                            } else e.twoDSeriesX.push(n[t])
                                    }, r = 0; r < t.length; r++) {
                                    if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[r].data) return void console.error("It is a possibility that you may have not included 'data' property in series.");
                                    if ("rangeBar" !== i.chart.type && "rangeArea" !== i.chart.type && "rangeBar" !== t[r].type && "rangeArea" !== t[r].type || (a.isRangeData = !0, this.handleRangeData(t, r)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, r) : this.isFormatXY() && this.handleFormatXY(t, r), "candlestick" !== i.chart.type && "candlestick" !== t[r].type && "boxPlot" !== i.chart.type && "boxPlot" !== t[r].type || this.handleCandleStickBoxData(t, r), a.series.push(this.twoDSeries), a.labels.push(this.twoDSeriesX), a.seriesX.push(this.twoDSeriesX), a.seriesGoals = this.seriesGoals, r !== this.activeSeriesIndex || this.fallbackToCategory || (a.isXNumeric = !0);
                                    else {
                                        "datetime" === i.xaxis.type ? (a.isXNumeric = !0, o(), a.seriesX.push(this.twoDSeriesX)) : "numeric" === i.xaxis.type && (a.isXNumeric = !0, n.length > 0 && (this.twoDSeriesX = n, a.seriesX.push(this.twoDSeriesX))), a.labels.push(this.twoDSeriesX);
                                        var h = t[r].data.map((function (t) {
                                            return m.parseNumber(t)
                                        }));
                                        a.series.push(h)
                                    }
                                    a.seriesZ.push(this.threeDSeries), void 0 !== t[r].name ? a.seriesNames.push(t[r].name) : a.seriesNames.push("series-" + parseInt(r + 1, 10)), void 0 !== t[r].color ? a.seriesColors.push(t[r].color) : a.seriesColors.push(void 0)
                                }
                                return this.w
                            }
                        }, {
                            key: "parseDataNonAxisCharts",
                            value: function (t) {
                                var e = this.w.globals,
                                    l = this.w.config;
                                e.series = t.slice(), e.seriesNames = l.labels.slice();
                                for (var i = 0; i < e.series.length; i++) void 0 === e.seriesNames[i] && e.seriesNames.push("series-" + (i + 1));
                                return this.w
                            }
                        }, {
                            key: "handleExternalLabelsData",
                            value: function (t) {
                                var e = this.w.config,
                                    l = this.w.globals;
                                e.xaxis.categories.length > 0 ? l.labels = e.xaxis.categories : e.labels.length > 0 ? l.labels = e.labels.slice() : this.fallbackToCategory ? (l.labels = l.labels[0], l.seriesRangeBar.length && (l.seriesRangeBar.map((function (t) {
                                    t.forEach((function (t) {
                                        l.labels.indexOf(t.x) < 0 && t.x && l.labels.push(t.x)
                                    }))
                                })), l.labels = l.labels.filter((function (t, e, l) {
                                    return l.indexOf(t) === e
                                }))), e.xaxis.convertedCatToNumeric && (new H(e).convertCatToNumericXaxis(e, this.ctx, l.seriesX[0]), this._generateExternalLabels(t))) : this._generateExternalLabels(t)
                            }
                        }, {
                            key: "_generateExternalLabels",
                            value: function (t) {
                                var e = this.w.globals,
                                    l = this.w.config,
                                    i = [];
                                if (e.axisCharts) {
                                    if (e.series.length > 0)
                                        for (var a = 0; a < e.series[e.maxValsInArrayIndex].length; a++) i.push(a + 1);
                                    e.seriesX = [];
                                    for (var s = 0; s < t.length; s++) e.seriesX.push(i);
                                    e.isXNumeric = !0
                                }
                                if (0 === i.length) {
                                    i = e.axisCharts ? [] : e.series.map((function (t, e) {
                                        return e + 1
                                    }));
                                    for (var n = 0; n < t.length; n++) e.seriesX.push(i)
                                }
                                e.labels = i, l.xaxis.convertedCatToNumeric && (e.categoryLabels = i.map((function (t) {
                                    return l.xaxis.labels.formatter(t)
                                }))), e.noLabelsProvided = !0
                            }
                        }, {
                            key: "parseData",
                            value: function (t) {
                                var e = this.w,
                                    l = e.config,
                                    i = e.globals;
                                if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), i.axisCharts ? this.parseDataAxisCharts(t) : this.parseDataNonAxisCharts(t), this.coreUtils.getLargestSeries(), "bar" === l.chart.type && l.chart.stacked) {
                                    var a = new N(this.ctx);
                                    i.series = a.setNullSeriesToZeroValues(i.series)
                                }
                                this.coreUtils.getSeriesTotals(), i.axisCharts && this.coreUtils.getStackedSeriesTotals(), this.coreUtils.getPercentSeries(), i.dataFormatXNumeric || i.isXNumeric && ("numeric" !== l.xaxis.type || 0 !== l.labels.length || 0 !== l.xaxis.categories.length) || this.handleExternalLabelsData(t);
                                for (var s = this.coreUtils.getCategoryLabels(i.labels), n = 0; n < s.length; n++)
                                    if (Array.isArray(s[n])) {
                                        i.isMultiLineX = !0;
                                        break
                                    }
                            }
                        }, {
                            key: "excludeCollapsedSeriesInYAxis",
                            value: function () {
                                var t = this,
                                    e = this.w;
                                e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map((function (l, i) {
                                    if (t.w.globals.isMultipleYAxis && !e.config.chart.stacked) return l.index
                                }))
                            }
                        }]), t
                    }(),
                    _ = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.tooltipKeyFormat = "dd MMM"
                        }
                        return h(t, [{
                            key: "xLabelFormat",
                            value: function (t, e, l, i) {
                                var a = this.w;
                                if ("datetime" === a.config.xaxis.type && void 0 === a.config.xaxis.labels.formatter && void 0 === a.config.tooltip.x.formatter) {
                                    var s = new Y(this.ctx);
                                    return s.formatDate(s.getDate(e), a.config.tooltip.x.format)
                                }
                                return t(e, l, i)
                            }
                        }, {
                            key: "defaultGeneralFormatter",
                            value: function (t) {
                                return Array.isArray(t) ? t.map((function (t) {
                                    return t
                                })) : t
                            }
                        }, {
                            key: "defaultYFormatter",
                            value: function (t, e, l) {
                                var i = this.w;
                                return m.isNumber(t) && (t = 0 !== i.globals.yValueDecimal ? t.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : i.globals.yValueDecimal) : i.globals.maxYArr[l] - i.globals.minYArr[l] < 5 ? t.toFixed(1) : t.toFixed(0)), t
                            }
                        }, {
                            key: "setLabelFormatters",
                            value: function () {
                                var t = this,
                                    e = this.w;
                                return e.globals.xaxisTooltipFormatter = function (e) {
                                    return t.defaultGeneralFormatter(e)
                                }, e.globals.ttKeyFormatter = function (e) {
                                    return t.defaultGeneralFormatter(e)
                                }, e.globals.ttZFormatter = function (t) {
                                    return t
                                }, e.globals.legendFormatter = function (e) {
                                    return t.defaultGeneralFormatter(e)
                                }, void 0 !== e.config.xaxis.labels.formatter ? e.globals.xLabelFormatter = e.config.xaxis.labels.formatter : e.globals.xLabelFormatter = function (t) {
                                    if (m.isNumber(t)) {
                                        if (!e.config.xaxis.convertedCatToNumeric && "numeric" === e.config.xaxis.type) {
                                            if (m.isNumber(e.config.xaxis.decimalsInFloat)) return t.toFixed(e.config.xaxis.decimalsInFloat);
                                            var l = e.globals.maxX - e.globals.minX;
                                            return l > 0 && l < 100 ? t.toFixed(1) : t.toFixed(0)
                                        }
                                        return e.globals.isBarHorizontal && e.globals.maxY - e.globals.minYArr < 4 ? t.toFixed(1) : t.toFixed(0)
                                    }
                                    return t
                                }, "function" == typeof e.config.tooltip.x.formatter ? e.globals.ttKeyFormatter = e.config.tooltip.x.formatter : e.globals.ttKeyFormatter = e.globals.xLabelFormatter, "function" == typeof e.config.xaxis.tooltip.formatter && (e.globals.xaxisTooltipFormatter = e.config.xaxis.tooltip.formatter), (Array.isArray(e.config.tooltip.y) || void 0 !== e.config.tooltip.y.formatter) && (e.globals.ttVal = e.config.tooltip.y), void 0 !== e.config.tooltip.z.formatter && (e.globals.ttZFormatter = e.config.tooltip.z.formatter), void 0 !== e.config.legend.formatter && (e.globals.legendFormatter = e.config.legend.formatter), e.config.yaxis.forEach((function (l, i) {
                                    void 0 !== l.labels.formatter ? e.globals.yLabelFormatters[i] = l.labels.formatter : e.globals.yLabelFormatters[i] = function (a) {
                                        return e.globals.xyCharts ? Array.isArray(a) ? a.map((function (e) {
                                            return t.defaultYFormatter(e, l, i)
                                        })) : t.defaultYFormatter(a, l, i) : a
                                    }
                                })), e.globals
                            }
                        }, {
                            key: "heatmapLabelFormatters",
                            value: function () {
                                var t = this.w;
                                if ("heatmap" === t.config.chart.type) {
                                    t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();
                                    var e = t.globals.seriesNames.reduce((function (t, e) {
                                        return t.length > e.length ? t : e
                                    }), 0);
                                    t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e
                                }
                            }
                        }]), t
                    }(),
                    j = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "getLabel",
                            value: function (t, e, l, i) {
                                var a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],
                                    s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "12px",
                                    n = this.w,
                                    o = void 0 === t[i] ? "" : t[i],
                                    r = o,
                                    h = n.globals.xLabelFormatter,
                                    c = n.config.xaxis.labels.formatter,
                                    d = !1,
                                    u = new _(this.ctx),
                                    g = o;
                                r = u.xLabelFormat(h, o, g, {
                                    i,
                                    dateFormatter: new Y(this.ctx).formatDate,
                                    w: n
                                }), void 0 !== c && (r = c(o, t[i], {
                                    i,
                                    dateFormatter: new Y(this.ctx).formatDate,
                                    w: n
                                }));
                                var p = function (t) {
                                    var l = null;
                                    return e.forEach((function (t) {
                                        "month" === t.unit ? l = "year" : "day" === t.unit ? l = "month" : "hour" === t.unit ? l = "day" : "minute" === t.unit && (l = "hour")
                                    })), l === t
                                };
                                e.length > 0 ? (d = p(e[i].unit), l = e[i].position, r = e[i].value) : "datetime" === n.config.xaxis.type && void 0 === c && (r = ""), void 0 === r && (r = ""), r = Array.isArray(r) ? r : r.toString();
                                var f = new w(this.ctx),
                                    v = {};
                                v = n.globals.rotateXLabels ? f.getTextRects(r, parseInt(s, 10), null, "rotate(".concat(n.config.xaxis.labels.rotate, " 0 0)"), !1) : f.getTextRects(r, parseInt(s, 10));
                                var x = !n.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
                                return !Array.isArray(r) && (0 === r.indexOf("NaN") || 0 === r.toLowerCase().indexOf("invalid") || r.toLowerCase().indexOf("infinity") >= 0 || a.indexOf(r) >= 0 && x) && (r = ""), {
                                    x: l,
                                    text: r,
                                    textRect: v,
                                    isBold: d
                                }
                            }
                        }, {
                            key: "checkLabelBasedOnTickamount",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = i.config.xaxis.tickAmount;
                                return "dataPoints" === a && (a = Math.round(i.globals.gridWidth / 120)), a > l || t % Math.round(l / (a + 1)) == 0 || (e.text = ""), e
                            }
                        }, {
                            key: "checkForOverflowingLabels",
                            value: function (t, e, l, i, a) {
                                var s = this.w;
                                if (0 === t && s.globals.skipFirstTimelinelabel && (e.text = ""), t === l - 1 && s.globals.skipLastTimelinelabel && (e.text = ""), s.config.xaxis.labels.hideOverlappingLabels && i.length > 0) {
                                    var n = a[a.length - 1];
                                    e.x < n.textRect.width / (s.globals.rotateXLabels ? Math.abs(s.config.xaxis.labels.rotate) / 12 : 1.01) + n.x && (e.text = "")
                                }
                                return e
                            }
                        }, {
                            key: "checkForReversedLabels",
                            value: function (t, e) {
                                var l = this.w;
                                return l.config.yaxis[t] && l.config.yaxis[t].reversed && e.reverse(), e
                            }
                        }, {
                            key: "isYAxisHidden",
                            value: function (t) {
                                var e = this.w,
                                    l = new k(this.ctx);
                                return !e.config.yaxis[t].show || !e.config.yaxis[t].showForNullSeries && l.isSeriesNull(t) && -1 === e.globals.collapsedSeriesIndices.indexOf(t)
                            }
                        }, {
                            key: "getYAxisForeColor",
                            value: function (t, e) {
                                var l = this.w;
                                return Array.isArray(t) && l.globals.yAxisScale[e] && this.ctx.theme.pushExtraColors(t, l.globals.yAxisScale[e].result.length, !1), t
                            }
                        }, {
                            key: "drawYAxisTicks",
                            value: function (t, e, l, i, a, s, n) {
                                var o = this.w,
                                    r = new w(this.ctx),
                                    h = o.globals.translateY;
                                if (i.show && e > 0) {
                                    !0 === o.config.yaxis[a].opposite && (t += i.width);
                                    for (var c = e; c >= 0; c--) {
                                        var d = h + e / 10 + o.config.yaxis[a].labels.offsetY - 1;
                                        o.globals.isBarHorizontal && (d = s * c), "heatmap" === o.config.chart.type && (d += s / 2);
                                        var u = r.drawLine(t + l.offsetX - i.width + i.offsetX, d + i.offsetY, t + l.offsetX + i.offsetX, d + i.offsetY, i.color);
                                        n.add(u), h += s
                                    }
                                }
                            }
                        }]), t
                    }(),
                    U = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "scaleSvgNode",
                            value: function (t, e) {
                                var l = parseFloat(t.getAttributeNS(null, "width")),
                                    i = parseFloat(t.getAttributeNS(null, "height"));
                                t.setAttributeNS(null, "width", l * e), t.setAttributeNS(null, "height", i * e), t.setAttributeNS(null, "viewBox", "0 0 " + l + " " + i)
                            }
                        }, {
                            key: "fixSvgStringForIe11",
                            value: function (t) {
                                if (!m.isIE11()) return t.replace(/&nbsp;/g, "&#160;");
                                var e = 0,
                                    l = t.replace(/xmlns="http:\/\/www.w3.org\/2000\/svg"/g, (function (t) {
                                        return 2 == ++e ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"' : t
                                    }));
                                return (l = l.replace(/xmlns:NS\d+=""/g, "")).replace(/NS\d+:(\w+:\w+=")/g, "$1")
                            }
                        }, {
                            key: "getSvgString",
                            value: function (t) {
                                var e = this.w.globals.dom.Paper.svg();
                                if (1 !== t) {
                                    var l = this.w.globals.dom.Paper.node.cloneNode(!0);
                                    this.scaleSvgNode(l, t), e = (new XMLSerializer).serializeToString(l)
                                }
                                return this.fixSvgStringForIe11(e)
                            }
                        }, {
                            key: "cleanup",
                            value: function () {
                                var t = this.w,
                                    e = t.globals.dom.baseEl.getElementsByClassName("apexcharts-xcrosshairs"),
                                    l = t.globals.dom.baseEl.getElementsByClassName("apexcharts-ycrosshairs"),
                                    i = t.globals.dom.baseEl.querySelectorAll(".apexcharts-zoom-rect, .apexcharts-selection-rect");
                                Array.prototype.forEach.call(i, (function (t) {
                                    t.setAttribute("width", 0)
                                })), e && e[0] && (e[0].setAttribute("x", -500), e[0].setAttribute("x1", -500), e[0].setAttribute("x2", -500)), l && l[0] && (l[0].setAttribute("y", -100), l[0].setAttribute("y1", -100), l[0].setAttribute("y2", -100))
                            }
                        }, {
                            key: "svgUrl",
                            value: function () {
                                this.cleanup();
                                var t = this.getSvgString(),
                                    e = new Blob([t], {
                                        type: "image/svg+xml;charset=utf-8"
                                    });
                                return URL.createObjectURL(e)
                            }
                        }, {
                            key: "dataURI",
                            value: function (t) {
                                var e = this;
                                return new Promise((function (l) {
                                    var i = e.w,
                                        a = t ? t.scale || t.width / i.globals.svgWidth : 1;
                                    e.cleanup();
                                    var s = document.createElement("canvas");
                                    s.width = i.globals.svgWidth * a, s.height = parseInt(i.globals.dom.elWrap.style.height, 10) * a;
                                    var n = "transparent" === i.config.chart.background ? "#fff" : i.config.chart.background,
                                        o = s.getContext("2d");
                                    o.fillStyle = n, o.fillRect(0, 0, s.width * a, s.height * a);
                                    var r = e.getSvgString(a);
                                    if (window.canvg && m.isIE11()) {
                                        var h = window.canvg.Canvg.fromString(o, r, {
                                            ignoreClear: !0,
                                            ignoreDimensions: !0
                                        });
                                        h.start();
                                        var c = s.msToBlob();
                                        h.stop(), l({
                                            blob: c
                                        })
                                    } else {
                                        var d = "data:image/svg+xml," + encodeURIComponent(r),
                                            u = new Image;
                                        u.crossOrigin = "anonymous", u.onload = function () {
                                            if (o.drawImage(u, 0, 0), s.msToBlob) {
                                                var t = s.msToBlob();
                                                l({
                                                    blob: t
                                                })
                                            } else {
                                                var e = s.toDataURL("image/png");
                                                l({
                                                    imgURI: e
                                                })
                                            }
                                        }, u.src = d
                                    }
                                }))
                            }
                        }, {
                            key: "exportToSVG",
                            value: function () {
                                this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar.export.svg.filename, ".svg")
                            }
                        }, {
                            key: "exportToPng",
                            value: function () {
                                var t = this;
                                this.dataURI().then((function (e) {
                                    var l = e.imgURI,
                                        i = e.blob;
                                    i ? navigator.msSaveOrOpenBlob(i, t.w.globals.chartID + ".png") : t.triggerDownload(l, t.w.config.chart.toolbar.export.png.filename, ".png")
                                }))
                            }
                        }, {
                            key: "exportToCSV",
                            value: function (t) {
                                var e = this,
                                    l = t.series,
                                    i = t.columnDelimiter,
                                    a = t.lineDelimiter,
                                    s = void 0 === a ? "\n" : a,
                                    n = this.w,
                                    o = [],
                                    r = [],
                                    h = "",
                                    c = new V(this.ctx),
                                    d = new j(this.ctx),
                                    u = function (t) {
                                        var l = "";
                                        if (n.globals.axisCharts) {
                                            if ("category" === n.config.xaxis.type || n.config.xaxis.convertedCatToNumeric)
                                                if (n.globals.isBarHorizontal) {
                                                    var a = n.globals.yLabelFormatters[0],
                                                        s = new N(e.ctx).getActiveConfigSeriesIndex();
                                                    l = a(n.globals.labels[t], {
                                                        seriesIndex: s,
                                                        dataPointIndex: t,
                                                        w: n
                                                    })
                                                } else l = d.getLabel(n.globals.labels, n.globals.timescaleLabels, 0, t).text;
                                            "datetime" === n.config.xaxis.type && (n.config.xaxis.categories.length ? l = n.config.xaxis.categories[t] : n.config.labels.length && (l = n.config.labels[t]))
                                        } else l = n.config.labels[t];
                                        return Array.isArray(l) && (l = l.join(" ")), m.isNumber(l) ? l : l.split(i).join("")
                                    };
                                o.push(n.config.chart.toolbar.export.csv.headerCategory), l.map((function (t, e) {
                                    var l = t.name ? t.name : "series-".concat(e);
                                    n.globals.axisCharts && o.push(l.split(i).join("") ? l.split(i).join("") : "series-".concat(e))
                                })), n.globals.axisCharts || (o.push(n.config.chart.toolbar.export.csv.headerValue), r.push(o.join(i))), l.map((function (t, e) {
                                    n.globals.axisCharts ? function (t, e) {
                                        if (o.length && 0 === e && r.push(o.join(i)), t.data && t.data.length)
                                            for (var a = 0; a < t.data.length; a++) {
                                                o = [];
                                                var s = u(a);
                                                if (s || (c.isFormatXY() ? s = l[e].data[a].x : c.isFormat2DArray() && (s = l[e].data[a] ? l[e].data[a][0] : "")), 0 === e) {
                                                    o.push((d = s, "datetime" === n.config.xaxis.type && String(d).length >= 10 ? n.config.chart.toolbar.export.csv.dateFormatter(s) : m.isNumber(s) ? s : s.split(i).join("")));
                                                    for (var h = 0; h < n.globals.series.length; h++) o.push(n.globals.series[h][a])
                                                }("candlestick" === n.config.chart.type || t.type && "candlestick" === t.type) && (o.pop(), o.push(n.globals.seriesCandleO[e][a]), o.push(n.globals.seriesCandleH[e][a]), o.push(n.globals.seriesCandleL[e][a]), o.push(n.globals.seriesCandleC[e][a])), ("boxPlot" === n.config.chart.type || t.type && "boxPlot" === t.type) && (o.pop(), o.push(n.globals.seriesCandleO[e][a]), o.push(n.globals.seriesCandleH[e][a]), o.push(n.globals.seriesCandleM[e][a]), o.push(n.globals.seriesCandleL[e][a]), o.push(n.globals.seriesCandleC[e][a])), "rangeBar" === n.config.chart.type && (o.pop(), o.push(n.globals.seriesRangeStart[e][a]), o.push(n.globals.seriesRangeEnd[e][a])), o.length && r.push(o.join(i))
                                            }
                                        var d
                                    }(t, e) : ((o = []).push(n.globals.labels[e].split(i).join("")), o.push(n.globals.series[e]), r.push(o.join(i)))
                                })), h += r.join(s), this.triggerDownload("data:text/csv; charset=utf-8," + encodeURIComponent("\ufeff" + h), n.config.chart.toolbar.export.csv.filename, ".csv")
                            }
                        }, {
                            key: "triggerDownload",
                            value: function (t, e, l) {
                                var i = document.createElement("a");
                                i.href = t, i.download = (e || this.w.globals.chartID) + l, document.body.appendChild(i), i.click(), document.body.removeChild(i)
                            }
                        }]), t
                    }(),
                    Z = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w;
                            var l = this.w;
                            this.axesUtils = new j(e), this.xaxisLabels = l.globals.labels.slice(), l.globals.timescaleLabels.length > 0 && !l.globals.isBarHorizontal && (this.xaxisLabels = l.globals.timescaleLabels.slice()), l.config.xaxis.overwriteCategories && (this.xaxisLabels = l.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], "top" === l.config.xaxis.position ? this.offY = 0 : this.offY = l.globals.gridHeight + 1, this.offY = this.offY + l.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = "bar" === l.config.chart.type && l.config.plotOptions.bar.horizontal, this.xaxisFontSize = l.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = l.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = l.config.xaxis.labels.style.colors, this.xaxisBorderWidth = l.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = l.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf("%") > -1 ? this.xaxisBorderWidth = l.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = l.config.xaxis.axisBorder.height, this.yaxis = l.config.yaxis[0]
                        }
                        return h(t, [{
                            key: "drawXaxis",
                            value: function () {
                                var t, e = this,
                                    l = this.w,
                                    i = new w(this.ctx),
                                    a = i.group({
                                        class: "apexcharts-xaxis",
                                        transform: "translate(".concat(l.config.xaxis.offsetX, ", ").concat(l.config.xaxis.offsetY, ")")
                                    }),
                                    s = i.group({
                                        class: "apexcharts-xaxis-texts-g",
                                        transform: "translate(".concat(l.globals.translateXAxisX, ", ").concat(l.globals.translateXAxisY, ")")
                                    });
                                a.add(s);
                                for (var n = l.globals.padHorizontal, o = [], r = 0; r < this.xaxisLabels.length; r++) o.push(this.xaxisLabels[r]);
                                var h = o.length;
                                if (l.globals.isXNumeric) {
                                    var c = h > 1 ? h - 1 : h;
                                    t = l.globals.gridWidth / c, n = n + t / 2 + l.config.xaxis.labels.offsetX
                                } else t = l.globals.gridWidth / o.length, n = n + t + l.config.xaxis.labels.offsetX;
                                for (var d = function (a) {
                                        var r = n - t / 2 + l.config.xaxis.labels.offsetX;
                                        0 === a && 1 === h && t / 2 === n && 1 === l.globals.dataPoints && (r = l.globals.gridWidth / 2);
                                        var c = e.axesUtils.getLabel(o, l.globals.timescaleLabels, r, a, e.drawnLabels, e.xaxisFontSize),
                                            d = 28;
                                        if (l.globals.rotateXLabels && (d = 22), (c = void 0 !== l.config.xaxis.tickAmount && "dataPoints" !== l.config.xaxis.tickAmount && "datetime" !== l.config.xaxis.type ? e.axesUtils.checkLabelBasedOnTickamount(a, c, h) : e.axesUtils.checkForOverflowingLabels(a, c, h, e.drawnLabels, e.drawnLabelsRects)).text && l.globals.xaxisLabelsCount++, l.config.xaxis.labels.show) {
                                            var u = i.drawText({
                                                x: c.x,
                                                y: e.offY + l.config.xaxis.labels.offsetY + d - ("top" === l.config.xaxis.position ? l.globals.xAxisHeight + l.config.xaxis.axisTicks.height - 2 : 0),
                                                text: c.text,
                                                textAnchor: "middle",
                                                fontWeight: c.isBold ? 600 : l.config.xaxis.labels.style.fontWeight,
                                                fontSize: e.xaxisFontSize,
                                                fontFamily: e.xaxisFontFamily,
                                                foreColor: Array.isArray(e.xaxisForeColors) ? l.config.xaxis.convertedCatToNumeric ? e.xaxisForeColors[l.globals.minX + a - 1] : e.xaxisForeColors[a] : e.xaxisForeColors,
                                                isPlainText: !1,
                                                cssClass: "apexcharts-xaxis-label " + l.config.xaxis.labels.style.cssClass
                                            });
                                            s.add(u);
                                            var g = document.createElementNS(l.globals.SVGNS, "title");
                                            g.textContent = Array.isArray(c.text) ? c.text.join(" ") : c.text, u.node.appendChild(g), "" !== c.text && (e.drawnLabels.push(c.text), e.drawnLabelsRects.push(c))
                                        }
                                        n += t
                                    }, u = 0; u <= h - 1; u++) d(u);
                                if (void 0 !== l.config.xaxis.title.text) {
                                    var g = i.group({
                                            class: "apexcharts-xaxis-title"
                                        }),
                                        p = i.drawText({
                                            x: l.globals.gridWidth / 2 + l.config.xaxis.title.offsetX,
                                            y: this.offY + parseFloat(this.xaxisFontSize) + l.globals.xAxisLabelsHeight + l.config.xaxis.title.offsetY,
                                            text: l.config.xaxis.title.text,
                                            textAnchor: "middle",
                                            fontSize: l.config.xaxis.title.style.fontSize,
                                            fontFamily: l.config.xaxis.title.style.fontFamily,
                                            fontWeight: l.config.xaxis.title.style.fontWeight,
                                            foreColor: l.config.xaxis.title.style.color,
                                            cssClass: "apexcharts-xaxis-title-text " + l.config.xaxis.title.style.cssClass
                                        });
                                    g.add(p), a.add(g)
                                }
                                if (l.config.xaxis.axisBorder.show) {
                                    var f = l.globals.barPadForNumericAxis,
                                        v = i.drawLine(l.globals.padHorizontal + l.config.xaxis.axisBorder.offsetX - f, this.offY, this.xaxisBorderWidth + f, this.offY, l.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);
                                    a.add(v)
                                }
                                return a
                            }
                        }, {
                            key: "drawXaxisInversed",
                            value: function (t) {
                                var e, l, i = this,
                                    a = this.w,
                                    s = new w(this.ctx),
                                    n = a.config.yaxis[0].opposite ? a.globals.translateYAxisX[t] : 0,
                                    o = s.group({
                                        class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                                        rel: t
                                    }),
                                    r = s.group({
                                        class: "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                                        transform: "translate(" + n + ", 0)"
                                    });
                                o.add(r);
                                var h = [];
                                if (a.config.yaxis[t].show)
                                    for (var c = 0; c < this.xaxisLabels.length; c++) h.push(this.xaxisLabels[c]);
                                e = a.globals.gridHeight / h.length, l = -e / 2.2;
                                var d = a.globals.yLabelFormatters[0],
                                    u = a.config.yaxis[0].labels;
                                if (u.show)
                                    for (var g = function (n) {
                                            var o = void 0 === h[n] ? "" : h[n];
                                            o = d(o, {
                                                seriesIndex: t,
                                                dataPointIndex: n,
                                                w: a
                                            });
                                            var c = i.axesUtils.getYAxisForeColor(u.style.colors, t),
                                                g = 0;
                                            Array.isArray(o) && (g = o.length / 2 * parseInt(u.style.fontSize, 10));
                                            var p = s.drawText({
                                                x: u.offsetX - 15,
                                                y: l + e + u.offsetY - g,
                                                text: o,
                                                textAnchor: i.yaxis.opposite ? "start" : "end",
                                                foreColor: Array.isArray(c) ? c[n] : c,
                                                fontSize: u.style.fontSize,
                                                fontFamily: u.style.fontFamily,
                                                fontWeight: u.style.fontWeight,
                                                isPlainText: !1,
                                                cssClass: "apexcharts-yaxis-label " + u.style.cssClass
                                            });
                                            r.add(p);
                                            var f = document.createElementNS(a.globals.SVGNS, "title");
                                            if (f.textContent = Array.isArray(o) ? o.join(" ") : o, p.node.appendChild(f), 0 !== a.config.yaxis[t].labels.rotate) {
                                                var v = s.rotateAroundCenter(p.node);
                                                p.node.setAttribute("transform", "rotate(".concat(a.config.yaxis[t].labels.rotate, " 0 ").concat(v.y, ")"))
                                            }
                                            l += e
                                        }, p = 0; p <= h.length - 1; p++) g(p);
                                if (void 0 !== a.config.yaxis[0].title.text) {
                                    var f = s.group({
                                            class: "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                                            transform: "translate(" + n + ", 0)"
                                        }),
                                        v = s.drawText({
                                            x: 0,
                                            y: a.globals.gridHeight / 2,
                                            text: a.config.yaxis[0].title.text,
                                            textAnchor: "middle",
                                            foreColor: a.config.yaxis[0].title.style.color,
                                            fontSize: a.config.yaxis[0].title.style.fontSize,
                                            fontWeight: a.config.yaxis[0].title.style.fontWeight,
                                            fontFamily: a.config.yaxis[0].title.style.fontFamily,
                                            cssClass: "apexcharts-yaxis-title-text " + a.config.yaxis[0].title.style.cssClass
                                        });
                                    f.add(v), o.add(f)
                                }
                                var x = 0;
                                this.isCategoryBarHorizontal && a.config.yaxis[0].opposite && (x = a.globals.gridWidth);
                                var m = a.config.xaxis.axisBorder;
                                if (m.show) {
                                    var b = s.drawLine(a.globals.padHorizontal + m.offsetX + x, 1 + m.offsetY, a.globals.padHorizontal + m.offsetX + x, a.globals.gridHeight + m.offsetY, m.color, 0);
                                    o.add(b)
                                }
                                return a.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(x, h.length, a.config.yaxis[0].axisBorder, a.config.yaxis[0].axisTicks, 0, e, o), o
                            }
                        }, {
                            key: "drawXaxisTicks",
                            value: function (t, e) {
                                var l = this.w,
                                    i = t;
                                if (!(t < 0 || t - 2 > l.globals.gridWidth)) {
                                    var a = this.offY + l.config.xaxis.axisTicks.offsetY,
                                        s = a + l.config.xaxis.axisTicks.height;
                                    if ("top" === l.config.xaxis.position && (s = a - l.config.xaxis.axisTicks.height), l.config.xaxis.axisTicks.show) {
                                        var n = new w(this.ctx).drawLine(t + l.config.xaxis.axisTicks.offsetX, a + l.config.xaxis.offsetY, i + l.config.xaxis.axisTicks.offsetX, s + l.config.xaxis.offsetY, l.config.xaxis.axisTicks.color);
                                        e.add(n), n.node.classList.add("apexcharts-xaxis-tick")
                                    }
                                }
                            }
                        }, {
                            key: "getXAxisTicksPositions",
                            value: function () {
                                var t = this.w,
                                    e = [],
                                    l = this.xaxisLabels.length,
                                    i = t.globals.padHorizontal;
                                if (t.globals.timescaleLabels.length > 0)
                                    for (var a = 0; a < l; a++) i = this.xaxisLabels[a].position, e.push(i);
                                else
                                    for (var s = l, n = 0; n < s; n++) {
                                        var o = s;
                                        t.globals.isXNumeric && "bar" !== t.config.chart.type && (o -= 1), i += t.globals.gridWidth / o, e.push(i)
                                    }
                                return e
                            }
                        }, {
                            key: "xAxisLabelCorrections",
                            value: function () {
                                var t = this.w,
                                    e = new w(this.ctx),
                                    l = t.globals.dom.baseEl.querySelector(".apexcharts-xaxis-texts-g"),
                                    i = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-texts-g text"),
                                    a = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis-inversed text"),
                                    s = t.globals.dom.baseEl.querySelectorAll(".apexcharts-xaxis-inversed-texts-g text tspan");
                                if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways)
                                    for (var n = 0; n < i.length; n++) {
                                        var o = e.rotateAroundCenter(i[n]);
                                        o.y = o.y - 1, o.x = o.x + 1, i[n].setAttribute("transform", "rotate(".concat(t.config.xaxis.labels.rotate, " ").concat(o.x, " ").concat(o.y, ")")), i[n].setAttribute("text-anchor", "end"), l.setAttribute("transform", "translate(0, ".concat(-10, ")"));
                                        var r = i[n].childNodes;
                                        t.config.xaxis.labels.trim && Array.prototype.forEach.call(r, (function (l) {
                                            e.placeTextWithEllipsis(l, l.textContent, t.globals.xAxisLabelsHeight - ("bottom" === t.config.legend.position ? 20 : 10))
                                        }))
                                    } else ! function () {
                                        for (var l = t.globals.gridWidth / (t.globals.labels.length + 1), a = 0; a < i.length; a++) {
                                            var s = i[a].childNodes;
                                            t.config.xaxis.labels.trim && "datetime" !== t.config.xaxis.type && Array.prototype.forEach.call(s, (function (t) {
                                                e.placeTextWithEllipsis(t, t.textContent, l)
                                            }))
                                        }
                                    }();
                                if (a.length > 0) {
                                    var h = a[a.length - 1].getBBox(),
                                        c = a[0].getBBox();
                                    h.x < -20 && a[a.length - 1].parentNode.removeChild(a[a.length - 1]), c.x + c.width > t.globals.gridWidth && !t.globals.isBarHorizontal && a[0].parentNode.removeChild(a[0]);
                                    for (var d = 0; d < s.length; d++) e.placeTextWithEllipsis(s[d], s[d].textContent, t.config.yaxis[0].labels.maxWidth - 2 * parseFloat(t.config.yaxis[0].title.style.fontSize) - 20)
                                }
                            }
                        }]), t
                    }(),
                    q = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w;
                            var l = this.w;
                            this.xaxisLabels = l.globals.labels.slice(), this.axesUtils = new j(e), this.isRangeBar = l.globals.seriesRangeBar.length, l.globals.timescaleLabels.length > 0 && (this.xaxisLabels = l.globals.timescaleLabels.slice())
                        }
                        return h(t, [{
                            key: "drawGridArea",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    e = this.w,
                                    l = new w(this.ctx);
                                null === t && (t = l.group({
                                    class: "apexcharts-grid"
                                }));
                                var i = l.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, "transparent"),
                                    a = l.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, "transparent");
                                return t.add(a), t.add(i), t
                            }
                        }, {
                            key: "drawGrid",
                            value: function () {
                                var t = null;
                                return this.w.globals.axisCharts && (t = this.renderGrid(), this.drawGridArea(t.el)), t
                            }
                        }, {
                            key: "createGridMask",
                            value: function () {
                                var t = this.w,
                                    e = t.globals,
                                    l = new w(this.ctx),
                                    i = Array.isArray(t.config.stroke.width) ? 0 : t.config.stroke.width;
                                if (Array.isArray(t.config.stroke.width)) {
                                    var a = 0;
                                    t.config.stroke.width.forEach((function (t) {
                                        a = Math.max(a, t)
                                    })), i = a
                                }
                                e.dom.elGridRectMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elGridRectMask.setAttribute("id", "gridRectMask".concat(e.cuid)), e.dom.elGridRectMarkerMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elGridRectMarkerMask.setAttribute("id", "gridRectMarkerMask".concat(e.cuid)), e.dom.elForecastMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elForecastMask.setAttribute("id", "forecastMask".concat(e.cuid)), e.dom.elNonForecastMask = document.createElementNS(e.SVGNS, "clipPath"), e.dom.elNonForecastMask.setAttribute("id", "nonForecastMask".concat(e.cuid));
                                var s = t.config.chart.type,
                                    n = 0,
                                    o = 0;
                                ("bar" === s || "rangeBar" === s || "candlestick" === s || "boxPlot" === s || t.globals.comboBarCount > 0) && t.globals.isXNumeric && !t.globals.isBarHorizontal && (n = t.config.grid.padding.left, o = t.config.grid.padding.right, e.barPadForNumericAxis > n && (n = e.barPadForNumericAxis, o = e.barPadForNumericAxis)), e.dom.elGridRect = l.drawRect(-i / 2 - n - 2, -i / 2, e.gridWidth + i + o + n + 4, e.gridHeight + i, 0, "#fff"), new k(this).getLargestMarkerSize();
                                var r = t.globals.markers.largestSize + 1;
                                e.dom.elGridRectMarker = l.drawRect(2 * -r, 2 * -r, e.gridWidth + 4 * r, e.gridHeight + 4 * r, 0, "#fff"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);
                                var h = e.dom.baseEl.querySelector("defs");
                                h.appendChild(e.dom.elGridRectMask), h.appendChild(e.dom.elForecastMask), h.appendChild(e.dom.elNonForecastMask), h.appendChild(e.dom.elGridRectMarkerMask)
                            }
                        }, {
                            key: "_drawGridLines",
                            value: function (t) {
                                var e = t.i,
                                    l = t.x1,
                                    i = t.y1,
                                    a = t.x2,
                                    s = t.y2,
                                    n = t.xCount,
                                    o = t.parent,
                                    r = this.w;
                                0 === e && r.globals.skipFirstTimelinelabel || e === n - 1 && r.globals.skipLastTimelinelabel && !r.config.xaxis.labels.formatter || "radar" === r.config.chart.type || (r.config.grid.xaxis.lines.show && this._drawGridLine({
                                    x1: l,
                                    y1: i,
                                    x2: a,
                                    y2: s,
                                    parent: o
                                }), new Z(this.ctx).drawXaxisTicks(l, this.elg))
                            }
                        }, {
                            key: "_drawGridLine",
                            value: function (t) {
                                var e = t.x1,
                                    l = t.y1,
                                    i = t.x2,
                                    a = t.y2,
                                    s = t.parent,
                                    n = this.w,
                                    o = s.node.classList.contains("apexcharts-gridlines-horizontal"),
                                    r = n.config.grid.strokeDashArray,
                                    h = n.globals.barPadForNumericAxis,
                                    c = new w(this).drawLine(e - (o ? h : 0), l, i + (o ? h : 0), a, n.config.grid.borderColor, r);
                                c.node.classList.add("apexcharts-gridline"), s.add(c)
                            }
                        }, {
                            key: "_drawGridBandRect",
                            value: function (t) {
                                var e = t.c,
                                    l = t.x1,
                                    i = t.y1,
                                    a = t.x2,
                                    s = t.y2,
                                    n = t.type,
                                    o = this.w,
                                    r = new w(this.ctx),
                                    h = o.globals.barPadForNumericAxis;
                                if ("column" !== n || "datetime" !== o.config.xaxis.type) {
                                    var c = o.config.grid[n].colors[e],
                                        d = r.drawRect(l - ("row" === n ? h : 0), i, a + ("row" === n ? 2 * h : 0), s, 0, c, o.config.grid[n].opacity);
                                    this.elg.add(d), d.attr("clip-path", "url(#gridRectMask".concat(o.globals.cuid, ")")), d.node.classList.add("apexcharts-grid-".concat(n))
                                }
                            }
                        }, {
                            key: "_drawXYLines",
                            value: function (t) {
                                var e = this,
                                    l = t.xCount,
                                    i = t.tickAmount,
                                    a = this.w;
                                if (a.config.grid.xaxis.lines.show || a.config.xaxis.axisTicks.show) {
                                    var s, n = a.globals.padHorizontal,
                                        o = a.globals.gridHeight;
                                    a.globals.timescaleLabels.length ? function (t) {
                                        for (var i = t.xC, a = t.x1, s = t.y1, n = t.x2, o = t.y2, r = 0; r < i; r++) a = e.xaxisLabels[r].position, n = e.xaxisLabels[r].position, e._drawGridLines({
                                            i: r,
                                            x1: a,
                                            y1: s,
                                            x2: n,
                                            y2: o,
                                            xCount: l,
                                            parent: e.elgridLinesV
                                        })
                                    }({
                                        xC: l,
                                        x1: n,
                                        y1: 0,
                                        x2: s,
                                        y2: o
                                    }) : (a.globals.isXNumeric && (l = a.globals.xAxisScale.result.length), a.config.xaxis.convertedCatToNumeric && (l = a.globals.xaxisLabelsCount), function (t) {
                                        var i = t.xC,
                                            s = t.x1,
                                            n = t.y1,
                                            o = t.x2,
                                            r = t.y2;
                                        if (void 0 !== a.config.xaxis.tickAmount && "dataPoints" !== a.config.xaxis.tickAmount) a.globals.dom.baseEl.querySelectorAll(".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)").forEach((function (t, i) {
                                            var a = t.getBBox();
                                            e._drawGridLines({
                                                i,
                                                x1: a.x + a.width / 2,
                                                y1: n,
                                                x2: a.x + a.width / 2,
                                                y2: r,
                                                xCount: l,
                                                parent: e.elgridLinesV
                                            })
                                        }));
                                        else
                                            for (var h = 0; h < i + (a.globals.isXNumeric ? 0 : 1); h++) 0 === h && 1 === i && 1 === a.globals.dataPoints && (o = s = a.globals.gridWidth / 2), e._drawGridLines({
                                                i: h,
                                                x1: s,
                                                y1: n,
                                                x2: o,
                                                y2: r,
                                                xCount: l,
                                                parent: e.elgridLinesV
                                            }), o = s += a.globals.gridWidth / (a.globals.isXNumeric ? i - 1 : i)
                                    }({
                                        xC: l,
                                        x1: n,
                                        y1: 0,
                                        x2: s,
                                        y2: o
                                    }))
                                }
                                if (a.config.grid.yaxis.lines.show) {
                                    var r = 0,
                                        h = 0,
                                        c = a.globals.gridWidth,
                                        d = i + 1;
                                    this.isRangeBar && (d = a.globals.labels.length);
                                    for (var u = 0; u < d + (this.isRangeBar ? 1 : 0); u++) this._drawGridLine({
                                        x1: 0,
                                        y1: r,
                                        x2: c,
                                        y2: h,
                                        parent: this.elgridLinesH
                                    }), h = r += a.globals.gridHeight / (this.isRangeBar ? d : i)
                                }
                            }
                        }, {
                            key: "_drawInvertedXYLines",
                            value: function (t) {
                                var e = t.xCount,
                                    l = this.w;
                                if (l.config.grid.xaxis.lines.show || l.config.xaxis.axisTicks.show)
                                    for (var i, a = l.globals.padHorizontal, s = l.globals.gridHeight, n = 0; n < e + 1; n++) l.config.grid.xaxis.lines.show && this._drawGridLine({
                                        x1: a,
                                        y1: 0,
                                        x2: i,
                                        y2: s,
                                        parent: this.elgridLinesV
                                    }), new Z(this.ctx).drawXaxisTicks(a, this.elg), i = a = a + l.globals.gridWidth / e + .3;
                                if (l.config.grid.yaxis.lines.show)
                                    for (var o = 0, r = 0, h = l.globals.gridWidth, c = 0; c < l.globals.dataPoints + 1; c++) this._drawGridLine({
                                        x1: 0,
                                        y1: o,
                                        x2: h,
                                        y2: r,
                                        parent: this.elgridLinesH
                                    }), r = o += l.globals.gridHeight / l.globals.dataPoints
                            }
                        }, {
                            key: "renderGrid",
                            value: function () {
                                var t = this.w,
                                    e = new w(this.ctx);
                                this.elg = e.group({
                                    class: "apexcharts-grid"
                                }), this.elgridLinesH = e.group({
                                    class: "apexcharts-gridlines-horizontal"
                                }), this.elgridLinesV = e.group({
                                    class: "apexcharts-gridlines-vertical"
                                }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide());
                                for (var l, i = t.globals.yAxisScale.length ? t.globals.yAxisScale[0].result.length - 1 : 5, a = 0; a < t.globals.series.length && (void 0 !== t.globals.yAxisScale[a] && (i = t.globals.yAxisScale[a].result.length - 1), !(i > 2)); a++);
                                return !t.globals.isBarHorizontal || this.isRangeBar ? (l = this.xaxisLabels.length, this.isRangeBar && (i = t.globals.labels.length, t.config.xaxis.tickAmount && t.config.xaxis.labels.formatter && (l = t.config.xaxis.tickAmount)), this._drawXYLines({
                                    xCount: l,
                                    tickAmount: i
                                })) : (l = i, i = t.globals.xTickAmount, this._drawInvertedXYLines({
                                    xCount: l,
                                    tickAmount: i
                                })), this.drawGridBands(l, i), {
                                    el: this.elg,
                                    xAxisTickWidth: t.globals.gridWidth / l
                                }
                            }
                        }, {
                            key: "drawGridBands",
                            value: function (t, e) {
                                var l = this.w;
                                if (void 0 !== l.config.grid.row.colors && l.config.grid.row.colors.length > 0)
                                    for (var i = 0, a = l.globals.gridHeight / e, s = l.globals.gridWidth, n = 0, o = 0; n < e; n++, o++) o >= l.config.grid.row.colors.length && (o = 0), this._drawGridBandRect({
                                        c: o,
                                        x1: 0,
                                        y1: i,
                                        x2: s,
                                        y2: a,
                                        type: "row"
                                    }), i += l.globals.gridHeight / e;
                                if (void 0 !== l.config.grid.column.colors && l.config.grid.column.colors.length > 0)
                                    for (var r = l.globals.isBarHorizontal || "category" !== l.config.xaxis.type && !l.config.xaxis.convertedCatToNumeric ? t : t - 1, h = l.globals.padHorizontal, c = l.globals.padHorizontal + l.globals.gridWidth / r, d = l.globals.gridHeight, u = 0, g = 0; u < t; u++, g++) g >= l.config.grid.column.colors.length && (g = 0), this._drawGridBandRect({
                                        c: g,
                                        x1: h,
                                        y1: 0,
                                        x2: c,
                                        y2: d,
                                        type: "column"
                                    }), h += l.globals.gridWidth / r
                            }
                        }]), t
                    }(),
                    K = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "niceScale",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
                                    i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                                    a = arguments.length > 4 ? arguments[4] : void 0,
                                    s = this.w,
                                    n = Math.abs(e - t);
                                if ("dataPoints" === (l = this._adjustTicksForSmallRange(l, i, n)) && (l = s.globals.dataPoints - 1), t === Number.MIN_VALUE && 0 === e || !m.isNumber(t) && !m.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) {
                                    t = 0, e = l;
                                    var o = this.linearScale(t, e, l);
                                    return o
                                }
                                t > e ? (console.warn("axis.min cannot be greater than axis.max"), e = t + .1) : t === e && (t = 0 === t ? 0 : t - .5, e = 0 === e ? 2 : e + .5);
                                var r = [];
                                n < 1 && a && ("candlestick" === s.config.chart.type || "candlestick" === s.config.series[i].type || "boxPlot" === s.config.chart.type || "boxPlot" === s.config.series[i].type || s.globals.isRangeData) && (e *= 1.01);
                                var h = l + 1;
                                h < 2 ? h = 2 : h > 2 && (h -= 2);
                                var c = n / h,
                                    d = Math.floor(m.log10(c)),
                                    u = Math.pow(10, d),
                                    g = Math.round(c / u);
                                g < 1 && (g = 1);
                                var p = g * u,
                                    f = p * Math.floor(t / p),
                                    v = p * Math.ceil(e / p),
                                    x = f;
                                if (a && n > 2) {
                                    for (; r.push(x), !((x += p) > v););
                                    return {
                                        result: r,
                                        niceMin: r[0],
                                        niceMax: r[r.length - 1]
                                    }
                                }
                                var b = t;
                                (r = []).push(b);
                                for (var y = Math.abs(e - t) / l, w = 0; w <= l; w++) b += y, r.push(b);
                                return r[r.length - 2] >= e && r.pop(), {
                                    result: r,
                                    niceMin: r[0],
                                    niceMax: r[r.length - 1]
                                }
                            }
                        }, {
                            key: "linearScale",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,
                                    i = arguments.length > 3 ? arguments[3] : void 0,
                                    a = Math.abs(e - t);
                                "dataPoints" === (l = this._adjustTicksForSmallRange(l, i, a)) && (l = this.w.globals.dataPoints - 1);
                                var s = a / l;
                                l === Number.MAX_VALUE && (l = 10, s = 1);
                                for (var n = [], o = t; l >= 0;) n.push(o), o += s, l -= 1;
                                return {
                                    result: n,
                                    niceMin: n[0],
                                    niceMax: n[n.length - 1]
                                }
                            }
                        }, {
                            key: "logarithmicScale",
                            value: function (t, e) {
                                for (var l = [], i = Math.ceil(Math.log(t) / Math.log(e)) + 1, a = 0; a < i; a++) l.push(Math.pow(e, a));
                                return {
                                    result: l,
                                    niceMin: l[0],
                                    niceMax: l[l.length - 1]
                                }
                            }
                        }, {
                            key: "_adjustTicksForSmallRange",
                            value: function (t, e, l) {
                                var i = t;
                                if (void 0 !== e && this.w.config.yaxis[e].labels.formatter && void 0 === this.w.config.yaxis[e].tickAmount) {
                                    var a = this.w.config.yaxis[e].labels.formatter(1);
                                    m.isNumber(Number(a)) && !m.isFloat(a) && (i = Math.ceil(l))
                                }
                                return i < t ? i : t
                            }
                        }, {
                            key: "setYScaleForIndex",
                            value: function (t, e, l) {
                                var i = this.w.globals,
                                    a = this.w.config,
                                    s = i.isBarHorizontal ? a.xaxis : a.yaxis[t];
                                void 0 === i.yAxisScale[t] && (i.yAxisScale[t] = []);
                                var n = Math.abs(l - e);
                                if (s.logarithmic && n <= 5 && (i.invalidLogScale = !0), s.logarithmic && n > 5) i.allSeriesCollapsed = !1, i.yAxisScale[t] = this.logarithmicScale(l, s.logBase);
                                else if (l !== -Number.MAX_VALUE && m.isNumber(l))
                                    if (i.allSeriesCollapsed = !1, void 0 === s.min && void 0 === s.max || s.forceNiceScale) {
                                        var o = void 0 === a.yaxis[t].max && void 0 === a.yaxis[t].min || a.yaxis[t].forceNiceScale;
                                        i.yAxisScale[t] = this.niceScale(e, l, s.tickAmount ? s.tickAmount : n < 5 && n > 1 ? n + 1 : 5, t, o)
                                    } else i.yAxisScale[t] = this.linearScale(e, l, s.tickAmount, t);
                                else i.yAxisScale[t] = this.linearScale(0, 5, 5)
                            }
                        }, {
                            key: "setXScale",
                            value: function (t, e) {
                                var l = this.w,
                                    i = l.globals,
                                    a = l.config.xaxis,
                                    s = Math.abs(e - t);
                                return e !== -Number.MAX_VALUE && m.isNumber(e) ? i.xAxisScale = this.linearScale(t, e, a.tickAmount ? a.tickAmount : s < 5 && s > 1 ? s + 1 : 5, 0) : i.xAxisScale = this.linearScale(0, 5, 5), i.xAxisScale
                            }
                        }, {
                            key: "setMultipleYScales",
                            value: function () {
                                var t = this,
                                    e = this.w.globals,
                                    l = this.w.config,
                                    i = e.minYArr.concat([]),
                                    a = e.maxYArr.concat([]),
                                    s = [];
                                l.yaxis.forEach((function (e, n) {
                                    var o = n;
                                    l.series.forEach((function (t, l) {
                                        t.name === e.seriesName && (o = l, n !== l ? s.push({
                                            index: l,
                                            similarIndex: n,
                                            alreadyExists: !0
                                        }) : s.push({
                                            index: l
                                        }))
                                    }));
                                    var r = i[o],
                                        h = a[o];
                                    t.setYScaleForIndex(n, r, h)
                                })), this.sameScaleInMultipleAxes(i, a, s)
                            }
                        }, {
                            key: "sameScaleInMultipleAxes",
                            value: function (t, e, l) {
                                var i = this,
                                    a = this.w.config,
                                    s = this.w.globals,
                                    n = [];
                                l.forEach((function (t) {
                                    t.alreadyExists && (void 0 === n[t.index] && (n[t.index] = []), n[t.index].push(t.index), n[t.index].push(t.similarIndex))
                                })), s.yAxisSameScaleIndices = n, n.forEach((function (t, e) {
                                    n.forEach((function (l, i) {
                                        var a, s;
                                        e !== i && (a = t, s = l, a.filter((function (t) {
                                            return -1 !== s.indexOf(t)
                                        }))).length > 0 && (n[e] = n[e].concat(n[i]))
                                    }))
                                }));
                                var o = n.map((function (t) {
                                    return t.filter((function (e, l) {
                                        return t.indexOf(e) === l
                                    }))
                                })).map((function (t) {
                                    return t.sort()
                                }));
                                n = n.filter((function (t) {
                                    return !!t
                                }));
                                var r = o.slice(),
                                    h = r.map((function (t) {
                                        return JSON.stringify(t)
                                    }));
                                r = r.filter((function (t, e) {
                                    return h.indexOf(JSON.stringify(t)) === e
                                }));
                                var c = [],
                                    d = [];
                                t.forEach((function (t, l) {
                                    r.forEach((function (i, a) {
                                        i.indexOf(l) > -1 && (void 0 === c[a] && (c[a] = [], d[a] = []), c[a].push({
                                            key: l,
                                            value: t
                                        }), d[a].push({
                                            key: l,
                                            value: e[l]
                                        }))
                                    }))
                                }));
                                var u = Array.apply(null, Array(r.length)).map(Number.prototype.valueOf, Number.MIN_VALUE),
                                    g = Array.apply(null, Array(r.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);
                                c.forEach((function (t, e) {
                                    t.forEach((function (t, l) {
                                        u[e] = Math.min(t.value, u[e])
                                    }))
                                })), d.forEach((function (t, e) {
                                    t.forEach((function (t, l) {
                                        g[e] = Math.max(t.value, g[e])
                                    }))
                                })), t.forEach((function (t, e) {
                                    d.forEach((function (t, l) {
                                        var n = u[l],
                                            o = g[l];
                                        a.chart.stacked && (o = 0, t.forEach((function (t, e) {
                                            t.value !== -Number.MAX_VALUE && (o += t.value), n !== Number.MIN_VALUE && (n += c[l][e].value)
                                        }))), t.forEach((function (l, r) {
                                            t[r].key === e && (void 0 !== a.yaxis[e].min && (n = "function" == typeof a.yaxis[e].min ? a.yaxis[e].min(s.minY) : a.yaxis[e].min), void 0 !== a.yaxis[e].max && (o = "function" == typeof a.yaxis[e].max ? a.yaxis[e].max(s.maxY) : a.yaxis[e].max), i.setYScaleForIndex(e, n, o))
                                        }))
                                    }))
                                }))
                            }
                        }, {
                            key: "autoScaleY",
                            value: function (t, e, l) {
                                t || (t = this);
                                var i = t.w;
                                if (i.globals.isMultipleYAxis || i.globals.collapsedSeries.length) return console.warn("autoScaleYaxis is not supported in a multi-yaxis chart."), e;
                                var a = i.globals.seriesX[0],
                                    s = i.config.chart.stacked;
                                return e.forEach((function (t, n) {
                                    for (var o = 0, r = 0; r < a.length; r++)
                                        if (a[r] >= l.xaxis.min) {
                                            o = r;
                                            break
                                        } var h, c, d = i.globals.minYArr[n],
                                        u = i.globals.maxYArr[n],
                                        g = i.globals.stackedSeriesTotals;
                                    i.globals.series.forEach((function (n, r) {
                                        var p = n[o];
                                        s ? (p = g[o], h = c = p, g.forEach((function (t, e) {
                                            a[e] <= l.xaxis.max && a[e] >= l.xaxis.min && (t > c && null !== t && (c = t), n[e] < h && null !== n[e] && (h = n[e]))
                                        }))) : (h = c = p, n.forEach((function (t, e) {
                                            if (a[e] <= l.xaxis.max && a[e] >= l.xaxis.min) {
                                                var s = t,
                                                    n = t;
                                                i.globals.series.forEach((function (l, i) {
                                                    null !== t && (s = Math.min(l[e], s), n = Math.max(l[e], n))
                                                })), n > c && null !== n && (c = n), s < h && null !== s && (h = s)
                                            }
                                        }))), void 0 === h && void 0 === c && (h = d, c = u), (c *= c < 0 ? .9 : 1.1) < 0 && c < u && (c = u), (h *= h < 0 ? 1.1 : .9) < 0 && h > d && (h = d), e.length > 1 ? (e[r].min = void 0 === t.min ? h : t.min, e[r].max = void 0 === t.max ? c : t.max) : (e[0].min = void 0 === t.min ? h : t.min, e[0].max = void 0 === t.max ? c : t.max)
                                    }))
                                })), e
                            }
                        }]), t
                    }(),
                    J = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.scales = new K(e)
                        }
                        return h(t, [{
                            key: "init",
                            value: function () {
                                this.setYRange(), this.setXRange(), this.setZRange()
                            }
                        }, {
                            key: "getMinYMaxY",
                            value: function (t) {
                                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,
                                    l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,
                                    i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                                    a = this.w.config,
                                    s = this.w.globals,
                                    n = -Number.MAX_VALUE,
                                    o = Number.MIN_VALUE;
                                null === i && (i = t + 1);
                                var r = s.series,
                                    h = r,
                                    c = r;
                                "candlestick" === a.chart.type ? (h = s.seriesCandleL, c = s.seriesCandleH) : "boxPlot" === a.chart.type ? (h = s.seriesCandleO, c = s.seriesCandleC) : s.isRangeData && (h = s.seriesRangeStart, c = s.seriesRangeEnd);
                                for (var d = t; d < i; d++) {
                                    s.dataPoints = Math.max(s.dataPoints, r[d].length);
                                    for (var u = 0; u < s.series[d].length; u++) {
                                        var g = r[d][u];
                                        null !== g && m.isNumber(g) ? (void 0 !== c[d][u] && (n = Math.max(n, c[d][u]), e = Math.min(e, c[d][u])), void 0 !== h[d][u] && (e = Math.min(e, h[d][u]), l = Math.max(l, h[d][u])), "candlestick" !== this.w.config.chart.type && "boxPlot" !== this.w.config.chart.type || (void 0 !== s.seriesCandleC[d][u] && (n = Math.max(n, s.seriesCandleO[d][u]), n = Math.max(n, s.seriesCandleH[d][u]), n = Math.max(n, s.seriesCandleL[d][u]), n = Math.max(n, s.seriesCandleC[d][u]), "boxPlot" === this.w.config.chart.type && (n = Math.max(n, s.seriesCandleM[d][u]))), !a.series[d].type || "candlestick" === a.series[d].type && "boxPlot" === a.series[d].type || (n = Math.max(n, s.series[d][u]), e = Math.min(e, s.series[d][u])), l = n), s.seriesGoals[d] && s.seriesGoals[d][u] && Array.isArray(s.seriesGoals[d][u]) && s.seriesGoals[d][u].forEach((function (t) {
                                            o !== Number.MIN_VALUE && (o = Math.min(o, t.value), e = o), n = Math.max(n, t.value), l = n
                                        })), m.isFloat(g) && (g = m.noExponents(g), s.yValueDecimal = Math.max(s.yValueDecimal, g.toString().split(".")[1].length)), o > h[d][u] && h[d][u] < 0 && (o = h[d][u])) : s.hasNullValues = !0
                                    }
                                }
                                return "rangeBar" === a.chart.type && s.seriesRangeStart.length && s.isBarHorizontal && (o = e), "bar" === a.chart.type && (o < 0 && n < 0 && (n = 0), o === Number.MIN_VALUE && (o = 0)), {
                                    minY: o,
                                    maxY: n,
                                    lowestY: e,
                                    highestY: l
                                }
                            }
                        }, {
                            key: "setYRange",
                            value: function () {
                                var t = this.w.globals,
                                    e = this.w.config;
                                t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;
                                var l = Number.MAX_VALUE;
                                if (t.isMultipleYAxis)
                                    for (var i = 0; i < t.series.length; i++) {
                                        var a = this.getMinYMaxY(i, l, null, i + 1);
                                        t.minYArr.push(a.minY), t.maxYArr.push(a.maxY), l = a.lowestY
                                    }
                                var s = this.getMinYMaxY(0, l, null, t.series.length);
                                if (t.minY = s.minY, t.maxY = s.maxY, l = s.lowestY, e.chart.stacked && this._setStackedMinMax(), ("line" === e.chart.type || "area" === e.chart.type || "candlestick" === e.chart.type || "boxPlot" === e.chart.type || "rangeBar" === e.chart.type && !t.isBarHorizontal) && t.minY === Number.MIN_VALUE && l !== -Number.MAX_VALUE && l !== t.maxY) {
                                    var n = t.maxY - l;
                                    (l >= 0 && l <= 10 || void 0 !== e.yaxis[0].min || void 0 !== e.yaxis[0].max) && (n = 0), t.minY = l - 5 * n / 100, l > 0 && t.minY < 0 && (t.minY = 0), t.maxY = t.maxY + 5 * n / 100
                                }
                                return e.yaxis.forEach((function (e, l) {
                                    void 0 !== e.max && ("number" == typeof e.max ? t.maxYArr[l] = e.max : "function" == typeof e.max && (t.maxYArr[l] = e.max(t.isMultipleYAxis ? t.maxYArr[l] : t.maxY)), t.maxY = t.maxYArr[l]), void 0 !== e.min && ("number" == typeof e.min ? t.minYArr[l] = e.min : "function" == typeof e.min && (t.minYArr[l] = e.min(t.isMultipleYAxis ? t.minYArr[l] === Number.MIN_VALUE ? 0 : t.minYArr[l] : t.minY)), t.minY = t.minYArr[l])
                                })), t.isBarHorizontal && ["min", "max"].forEach((function (l) {
                                    void 0 !== e.xaxis[l] && "number" == typeof e.xaxis[l] && ("min" === l ? t.minY = e.xaxis[l] : t.maxY = e.xaxis[l])
                                })), t.isMultipleYAxis ? (this.scales.setMultipleYScales(), t.minY = l, t.yAxisScale.forEach((function (e, l) {
                                    t.minYArr[l] = e.niceMin, t.maxYArr[l] = e.niceMax
                                }))) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.yAxisScale[0].niceMin, t.maxYArr[0] = t.yAxisScale[0].niceMax), {
                                    minY: t.minY,
                                    maxY: t.maxY,
                                    minYArr: t.minYArr,
                                    maxYArr: t.maxYArr,
                                    yAxisScale: t.yAxisScale
                                }
                            }
                        }, {
                            key: "setXRange",
                            value: function () {
                                var t = this.w.globals,
                                    e = this.w.config,
                                    l = "numeric" === e.xaxis.type || "datetime" === e.xaxis.type || "category" === e.xaxis.type && !t.noLabelsProvided || t.noLabelsProvided || t.isXNumeric;
                                if (t.isXNumeric && function () {
                                        for (var e = 0; e < t.series.length; e++)
                                            if (t.labels[e])
                                                for (var l = 0; l < t.labels[e].length; l++) null !== t.labels[e][l] && m.isNumber(t.labels[e][l]) && (t.maxX = Math.max(t.maxX, t.labels[e][l]), t.initialMaxX = Math.max(t.maxX, t.labels[e][l]), t.minX = Math.min(t.minX, t.labels[e][l]), t.initialMinX = Math.min(t.minX, t.labels[e][l]))
                                    }(), t.noLabelsProvided && 0 === e.xaxis.categories.length && (t.maxX = t.labels[t.labels.length - 1], t.initialMaxX = t.labels[t.labels.length - 1], t.minX = 1, t.initialMinX = 1), t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric) {
                                    var i;
                                    if (void 0 === e.xaxis.tickAmount ? (i = Math.round(t.svgWidth / 150), "numeric" === e.xaxis.type && t.dataPoints < 30 && (i = t.dataPoints - 1), i > t.dataPoints && 0 !== t.dataPoints && (i = t.dataPoints - 1)) : "dataPoints" === e.xaxis.tickAmount ? (t.series.length > 1 && (i = t.series[t.maxValsInArrayIndex].length - 1), t.isXNumeric && (i = t.maxX - t.minX - 1)) : i = e.xaxis.tickAmount, t.xTickAmount = i, void 0 !== e.xaxis.max && "number" == typeof e.xaxis.max && (t.maxX = e.xaxis.max), void 0 !== e.xaxis.min && "number" == typeof e.xaxis.min && (t.minX = e.xaxis.min), void 0 !== e.xaxis.range && (t.minX = t.maxX - e.xaxis.range), t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE)
                                        if (e.xaxis.convertedCatToNumeric && !t.dataFormatXNumeric) {
                                            for (var a = [], s = t.minX - 1; s < t.maxX; s++) a.push(s + 1);
                                            t.xAxisScale = {
                                                result: a,
                                                niceMin: a[0],
                                                niceMax: a[a.length - 1]
                                            }
                                        } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);
                                    else t.xAxisScale = this.scales.linearScale(1, i, i), t.noLabelsProvided && t.labels.length > 0 && (t.xAxisScale = this.scales.linearScale(1, t.labels.length, i - 1), t.seriesX = t.labels.slice());
                                    l && (t.labels = t.xAxisScale.result.slice())
                                }
                                return t.isBarHorizontal && t.labels.length && (t.xTickAmount = t.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {
                                    minX: t.minX,
                                    maxX: t.maxX
                                }
                            }
                        }, {
                            key: "setZRange",
                            value: function () {
                                var t = this.w.globals;
                                if (t.isDataXYZ)
                                    for (var e = 0; e < t.series.length; e++)
                                        if (void 0 !== t.seriesZ[e])
                                            for (var l = 0; l < t.seriesZ[e].length; l++) null !== t.seriesZ[e][l] && m.isNumber(t.seriesZ[e][l]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][l]), t.minZ = Math.min(t.minZ, t.seriesZ[e][l]))
                            }
                        }, {
                            key: "_handleSingleDataPoint",
                            value: function () {
                                var t = this.w.globals,
                                    e = this.w.config;
                                if (t.minX === t.maxX) {
                                    var l = new Y(this.ctx);
                                    if ("datetime" === e.xaxis.type) {
                                        var i = l.getDate(t.minX);
                                        e.xaxis.labels.datetimeUTC ? i.setUTCDate(i.getUTCDate() - 2) : i.setDate(i.getDate() - 2), t.minX = new Date(i).getTime();
                                        var a = l.getDate(t.maxX);
                                        e.xaxis.labels.datetimeUTC ? a.setUTCDate(a.getUTCDate() + 2) : a.setDate(a.getDate() + 2), t.maxX = new Date(a).getTime()
                                    } else("numeric" === e.xaxis.type || "category" === e.xaxis.type && !t.noLabelsProvided) && (t.minX = t.minX - 2, t.initialMinX = t.minX, t.maxX = t.maxX + 2, t.initialMaxX = t.maxX)
                                }
                            }
                        }, {
                            key: "_getMinXDiff",
                            value: function () {
                                var t = this.w.globals;
                                t.isXNumeric && t.seriesX.forEach((function (e, l) {
                                    1 === e.length && e.push(t.seriesX[t.maxValsInArrayIndex][t.seriesX[t.maxValsInArrayIndex].length - 1]);
                                    var i = e.slice();
                                    i.sort((function (t, e) {
                                        return t - e
                                    })), i.forEach((function (e, l) {
                                        if (l > 0) {
                                            var a = e - i[l - 1];
                                            a > 0 && (t.minXDiff = Math.min(a, t.minXDiff))
                                        }
                                    })), 1 === t.dataPoints && t.minXDiff === Number.MAX_VALUE && (t.minXDiff = .5)
                                }))
                            }
                        }, {
                            key: "_setStackedMinMax",
                            value: function () {
                                var t = this.w.globals,
                                    e = [],
                                    l = [];
                                if (t.series.length)
                                    for (var i = 0; i < t.series[t.maxValsInArrayIndex].length; i++)
                                        for (var a = 0, s = 0, n = 0; n < t.series.length; n++) null !== t.series[n][i] && m.isNumber(t.series[n][i]) && (t.series[n][i] > 0 ? a = a + parseFloat(t.series[n][i]) + 1e-4 : s += parseFloat(t.series[n][i])), n === t.series.length - 1 && (e.push(a), l.push(s));
                                for (var o = 0; o < e.length; o++) t.maxY = Math.max(t.maxY, e[o]), t.minY = Math.min(t.minY, l[o])
                            }
                        }]), t
                    }(),
                    $ = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w;
                            var l = this.w;
                            this.xaxisFontSize = l.config.xaxis.labels.style.fontSize, this.axisFontFamily = l.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = l.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = "bar" === l.config.chart.type && l.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, "bottom" === l.config.xaxis.position && (this.xAxisoffX = l.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new j(e)
                        }
                        return h(t, [{
                            key: "drawYaxis",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = new w(this.ctx),
                                    a = l.config.yaxis[t].labels.style,
                                    s = a.fontSize,
                                    n = a.fontFamily,
                                    o = a.fontWeight,
                                    r = i.group({
                                        class: "apexcharts-yaxis",
                                        rel: t,
                                        transform: "translate(" + l.globals.translateYAxisX[t] + ", 0)"
                                    });
                                if (this.axesUtils.isYAxisHidden(t)) return r;
                                var h = i.group({
                                    class: "apexcharts-yaxis-texts-g"
                                });
                                r.add(h);
                                var c = l.globals.yAxisScale[t].result.length - 1,
                                    d = l.globals.gridHeight / c,
                                    u = l.globals.translateY,
                                    g = l.globals.yLabelFormatters[t],
                                    p = l.globals.yAxisScale[t].result.slice();
                                p = this.axesUtils.checkForReversedLabels(t, p);
                                var f = "";
                                if (l.config.yaxis[t].labels.show)
                                    for (var v = function (r) {
                                            var v = p[r];
                                            v = g(v, r, l);
                                            var x = l.config.yaxis[t].labels.padding;
                                            l.config.yaxis[t].opposite && 0 !== l.config.yaxis.length && (x *= -1);
                                            var m = e.axesUtils.getYAxisForeColor(a.colors, t),
                                                b = i.drawText({
                                                    x,
                                                    y: u + c / 10 + l.config.yaxis[t].labels.offsetY + 1,
                                                    text: v,
                                                    textAnchor: l.config.yaxis[t].opposite ? "start" : "end",
                                                    fontSize: s,
                                                    fontFamily: n,
                                                    fontWeight: o,
                                                    foreColor: Array.isArray(m) ? m[r] : m,
                                                    isPlainText: !1,
                                                    cssClass: "apexcharts-yaxis-label " + a.cssClass
                                                });
                                            r === c && (f = b), h.add(b);
                                            var y = document.createElementNS(l.globals.SVGNS, "title");
                                            if (y.textContent = Array.isArray(v) ? v.join(" ") : v, b.node.appendChild(y), 0 !== l.config.yaxis[t].labels.rotate) {
                                                var w = i.rotateAroundCenter(f.node),
                                                    A = i.rotateAroundCenter(b.node);
                                                b.node.setAttribute("transform", "rotate(".concat(l.config.yaxis[t].labels.rotate, " ").concat(w.x, " ").concat(A.y, ")"))
                                            }
                                            u += d
                                        }, x = c; x >= 0; x--) v(x);
                                if (void 0 !== l.config.yaxis[t].title.text) {
                                    var m = i.group({
                                            class: "apexcharts-yaxis-title"
                                        }),
                                        b = 0;
                                    l.config.yaxis[t].opposite && (b = l.globals.translateYAxisX[t]);
                                    var y = i.drawText({
                                        x: b,
                                        y: l.globals.gridHeight / 2 + l.globals.translateY + l.config.yaxis[t].title.offsetY,
                                        text: l.config.yaxis[t].title.text,
                                        textAnchor: "end",
                                        foreColor: l.config.yaxis[t].title.style.color,
                                        fontSize: l.config.yaxis[t].title.style.fontSize,
                                        fontWeight: l.config.yaxis[t].title.style.fontWeight,
                                        fontFamily: l.config.yaxis[t].title.style.fontFamily,
                                        cssClass: "apexcharts-yaxis-title-text " + l.config.yaxis[t].title.style.cssClass
                                    });
                                    m.add(y), r.add(m)
                                }
                                var A = l.config.yaxis[t].axisBorder,
                                    S = 31 + A.offsetX;
                                if (l.config.yaxis[t].opposite && (S = -31 - A.offsetX), A.show) {
                                    var k = i.drawLine(S, l.globals.translateY + A.offsetY - 2, S, l.globals.gridHeight + l.globals.translateY + A.offsetY + 2, A.color, 0, A.width);
                                    r.add(k)
                                }
                                return l.config.yaxis[t].axisTicks.show && this.axesUtils.drawYAxisTicks(S, c, A, l.config.yaxis[t].axisTicks, t, d, r), r
                            }
                        }, {
                            key: "drawYaxisInversed",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx),
                                    i = l.group({
                                        class: "apexcharts-xaxis apexcharts-yaxis-inversed"
                                    }),
                                    a = l.group({
                                        class: "apexcharts-xaxis-texts-g",
                                        transform: "translate(".concat(e.globals.translateXAxisX, ", ").concat(e.globals.translateXAxisY, ")")
                                    });
                                i.add(a);
                                var s = e.globals.yAxisScale[t].result.length - 1,
                                    n = e.globals.gridWidth / s + .1,
                                    o = n + e.config.xaxis.labels.offsetX,
                                    r = e.globals.xLabelFormatter,
                                    h = e.globals.yAxisScale[t].result.slice(),
                                    c = e.globals.timescaleLabels;
                                c.length > 0 && (this.xaxisLabels = c.slice(), s = (h = c.slice()).length), h = this.axesUtils.checkForReversedLabels(t, h);
                                var d = c.length;
                                if (e.config.xaxis.labels.show)
                                    for (var u = d ? 0 : s; d ? u < d : u >= 0; d ? u++ : u--) {
                                        var g = h[u];
                                        g = r(g, u, e);
                                        var p = e.globals.gridWidth + e.globals.padHorizontal - (o - n + e.config.xaxis.labels.offsetX);
                                        if (c.length) {
                                            var f = this.axesUtils.getLabel(h, c, p, u, this.drawnLabels, this.xaxisFontSize);
                                            p = f.x, g = f.text, this.drawnLabels.push(f.text), 0 === u && e.globals.skipFirstTimelinelabel && (g = ""), u === h.length - 1 && e.globals.skipLastTimelinelabel && (g = "")
                                        }
                                        var v = l.drawText({
                                            x: p,
                                            y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30 - ("top" === e.config.xaxis.position ? e.globals.xAxisHeight + e.config.xaxis.axisTicks.height - 2 : 0),
                                            text: g,
                                            textAnchor: "middle",
                                            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,
                                            fontSize: this.xaxisFontSize,
                                            fontFamily: this.xaxisFontFamily,
                                            fontWeight: e.config.xaxis.labels.style.fontWeight,
                                            isPlainText: !1,
                                            cssClass: "apexcharts-xaxis-label " + e.config.xaxis.labels.style.cssClass
                                        });
                                        a.add(v), v.tspan(g);
                                        var x = document.createElementNS(e.globals.SVGNS, "title");
                                        x.textContent = g, v.node.appendChild(x), o += n
                                    }
                                return this.inversedYAxisTitleText(i), this.inversedYAxisBorder(i), i
                            }
                        }, {
                            key: "inversedYAxisBorder",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx),
                                    i = e.config.xaxis.axisBorder;
                                if (i.show) {
                                    var a = 0;
                                    "bar" === e.config.chart.type && e.globals.isXNumeric && (a -= 15);
                                    var s = l.drawLine(e.globals.padHorizontal + a + i.offsetX, this.xAxisoffX, e.globals.gridWidth, this.xAxisoffX, i.color, 0, i.height);
                                    t.add(s)
                                }
                            }
                        }, {
                            key: "inversedYAxisTitleText",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx);
                                if (void 0 !== e.config.xaxis.title.text) {
                                    var i = l.group({
                                            class: "apexcharts-xaxis-title apexcharts-yaxis-title-inversed"
                                        }),
                                        a = l.drawText({
                                            x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,
                                            y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e.config.xaxis.title.style.fontSize) + e.config.xaxis.title.offsetY + 20,
                                            text: e.config.xaxis.title.text,
                                            textAnchor: "middle",
                                            fontSize: e.config.xaxis.title.style.fontSize,
                                            fontFamily: e.config.xaxis.title.style.fontFamily,
                                            fontWeight: e.config.xaxis.title.style.fontWeight,
                                            foreColor: e.config.xaxis.title.style.color,
                                            cssClass: "apexcharts-xaxis-title-text " + e.config.xaxis.title.style.cssClass
                                        });
                                    i.add(a), t.add(i)
                                }
                            }
                        }, {
                            key: "yAxisTitleRotate",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new w(this.ctx),
                                    a = {
                                        width: 0,
                                        height: 0
                                    },
                                    s = {
                                        width: 0,
                                        height: 0
                                    },
                                    n = l.globals.dom.baseEl.querySelector(" .apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-texts-g"));
                                null !== n && (a = n.getBoundingClientRect());
                                var o = l.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(t, "'] .apexcharts-yaxis-title text"));
                                if (null !== o && (s = o.getBoundingClientRect()), null !== o) {
                                    var r = this.xPaddingForYAxisTitle(t, a, s, e);
                                    o.setAttribute("x", r.xPos - (e ? 10 : 0))
                                }
                                if (null !== o) {
                                    var h = i.rotateAroundCenter(o);
                                    o.setAttribute("transform", "rotate(".concat(e ? -1 * l.config.yaxis[t].title.rotate : l.config.yaxis[t].title.rotate, " ").concat(h.x, " ").concat(h.y, ")"))
                                }
                            }
                        }, {
                            key: "xPaddingForYAxisTitle",
                            value: function (t, e, l, i) {
                                var a = this.w,
                                    s = 0,
                                    n = 0,
                                    o = 10;
                                return void 0 === a.config.yaxis[t].title.text || t < 0 ? {
                                    xPos: n,
                                    padd: 0
                                } : (i ? (n = e.width + a.config.yaxis[t].title.offsetX + l.width / 2 + o / 2, 0 === (s += 1) && (n -= o / 2)) : (n = -1 * e.width + a.config.yaxis[t].title.offsetX + o / 2 + l.width / 2, a.globals.isBarHorizontal && (o = 25, n = -1 * e.width - a.config.yaxis[t].title.offsetX - o)), {
                                    xPos: n,
                                    padd: o
                                })
                            }
                        }, {
                            key: "setYAxisXPosition",
                            value: function (t, e) {
                                var l = this.w,
                                    i = 0,
                                    a = 0,
                                    s = 18,
                                    n = 1;
                                l.config.yaxis.length > 1 && (this.multipleYs = !0), l.config.yaxis.map((function (o, r) {
                                    var h = l.globals.ignoreYAxisIndexes.indexOf(r) > -1 || !o.show || o.floating || 0 === t[r].width,
                                        c = t[r].width + e[r].width;
                                    o.opposite ? l.globals.isBarHorizontal ? (a = l.globals.gridWidth + l.globals.translateX - 1, l.globals.translateYAxisX[r] = a - o.labels.offsetX) : (a = l.globals.gridWidth + l.globals.translateX + n, h || (n = n + c + 20), l.globals.translateYAxisX[r] = a - o.labels.offsetX + 20) : (i = l.globals.translateX - s, h || (s = s + c + 20), l.globals.translateYAxisX[r] = i + o.labels.offsetX)
                                }))
                            }
                        }, {
                            key: "setYAxisTextAlignments",
                            value: function () {
                                var t = this.w,
                                    e = t.globals.dom.baseEl.getElementsByClassName("apexcharts-yaxis");
                                (e = m.listToArray(e)).forEach((function (e, l) {
                                    var i = t.config.yaxis[l];
                                    if (i && void 0 !== i.labels.align) {
                                        var a = t.globals.dom.baseEl.querySelector(".apexcharts-yaxis[rel='".concat(l, "'] .apexcharts-yaxis-texts-g")),
                                            s = t.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxis[rel='".concat(l, "'] .apexcharts-yaxis-label"));
                                        s = m.listToArray(s);
                                        var n = a.getBoundingClientRect();
                                        "left" === i.labels.align ? (s.forEach((function (t, e) {
                                            t.setAttribute("text-anchor", "start")
                                        })), i.opposite || a.setAttribute("transform", "translate(-".concat(n.width, ", 0)"))) : "center" === i.labels.align ? (s.forEach((function (t, e) {
                                            t.setAttribute("text-anchor", "middle")
                                        })), a.setAttribute("transform", "translate(".concat(n.width / 2 * (i.opposite ? 1 : -1), ", 0)"))) : "right" === i.labels.align && (s.forEach((function (t, e) {
                                            t.setAttribute("text-anchor", "end")
                                        })), i.opposite && a.setAttribute("transform", "translate(".concat(n.width, ", 0)")))
                                    }
                                }))
                            }
                        }]), t
                    }(),
                    Q = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.documentEvent = m.bind(this.documentEvent, this)
                        }
                        return h(t, [{
                            key: "addEventListener",
                            value: function (t, e) {
                                var l = this.w;
                                l.globals.events.hasOwnProperty(t) ? l.globals.events[t].push(e) : l.globals.events[t] = [e]
                            }
                        }, {
                            key: "removeEventListener",
                            value: function (t, e) {
                                var l = this.w;
                                if (l.globals.events.hasOwnProperty(t)) {
                                    var i = l.globals.events[t].indexOf(e); - 1 !== i && l.globals.events[t].splice(i, 1)
                                }
                            }
                        }, {
                            key: "fireEvent",
                            value: function (t, e) {
                                var l = this.w;
                                if (l.globals.events.hasOwnProperty(t)) {
                                    e && e.length || (e = []);
                                    for (var i = l.globals.events[t], a = i.length, s = 0; s < a; s++) i[s].apply(null, e)
                                }
                            }
                        }, {
                            key: "setupEventHandlers",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = this.ctx,
                                    i = e.globals.dom.baseEl.querySelector(e.globals.chartClass);
                                this.ctx.eventList.forEach((function (t) {
                                    i.addEventListener(t, (function (t) {
                                        var i = Object.assign({}, e, {
                                            seriesIndex: e.globals.capturedSeriesIndex,
                                            dataPointIndex: e.globals.capturedDataPointIndex
                                        });
                                        "mousemove" === t.type || "touchmove" === t.type ? "function" == typeof e.config.chart.events.mouseMove && e.config.chart.events.mouseMove(t, l, i) : "mouseleave" === t.type || "touchleave" === t.type ? "function" == typeof e.config.chart.events.mouseLeave && e.config.chart.events.mouseLeave(t, l, i) : ("mouseup" === t.type && 1 === t.which || "touchend" === t.type) && ("function" == typeof e.config.chart.events.click && e.config.chart.events.click(t, l, i), l.ctx.events.fireEvent("click", [t, l, i]))
                                    }), {
                                        capture: !1,
                                        passive: !0
                                    })
                                })), this.ctx.eventList.forEach((function (l) {
                                    e.globals.dom.baseEl.addEventListener(l, t.documentEvent, {
                                        passive: !0
                                    })
                                })), this.ctx.core.setupBrushHandler()
                            }
                        }, {
                            key: "documentEvent",
                            value: function (t) {
                                var e = this.w,
                                    l = t.target.className;
                                if ("click" === t.type) {
                                    var i = e.globals.dom.baseEl.querySelector(".apexcharts-menu");
                                    i && i.classList.contains("apexcharts-menu-open") && "apexcharts-menu-icon" !== l && i.classList.remove("apexcharts-menu-open")
                                }
                                e.globals.clientX = "touchmove" === t.type ? t.touches[0].clientX : t.clientX, e.globals.clientY = "touchmove" === t.type ? t.touches[0].clientY : t.clientY
                            }
                        }]), t
                    }(),
                    tt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "setCurrentLocaleValues",
                            value: function (t) {
                                var e = this.w.config.chart.locales;
                                window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));
                                var l = e.filter((function (e) {
                                    return e.name === t
                                }))[0];
                                if (!l) throw new Error("Wrong locale name provided. Please make sure you set the correct locale name in options");
                                var i = m.extend(M, l);
                                this.w.globals.locale = i.options
                            }
                        }]), t
                    }(),
                    et = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "drawAxis",
                            value: function (t, e) {
                                var l, i, a = this.w.globals,
                                    s = this.w.config,
                                    n = new Z(this.ctx),
                                    o = new $(this.ctx);
                                a.axisCharts && "radar" !== t && (a.isBarHorizontal ? (i = o.drawYaxisInversed(0), l = n.drawXaxisInversed(0), a.dom.elGraphical.add(l), a.dom.elGraphical.add(i)) : (l = n.drawXaxis(), a.dom.elGraphical.add(l), s.yaxis.map((function (t, e) {
                                    -1 === a.ignoreYAxisIndexes.indexOf(e) && (i = o.drawYaxis(e), a.dom.Paper.add(i))
                                }))))
                            }
                        }]), t
                    }(),
                    lt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "drawXCrosshairs",
                            value: function () {
                                var t = this.w,
                                    e = new w(this.ctx),
                                    l = new y(this.ctx),
                                    i = t.config.xaxis.crosshairs.fill.gradient,
                                    a = t.config.xaxis.crosshairs.dropShadow,
                                    s = t.config.xaxis.crosshairs.fill.type,
                                    n = i.colorFrom,
                                    o = i.colorTo,
                                    r = i.opacityFrom,
                                    h = i.opacityTo,
                                    c = i.stops,
                                    d = a.enabled,
                                    u = a.left,
                                    g = a.top,
                                    p = a.blur,
                                    f = a.color,
                                    v = a.opacity,
                                    x = t.config.xaxis.crosshairs.fill.color;
                                if (t.config.xaxis.crosshairs.show) {
                                    "gradient" === s && (x = e.drawGradient("vertical", n, o, r, h, null, c, null));
                                    var b = e.drawRect();
                                    1 === t.config.xaxis.crosshairs.width && (b = e.drawLine());
                                    var A = t.globals.gridHeight;
                                    (!m.isNumber(A) || A < 0) && (A = 0);
                                    var S = t.config.xaxis.crosshairs.width;
                                    (!m.isNumber(S) || S < 0) && (S = 0), b.attr({
                                        class: "apexcharts-xcrosshairs",
                                        x: 0,
                                        y: 0,
                                        y2: A,
                                        width: S,
                                        height: A,
                                        fill: x,
                                        filter: "none",
                                        "fill-opacity": t.config.xaxis.crosshairs.opacity,
                                        stroke: t.config.xaxis.crosshairs.stroke.color,
                                        "stroke-width": t.config.xaxis.crosshairs.stroke.width,
                                        "stroke-dasharray": t.config.xaxis.crosshairs.stroke.dashArray
                                    }), d && (b = l.dropShadow(b, {
                                        left: u,
                                        top: g,
                                        blur: p,
                                        color: f,
                                        opacity: v
                                    })), t.globals.dom.elGraphical.add(b)
                                }
                            }
                        }, {
                            key: "drawYCrosshairs",
                            value: function () {
                                var t = this.w,
                                    e = new w(this.ctx),
                                    l = t.config.yaxis[0].crosshairs,
                                    i = t.globals.barPadForNumericAxis;
                                if (t.config.yaxis[0].crosshairs.show) {
                                    var a = e.drawLine(-i, 0, t.globals.gridWidth + i, 0, l.stroke.color, l.stroke.dashArray, l.stroke.width);
                                    a.attr({
                                        class: "apexcharts-ycrosshairs"
                                    }), t.globals.dom.elGraphical.add(a)
                                }
                                var s = e.drawLine(-i, 0, t.globals.gridWidth + i, 0, l.stroke.color, 0, 0);
                                s.attr({
                                    class: "apexcharts-ycrosshairs-hidden"
                                }), t.globals.dom.elGraphical.add(s)
                            }
                        }]), t
                    }(),
                    it = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "checkResponsiveConfig",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = l.config;
                                if (0 !== i.responsive.length) {
                                    var a = i.responsive.slice();
                                    a.sort((function (t, e) {
                                        return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0
                                    })).reverse();
                                    var s = new B({}),
                                        n = function () {
                                            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                                                i = a[0].breakpoint,
                                                n = window.innerWidth > 0 ? window.innerWidth : screen.width;
                                            if (n > i) {
                                                var o = k.extendArrayProps(s, l.globals.initialConfig, l);
                                                t = m.extend(o, t), t = m.extend(l.config, t), e.overrideResponsiveOptions(t)
                                            } else
                                                for (var r = 0; r < a.length; r++) n < a[r].breakpoint && (t = k.extendArrayProps(s, a[r].options, l), t = m.extend(l.config, t), e.overrideResponsiveOptions(t))
                                        };
                                    if (t) {
                                        var o = k.extendArrayProps(s, t, l);
                                        o = m.extend(l.config, o), n(o = m.extend(o, t))
                                    } else n({})
                                }
                            }
                        }, {
                            key: "overrideResponsiveOptions",
                            value: function (t) {
                                var e = new B(t).init({
                                    responsiveOverride: !0
                                });
                                this.w.config = e
                            }
                        }]), t
                    }(),
                    at = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.colors = [], this.w = e.w;
                            var l = this.w;
                            this.isColorFn = !1, this.isHeatmapDistributed = "treemap" === l.config.chart.type && l.config.plotOptions.treemap.distributed || "heatmap" === l.config.chart.type && l.config.plotOptions.heatmap.distributed, this.isBarDistributed = l.config.plotOptions.bar.distributed && ("bar" === l.config.chart.type || "rangeBar" === l.config.chart.type)
                        }
                        return h(t, [{
                            key: "init",
                            value: function () {
                                this.setDefaultColors()
                            }
                        }, {
                            key: "setDefaultColors",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = new m;
                                if (e.globals.dom.elWrap.classList.add("apexcharts-theme-".concat(e.config.theme.mode)), void 0 === e.config.colors ? e.globals.colors = this.predefined() : (e.globals.colors = e.config.colors, Array.isArray(e.config.colors) && e.config.colors.length > 0 && "function" == typeof e.config.colors[0] && (e.globals.colors = e.config.series.map((function (l, i) {
                                        var a = e.config.colors[i];
                                        return a || (a = e.config.colors[0]), "function" == typeof a ? (t.isColorFn = !0, a({
                                            value: e.globals.axisCharts ? e.globals.series[i][0] ? e.globals.series[i][0] : 0 : e.globals.series[i],
                                            seriesIndex: i,
                                            dataPointIndex: i,
                                            w: e
                                        })) : a
                                    })))), e.globals.seriesColors.map((function (t, l) {
                                        t && (e.globals.colors[l] = t)
                                    })), e.config.theme.monochrome.enabled) {
                                    var i = [],
                                        a = e.globals.series.length;
                                    (this.isBarDistributed || this.isHeatmapDistributed) && (a = e.globals.series[0].length * e.globals.series.length);
                                    for (var s = e.config.theme.monochrome.color, n = 1 / (a / e.config.theme.monochrome.shadeIntensity), o = e.config.theme.monochrome.shadeTo, r = 0, h = 0; h < a; h++) {
                                        var c = void 0;
                                        "dark" === o ? (c = l.shadeColor(-1 * r, s), r += n) : (c = l.shadeColor(r, s), r += n), i.push(c)
                                    }
                                    e.globals.colors = i.slice()
                                }
                                var d = e.globals.colors.slice();
                                this.pushExtraColors(e.globals.colors), ["fill", "stroke"].forEach((function (l) {
                                    void 0 === e.config[l].colors ? e.globals[l].colors = t.isColorFn ? e.config.colors : d : e.globals[l].colors = e.config[l].colors.slice(), t.pushExtraColors(e.globals[l].colors)
                                })), void 0 === e.config.dataLabels.style.colors ? e.globals.dataLabels.style.colors = d : e.globals.dataLabels.style.colors = e.config.dataLabels.style.colors.slice(), this.pushExtraColors(e.globals.dataLabels.style.colors, 50), void 0 === e.config.plotOptions.radar.polygons.fill.colors ? e.globals.radarPolygons.fill.colors = ["dark" === e.config.theme.mode ? "#424242" : "none"] : e.globals.radarPolygons.fill.colors = e.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(e.globals.radarPolygons.fill.colors, 20), void 0 === e.config.markers.colors ? e.globals.markers.colors = d : e.globals.markers.colors = e.config.markers.colors.slice(), this.pushExtraColors(e.globals.markers.colors)
                            }
                        }, {
                            key: "pushExtraColors",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                    i = this.w,
                                    a = e || i.globals.series.length;
                                if (null === l && (l = this.isBarDistributed || this.isHeatmapDistributed || "heatmap" === i.config.chart.type && i.config.plotOptions.heatmap.colorScale.inverse), l && i.globals.series.length && (a = i.globals.series[i.globals.maxValsInArrayIndex].length * i.globals.series.length), t.length < a)
                                    for (var s = a - t.length, n = 0; n < s; n++) t.push(t[n])
                            }
                        }, {
                            key: "updateThemeOptions",
                            value: function (t) {
                                t.chart = t.chart || {}, t.tooltip = t.tooltip || {};
                                var e = t.theme.mode || "light",
                                    l = t.theme.palette ? t.theme.palette : "dark" === e ? "palette4" : "palette1",
                                    i = t.chart.foreColor ? t.chart.foreColor : "dark" === e ? "#f6f7f8" : "#373d3f";
                                return t.tooltip.theme = e, t.chart.foreColor = i, t.theme.palette = l, t
                            }
                        }, {
                            key: "predefined",
                            value: function () {
                                switch (this.w.config.theme.palette) {
                                    case "palette1":
                                    default:
                                        this.colors = ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"];
                                        break;
                                    case "palette2":
                                        this.colors = ["#3f51b5", "#03a9f4", "#4caf50", "#f9ce1d", "#FF9800"];
                                        break;
                                    case "palette3":
                                        this.colors = ["#33b2df", "#546E7A", "#d4526e", "#13d8aa", "#A5978B"];
                                        break;
                                    case "palette4":
                                        this.colors = ["#4ecdc4", "#c7f464", "#81D4FA", "#fd6a6a", "#546E7A"];
                                        break;
                                    case "palette5":
                                        this.colors = ["#2b908f", "#f9a3a4", "#90ee7e", "#fa4443", "#69d2e7"];
                                        break;
                                    case "palette6":
                                        this.colors = ["#449DD1", "#F86624", "#EA3546", "#662E9B", "#C5D86D"];
                                        break;
                                    case "palette7":
                                        this.colors = ["#D7263D", "#1B998B", "#2E294E", "#F46036", "#E2C044"];
                                        break;
                                    case "palette8":
                                        this.colors = ["#662E9B", "#F86624", "#F9C80E", "#EA3546", "#43BCCD"];
                                        break;
                                    case "palette9":
                                        this.colors = ["#5C4742", "#A5978B", "#8D5B4C", "#5A2A27", "#C4BBAF"];
                                        break;
                                    case "palette10":
                                        this.colors = ["#A300D6", "#7D02EB", "#5653FE", "#2983FF", "#00B1F2"]
                                }
                                return this.colors
                            }
                        }]), t
                    }(),
                    st = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "draw",
                            value: function () {
                                this.drawTitleSubtitle("title"), this.drawTitleSubtitle("subtitle")
                            }
                        }, {
                            key: "drawTitleSubtitle",
                            value: function (t) {
                                var e = this.w,
                                    l = "title" === t ? e.config.title : e.config.subtitle,
                                    i = e.globals.svgWidth / 2,
                                    a = l.offsetY,
                                    s = "middle";
                                if ("left" === l.align ? (i = 10, s = "start") : "right" === l.align && (i = e.globals.svgWidth - 10, s = "end"), i += l.offsetX, a = a + parseInt(l.style.fontSize, 10) + l.margin / 2, void 0 !== l.text) {
                                    var n = new w(this.ctx).drawText({
                                        x: i,
                                        y: a,
                                        text: l.text,
                                        textAnchor: s,
                                        fontSize: l.style.fontSize,
                                        fontFamily: l.style.fontFamily,
                                        fontWeight: l.style.fontWeight,
                                        foreColor: l.style.color,
                                        opacity: 1
                                    });
                                    n.node.setAttribute("class", "apexcharts-".concat(t, "-text")), e.globals.dom.Paper.add(n)
                                }
                            }
                        }]), t
                    }(),
                    nt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.dCtx = e
                        }
                        return h(t, [{
                            key: "getTitleSubtitleCoords",
                            value: function (t) {
                                var e = this.w,
                                    l = 0,
                                    i = 0,
                                    a = "title" === t ? e.config.title.floating : e.config.subtitle.floating,
                                    s = e.globals.dom.baseEl.querySelector(".apexcharts-".concat(t, "-text"));
                                if (null !== s && !a) {
                                    var n = s.getBoundingClientRect();
                                    l = n.width, i = e.globals.axisCharts ? n.height + 5 : n.height
                                }
                                return {
                                    width: l,
                                    height: i
                                }
                            }
                        }, {
                            key: "getLegendsRect",
                            value: function () {
                                var t = this.w,
                                    e = t.globals.dom.baseEl.querySelector(".apexcharts-legend");
                                t.config.legend.height || "top" !== t.config.legend.position && "bottom" !== t.config.legend.position || (e.style.maxHeight = t.globals.svgHeight / 2 + "px");
                                var l = Object.assign({}, m.getBoundingClientRect(e));
                                return null !== e && !t.config.legend.floating && t.config.legend.show ? this.dCtx.lgRect = {
                                    x: l.x,
                                    y: l.y,
                                    height: l.height,
                                    width: 0 === l.height ? 0 : l.width
                                } : this.dCtx.lgRect = {
                                    x: 0,
                                    y: 0,
                                    height: 0,
                                    width: 0
                                }, "left" !== t.config.legend.position && "right" !== t.config.legend.position || 1.5 * this.dCtx.lgRect.width > t.globals.svgWidth && (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5), this.dCtx.lgRect
                            }
                        }, {
                            key: "getLargestStringFromMultiArr",
                            value: function (t, e) {
                                var l = t;
                                if (this.w.globals.isMultiLineX) {
                                    var i = e.map((function (t, e) {
                                            return Array.isArray(t) ? t.length : 1
                                        })),
                                        a = Math.max.apply(Math, v(i));
                                    l = e[i.indexOf(a)]
                                }
                                return l
                            }
                        }]), t
                    }(),
                    ot = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.dCtx = e
                        }
                        return h(t, [{
                            key: "getxAxisLabelsCoords",
                            value: function () {
                                var t, e = this.w,
                                    l = e.globals.labels.slice();
                                if (e.config.xaxis.convertedCatToNumeric && 0 === l.length && (l = e.globals.categoryLabels), e.globals.timescaleLabels.length > 0) {
                                    var i = this.getxAxisTimeScaleLabelsCoords();
                                    t = {
                                        width: i.width,
                                        height: i.height
                                    }, e.globals.rotateXLabels = !1
                                } else {
                                    this.dCtx.lgWidthForSideLegends = "left" !== e.config.legend.position && "right" !== e.config.legend.position || e.config.legend.floating ? 0 : this.dCtx.lgRect.width;
                                    var a = e.globals.xLabelFormatter,
                                        s = m.getLargestStringFromArr(l),
                                        n = this.dCtx.dimHelpers.getLargestStringFromMultiArr(s, l);
                                    e.globals.isBarHorizontal && (n = s = e.globals.yAxisScale[0].result.reduce((function (t, e) {
                                        return t.length > e.length ? t : e
                                    }), 0));
                                    var o = new _(this.dCtx.ctx),
                                        r = s;
                                    s = o.xLabelFormat(a, s, r, {
                                        i: void 0,
                                        dateFormatter: new Y(this.dCtx.ctx).formatDate,
                                        w: e
                                    }), n = o.xLabelFormat(a, n, r, {
                                        i: void 0,
                                        dateFormatter: new Y(this.dCtx.ctx).formatDate,
                                        w: e
                                    }), (e.config.xaxis.convertedCatToNumeric && void 0 === s || "" === String(s).trim()) && (n = s = "1");
                                    var h = new w(this.dCtx.ctx),
                                        c = h.getTextRects(s, e.config.xaxis.labels.style.fontSize),
                                        d = c;
                                    if (s !== n && (d = h.getTextRects(n, e.config.xaxis.labels.style.fontSize)), (t = {
                                            width: c.width >= d.width ? c.width : d.width,
                                            height: c.height >= d.height ? c.height : d.height
                                        }).width * l.length > e.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e.config.xaxis.labels.rotate || e.config.xaxis.labels.rotateAlways) {
                                        if (!e.globals.isBarHorizontal) {
                                            e.globals.rotateXLabels = !0;
                                            var u = function (t) {
                                                return h.getTextRects(t, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, "rotate(".concat(e.config.xaxis.labels.rotate, " 0 0)"), !1)
                                            };
                                            c = u(s), s !== n && (d = u(n)), t.height = (c.height > d.height ? c.height : d.height) / 1.5, t.width = c.width > d.width ? c.width : d.width
                                        }
                                    } else e.globals.rotateXLabels = !1
                                }
                                return e.config.xaxis.labels.show || (t = {
                                    width: 0,
                                    height: 0
                                }), {
                                    width: t.width,
                                    height: t.height
                                }
                            }
                        }, {
                            key: "getxAxisTitleCoords",
                            value: function () {
                                var t = this.w,
                                    e = 0,
                                    l = 0;
                                if (void 0 !== t.config.xaxis.title.text) {
                                    var i = new w(this.dCtx.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);
                                    e = i.width, l = i.height
                                }
                                return {
                                    width: e,
                                    height: l
                                }
                            }
                        }, {
                            key: "getxAxisTimeScaleLabelsCoords",
                            value: function () {
                                var t, e = this.w;
                                this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();
                                var l = this.dCtx.timescaleLabels.map((function (t) {
                                        return t.value
                                    })),
                                    i = l.reduce((function (t, e) {
                                        return void 0 === t ? (console.error("You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"), 0) : t.length > e.length ? t : e
                                    }), 0);
                                return 1.05 * (t = new w(this.dCtx.ctx).getTextRects(i, e.config.xaxis.labels.style.fontSize)).width * l.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t
                            }
                        }, {
                            key: "additionalPaddingXLabels",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = l.globals,
                                    a = l.config,
                                    s = a.xaxis.type,
                                    n = t.width;
                                i.skipLastTimelinelabel = !1, i.skipFirstTimelinelabel = !1;
                                var o = l.config.yaxis[0].opposite && l.globals.isBarHorizontal,
                                    r = function (t, o) {
                                        (function (t) {
                                            return -1 !== i.collapsedSeriesIndices.indexOf(t)
                                        })(o) || function (t) {
                                            if (e.dCtx.timescaleLabels && e.dCtx.timescaleLabels.length) {
                                                var o = e.dCtx.timescaleLabels[0],
                                                    r = e.dCtx.timescaleLabels[e.dCtx.timescaleLabels.length - 1].position + n / 1.75 - e.dCtx.yAxisWidthRight,
                                                    h = o.position - n / 1.75 + e.dCtx.yAxisWidthLeft,
                                                    c = "right" === l.config.legend.position && e.dCtx.lgRect.width > 0 ? e.dCtx.lgRect.width : 0;
                                                r > i.svgWidth - i.translateX - c && (i.skipLastTimelinelabel = !0), h < -(t.show && !t.floating || "bar" !== a.chart.type && "candlestick" !== a.chart.type && "rangeBar" !== a.chart.type && "boxPlot" !== a.chart.type ? 10 : n / 1.75) && (i.skipFirstTimelinelabel = !0)
                                            } else "datetime" === s ? e.dCtx.gridPad.right < n && !i.rotateXLabels && (i.skipLastTimelinelabel = !0) : "datetime" !== s && e.dCtx.gridPad.right < n / 2 - e.dCtx.yAxisWidthRight && !i.rotateXLabels && !l.config.xaxis.labels.trim && ("between" !== l.config.xaxis.tickPlacement || l.globals.isBarHorizontal) && (e.dCtx.xPadRight = n / 2 + 1)
                                        }(t)
                                    };
                                a.yaxis.forEach((function (t, l) {
                                    o ? (e.dCtx.gridPad.left < n && (e.dCtx.xPadLeft = n / 2 + 1), e.dCtx.xPadRight = n / 2 + 1) : r(t, l)
                                }))
                            }
                        }]), t
                    }(),
                    rt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.dCtx = e
                        }
                        return h(t, [{
                            key: "getyAxisLabelsCoords",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = [],
                                    i = 10,
                                    a = new j(this.dCtx.ctx);
                                return e.config.yaxis.map((function (s, n) {
                                    var o = e.globals.yAxisScale[n],
                                        r = 0;
                                    if (!a.isYAxisHidden(n) && s.labels.show && void 0 !== s.labels.minWidth && (r = s.labels.minWidth), !a.isYAxisHidden(n) && s.labels.show && o.result.length) {
                                        var h = e.globals.yLabelFormatters[n],
                                            c = o.niceMin === Number.MIN_VALUE ? 0 : o.niceMin,
                                            d = String(c).length > String(o.niceMax).length ? c : o.niceMax,
                                            u = h(d, {
                                                seriesIndex: n,
                                                dataPointIndex: -1,
                                                w: e
                                            }),
                                            g = u;
                                        if (void 0 !== u && 0 !== u.length || (u = d), e.globals.isBarHorizontal) {
                                            i = 0;
                                            var p = e.globals.labels.slice();
                                            u = h(u = m.getLargestStringFromArr(p), {
                                                seriesIndex: n,
                                                dataPointIndex: -1,
                                                w: e
                                            }), g = t.dCtx.dimHelpers.getLargestStringFromMultiArr(u, p)
                                        }
                                        var f = new w(t.dCtx.ctx),
                                            v = "rotate(".concat(s.labels.rotate, " 0 0)"),
                                            x = f.getTextRects(u, s.labels.style.fontSize, s.labels.style.fontFamily, v, !1),
                                            b = x;
                                        u !== g && (b = f.getTextRects(g, s.labels.style.fontSize, s.labels.style.fontFamily, v, !1)), l.push({
                                            width: (r > b.width || r > x.width ? r : b.width > x.width ? b.width : x.width) + i,
                                            height: b.height > x.height ? b.height : x.height
                                        })
                                    } else l.push({
                                        width: 0,
                                        height: 0
                                    })
                                })), l
                            }
                        }, {
                            key: "getyAxisTitleCoords",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = [];
                                return e.config.yaxis.map((function (e, i) {
                                    if (e.show && void 0 !== e.title.text) {
                                        var a = new w(t.dCtx.ctx),
                                            s = "rotate(".concat(e.title.rotate, " 0 0)"),
                                            n = a.getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, s, !1);
                                        l.push({
                                            width: n.width,
                                            height: n.height
                                        })
                                    } else l.push({
                                        width: 0,
                                        height: 0
                                    })
                                })), l
                            }
                        }, {
                            key: "getTotalYAxisWidth",
                            value: function () {
                                var t = this.w,
                                    e = 0,
                                    l = 0,
                                    i = 0,
                                    a = t.globals.yAxisScale.length > 1 ? 10 : 0,
                                    s = new j(this.dCtx.ctx),
                                    n = function (n, o) {
                                        var r = t.config.yaxis[o].floating,
                                            h = 0;
                                        n.width > 0 && !r ? (h = n.width + a, function (e) {
                                            return t.globals.ignoreYAxisIndexes.indexOf(e) > -1
                                        }(o) && (h = h - n.width - a)) : h = r || s.isYAxisHidden(o) ? 0 : 5, t.config.yaxis[o].opposite ? i += h : l += h, e += h
                                    };
                                return t.globals.yLabelsCoords.map((function (t, e) {
                                    n(t, e)
                                })), t.globals.yTitleCoords.map((function (t, e) {
                                    n(t, e)
                                })), t.globals.isBarHorizontal && !t.config.yaxis[0].floating && (e = t.globals.yLabelsCoords[0].width + t.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = l, this.dCtx.yAxisWidthRight = i, e
                            }
                        }]), t
                    }(),
                    ht = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.dCtx = e
                        }
                        return h(t, [{
                            key: "gridPadForColumnsInNumericAxis",
                            value: function (t) {
                                var e = this.w;
                                if (e.globals.noData || e.globals.allSeriesCollapsed) return 0;
                                var l = function (t) {
                                        return "bar" === t || "rangeBar" === t || "candlestick" === t || "boxPlot" === t
                                    },
                                    i = e.config.chart.type,
                                    a = 0,
                                    s = l(i) ? e.config.series.length : 1;
                                if (e.globals.comboBarCount > 0 && (s = e.globals.comboBarCount), e.globals.collapsedSeries.forEach((function (t) {
                                        l(t.type) && (s -= 1)
                                    })), e.config.chart.stacked && (s = 1), (l(i) || e.globals.comboBarCount > 0) && e.globals.isXNumeric && !e.globals.isBarHorizontal && s > 0) {
                                    var n, o, r = Math.abs(e.globals.initialMaxX - e.globals.initialMinX);
                                    r <= 3 && (r = e.globals.dataPoints), n = r / t, e.globals.minXDiff && e.globals.minXDiff / n > 0 && (o = e.globals.minXDiff / n), o > t / 2 && (o /= 2), (a = o / s * parseInt(e.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (a = 1), a = a / (s > 1 ? 1 : 1.5) + 5, e.globals.barPadForNumericAxis = a
                                }
                                return a
                            }
                        }, {
                            key: "gridPadFortitleSubtitle",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = e.globals,
                                    i = this.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 10;
                                ["title", "subtitle"].forEach((function (l) {
                                    void 0 !== e.config[l].text ? i += e.config[l].margin : i += t.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 5
                                })), !e.config.legend.show || "bottom" !== e.config.legend.position || e.config.legend.floating || e.globals.axisCharts || (i += 10);
                                var a = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
                                    s = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
                                l.gridHeight = l.gridHeight - a.height - s.height - i, l.translateY = l.translateY + a.height + s.height + i
                            }
                        }, {
                            key: "setGridXPosForDualYAxis",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new j(this.dCtx.ctx);
                                l.config.yaxis.map((function (a, s) {
                                    -1 !== l.globals.ignoreYAxisIndexes.indexOf(s) || a.floating || i.isYAxisHidden(s) || (a.opposite && (l.globals.translateX = l.globals.translateX - (e[s].width + t[s].width) - parseInt(l.config.yaxis[s].labels.style.fontSize, 10) / 1.2 - 12), l.globals.translateX < 2 && (l.globals.translateX = 2))
                                }))
                            }
                        }]), t
                    }(),
                    ct = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new nt(this), this.dimYAxis = new rt(this), this.dimXAxis = new ot(this), this.dimGrid = new ht(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0
                        }
                        return h(t, [{
                            key: "plotCoords",
                            value: function () {
                                var t = this.w.globals;
                                this.lgRect = this.dimHelpers.getLegendsRect(), t.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), t.gridHeight = t.gridHeight - this.gridPad.top - this.gridPad.bottom, t.gridWidth = t.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;
                                var e = this.dimGrid.gridPadForColumnsInNumericAxis(t.gridWidth);
                                t.gridWidth = t.gridWidth - 2 * e, t.translateX = t.translateX + this.gridPad.left + this.xPadLeft + (e > 0 ? e + 4 : 0), t.translateY = t.translateY + this.gridPad.top
                            }
                        }, {
                            key: "setDimensionsForAxisCharts",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = e.globals,
                                    i = this.dimYAxis.getyAxisLabelsCoords(),
                                    a = this.dimYAxis.getyAxisTitleCoords();
                                e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map((function (t, l) {
                                    e.globals.yLabelsCoords.push({
                                        width: i[l].width,
                                        index: l
                                    }), e.globals.yTitleCoords.push({
                                        width: a[l].width,
                                        index: l
                                    })
                                })), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();
                                var s = this.dimXAxis.getxAxisLabelsCoords(),
                                    n = this.dimXAxis.getxAxisTitleCoords();
                                this.conditionalChecksForAxisCoords(s, n), l.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, l.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (l.rotateXLabels = !1, l.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), l.translateXAxisY = l.translateXAxisY + e.config.xaxis.labels.offsetY, l.translateXAxisX = l.translateXAxisX + e.config.xaxis.labels.offsetX;
                                var o = this.yAxisWidth,
                                    r = this.xAxisHeight;
                                l.xAxisLabelsHeight = this.xAxisHeight - n.height, l.xAxisLabelsWidth = this.xAxisWidth, l.xAxisHeight = this.xAxisHeight;
                                var h = 10;
                                ("radar" === e.config.chart.type || this.isSparkline) && (o = 0, r = l.goldenPadding), this.isSparkline && (this.lgRect = {
                                    height: 0,
                                    width: 0
                                }), (this.isSparkline || "treemap" === e.config.chart.type) && (o = 0, r = 0, h = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(s);
                                var c = function () {
                                    l.translateX = o, l.gridHeight = l.svgHeight - t.lgRect.height - r - (t.isSparkline || "treemap" === e.config.chart.type ? 0 : e.globals.rotateXLabels ? 10 : 15), l.gridWidth = l.svgWidth - o
                                };
                                switch ("top" === e.config.xaxis.position && (h = l.xAxisHeight - e.config.xaxis.axisTicks.height - 5), e.config.legend.position) {
                                    case "bottom":
                                        l.translateY = h, c();
                                        break;
                                    case "top":
                                        l.translateY = this.lgRect.height + h, c();
                                        break;
                                    case "left":
                                        l.translateY = h, l.translateX = this.lgRect.width + o, l.gridHeight = l.svgHeight - r - 12, l.gridWidth = l.svgWidth - this.lgRect.width - o;
                                        break;
                                    case "right":
                                        l.translateY = h, l.translateX = o, l.gridHeight = l.svgHeight - r - 12, l.gridWidth = l.svgWidth - this.lgRect.width - o - 5;
                                        break;
                                    default:
                                        throw new Error("Legend position not supported")
                                }
                                this.dimGrid.setGridXPosForDualYAxis(a, i), new $(this.ctx).setYAxisXPosition(i, a)
                            }
                        }, {
                            key: "setDimensionsForNonAxisCharts",
                            value: function () {
                                var t = this.w,
                                    e = t.globals,
                                    l = t.config,
                                    i = 0;
                                t.config.legend.show && !t.config.legend.floating && (i = 20);
                                var a = "pie" === l.chart.type || "polarArea" === l.chart.type || "donut" === l.chart.type ? "pie" : "radialBar",
                                    s = l.plotOptions[a].offsetY,
                                    n = l.plotOptions[a].offsetX;
                                if (!l.legend.show || l.legend.floating) return e.gridHeight = e.svgHeight - l.grid.padding.left + l.grid.padding.right, e.gridWidth = e.gridHeight, e.translateY = s, void(e.translateX = n + (e.svgWidth - e.gridWidth) / 2);
                                switch (l.legend.position) {
                                    case "bottom":
                                        e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.svgWidth, e.translateY = s - 10, e.translateX = n + (e.svgWidth - e.gridWidth) / 2;
                                        break;
                                    case "top":
                                        e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.svgWidth, e.translateY = this.lgRect.height + s + 10, e.translateX = n + (e.svgWidth - e.gridWidth) / 2;
                                        break;
                                    case "left":
                                        e.gridWidth = e.svgWidth - this.lgRect.width - i, e.gridHeight = "auto" !== l.chart.height ? e.svgHeight : e.gridWidth, e.translateY = s, e.translateX = n + this.lgRect.width + i;
                                        break;
                                    case "right":
                                        e.gridWidth = e.svgWidth - this.lgRect.width - i - 5, e.gridHeight = "auto" !== l.chart.height ? e.svgHeight : e.gridWidth, e.translateY = s, e.translateX = n + 10;
                                        break;
                                    default:
                                        throw new Error("Legend position not supported")
                                }
                            }
                        }, {
                            key: "conditionalChecksForAxisCoords",
                            value: function (t, e) {
                                var l = this.w,
                                    i = t.height + e.height,
                                    a = l.globals.isMultiLineX ? 1.2 : l.globals.LINE_HEIGHT_RATIO,
                                    s = l.globals.rotateXLabels ? 22 : 10,
                                    n = l.globals.rotateXLabels && "bottom" === l.config.legend.position ? 10 : 0;
                                this.xAxisHeight = i * a + s + n, this.xAxisWidth = t.width, this.xAxisHeight - e.height > l.config.xaxis.labels.maxHeight && (this.xAxisHeight = l.config.xaxis.labels.maxHeight), l.config.xaxis.labels.minHeight && this.xAxisHeight < l.config.xaxis.labels.minHeight && (this.xAxisHeight = l.config.xaxis.labels.minHeight), l.config.xaxis.floating && (this.xAxisHeight = 0);
                                var o = 0,
                                    r = 0;
                                l.config.yaxis.forEach((function (t) {
                                    o += t.labels.minWidth, r += t.labels.maxWidth
                                })), this.yAxisWidth < o && (this.yAxisWidth = o), this.yAxisWidth > r && (this.yAxisWidth = r)
                            }
                        }]), t
                    }(),
                    dt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.lgCtx = e
                        }
                        return h(t, [{
                            key: "getLegendStyles",
                            value: function () {
                                var t = document.createElement("style");
                                t.setAttribute("type", "text/css");
                                var e = document.createTextNode("\t\n    \t\n      .apexcharts-legend {\t\n        display: flex;\t\n        overflow: auto;\t\n        padding: 0 10px;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\t\n        flex-wrap: wrap\t\n      }\t\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        flex-direction: column;\t\n        bottom: 0;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\t\n        justify-content: flex-start;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\t\n        justify-content: center;  \t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\t\n        justify-content: flex-end;\t\n      }\t\n      .apexcharts-legend-series {\t\n        cursor: pointer;\t\n        line-height: normal;\t\n      }\t\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\t\n        display: flex;\t\n        align-items: center;\t\n      }\t\n      .apexcharts-legend-text {\t\n        position: relative;\t\n        font-size: 14px;\t\n      }\t\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\t\n        pointer-events: none;\t\n      }\t\n      .apexcharts-legend-marker {\t\n        position: relative;\t\n        display: inline-block;\t\n        cursor: pointer;\t\n        margin-right: 3px;\t\n        border-style: solid;\n      }\t\n      \t\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\t\n        display: inline-block;\t\n      }\t\n      .apexcharts-legend-series.apexcharts-no-click {\t\n        cursor: auto;\t\n      }\t\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\t\n        display: none !important;\t\n      }\t\n      .apexcharts-inactive-legend {\t\n        opacity: 0.45;\t\n      }");
                                return t.appendChild(e), t
                            }
                        }, {
                            key: "getLegendBBox",
                            value: function () {
                                var t = this.w.globals.dom.baseEl.querySelector(".apexcharts-legend").getBoundingClientRect(),
                                    e = t.width;
                                return {
                                    clwh: t.height,
                                    clww: e
                                }
                            }
                        }, {
                            key: "appendToForeignObject",
                            value: function () {
                                var t = this.w.globals;
                                t.dom.elLegendForeign = document.createElementNS(t.SVGNS, "foreignObject");
                                var e = t.dom.elLegendForeign;
                                e.setAttribute("x", 0), e.setAttribute("y", 0), e.setAttribute("width", t.svgWidth), e.setAttribute("height", t.svgHeight), t.dom.elLegendWrap.setAttribute("xmlns", "http://www.w3.org/1999/xhtml"), e.appendChild(t.dom.elLegendWrap), e.appendChild(this.getLegendStyles()), t.dom.Paper.node.insertBefore(e, t.dom.elGraphical.node)
                            }
                        }, {
                            key: "toggleDataSeries",
                            value: function (t, e) {
                                var l = this,
                                    i = this.w;
                                if (i.globals.axisCharts || "radialBar" === i.config.chart.type) {
                                    i.globals.resized = !0;
                                    var a = null,
                                        s = null;
                                    i.globals.risingSeries = [], i.globals.axisCharts ? (a = i.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(t, "']")), s = parseInt(a.getAttribute("data:realIndex"), 10)) : (a = i.globals.dom.baseEl.querySelector(".apexcharts-series[rel='".concat(t + 1, "']")), s = parseInt(a.getAttribute("rel"), 10) - 1), e ? [{
                                        cs: i.globals.collapsedSeries,
                                        csi: i.globals.collapsedSeriesIndices
                                    }, {
                                        cs: i.globals.ancillaryCollapsedSeries,
                                        csi: i.globals.ancillaryCollapsedSeriesIndices
                                    }].forEach((function (t) {
                                        l.riseCollapsedSeries(t.cs, t.csi, s)
                                    })) : this.hideSeries({
                                        seriesEl: a,
                                        realIndex: s
                                    })
                                } else {
                                    var n = i.globals.dom.Paper.select(" .apexcharts-series[rel='".concat(t + 1, "'] path")),
                                        o = i.config.chart.type;
                                    if ("pie" === o || "polarArea" === o || "donut" === o) {
                                        var r = i.config.plotOptions.pie.donut.labels;
                                        new w(this.lgCtx.ctx).pathMouseDown(n.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(n.members[0].node, r)
                                    }
                                    n.fire("click")
                                }
                            }
                        }, {
                            key: "hideSeries",
                            value: function (t) {
                                var e = t.seriesEl,
                                    l = t.realIndex,
                                    i = this.w,
                                    a = m.clone(i.config.series);
                                if (i.globals.axisCharts) {
                                    var s = !1;
                                    if (i.config.yaxis[l] && i.config.yaxis[l].show && i.config.yaxis[l].showAlways && (s = !0, i.globals.ancillaryCollapsedSeriesIndices.indexOf(l) < 0 && (i.globals.ancillaryCollapsedSeries.push({
                                            index: l,
                                            data: a[l].data.slice(),
                                            type: e.parentNode.className.baseVal.split("-")[1]
                                        }), i.globals.ancillaryCollapsedSeriesIndices.push(l))), !s) {
                                        i.globals.collapsedSeries.push({
                                            index: l,
                                            data: a[l].data.slice(),
                                            type: e.parentNode.className.baseVal.split("-")[1]
                                        }), i.globals.collapsedSeriesIndices.push(l);
                                        var n = i.globals.risingSeries.indexOf(l);
                                        i.globals.risingSeries.splice(n, 1)
                                    }
                                } else i.globals.collapsedSeries.push({
                                    index: l,
                                    data: a[l]
                                }), i.globals.collapsedSeriesIndices.push(l);
                                for (var o = e.childNodes, r = 0; r < o.length; r++) o[r].classList.contains("apexcharts-series-markers-wrap") && (o[r].classList.contains("apexcharts-hide") ? o[r].classList.remove("apexcharts-hide") : o[r].classList.add("apexcharts-hide"));
                                i.globals.allSeriesCollapsed = i.globals.collapsedSeries.length === i.config.series.length, a = this._getSeriesBasedOnCollapsedState(a), this.lgCtx.ctx.updateHelpers._updateSeries(a, i.config.chart.animations.dynamicAnimation.enabled)
                            }
                        }, {
                            key: "riseCollapsedSeries",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = m.clone(i.config.series);
                                if (t.length > 0) {
                                    for (var s = 0; s < t.length; s++) t[s].index === l && (i.globals.axisCharts ? (a[l].data = t[s].data.slice(), t.splice(s, 1), e.splice(s, 1), i.globals.risingSeries.push(l)) : (a[l] = t[s].data, t.splice(s, 1), e.splice(s, 1), i.globals.risingSeries.push(l)));
                                    a = this._getSeriesBasedOnCollapsedState(a), this.lgCtx.ctx.updateHelpers._updateSeries(a, i.config.chart.animations.dynamicAnimation.enabled)
                                }
                            }
                        }, {
                            key: "_getSeriesBasedOnCollapsedState",
                            value: function (t) {
                                var e = this.w;
                                return e.globals.axisCharts ? t.forEach((function (l, i) {
                                    e.globals.collapsedSeriesIndices.indexOf(i) > -1 && (t[i].data = [])
                                })) : t.forEach((function (l, i) {
                                    e.globals.collapsedSeriesIndices.indexOf(i) > -1 && (t[i] = 0)
                                })), t
                            }
                        }]), t
                    }(),
                    ut = function () {
                        function t(e, l) {
                            o(this, t), this.ctx = e, this.w = e.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = "bar" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new dt(this)
                        }
                        return h(t, [{
                            key: "init",
                            value: function () {
                                var t = this.w,
                                    e = t.globals,
                                    l = t.config;
                                if ((l.legend.showForSingleSeries && 1 === e.series.length || this.isBarsDistributed || e.series.length > 1 || !e.axisCharts) && l.legend.show) {
                                    for (; e.dom.elLegendWrap.firstChild;) e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);
                                    this.drawLegends(), m.isIE11() ? document.getElementsByTagName("head")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), "bottom" === l.legend.position || "top" === l.legend.position ? this.legendAlignHorizontal() : "right" !== l.legend.position && "left" !== l.legend.position || this.legendAlignVertical()
                                }
                            }
                        }, {
                            key: "drawLegends",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = e.config.legend.fontFamily,
                                    i = e.globals.seriesNames,
                                    a = e.globals.colors.slice();
                                if ("heatmap" === e.config.chart.type) {
                                    var s = e.config.plotOptions.heatmap.colorScale.ranges;
                                    i = s.map((function (t) {
                                        return t.name ? t.name : t.from + " - " + t.to
                                    })), a = s.map((function (t) {
                                        return t.color
                                    }))
                                } else this.isBarsDistributed && (i = e.globals.labels.slice());
                                e.config.legend.customLegendItems.length && (i = e.config.legend.customLegendItems);
                                for (var n = e.globals.legendFormatter, o = e.config.legend.inverseOrder, r = o ? i.length - 1 : 0; o ? r >= 0 : r <= i.length - 1; o ? r-- : r++) {
                                    var h = n(i[r], {
                                            seriesIndex: r,
                                            w: e
                                        }),
                                        c = !1,
                                        d = !1;
                                    if (e.globals.collapsedSeries.length > 0)
                                        for (var u = 0; u < e.globals.collapsedSeries.length; u++) e.globals.collapsedSeries[u].index === r && (c = !0);
                                    if (e.globals.ancillaryCollapsedSeriesIndices.length > 0)
                                        for (var g = 0; g < e.globals.ancillaryCollapsedSeriesIndices.length; g++) e.globals.ancillaryCollapsedSeriesIndices[g] === r && (d = !0);
                                    var p = document.createElement("span");
                                    p.classList.add("apexcharts-legend-marker");
                                    var f = e.config.legend.markers.offsetX,
                                        v = e.config.legend.markers.offsetY,
                                        x = e.config.legend.markers.height,
                                        b = e.config.legend.markers.width,
                                        y = e.config.legend.markers.strokeWidth,
                                        A = e.config.legend.markers.strokeColor,
                                        S = e.config.legend.markers.radius,
                                        L = p.style;
                                    L.background = a[r], L.color = a[r], L.setProperty("background", a[r], "important"), e.config.legend.markers.fillColors && e.config.legend.markers.fillColors[r] && (L.background = e.config.legend.markers.fillColors[r]), void 0 !== e.globals.seriesColors[r] && (L.background = e.globals.seriesColors[r], L.color = e.globals.seriesColors[r]), L.height = Array.isArray(x) ? parseFloat(x[r]) + "px" : parseFloat(x) + "px", L.width = Array.isArray(b) ? parseFloat(b[r]) + "px" : parseFloat(b) + "px", L.left = (Array.isArray(f) ? parseFloat(f[r]) : parseFloat(f)) + "px", L.top = (Array.isArray(v) ? parseFloat(v[r]) : parseFloat(v)) + "px", L.borderWidth = Array.isArray(y) ? y[r] : y, L.borderColor = Array.isArray(A) ? A[r] : A, L.borderRadius = Array.isArray(S) ? parseFloat(S[r]) + "px" : parseFloat(S) + "px", e.config.legend.markers.customHTML && (Array.isArray(e.config.legend.markers.customHTML) ? e.config.legend.markers.customHTML[r] && (p.innerHTML = e.config.legend.markers.customHTML[r]()) : p.innerHTML = e.config.legend.markers.customHTML()), w.setAttrs(p, {
                                        rel: r + 1,
                                        "data:collapsed": c || d
                                    }), (c || d) && p.classList.add("apexcharts-inactive-legend");
                                    var C = document.createElement("div"),
                                        M = document.createElement("span");
                                    M.classList.add("apexcharts-legend-text"), M.innerHTML = Array.isArray(h) ? h.join(" ") : h;
                                    var z = e.config.legend.labels.useSeriesColors ? e.globals.colors[r] : e.config.legend.labels.colors;
                                    z || (z = e.config.chart.foreColor), M.style.color = z, M.style.fontSize = parseFloat(e.config.legend.fontSize) + "px", M.style.fontWeight = e.config.legend.fontWeight, M.style.fontFamily = l || e.config.chart.fontFamily, w.setAttrs(M, {
                                        rel: r + 1,
                                        i: r,
                                        "data:default-text": encodeURIComponent(h),
                                        "data:collapsed": c || d
                                    }), C.appendChild(p), C.appendChild(M);
                                    var E = new k(this.ctx);
                                    e.config.legend.showForZeroSeries || 0 === E.getSeriesTotalByIndex(r) && E.seriesHaveSameValues(r) && !E.isSeriesNull(r) && -1 === e.globals.collapsedSeriesIndices.indexOf(r) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(r) && C.classList.add("apexcharts-hidden-zero-series"), e.config.legend.showForNullSeries || E.isSeriesNull(r) && -1 === e.globals.collapsedSeriesIndices.indexOf(r) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(r) && C.classList.add("apexcharts-hidden-null-series"), e.globals.dom.elLegendWrap.appendChild(C), e.globals.dom.elLegendWrap.classList.add("apexcharts-align-".concat(e.config.legend.horizontalAlign)), e.globals.dom.elLegendWrap.classList.add("apx-legend-position-" + e.config.legend.position), C.classList.add("apexcharts-legend-series"), C.style.margin = "".concat(e.config.legend.itemMargin.vertical, "px ").concat(e.config.legend.itemMargin.horizontal, "px"), e.globals.dom.elLegendWrap.style.width = e.config.legend.width ? e.config.legend.width + "px" : "", e.globals.dom.elLegendWrap.style.height = e.config.legend.height ? e.config.legend.height + "px" : "", w.setAttrs(C, {
                                        rel: r + 1,
                                        seriesName: m.escapeString(i[r]),
                                        "data:collapsed": c || d
                                    }), (c || d) && C.classList.add("apexcharts-inactive-legend"), e.config.legend.onItemClick.toggleDataSeries || C.classList.add("apexcharts-no-click")
                                }
                                e.globals.dom.elWrap.addEventListener("click", t.onLegendClick, !0), e.config.legend.onItemHover.highlightDataSeries && 0 === e.config.legend.customLegendItems.length && (e.globals.dom.elWrap.addEventListener("mousemove", t.onLegendHovered, !0), e.globals.dom.elWrap.addEventListener("mouseout", t.onLegendHovered, !0))
                            }
                        }, {
                            key: "setLegendWrapXY",
                            value: function (t, e) {
                                var l = this.w,
                                    i = l.globals.dom.baseEl.querySelector(".apexcharts-legend"),
                                    a = i.getBoundingClientRect(),
                                    s = 0,
                                    n = 0;
                                if ("bottom" === l.config.legend.position) n += l.globals.svgHeight - a.height / 2;
                                else if ("top" === l.config.legend.position) {
                                    var o = new ct(this.ctx),
                                        r = o.dimHelpers.getTitleSubtitleCoords("title").height,
                                        h = o.dimHelpers.getTitleSubtitleCoords("subtitle").height;
                                    n = n + (r > 0 ? r - 10 : 0) + (h > 0 ? h - 10 : 0)
                                }
                                i.style.position = "absolute", s = s + t + l.config.legend.offsetX, n = n + e + l.config.legend.offsetY, i.style.left = s + "px", i.style.top = n + "px", "bottom" === l.config.legend.position ? (i.style.top = "auto", i.style.bottom = 5 - l.config.legend.offsetY + "px") : "right" === l.config.legend.position && (i.style.left = "auto", i.style.right = 25 + l.config.legend.offsetX + "px"), ["width", "height"].forEach((function (t) {
                                    i.style[t] && (i.style[t] = parseInt(l.config.legend[t], 10) + "px")
                                }))
                            }
                        }, {
                            key: "legendAlignHorizontal",
                            value: function () {
                                var t = this.w;
                                t.globals.dom.baseEl.querySelector(".apexcharts-legend").style.right = 0;
                                var e = this.legendHelpers.getLegendBBox(),
                                    l = new ct(this.ctx),
                                    i = l.dimHelpers.getTitleSubtitleCoords("title"),
                                    a = l.dimHelpers.getTitleSubtitleCoords("subtitle"),
                                    s = 0;
                                "bottom" === t.config.legend.position ? s = -e.clwh / 1.8 : "top" === t.config.legend.position && (s = i.height + a.height + t.config.title.margin + t.config.subtitle.margin - 10), this.setLegendWrapXY(20, s)
                            }
                        }, {
                            key: "legendAlignVertical",
                            value: function () {
                                var t = this.w,
                                    e = this.legendHelpers.getLegendBBox(),
                                    l = 0;
                                "left" === t.config.legend.position && (l = 20), "right" === t.config.legend.position && (l = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(l, 20)
                            }
                        }, {
                            key: "onLegendHovered",
                            value: function (t) {
                                var e = this.w,
                                    l = t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker");
                                if ("heatmap" === e.config.chart.type || this.isBarsDistributed) {
                                    if (l) {
                                        var i = parseInt(t.target.getAttribute("rel"), 10) - 1;
                                        this.ctx.events.fireEvent("legendHover", [this.ctx, i, this.w]), new N(this.ctx).highlightRangeInSeries(t, t.target)
                                    }
                                } else !t.target.classList.contains("apexcharts-inactive-legend") && l && new N(this.ctx).toggleSeriesOnHover(t, t.target)
                            }
                        }, {
                            key: "onLegendClick",
                            value: function (t) {
                                var e = this.w;
                                if (!e.config.legend.customLegendItems.length && (t.target.classList.contains("apexcharts-legend-text") || t.target.classList.contains("apexcharts-legend-marker"))) {
                                    var l = parseInt(t.target.getAttribute("rel"), 10) - 1,
                                        i = "true" === t.target.getAttribute("data:collapsed"),
                                        a = this.w.config.chart.events.legendClick;
                                    "function" == typeof a && a(this.ctx, l, this.w), this.ctx.events.fireEvent("legendClick", [this.ctx, l, this.w]);
                                    var s = this.w.config.legend.markers.onClick;
                                    "function" == typeof s && t.target.classList.contains("apexcharts-legend-marker") && (s(this.ctx, l, this.w), this.ctx.events.fireEvent("legendMarkerClick", [this.ctx, l, this.w])), "treemap" !== e.config.chart.type && "heatmap" !== e.config.chart.type && !this.isBarsDistributed && e.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(l, i)
                                }
                            }
                        }]), t
                    }(),
                    gt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w;
                            var l = this.w;
                            this.ev = this.w.config.chart.events, this.selectedClass = "apexcharts-selected", this.localeValues = this.w.globals.locale.toolbar, this.minX = l.globals.minX, this.maxX = l.globals.maxX
                        }
                        return h(t, [{
                            key: "createToolbar",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = function () {
                                        return document.createElement("div")
                                    },
                                    i = l();
                                if (i.setAttribute("class", "apexcharts-toolbar"), i.style.top = e.config.chart.toolbar.offsetY + "px", i.style.right = 3 - e.config.chart.toolbar.offsetX + "px", e.globals.dom.elWrap.appendChild(i), this.elZoom = l(), this.elZoomIn = l(), this.elZoomOut = l(), this.elPan = l(), this.elSelection = l(), this.elZoomReset = l(), this.elMenuIcon = l(), this.elMenu = l(), this.elCustomIcons = [], this.t = e.config.chart.toolbar.tools, Array.isArray(this.t.customIcons))
                                    for (var a = 0; a < this.t.customIcons.length; a++) this.elCustomIcons.push(l());
                                var s = [],
                                    n = function (l, i, a) {
                                        var n = l.toLowerCase();
                                        t.t[n] && e.config.chart.zoom.enabled && s.push({
                                            el: i,
                                            icon: "string" == typeof t.t[n] ? t.t[n] : a,
                                            title: t.localeValues[l],
                                            class: "apexcharts-".concat(n, "-icon")
                                        })
                                    };
                                n("zoomIn", this.elZoomIn, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'), n("zoomOut", this.elZoomOut, '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n');
                                var o = function (l) {
                                    t.t[l] && e.config.chart[l].enabled && s.push({
                                        el: "zoom" === l ? t.elZoom : t.elSelection,
                                        icon: "string" == typeof t.t[l] ? t.t[l] : "zoom" === l ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>' : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                                        title: t.localeValues["zoom" === l ? "selectionZoom" : "selection"],
                                        class: e.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-".concat(l, "-icon")
                                    })
                                };
                                o("zoom"), o("selection"), this.t.pan && e.config.chart.zoom.enabled && s.push({
                                    el: this.elPan,
                                    icon: "string" == typeof this.t.pan ? this.t.pan : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                                    title: this.localeValues.pan,
                                    class: e.globals.isTouchDevice ? "apexcharts-element-hidden" : "apexcharts-pan-icon"
                                }), n("reset", this.elZoomReset, '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'), this.t.download && s.push({
                                    el: this.elMenuIcon,
                                    icon: "string" == typeof this.t.download ? this.t.download : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                                    title: this.localeValues.menu,
                                    class: "apexcharts-menu-icon"
                                });
                                for (var r = 0; r < this.elCustomIcons.length; r++) s.push({
                                    el: this.elCustomIcons[r],
                                    icon: this.t.customIcons[r].icon,
                                    title: this.t.customIcons[r].title,
                                    index: this.t.customIcons[r].index,
                                    class: "apexcharts-toolbar-custom-icon " + this.t.customIcons[r].class
                                });
                                s.forEach((function (t, e) {
                                    t.index && m.moveIndexInArray(s, e, t.index)
                                }));
                                for (var h = 0; h < s.length; h++) w.setAttrs(s[h].el, {
                                    class: s[h].class,
                                    title: s[h].title
                                }), s[h].el.innerHTML = s[h].icon, i.appendChild(s[h].el);
                                this._createHamburgerMenu(i), e.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners()
                            }
                        }, {
                            key: "_createHamburgerMenu",
                            value: function (t) {
                                this.elMenuItems = [], t.appendChild(this.elMenu), w.setAttrs(this.elMenu, {
                                    class: "apexcharts-menu"
                                });
                                var e = [{
                                    name: "exportSVG",
                                    title: this.localeValues.exportToSVG
                                }, {
                                    name: "exportPNG",
                                    title: this.localeValues.exportToPNG
                                }, {
                                    name: "exportCSV",
                                    title: this.localeValues.exportToCSV
                                }];
                                this.w.globals.allSeriesHasEqualX || e.splice(2, 1);
                                for (var l = 0; l < e.length; l++) this.elMenuItems.push(document.createElement("div")), this.elMenuItems[l].innerHTML = e[l].title, w.setAttrs(this.elMenuItems[l], {
                                    class: "apexcharts-menu-item ".concat(e[l].name),
                                    title: e[l].title
                                }), this.elMenu.appendChild(this.elMenuItems[l])
                            }
                        }, {
                            key: "addToolbarEventListeners",
                            value: function () {
                                var t = this;
                                this.elZoomReset.addEventListener("click", this.handleZoomReset.bind(this)), this.elSelection.addEventListener("click", this.toggleZoomSelection.bind(this, "selection")), this.elZoom.addEventListener("click", this.toggleZoomSelection.bind(this, "zoom")), this.elZoomIn.addEventListener("click", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener("click", this.handleZoomOut.bind(this)), this.elPan.addEventListener("click", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener("click", this.toggleMenu.bind(this)), this.elMenuItems.forEach((function (e) {
                                    e.classList.contains("exportSVG") ? e.addEventListener("click", t.handleDownload.bind(t, "svg")) : e.classList.contains("exportPNG") ? e.addEventListener("click", t.handleDownload.bind(t, "png")) : e.classList.contains("exportCSV") && e.addEventListener("click", t.handleDownload.bind(t, "csv"))
                                }));
                                for (var e = 0; e < this.t.customIcons.length; e++) this.elCustomIcons[e].addEventListener("click", this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w))
                            }
                        }, {
                            key: "toggleZoomSelection",
                            value: function (t) {
                                this.ctx.getSyncedCharts().forEach((function (e) {
                                    e.ctx.toolbar.toggleOtherControls();
                                    var l = "selection" === t ? e.ctx.toolbar.elSelection : e.ctx.toolbar.elZoom,
                                        i = "selection" === t ? "selectionEnabled" : "zoomEnabled";
                                    e.w.globals[i] = !e.w.globals[i], l.classList.contains(e.ctx.toolbar.selectedClass) ? l.classList.remove(e.ctx.toolbar.selectedClass) : l.classList.add(e.ctx.toolbar.selectedClass)
                                }))
                            }
                        }, {
                            key: "getToolbarIconsReference",
                            value: function () {
                                var t = this.w;
                                this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(".apexcharts-zoom-icon")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(".apexcharts-pan-icon")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(".apexcharts-selection-icon"))
                            }
                        }, {
                            key: "enableZoomPanFromToolbar",
                            value: function (t) {
                                this.toggleOtherControls(), "pan" === t ? this.w.globals.panEnabled = !0 : this.w.globals.zoomEnabled = !0;
                                var e = "pan" === t ? this.elPan : this.elZoom,
                                    l = "pan" === t ? this.elZoom : this.elPan;
                                e && e.classList.add(this.selectedClass), l && l.classList.remove(this.selectedClass)
                            }
                        }, {
                            key: "togglePanning",
                            value: function () {
                                this.ctx.getSyncedCharts().forEach((function (t) {
                                    t.ctx.toolbar.toggleOtherControls(), t.w.globals.panEnabled = !t.w.globals.panEnabled, t.ctx.toolbar.elPan.classList.contains(t.ctx.toolbar.selectedClass) ? t.ctx.toolbar.elPan.classList.remove(t.ctx.toolbar.selectedClass) : t.ctx.toolbar.elPan.classList.add(t.ctx.toolbar.selectedClass)
                                }))
                            }
                        }, {
                            key: "toggleOtherControls",
                            value: function () {
                                var t = this,
                                    e = this.w;
                                e.globals.panEnabled = !1, e.globals.zoomEnabled = !1, e.globals.selectionEnabled = !1, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach((function (e) {
                                    e && e.classList.remove(t.selectedClass)
                                }))
                            }
                        }, {
                            key: "handleZoomIn",
                            value: function () {
                                var t = this.w;
                                t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY);
                                var e = (this.minX + this.maxX) / 2,
                                    l = (this.minX + e) / 2,
                                    i = (this.maxX + e) / 2,
                                    a = this._getNewMinXMaxX(l, i);
                                t.globals.disableZoomIn || this.zoomUpdateOptions(a.minX, a.maxX)
                            }
                        }, {
                            key: "handleZoomOut",
                            value: function () {
                                var t = this.w;
                                if (t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY), !("datetime" === t.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {
                                    var e = (this.minX + this.maxX) / 2,
                                        l = this.minX - (e - this.minX),
                                        i = this.maxX - (e - this.maxX),
                                        a = this._getNewMinXMaxX(l, i);
                                    t.globals.disableZoomOut || this.zoomUpdateOptions(a.minX, a.maxX)
                                }
                            }
                        }, {
                            key: "_getNewMinXMaxX",
                            value: function (t, e) {
                                var l = this.w.config.xaxis.convertedCatToNumeric;
                                return {
                                    minX: l ? Math.floor(t) : t,
                                    maxX: l ? Math.floor(e) : e
                                }
                            }
                        }, {
                            key: "zoomUpdateOptions",
                            value: function (t, e) {
                                var l = this.w;
                                if (void 0 !== t || void 0 !== e) {
                                    if (!(l.config.xaxis.convertedCatToNumeric && (t < 1 && (t = 1, e = l.globals.dataPoints), e - t < 2))) {
                                        var i = {
                                                min: t,
                                                max: e
                                            },
                                            a = this.getBeforeZoomRange(i);
                                        a && (i = a.xaxis);
                                        var s = {
                                                xaxis: i
                                            },
                                            n = m.clone(l.globals.initialConfig.yaxis);
                                        l.config.chart.zoom.autoScaleYaxis && (n = new K(this.ctx).autoScaleY(this.ctx, n, {
                                            xaxis: i
                                        })), l.config.chart.group || (s.yaxis = n), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(s, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(i, n)
                                    }
                                } else this.handleZoomReset()
                            }
                        }, {
                            key: "zoomCallback",
                            value: function (t, e) {
                                "function" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {
                                    xaxis: t,
                                    yaxis: e
                                })
                            }
                        }, {
                            key: "getBeforeZoomRange",
                            value: function (t, e) {
                                var l = null;
                                return "function" == typeof this.ev.beforeZoom && (l = this.ev.beforeZoom(this, {
                                    xaxis: t,
                                    yaxis: e
                                })), l
                            }
                        }, {
                            key: "toggleMenu",
                            value: function () {
                                var t = this;
                                window.setTimeout((function () {
                                    t.elMenu.classList.contains("apexcharts-menu-open") ? t.elMenu.classList.remove("apexcharts-menu-open") : t.elMenu.classList.add("apexcharts-menu-open")
                                }), 0)
                            }
                        }, {
                            key: "handleDownload",
                            value: function (t) {
                                var e = this.w,
                                    l = new U(this.ctx);
                                switch (t) {
                                    case "svg":
                                        l.exportToSVG(this.ctx);
                                        break;
                                    case "png":
                                        l.exportToPng(this.ctx);
                                        break;
                                    case "csv":
                                        l.exportToCSV({
                                            series: e.config.series,
                                            columnDelimiter: e.config.chart.toolbar.export.csv.columnDelimiter
                                        })
                                }
                            }
                        }, {
                            key: "handleZoomReset",
                            value: function (t) {
                                this.ctx.getSyncedCharts().forEach((function (t) {
                                    var e = t.w;
                                    if (e.globals.lastXAxis.min = void 0, e.globals.lastXAxis.max = void 0, t.updateHelpers.revertDefaultAxisMinMax(), "function" == typeof e.config.chart.events.beforeResetZoom) {
                                        var l = e.config.chart.events.beforeResetZoom(t, e);
                                        l && t.updateHelpers.revertDefaultAxisMinMax(l)
                                    }
                                    "function" == typeof e.config.chart.events.zoomed && t.ctx.toolbar.zoomCallback({
                                        min: e.config.xaxis.min,
                                        max: e.config.xaxis.max
                                    }), e.globals.zoomed = !1;
                                    var i = t.ctx.series.emptyCollapsedSeries(m.clone(e.globals.initialSeries));
                                    t.updateHelpers._updateSeries(i, e.config.chart.animations.dynamicAnimation.enabled)
                                }))
                            }
                        }, {
                            key: "destroy",
                            value: function () {
                                this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null
                            }
                        }]), t
                    }(),
                    pt = function (t) {
                        d(l, gt);
                        var e = f(l);

                        function l(t) {
                            var i;
                            return o(this, l), (i = e.call(this, t)).ctx = t, i.w = t.w, i.dragged = !1, i.graphics = new w(i.ctx), i.eventList = ["mousedown", "mouseleave", "mousemove", "touchstart", "touchmove", "mouseup", "touchend"], i.clientX = 0, i.clientY = 0, i.startX = 0, i.endX = 0, i.dragX = 0, i.startY = 0, i.endY = 0, i.dragY = 0, i.moveDirection = "none", i
                        }
                        return h(l, [{
                            key: "init",
                            value: function (t) {
                                var e = this,
                                    l = t.xyRatios,
                                    i = this.w,
                                    a = this;
                                this.xyRatios = l, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = i.globals.dom.baseEl.querySelector(".apexcharts-grid"), this.zoomRect.node.classList.add("apexcharts-zoom-rect"), this.selectionRect.node.classList.add("apexcharts-selection-rect"), i.globals.dom.elGraphical.add(this.zoomRect), i.globals.dom.elGraphical.add(this.selectionRect), "x" === i.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
                                    minX: 0,
                                    minY: 0,
                                    maxX: i.globals.gridWidth,
                                    maxY: i.globals.gridHeight
                                }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : "y" === i.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({
                                    minX: 0,
                                    maxX: i.globals.gridWidth
                                }).on("dragmove", this.selectionDragging.bind(this, "dragging")) : this.slDraggableRect = this.selectionRect.draggable().on("dragmove", this.selectionDragging.bind(this, "dragging")), this.preselectedSelection(), this.hoverArea = i.globals.dom.baseEl.querySelector("".concat(i.globals.chartClass, " .apexcharts-svg")), this.hoverArea.classList.add("apexcharts-zoomable"), this.eventList.forEach((function (t) {
                                    e.hoverArea.addEventListener(t, a.svgMouseEvents.bind(a, l), {
                                        capture: !1,
                                        passive: !0
                                    })
                                }))
                            }
                        }, {
                            key: "destroy",
                            value: function () {
                                this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null
                            }
                        }, {
                            key: "svgMouseEvents",
                            value: function (t, e) {
                                var l = this.w,
                                    i = this,
                                    a = this.ctx.toolbar,
                                    s = l.globals.zoomEnabled ? l.config.chart.zoom.type : l.config.chart.selection.type,
                                    n = l.config.chart.toolbar.autoSelected;
                                if (e.shiftKey ? (this.shiftWasPressed = !0, a.enableZoomPanFromToolbar("pan" === n ? "zoom" : "pan")) : this.shiftWasPressed && (a.enableZoomPanFromToolbar(n), this.shiftWasPressed = !1), e.target) {
                                    var o, r = e.target.classList;
                                    if (e.target.parentNode && null !== e.target.parentNode && (o = e.target.parentNode.classList), !(r.contains("apexcharts-selection-rect") || r.contains("apexcharts-legend-marker") || r.contains("apexcharts-legend-text") || o && o.contains("apexcharts-toolbar"))) {
                                        if (i.clientX = "touchmove" === e.type || "touchstart" === e.type ? e.touches[0].clientX : "touchend" === e.type ? e.changedTouches[0].clientX : e.clientX, i.clientY = "touchmove" === e.type || "touchstart" === e.type ? e.touches[0].clientY : "touchend" === e.type ? e.changedTouches[0].clientY : e.clientY, "mousedown" === e.type && 1 === e.which) {
                                            var h = i.gridRect.getBoundingClientRect();
                                            i.startX = i.clientX - h.left, i.startY = i.clientY - h.top, i.dragged = !1, i.w.globals.mousedown = !0
                                        }
                                        if (("mousemove" === e.type && 1 === e.which || "touchmove" === e.type) && (i.dragged = !0, l.globals.panEnabled ? (l.globals.selection = null, i.w.globals.mousedown && i.panDragging({
                                                context: i,
                                                zoomtype: s,
                                                xyRatios: t
                                            })) : (i.w.globals.mousedown && l.globals.zoomEnabled || i.w.globals.mousedown && l.globals.selectionEnabled) && (i.selection = i.selectionDrawing({
                                                context: i,
                                                zoomtype: s
                                            }))), "mouseup" === e.type || "touchend" === e.type || "mouseleave" === e.type) {
                                            var c = i.gridRect.getBoundingClientRect();
                                            i.w.globals.mousedown && (i.endX = i.clientX - c.left, i.endY = i.clientY - c.top, i.dragX = Math.abs(i.endX - i.startX), i.dragY = Math.abs(i.endY - i.startY), (l.globals.zoomEnabled || l.globals.selectionEnabled) && i.selectionDrawn({
                                                context: i,
                                                zoomtype: s
                                            }), l.globals.panEnabled && l.config.xaxis.convertedCatToNumeric && i.delayedPanScrolled()), l.globals.zoomEnabled && i.hideSelectionRect(this.selectionRect), i.dragged = !1, i.w.globals.mousedown = !1
                                        }
                                        this.makeSelectionRectDraggable()
                                    }
                                }
                            }
                        }, {
                            key: "makeSelectionRectDraggable",
                            value: function () {
                                var t = this.w;
                                if (this.selectionRect) {
                                    var e = this.selectionRect.node.getBoundingClientRect();
                                    e.width > 0 && e.height > 0 && this.slDraggableRect.selectize({
                                        points: "l, r",
                                        pointSize: 8,
                                        pointType: "rect"
                                    }).resize({
                                        constraint: {
                                            minX: 0,
                                            minY: 0,
                                            maxX: t.globals.gridWidth,
                                            maxY: t.globals.gridHeight
                                        }
                                    }).on("resizing", this.selectionDragging.bind(this, "resizing"))
                                }
                            }
                        }, {
                            key: "preselectedSelection",
                            value: function () {
                                var t = this.w,
                                    e = this.xyRatios;
                                if (!t.globals.zoomEnabled)
                                    if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(t.globals.selection);
                                    else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {
                                    var l = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio,
                                        i = {
                                            x: l,
                                            y: 0,
                                            width: t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - l,
                                            height: t.globals.gridHeight,
                                            translateX: 0,
                                            translateY: 0,
                                            selectionEnabled: !0
                                        };
                                    this.drawSelectionRect(i), this.makeSelectionRectDraggable(), "function" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {
                                        xaxis: {
                                            min: t.config.chart.selection.xaxis.min,
                                            max: t.config.chart.selection.xaxis.max
                                        },
                                        yaxis: {}
                                    })
                                }
                            }
                        }, {
                            key: "drawSelectionRect",
                            value: function (t) {
                                var e = t.x,
                                    l = t.y,
                                    i = t.width,
                                    a = t.height,
                                    s = t.translateX,
                                    n = void 0 === s ? 0 : s,
                                    o = t.translateY,
                                    r = void 0 === o ? 0 : o,
                                    h = this.w,
                                    c = this.zoomRect,
                                    d = this.selectionRect;
                                if (this.dragged || null !== h.globals.selection) {
                                    var u = {
                                        transform: "translate(" + n + ", " + r + ")"
                                    };
                                    h.globals.zoomEnabled && this.dragged && (i < 0 && (i = 1), c.attr({
                                        x: e,
                                        y: l,
                                        width: i,
                                        height: a,
                                        fill: h.config.chart.zoom.zoomedArea.fill.color,
                                        "fill-opacity": h.config.chart.zoom.zoomedArea.fill.opacity,
                                        stroke: h.config.chart.zoom.zoomedArea.stroke.color,
                                        "stroke-width": h.config.chart.zoom.zoomedArea.stroke.width,
                                        "stroke-opacity": h.config.chart.zoom.zoomedArea.stroke.opacity
                                    }), w.setAttrs(c.node, u)), h.globals.selectionEnabled && (d.attr({
                                        x: e,
                                        y: l,
                                        width: i > 0 ? i : 0,
                                        height: a > 0 ? a : 0,
                                        fill: h.config.chart.selection.fill.color,
                                        "fill-opacity": h.config.chart.selection.fill.opacity,
                                        stroke: h.config.chart.selection.stroke.color,
                                        "stroke-width": h.config.chart.selection.stroke.width,
                                        "stroke-dasharray": h.config.chart.selection.stroke.dashArray,
                                        "stroke-opacity": h.config.chart.selection.stroke.opacity
                                    }), w.setAttrs(d.node, u))
                                }
                            }
                        }, {
                            key: "hideSelectionRect",
                            value: function (t) {
                                t && t.attr({
                                    x: 0,
                                    y: 0,
                                    width: 0,
                                    height: 0
                                })
                            }
                        }, {
                            key: "selectionDrawing",
                            value: function (t) {
                                var e, l = t.context,
                                    i = t.zoomtype,
                                    a = this.w,
                                    s = l,
                                    n = this.gridRect.getBoundingClientRect(),
                                    o = s.startX - 1,
                                    r = s.startY,
                                    h = !1,
                                    c = !1,
                                    d = s.clientX - n.left - o,
                                    u = s.clientY - n.top - r;
                                return Math.abs(d + o) > a.globals.gridWidth ? d = a.globals.gridWidth - o : s.clientX - n.left < 0 && (d = o), o > s.clientX - n.left && (h = !0, d = Math.abs(d)), r > s.clientY - n.top && (c = !0, u = Math.abs(u)), e = "x" === i ? {
                                    x: h ? o - d : o,
                                    y: 0,
                                    width: d,
                                    height: a.globals.gridHeight
                                } : "y" === i ? {
                                    x: 0,
                                    y: c ? r - u : r,
                                    width: a.globals.gridWidth,
                                    height: u
                                } : {
                                    x: h ? o - d : o,
                                    y: c ? r - u : r,
                                    width: d,
                                    height: u
                                }, s.drawSelectionRect(e), s.selectionDragging("resizing"), e
                            }
                        }, {
                            key: "selectionDragging",
                            value: function (t, e) {
                                var l = this,
                                    i = this.w,
                                    a = this.xyRatios,
                                    s = this.selectionRect,
                                    n = 0;
                                "resizing" === t && (n = 30);
                                var o = function (t) {
                                        return parseFloat(s.node.getAttribute(t))
                                    },
                                    r = {
                                        x: o("x"),
                                        y: o("y"),
                                        width: o("width"),
                                        height: o("height")
                                    };
                                i.globals.selection = r, "function" == typeof i.config.chart.events.selection && i.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout((function () {
                                    var t = l.gridRect.getBoundingClientRect(),
                                        e = s.node.getBoundingClientRect(),
                                        n = {
                                            xaxis: {
                                                min: i.globals.xAxisScale.niceMin + (e.left - t.left) * a.xRatio,
                                                max: i.globals.xAxisScale.niceMin + (e.right - t.left) * a.xRatio
                                            },
                                            yaxis: {
                                                min: i.globals.yAxisScale[0].niceMin + (t.bottom - e.bottom) * a.yRatio[0],
                                                max: i.globals.yAxisScale[0].niceMax - (e.top - t.top) * a.yRatio[0]
                                            }
                                        };
                                    i.config.chart.events.selection(l.ctx, n), i.config.chart.brush.enabled && void 0 !== i.config.chart.events.brushScrolled && i.config.chart.events.brushScrolled(l.ctx, n)
                                }), n))
                            }
                        }, {
                            key: "selectionDrawn",
                            value: function (t) {
                                var e = t.context,
                                    l = t.zoomtype,
                                    i = this.w,
                                    a = e,
                                    s = this.xyRatios,
                                    n = this.ctx.toolbar;
                                if (a.startX > a.endX) {
                                    var o = a.startX;
                                    a.startX = a.endX, a.endX = o
                                }
                                if (a.startY > a.endY) {
                                    var r = a.startY;
                                    a.startY = a.endY, a.endY = r
                                }
                                var h = void 0,
                                    c = void 0;
                                i.globals.isRangeBar ? (h = i.globals.yAxisScale[0].niceMin + a.startX * s.invertedYRatio, c = i.globals.yAxisScale[0].niceMin + a.endX * s.invertedYRatio) : (h = i.globals.xAxisScale.niceMin + a.startX * s.xRatio, c = i.globals.xAxisScale.niceMin + a.endX * s.xRatio);
                                var d = [],
                                    u = [];
                                if (i.config.yaxis.forEach((function (t, e) {
                                        d.push(i.globals.yAxisScale[e].niceMax - s.yRatio[e] * a.startY), u.push(i.globals.yAxisScale[e].niceMax - s.yRatio[e] * a.endY)
                                    })), a.dragged && (a.dragX > 10 || a.dragY > 10) && h !== c)
                                    if (i.globals.zoomEnabled) {
                                        var g = m.clone(i.globals.initialConfig.yaxis),
                                            p = m.clone(i.globals.initialConfig.xaxis);
                                        if (i.globals.zoomed = !0, i.config.xaxis.convertedCatToNumeric && (h = Math.floor(h), c = Math.floor(c), h < 1 && (h = 1, c = i.globals.dataPoints), c - h < 2 && (c = h + 1)), "xy" !== l && "x" !== l || (p = {
                                                min: h,
                                                max: c
                                            }), "xy" !== l && "y" !== l || g.forEach((function (t, e) {
                                                g[e].min = u[e], g[e].max = d[e]
                                            })), i.config.chart.zoom.autoScaleYaxis) {
                                            var f = new K(a.ctx);
                                            g = f.autoScaleY(a.ctx, g, {
                                                xaxis: p
                                            })
                                        }
                                        if (n) {
                                            var v = n.getBeforeZoomRange(p, g);
                                            v && (p = v.xaxis ? v.xaxis : p, g = v.yaxis ? v.yaxis : g)
                                        }
                                        var x = {
                                            xaxis: p
                                        };
                                        i.config.chart.group || (x.yaxis = g), a.ctx.updateHelpers._updateOptions(x, !1, a.w.config.chart.animations.dynamicAnimation.enabled), "function" == typeof i.config.chart.events.zoomed && n.zoomCallback(p, g)
                                    } else if (i.globals.selectionEnabled) {
                                    var b, y = null;
                                    b = {
                                        min: h,
                                        max: c
                                    }, "xy" !== l && "y" !== l || (y = m.clone(i.config.yaxis)).forEach((function (t, e) {
                                        y[e].min = u[e], y[e].max = d[e]
                                    })), i.globals.selection = a.selection, "function" == typeof i.config.chart.events.selection && i.config.chart.events.selection(a.ctx, {
                                        xaxis: b,
                                        yaxis: y
                                    })
                                }
                            }
                        }, {
                            key: "panDragging",
                            value: function (t) {
                                var e = t.context,
                                    l = this.w,
                                    i = e;
                                if (void 0 !== l.globals.lastClientPosition.x) {
                                    var a = l.globals.lastClientPosition.x - i.clientX,
                                        s = l.globals.lastClientPosition.y - i.clientY;
                                    Math.abs(a) > Math.abs(s) && a > 0 ? this.moveDirection = "left" : Math.abs(a) > Math.abs(s) && a < 0 ? this.moveDirection = "right" : Math.abs(s) > Math.abs(a) && s > 0 ? this.moveDirection = "up" : Math.abs(s) > Math.abs(a) && s < 0 && (this.moveDirection = "down")
                                }
                                l.globals.lastClientPosition = {
                                    x: i.clientX,
                                    y: i.clientY
                                };
                                var n = l.globals.isRangeBar ? l.globals.minY : l.globals.minX,
                                    o = l.globals.isRangeBar ? l.globals.maxY : l.globals.maxX;
                                l.config.xaxis.convertedCatToNumeric || i.panScrolled(n, o)
                            }
                        }, {
                            key: "delayedPanScrolled",
                            value: function () {
                                var t = this.w,
                                    e = t.globals.minX,
                                    l = t.globals.maxX,
                                    i = (t.globals.maxX - t.globals.minX) / 2;
                                "left" === this.moveDirection ? (e = t.globals.minX + i, l = t.globals.maxX + i) : "right" === this.moveDirection && (e = t.globals.minX - i, l = t.globals.maxX - i), e = Math.floor(e), l = Math.floor(l), this.updateScrolledChart({
                                    xaxis: {
                                        min: e,
                                        max: l
                                    }
                                }, e, l)
                            }
                        }, {
                            key: "panScrolled",
                            value: function (t, e) {
                                var l = this.w,
                                    i = this.xyRatios,
                                    a = m.clone(l.globals.initialConfig.yaxis),
                                    s = i.xRatio,
                                    n = l.globals.minX,
                                    o = l.globals.maxX;
                                l.globals.isRangeBar && (s = i.invertedYRatio, n = l.globals.minY, o = l.globals.maxY), "left" === this.moveDirection ? (t = n + l.globals.gridWidth / 15 * s, e = o + l.globals.gridWidth / 15 * s) : "right" === this.moveDirection && (t = n - l.globals.gridWidth / 15 * s, e = o - l.globals.gridWidth / 15 * s), l.globals.isRangeBar || (t < l.globals.initialMinX || e > l.globals.initialMaxX) && (t = n, e = o);
                                var r = {
                                    min: t,
                                    max: e
                                };
                                l.config.chart.zoom.autoScaleYaxis && (a = new K(this.ctx).autoScaleY(this.ctx, a, {
                                    xaxis: r
                                }));
                                var h = {
                                    xaxis: {
                                        min: t,
                                        max: e
                                    }
                                };
                                l.config.chart.group || (h.yaxis = a), this.updateScrolledChart(h, t, e)
                            }
                        }, {
                            key: "updateScrolledChart",
                            value: function (t, e, l) {
                                var i = this.w;
                                this.ctx.updateHelpers._updateOptions(t, !1, !1), "function" == typeof i.config.chart.events.scrolled && i.config.chart.events.scrolled(this.ctx, {
                                    xaxis: {
                                        min: e,
                                        max: l
                                    }
                                })
                            }
                        }]), l
                    }(),
                    ft = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx
                        }
                        return h(t, [{
                            key: "getNearestValues",
                            value: function (t) {
                                var e = t.hoverArea,
                                    l = t.elGrid,
                                    i = t.clientX,
                                    a = t.clientY,
                                    s = this.w,
                                    n = l.getBoundingClientRect(),
                                    o = n.width,
                                    r = n.height,
                                    h = o / (s.globals.dataPoints - 1),
                                    c = r / s.globals.dataPoints,
                                    d = this.hasBars();
                                !s.globals.comboCharts && !d || s.config.xaxis.convertedCatToNumeric || (h = o / s.globals.dataPoints);
                                var u = i - n.left - s.globals.barPadForNumericAxis,
                                    g = a - n.top;
                                u < 0 || g < 0 || u > o || g > r ? (e.classList.remove("hovering-zoom"), e.classList.remove("hovering-pan")) : s.globals.zoomEnabled ? (e.classList.remove("hovering-pan"), e.classList.add("hovering-zoom")) : s.globals.panEnabled && (e.classList.remove("hovering-zoom"), e.classList.add("hovering-pan"));
                                var p = Math.round(u / h),
                                    f = Math.floor(g / c);
                                d && !s.config.xaxis.convertedCatToNumeric && (p = Math.ceil(u / h), p -= 1);
                                for (var v, x = null, b = null, y = [], w = 0; w < s.globals.seriesXvalues.length; w++) y.push([s.globals.seriesXvalues[w][0] - 1e-6].concat(s.globals.seriesXvalues[w]));
                                if (y = y.map((function (t) {
                                        return t.filter((function (t) {
                                            return t
                                        }))
                                    })), v = s.globals.seriesYvalues.map((function (t) {
                                        return t.filter((function (t) {
                                            return m.isNumber(t)
                                        }))
                                    })), s.globals.isXNumeric) {
                                    var A = this.ttCtx.getElGrid().getBoundingClientRect(),
                                        S = u * (A.width / o),
                                        k = g * (A.height / r);
                                    x = (b = this.closestInMultiArray(S, k, y, v)).index, p = b.j, null !== x && (y = s.globals.seriesXvalues[x], p = (b = this.closestInArray(S, y)).index)
                                }
                                return s.globals.capturedSeriesIndex = null === x ? -1 : x, (!p || p < 1) && (p = 0), s.globals.isBarHorizontal ? s.globals.capturedDataPointIndex = f : s.globals.capturedDataPointIndex = p, {
                                    capturedSeries: x,
                                    j: s.globals.isBarHorizontal ? f : p,
                                    hoverX: u,
                                    hoverY: g
                                }
                            }
                        }, {
                            key: "closestInMultiArray",
                            value: function (t, e, l, i) {
                                var a = this.w,
                                    s = 0,
                                    n = null,
                                    o = -1;
                                a.globals.series.length > 1 ? s = this.getFirstActiveXArray(l) : n = 0;
                                var r = i[s][0],
                                    h = l[s][0],
                                    c = Math.abs(t - h),
                                    d = Math.abs(e - r),
                                    u = d + c;
                                return i.map((function (a, s) {
                                    a.map((function (a, r) {
                                        var h = Math.abs(e - i[s][r]),
                                            g = Math.abs(t - l[s][r]),
                                            p = g + h;
                                        p < u && (u = p, c = g, d = h, n = s, o = r)
                                    }))
                                })), {
                                    index: n,
                                    j: o
                                }
                            }
                        }, {
                            key: "getFirstActiveXArray",
                            value: function (t) {
                                for (var e = 0, l = t.map((function (t, e) {
                                        return t.length > 0 ? e : -1
                                    })), i = 0; i < l.length; i++)
                                    if (-1 !== l[i]) {
                                        e = l[i];
                                        break
                                    } return e
                            }
                        }, {
                            key: "closestInArray",
                            value: function (t, e) {
                                for (var l = e[0], i = null, a = Math.abs(t - l), s = 0; s < e.length; s++) {
                                    var n = Math.abs(t - e[s]);
                                    n < a && (a = n, i = s)
                                }
                                return {
                                    index: i
                                }
                            }
                        }, {
                            key: "isXoverlap",
                            value: function (t) {
                                var e = [],
                                    l = this.w.globals.seriesX.filter((function (t) {
                                        return void 0 !== t[0]
                                    }));
                                if (l.length > 0)
                                    for (var i = 0; i < l.length - 1; i++) void 0 !== l[i][t] && void 0 !== l[i + 1][t] && l[i][t] !== l[i + 1][t] && e.push("unEqual");
                                return 0 === e.length
                            }
                        }, {
                            key: "isInitialSeriesSameLen",
                            value: function () {
                                for (var t = !0, e = this.w.globals.initialSeries, l = 0; l < e.length - 1; l++)
                                    if (e[l].data.length !== e[l + 1].data.length) {
                                        t = !1;
                                        break
                                    } return t
                            }
                        }, {
                            key: "getBarsHeight",
                            value: function (t) {
                                return v(t).reduce((function (t, e) {
                                    return t + e.getBBox().height
                                }), 0)
                            }
                        }, {
                            key: "getElMarkers",
                            value: function () {
                                return this.w.globals.dom.baseEl.querySelectorAll(" .apexcharts-series-markers")
                            }
                        }, {
                            key: "getAllMarkers",
                            value: function () {
                                var t = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers-wrap");
                                (t = v(t)).sort((function (t, e) {
                                    return Number(e.getAttribute("data:realIndex")) < Number(t.getAttribute("data:realIndex")) ? 0 : -1
                                }));
                                var e = [];
                                return t.forEach((function (t) {
                                    e.push(t.querySelector(".apexcharts-marker"))
                                })), e
                            }
                        }, {
                            key: "hasMarkers",
                            value: function () {
                                return this.getElMarkers().length > 0
                            }
                        }, {
                            key: "getElBars",
                            value: function () {
                                return this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series")
                            }
                        }, {
                            key: "hasBars",
                            value: function () {
                                return this.getElBars().length > 0
                            }
                        }, {
                            key: "getHoverMarkerSize",
                            value: function (t) {
                                var e = this.w,
                                    l = e.config.markers.hover.size;
                                return void 0 === l && (l = e.globals.markers.size[t] + e.config.markers.hover.sizeOffset), l
                            }
                        }, {
                            key: "toggleAllTooltipSeriesGroups",
                            value: function (t) {
                                var e = this.w,
                                    l = this.ttCtx;
                                0 === l.allTooltipSeriesGroups.length && (l.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(".apexcharts-tooltip-series-group"));
                                for (var i = l.allTooltipSeriesGroups, a = 0; a < i.length; a++) "enable" === t ? (i[a].classList.add("apexcharts-active"), i[a].style.display = e.config.tooltip.items.display) : (i[a].classList.remove("apexcharts-active"), i[a].style.display = "none")
                            }
                        }]), t
                    }(),
                    vt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.ctx = e.ctx, this.ttCtx = e, this.tooltipUtil = new ft(e)
                        }
                        return h(t, [{
                            key: "drawSeriesTexts",
                            value: function (t) {
                                var e = t.shared,
                                    l = void 0 === e || e,
                                    i = t.ttItems,
                                    a = t.i,
                                    s = void 0 === a ? 0 : a,
                                    n = t.j,
                                    o = void 0 === n ? null : n,
                                    r = t.y1,
                                    h = t.y2,
                                    c = t.e,
                                    d = this.w;
                                void 0 !== d.config.tooltip.custom ? this.handleCustomTooltip({
                                    i: s,
                                    j: o,
                                    y1: r,
                                    y2: h,
                                    w: d
                                }) : this.toggleActiveInactiveSeries(l);
                                var u = this.getValuesToPrint({
                                    i: s,
                                    j: o
                                });
                                this.printLabels({
                                    i: s,
                                    j: o,
                                    values: u,
                                    ttItems: i,
                                    shared: l,
                                    e: c
                                });
                                var g = this.ttCtx.getElTooltip();
                                this.ttCtx.tooltipRect.ttWidth = g.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = g.getBoundingClientRect().height
                            }
                        }, {
                            key: "printLabels",
                            value: function (t) {
                                var e, l = this,
                                    i = t.i,
                                    a = t.j,
                                    n = t.values,
                                    o = t.ttItems,
                                    r = t.shared,
                                    h = t.e,
                                    c = this.w,
                                    d = [],
                                    u = function (t) {
                                        return c.globals.seriesGoals[t] && c.globals.seriesGoals[t][a] && Array.isArray(c.globals.seriesGoals[t][a])
                                    },
                                    g = n.xVal,
                                    p = n.zVal,
                                    f = n.xAxisTTVal,
                                    v = "",
                                    x = c.globals.colors[i];
                                null !== a && c.config.plotOptions.bar.distributed && (x = c.globals.colors[a]);
                                for (var m = function (t, n) {
                                        var m = l.getFormatters(i);
                                        v = l.getSeriesName({
                                            fn: m.yLbTitleFormatter,
                                            index: i,
                                            seriesIndex: i,
                                            j: a
                                        }), "treemap" === c.config.chart.type && (v = m.yLbTitleFormatter(String(c.config.series[i].data[a].x), {
                                            series: c.globals.series,
                                            seriesIndex: i,
                                            dataPointIndex: a,
                                            w: c
                                        }));
                                        var b = c.config.tooltip.inverseOrder ? n : t;
                                        if (c.globals.axisCharts) {
                                            var y = function (t) {
                                                return m.yLbFormatter(c.globals.series[t][a], {
                                                    series: c.globals.series,
                                                    seriesIndex: t,
                                                    dataPointIndex: a,
                                                    w: c
                                                })
                                            };
                                            r ? (m = l.getFormatters(b), v = l.getSeriesName({
                                                fn: m.yLbTitleFormatter,
                                                index: b,
                                                seriesIndex: i,
                                                j: a
                                            }), x = c.globals.colors[b], e = y(b), u(b) && (d = c.globals.seriesGoals[b][a].map((function (t) {
                                                return {
                                                    attrs: t,
                                                    val: m.yLbFormatter(t.value, {
                                                        seriesIndex: b,
                                                        dataPointIndex: a,
                                                        w: c
                                                    })
                                                }
                                            })))) : (h && h.target && h.target.getAttribute("fill") && (x = h.target.getAttribute("fill")), e = y(i), u(i) && Array.isArray(c.globals.seriesGoals[i][a]) && (d = c.globals.seriesGoals[i][a].map((function (t) {
                                                return {
                                                    attrs: t,
                                                    val: m.yLbFormatter(t.value, {
                                                        seriesIndex: i,
                                                        dataPointIndex: a,
                                                        w: c
                                                    })
                                                }
                                            }))))
                                        }
                                        null === a && (e = m.yLbFormatter(c.globals.series[i], s(s({}, c), {}, {
                                            seriesIndex: i,
                                            dataPointIndex: i
                                        }))), l.DOMHandling({
                                            i,
                                            t: b,
                                            j: a,
                                            ttItems: o,
                                            values: {
                                                val: e,
                                                goalVals: d,
                                                xVal: g,
                                                xAxisTTVal: f,
                                                zVal: p
                                            },
                                            seriesName: v,
                                            shared: r,
                                            pColor: x
                                        })
                                    }, b = 0, y = c.globals.series.length - 1; b < c.globals.series.length; b++, y--) m(b, y)
                            }
                        }, {
                            key: "getFormatters",
                            value: function (t) {
                                var e, l = this.w,
                                    i = l.globals.yLabelFormatters[t];
                                return void 0 !== l.globals.ttVal ? Array.isArray(l.globals.ttVal) ? (i = l.globals.ttVal[t] && l.globals.ttVal[t].formatter, e = l.globals.ttVal[t] && l.globals.ttVal[t].title && l.globals.ttVal[t].title.formatter) : (i = l.globals.ttVal.formatter, "function" == typeof l.globals.ttVal.title.formatter && (e = l.globals.ttVal.title.formatter)) : e = l.config.tooltip.y.title.formatter, "function" != typeof i && (i = l.globals.yLabelFormatters[0] ? l.globals.yLabelFormatters[0] : function (t) {
                                    return t
                                }), "function" != typeof e && (e = function (t) {
                                    return t
                                }), {
                                    yLbFormatter: i,
                                    yLbTitleFormatter: e
                                }
                            }
                        }, {
                            key: "getSeriesName",
                            value: function (t) {
                                var e = t.fn,
                                    l = t.index,
                                    i = t.seriesIndex,
                                    a = t.j,
                                    s = this.w;
                                return e(String(s.globals.seriesNames[l]), {
                                    series: s.globals.series,
                                    seriesIndex: i,
                                    dataPointIndex: a,
                                    w: s
                                })
                            }
                        }, {
                            key: "DOMHandling",
                            value: function (t) {
                                t.i;
                                var e = t.t,
                                    l = t.j,
                                    i = t.ttItems,
                                    a = t.values,
                                    s = t.seriesName,
                                    n = t.shared,
                                    o = t.pColor,
                                    r = this.w,
                                    h = this.ttCtx,
                                    c = a.val,
                                    d = a.goalVals,
                                    u = a.xVal,
                                    g = a.xAxisTTVal,
                                    p = a.zVal,
                                    f = null;
                                f = i[e].children, r.config.tooltip.fillSeriesColor && (i[e].style.backgroundColor = o, f[0].style.display = "none"), h.showTooltipTitle && (null === h.tooltipTitle && (h.tooltipTitle = r.globals.dom.baseEl.querySelector(".apexcharts-tooltip-title")), h.tooltipTitle.innerHTML = u), h.isXAxisTooltipEnabled && (h.xaxisTooltipText.innerHTML = "" !== g ? g : u);
                                var v = i[e].querySelector(".apexcharts-tooltip-text-y-label");
                                v && (v.innerHTML = s || "");
                                var x = i[e].querySelector(".apexcharts-tooltip-text-y-value");
                                x && (x.innerHTML = void 0 !== c ? c : ""), f[0] && f[0].classList.contains("apexcharts-tooltip-marker") && (r.config.tooltip.marker.fillColors && Array.isArray(r.config.tooltip.marker.fillColors) && (o = r.config.tooltip.marker.fillColors[e]), f[0].style.backgroundColor = o), r.config.tooltip.marker.show || (f[0].style.display = "none");
                                var m = i[e].querySelector(".apexcharts-tooltip-text-goals-label"),
                                    b = i[e].querySelector(".apexcharts-tooltip-text-goals-value");
                                if (d.length && r.globals.seriesGoals[e]) {
                                    var y = function () {
                                        var t = "<div >",
                                            e = "<div>";
                                        d.forEach((function (l, i) {
                                            t += ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '.concat(l.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;"></span> ').concat(l.attrs.name, "</div>"), e += "<div>".concat(l.val, "</div>")
                                        })), m.innerHTML = t + "</div>", b.innerHTML = e + "</div>"
                                    };
                                    n ? r.globals.seriesGoals[e][l] && Array.isArray(r.globals.seriesGoals[e][l]) ? y() : (m.innerHTML = "", b.innerHTML = "") : y()
                                } else m.innerHTML = "", b.innerHTML = "";
                                null !== p && (i[e].querySelector(".apexcharts-tooltip-text-z-label").innerHTML = r.config.tooltip.z.title, i[e].querySelector(".apexcharts-tooltip-text-z-value").innerHTML = void 0 !== p ? p : ""), n && f[0] && (null == c || r.globals.collapsedSeriesIndices.indexOf(e) > -1 ? f[0].parentNode.style.display = "none" : f[0].parentNode.style.display = r.config.tooltip.items.display)
                            }
                        }, {
                            key: "toggleActiveInactiveSeries",
                            value: function (t) {
                                var e = this.w;
                                if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
                                else {
                                    this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
                                    var l = e.globals.dom.baseEl.querySelector(".apexcharts-tooltip-series-group");
                                    l && (l.classList.add("apexcharts-active"), l.style.display = e.config.tooltip.items.display)
                                }
                            }
                        }, {
                            key: "getValuesToPrint",
                            value: function (t) {
                                var e = t.i,
                                    l = t.j,
                                    i = this.w,
                                    a = this.ctx.series.filteredSeriesX(),
                                    s = "",
                                    n = "",
                                    o = null,
                                    r = null,
                                    h = {
                                        series: i.globals.series,
                                        seriesIndex: e,
                                        dataPointIndex: l,
                                        w: i
                                    },
                                    c = i.globals.ttZFormatter;
                                null === l ? r = i.globals.series[e] : i.globals.isXNumeric && "treemap" !== i.config.chart.type ? (s = a[e][l], 0 === a[e].length && (s = a[this.tooltipUtil.getFirstActiveXArray(a)][l])) : s = void 0 !== i.globals.labels[l] ? i.globals.labels[l] : "";
                                var d = s;
                                return s = i.globals.isXNumeric && "datetime" === i.config.xaxis.type ? new _(this.ctx).xLabelFormat(i.globals.ttKeyFormatter, d, d, {
                                    i: void 0,
                                    dateFormatter: new Y(this.ctx).formatDate,
                                    w: this.w
                                }) : i.globals.isBarHorizontal ? i.globals.yLabelFormatters[0](d, h) : i.globals.xLabelFormatter(d, h), void 0 !== i.config.tooltip.x.formatter && (s = i.globals.ttKeyFormatter(d, h)), i.globals.seriesZ.length > 0 && i.globals.seriesZ[e].length > 0 && (o = c(i.globals.seriesZ[e][l], i)), n = "function" == typeof i.config.xaxis.tooltip.formatter ? i.globals.xaxisTooltipFormatter(d, h) : s, {
                                    val: Array.isArray(r) ? r.join(" ") : r,
                                    xVal: Array.isArray(s) ? s.join(" ") : s,
                                    xAxisTTVal: Array.isArray(n) ? n.join(" ") : n,
                                    zVal: o
                                }
                            }
                        }, {
                            key: "handleCustomTooltip",
                            value: function (t) {
                                var e = t.i,
                                    l = t.j,
                                    i = t.y1,
                                    a = t.y2,
                                    s = t.w,
                                    n = this.ttCtx.getElTooltip(),
                                    o = s.config.tooltip.custom;
                                Array.isArray(o) && o[e] && (o = o[e]), n.innerHTML = o({
                                    ctx: this.ctx,
                                    series: s.globals.series,
                                    seriesIndex: e,
                                    dataPointIndex: l,
                                    y1: i,
                                    y2: a,
                                    w: s
                                })
                            }
                        }]), t
                    }(),
                    xt = function () {
                        function t(e) {
                            o(this, t), this.ttCtx = e, this.ctx = e.ctx, this.w = e.w
                        }
                        return h(t, [{
                            key: "moveXCrosshairs",
                            value: function (t) {
                                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
                                    l = this.ttCtx,
                                    i = this.w,
                                    a = l.getElXCrosshairs(),
                                    s = t - l.xcrosshairsWidth / 2,
                                    n = i.globals.labels.slice().length;
                                if (null !== e && (s = i.globals.gridWidth / n * e), null === a || i.globals.isBarHorizontal || (a.setAttribute("x", s), a.setAttribute("x1", s), a.setAttribute("x2", s), a.setAttribute("y2", i.globals.gridHeight), a.classList.add("apexcharts-active")), s < 0 && (s = 0), s > i.globals.gridWidth && (s = i.globals.gridWidth), l.isXAxisTooltipEnabled) {
                                    var o = s;
                                    "tickWidth" !== i.config.xaxis.crosshairs.width && "barWidth" !== i.config.xaxis.crosshairs.width || (o = s + l.xcrosshairsWidth / 2), this.moveXAxisTooltip(o)
                                }
                            }
                        }, {
                            key: "moveYCrosshairs",
                            value: function (t) {
                                var e = this.ttCtx;
                                null !== e.ycrosshairs && w.setAttrs(e.ycrosshairs, {
                                    y1: t,
                                    y2: t
                                }), null !== e.ycrosshairsHidden && w.setAttrs(e.ycrosshairsHidden, {
                                    y1: t,
                                    y2: t
                                })
                            }
                        }, {
                            key: "moveXAxisTooltip",
                            value: function (t) {
                                var e = this.w,
                                    l = this.ttCtx;
                                if (null !== l.xaxisTooltip && 0 !== l.xcrosshairsWidth) {
                                    l.xaxisTooltip.classList.add("apexcharts-active");
                                    var i, a = l.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;
                                    t -= l.xaxisTooltip.getBoundingClientRect().width / 2, isNaN(t) || (t += e.globals.translateX, i = new w(this.ctx).getTextRects(l.xaxisTooltipText.innerHTML), l.xaxisTooltipText.style.minWidth = i.width + "px", l.xaxisTooltip.style.left = t + "px", l.xaxisTooltip.style.top = a + "px")
                                }
                            }
                        }, {
                            key: "moveYAxisTooltip",
                            value: function (t) {
                                var e = this.w,
                                    l = this.ttCtx;
                                null === l.yaxisTTEls && (l.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                                var i = parseInt(l.ycrosshairsHidden.getAttribute("y1"), 10),
                                    a = e.globals.translateY + i,
                                    s = l.yaxisTTEls[t].getBoundingClientRect().height,
                                    n = e.globals.translateYAxisX[t] - 2;
                                e.config.yaxis[t].opposite && (n -= 26), a -= s / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) ? (l.yaxisTTEls[t].classList.add("apexcharts-active"), l.yaxisTTEls[t].style.top = a + "px", l.yaxisTTEls[t].style.left = n + e.config.yaxis[t].tooltip.offsetX + "px") : l.yaxisTTEls[t].classList.remove("apexcharts-active")
                            }
                        }, {
                            key: "moveTooltip",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                    i = this.w,
                                    a = this.ttCtx,
                                    s = a.getElTooltip(),
                                    n = a.tooltipRect,
                                    o = null !== l ? parseFloat(l) : 1,
                                    r = parseFloat(t) + o + 5,
                                    h = parseFloat(e) + o / 2;
                                if (r > i.globals.gridWidth / 2 && (r = r - n.ttWidth - o - 15), r > i.globals.gridWidth - n.ttWidth - 10 && (r = i.globals.gridWidth - n.ttWidth), r < -20 && (r = -20), i.config.tooltip.followCursor) {
                                    var c = a.getElGrid(),
                                        d = c.getBoundingClientRect();
                                    h = a.e.clientY + i.globals.translateY - d.top - n.ttHeight / 2
                                } else i.globals.isBarHorizontal ? h -= n.ttHeight : (n.ttHeight / 2 + h > i.globals.gridHeight && (h = i.globals.gridHeight - n.ttHeight + i.globals.translateY), h < 0 && (h = 0));
                                isNaN(r) || (r += i.globals.translateX, s.style.left = r + "px", s.style.top = h + "px")
                            }
                        }, {
                            key: "moveMarkers",
                            value: function (t, e) {
                                var l = this.w,
                                    i = this.ttCtx;
                                if (l.globals.markers.size[t] > 0)
                                    for (var a = l.globals.dom.baseEl.querySelectorAll(" .apexcharts-series[data\\:realIndex='".concat(t, "'] .apexcharts-marker")), s = 0; s < a.length; s++) parseInt(a[s].getAttribute("rel"), 10) === e && (i.marker.resetPointsSize(), i.marker.enlargeCurrentPoint(e, a[s]));
                                else i.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t)
                            }
                        }, {
                            key: "moveDynamicPointOnHover",
                            value: function (t, e) {
                                var l, i, a = this.w,
                                    s = this.ttCtx,
                                    n = a.globals.pointsArray,
                                    o = s.tooltipUtil.getHoverMarkerSize(e),
                                    r = a.config.series[e].type;
                                if (!r || "column" !== r && "candlestick" !== r && "boxPlot" !== r) {
                                    l = n[e][t][0], i = n[e][t][1] ? n[e][t][1] : 0;
                                    var h = a.globals.dom.baseEl.querySelector(".apexcharts-series[data\\:realIndex='".concat(e, "'] .apexcharts-series-markers circle"));
                                    h && i < a.globals.gridHeight && i > 0 && (h.setAttribute("r", o), h.setAttribute("cx", l), h.setAttribute("cy", i)), this.moveXCrosshairs(l), s.fixedTooltip || this.moveTooltip(l, i, o)
                                }
                            }
                        }, {
                            key: "moveDynamicPointsOnHover",
                            value: function (t) {
                                var e, l = this.ttCtx,
                                    i = l.w,
                                    a = 0,
                                    s = 0,
                                    n = i.globals.pointsArray;
                                e = new N(this.ctx).getActiveConfigSeriesIndex(!0);
                                var o = l.tooltipUtil.getHoverMarkerSize(e);
                                n[e] && (a = n[e][t][0], s = n[e][t][1]);
                                var r = l.tooltipUtil.getAllMarkers();
                                if (null !== r)
                                    for (var h = 0; h < i.globals.series.length; h++) {
                                        var c = n[h];
                                        if (i.globals.comboCharts && void 0 === c && r.splice(h, 0, null), c && c.length) {
                                            var d = n[h][t][1];
                                            r[h].setAttribute("cx", a), null !== d && !isNaN(d) && d < i.globals.gridHeight && d > 0 ? (r[h] && r[h].setAttribute("r", o), r[h] && r[h].setAttribute("cy", d)) : r[h] && r[h].setAttribute("r", 0)
                                        }
                                    }
                                if (this.moveXCrosshairs(a), !l.fixedTooltip) {
                                    var u = s || i.globals.gridHeight;
                                    this.moveTooltip(a, u, o)
                                }
                            }
                        }, {
                            key: "moveStickyTooltipOverBars",
                            value: function (t) {
                                var e = this.w,
                                    l = this.ttCtx,
                                    i = e.globals.columnSeries ? e.globals.columnSeries.length : e.globals.series.length,
                                    a = i >= 2 && i % 2 == 0 ? Math.floor(i / 2) : Math.floor(i / 2) + 1;
                                e.globals.isBarHorizontal && (a = new N(this.ctx).getActiveConfigSeriesIndex(!1, "desc") + 1);
                                var s = e.globals.dom.baseEl.querySelector(".apexcharts-bar-series .apexcharts-series[rel='".concat(a, "'] path[j='").concat(t, "'], .apexcharts-candlestick-series .apexcharts-series[rel='").concat(a, "'] path[j='").concat(t, "'], .apexcharts-boxPlot-series .apexcharts-series[rel='").concat(a, "'] path[j='").concat(t, "'], .apexcharts-rangebar-series .apexcharts-series[rel='").concat(a, "'] path[j='").concat(t, "']")),
                                    n = s ? parseFloat(s.getAttribute("cx")) : 0,
                                    o = s ? parseFloat(s.getAttribute("cy")) : 0,
                                    r = s ? parseFloat(s.getAttribute("barWidth")) : 0,
                                    h = s ? parseFloat(s.getAttribute("barHeight")) : 0,
                                    c = l.getElGrid().getBoundingClientRect(),
                                    d = s.classList.contains("apexcharts-candlestick-area") || s.classList.contains("apexcharts-boxPlot-area");
                                if (e.globals.isXNumeric ? (s && !d && (n -= i % 2 != 0 ? r / 2 : 0), s && d && e.globals.comboCharts && (n -= r / 2)) : e.globals.isBarHorizontal || (n = l.xAxisTicksPositions[t - 1] + l.dataPointsDividedWidth / 2, isNaN(n) && (n = l.xAxisTicksPositions[t] - l.dataPointsDividedWidth / 2)), e.globals.isBarHorizontal ? o += h / 3 : o = l.e.clientY - c.top - l.tooltipRect.ttHeight / 2, e.globals.isBarHorizontal || this.moveXCrosshairs(n), !l.fixedTooltip) {
                                    var u = o || e.globals.gridHeight;
                                    this.moveTooltip(n, u)
                                }
                            }
                        }]), t
                    }(),
                    mt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx, this.tooltipPosition = new xt(e)
                        }
                        return h(t, [{
                            key: "drawDynamicPoints",
                            value: function () {
                                var t = this.w,
                                    e = new w(this.ctx),
                                    l = new T(this.ctx),
                                    i = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                                i = v(i), t.config.chart.stacked && i.sort((function (t, e) {
                                    return parseFloat(t.getAttribute("data:realIndex")) - parseFloat(e.getAttribute("data:realIndex"))
                                }));
                                for (var a = 0; a < i.length; a++) {
                                    var s = i[a].querySelector(".apexcharts-series-markers-wrap");
                                    if (null !== s) {
                                        var n = void 0,
                                            o = "apexcharts-marker w".concat((Math.random() + 1).toString(36).substring(4));
                                        "line" !== t.config.chart.type && "area" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (o += " no-pointer-events");
                                        var r = l.getMarkerConfig({
                                            cssClass: o,
                                            seriesIndex: Number(s.getAttribute("data:realIndex"))
                                        });
                                        (n = e.drawMarker(0, 0, r)).node.setAttribute("default-marker-size", 0);
                                        var h = document.createElementNS(t.globals.SVGNS, "g");
                                        h.classList.add("apexcharts-series-markers"), h.appendChild(n.node), s.appendChild(h)
                                    }
                                }
                            }
                        }, {
                            key: "enlargeCurrentPoint",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
                                    i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                                    a = this.w;
                                "bubble" !== a.config.chart.type && this.newPointSize(t, e);
                                var s = e.getAttribute("cx"),
                                    n = e.getAttribute("cy");
                                if (null !== l && null !== i && (s = l, n = i), this.tooltipPosition.moveXCrosshairs(s), !this.fixedTooltip) {
                                    if ("radar" === a.config.chart.type) {
                                        var o = this.ttCtx.getElGrid(),
                                            r = o.getBoundingClientRect();
                                        s = this.ttCtx.e.clientX - r.left
                                    }
                                    this.tooltipPosition.moveTooltip(s, n, a.config.markers.hover.size)
                                }
                            }
                        }, {
                            key: "enlargePoints",
                            value: function (t) {
                                for (var e = this.w, l = this, i = this.ttCtx, a = t, s = e.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), n = e.config.markers.hover.size, o = 0; o < s.length; o++) {
                                    var r = s[o].getAttribute("rel"),
                                        h = s[o].getAttribute("index");
                                    if (void 0 === n && (n = e.globals.markers.size[h] + e.config.markers.hover.sizeOffset), a === parseInt(r, 10)) {
                                        l.newPointSize(a, s[o]);
                                        var c = s[o].getAttribute("cx"),
                                            d = s[o].getAttribute("cy");
                                        l.tooltipPosition.moveXCrosshairs(c), i.fixedTooltip || l.tooltipPosition.moveTooltip(c, d, n)
                                    } else l.oldPointSize(s[o])
                                }
                            }
                        }, {
                            key: "newPointSize",
                            value: function (t, e) {
                                var l = this.w,
                                    i = l.config.markers.hover.size,
                                    a = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;
                                if ("0" !== a.getAttribute("default-marker-size")) {
                                    var s = parseInt(a.getAttribute("index"), 10);
                                    void 0 === i && (i = l.globals.markers.size[s] + l.config.markers.hover.sizeOffset), i < 0 && (i = 0), a.setAttribute("r", i)
                                }
                            }
                        }, {
                            key: "oldPointSize",
                            value: function (t) {
                                var e = parseFloat(t.getAttribute("default-marker-size"));
                                t.setAttribute("r", e)
                            }
                        }, {
                            key: "resetPointsSize",
                            value: function () {
                                for (var t = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"), e = 0; e < t.length; e++) {
                                    var l = parseFloat(t[e].getAttribute("default-marker-size"));
                                    m.isNumber(l) && l >= 0 ? t[e].setAttribute("r", l) : t[e].setAttribute("r", 0)
                                }
                            }
                        }]), t
                    }(),
                    bt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.ttCtx = e
                        }
                        return h(t, [{
                            key: "getAttr",
                            value: function (t, e) {
                                return parseFloat(t.target.getAttribute(e))
                            }
                        }, {
                            key: "handleHeatTreeTooltip",
                            value: function (t) {
                                var e = t.e,
                                    l = t.opt,
                                    i = t.x,
                                    a = t.y,
                                    s = t.type,
                                    n = this.ttCtx,
                                    o = this.w;
                                if (e.target.classList.contains("apexcharts-".concat(s, "-rect"))) {
                                    var r = this.getAttr(e, "i"),
                                        h = this.getAttr(e, "j"),
                                        c = this.getAttr(e, "cx"),
                                        d = this.getAttr(e, "cy"),
                                        u = this.getAttr(e, "width"),
                                        g = this.getAttr(e, "height");
                                    if (n.tooltipLabels.drawSeriesTexts({
                                            ttItems: l.ttItems,
                                            i: r,
                                            j: h,
                                            shared: !1,
                                            e
                                        }), o.globals.capturedSeriesIndex = r, o.globals.capturedDataPointIndex = h, i = c + n.tooltipRect.ttWidth / 2 + u, a = d + n.tooltipRect.ttHeight / 2 - g / 2, n.tooltipPosition.moveXCrosshairs(c + u / 2), i > o.globals.gridWidth / 2 && (i = c - n.tooltipRect.ttWidth / 2 + u), n.w.config.tooltip.followCursor) {
                                        var p = o.globals.dom.elWrap.getBoundingClientRect();
                                        i = o.globals.clientX - p.left - n.tooltipRect.ttWidth / 2, a = o.globals.clientY - p.top - n.tooltipRect.ttHeight - 5
                                    }
                                }
                                return {
                                    x: i,
                                    y: a
                                }
                            }
                        }, {
                            key: "handleMarkerTooltip",
                            value: function (t) {
                                var e, l, i = t.e,
                                    a = t.opt,
                                    s = t.x,
                                    n = t.y,
                                    o = this.w,
                                    r = this.ttCtx;
                                if (i.target.classList.contains("apexcharts-marker")) {
                                    var h = parseInt(a.paths.getAttribute("cx"), 10),
                                        c = parseInt(a.paths.getAttribute("cy"), 10),
                                        d = parseFloat(a.paths.getAttribute("val"));
                                    if (l = parseInt(a.paths.getAttribute("rel"), 10), e = parseInt(a.paths.parentNode.parentNode.parentNode.getAttribute("rel"), 10) - 1, r.intersect) {
                                        var u = m.findAncestor(a.paths, "apexcharts-series");
                                        u && (e = parseInt(u.getAttribute("data:realIndex"), 10))
                                    }
                                    if (r.tooltipLabels.drawSeriesTexts({
                                            ttItems: a.ttItems,
                                            i: e,
                                            j: l,
                                            shared: !r.showOnIntersect && o.config.tooltip.shared,
                                            e: i
                                        }), "mouseup" === i.type && r.markerClick(i, e, l), o.globals.capturedSeriesIndex = e, o.globals.capturedDataPointIndex = l, s = h, n = c + o.globals.translateY - 1.4 * r.tooltipRect.ttHeight, r.w.config.tooltip.followCursor) {
                                        var g = r.getElGrid().getBoundingClientRect();
                                        n = r.e.clientY + o.globals.translateY - g.top
                                    }
                                    d < 0 && (n = c), r.marker.enlargeCurrentPoint(l, a.paths, s, n)
                                }
                                return {
                                    x: s,
                                    y: n
                                }
                            }
                        }, {
                            key: "handleBarTooltip",
                            value: function (t) {
                                var e, l, i = t.e,
                                    a = t.opt,
                                    s = this.w,
                                    n = this.ttCtx,
                                    o = n.getElTooltip(),
                                    r = 0,
                                    h = 0,
                                    c = 0,
                                    d = this.getBarTooltipXY({
                                        e: i,
                                        opt: a
                                    });
                                e = d.i;
                                var u = d.barHeight,
                                    g = d.j;
                                s.globals.capturedSeriesIndex = e, s.globals.capturedDataPointIndex = g, s.globals.isBarHorizontal && n.tooltipUtil.hasBars() || !s.config.tooltip.shared ? (h = d.x, c = d.y, l = Array.isArray(s.config.stroke.width) ? s.config.stroke.width[e] : s.config.stroke.width, r = h) : s.globals.comboCharts || s.config.tooltip.shared || (r /= 2), isNaN(c) ? c = s.globals.svgHeight - n.tooltipRect.ttHeight : c < 0 && (c = 0);
                                var p = parseInt(a.paths.parentNode.getAttribute("data:realIndex"), 10),
                                    f = s.globals.isMultipleYAxis ? s.config.yaxis[p] && s.config.yaxis[p].reversed : s.config.yaxis[0].reversed;
                                if (h + n.tooltipRect.ttWidth > s.globals.gridWidth && !f ? h -= n.tooltipRect.ttWidth : h < 0 && (h = 0), n.w.config.tooltip.followCursor) {
                                    var v = n.getElGrid().getBoundingClientRect();
                                    c = n.e.clientY - v.top
                                }
                                null === n.tooltip && (n.tooltip = s.globals.dom.baseEl.querySelector(".apexcharts-tooltip")), s.config.tooltip.shared || (s.globals.comboBarCount > 0 ? n.tooltipPosition.moveXCrosshairs(r + l / 2) : n.tooltipPosition.moveXCrosshairs(r)), !n.fixedTooltip && (!s.config.tooltip.shared || s.globals.isBarHorizontal && n.tooltipUtil.hasBars()) && (f && (h -= n.tooltipRect.ttWidth) < 0 && (h = 0), o.style.left = h + s.globals.translateX + "px", !f || s.globals.isBarHorizontal && n.tooltipUtil.hasBars() || (c = c + u - 2 * (s.globals.series[e][g] < 0 ? u : 0)), n.tooltipRect.ttHeight + c > s.globals.gridHeight ? (c = s.globals.gridHeight - n.tooltipRect.ttHeight + s.globals.translateY, o.style.top = c + "px") : o.style.top = c + s.globals.translateY - n.tooltipRect.ttHeight / 2 + "px")
                            }
                        }, {
                            key: "getBarTooltipXY",
                            value: function (t) {
                                var e = t.e,
                                    l = t.opt,
                                    i = this.w,
                                    a = null,
                                    s = this.ttCtx,
                                    n = 0,
                                    o = 0,
                                    r = 0,
                                    h = 0,
                                    c = 0,
                                    d = e.target.classList;
                                if (d.contains("apexcharts-bar-area") || d.contains("apexcharts-candlestick-area") || d.contains("apexcharts-boxPlot-area") || d.contains("apexcharts-rangebar-area")) {
                                    var u = e.target,
                                        g = u.getBoundingClientRect(),
                                        p = l.elGrid.getBoundingClientRect(),
                                        f = g.height;
                                    c = g.height;
                                    var v = g.width,
                                        x = parseInt(u.getAttribute("cx"), 10),
                                        m = parseInt(u.getAttribute("cy"), 10);
                                    h = parseFloat(u.getAttribute("barWidth"));
                                    var b = "touchmove" === e.type ? e.touches[0].clientX : e.clientX;
                                    a = parseInt(u.getAttribute("j"), 10), n = parseInt(u.parentNode.getAttribute("rel"), 10) - 1;
                                    var y = u.getAttribute("data-range-y1"),
                                        w = u.getAttribute("data-range-y2");
                                    i.globals.comboCharts && (n = parseInt(u.parentNode.getAttribute("data:realIndex"), 10)), s.tooltipLabels.drawSeriesTexts({
                                        ttItems: l.ttItems,
                                        i: n,
                                        j: a,
                                        y1: y ? parseInt(y, 10) : null,
                                        y2: w ? parseInt(w, 10) : null,
                                        shared: !s.showOnIntersect && i.config.tooltip.shared,
                                        e
                                    }), i.config.tooltip.followCursor ? i.globals.isBarHorizontal ? (o = b - p.left + 15, r = m - s.dataPointsDividedHeight + f / 2 - s.tooltipRect.ttHeight / 2) : (o = i.globals.isXNumeric ? x - v / 2 : x - s.dataPointsDividedWidth + v / 2, r = e.clientY - p.top - s.tooltipRect.ttHeight / 2 - 15) : i.globals.isBarHorizontal ? ((o = x) < s.xyRatios.baseLineInvertedY && (o = x - s.tooltipRect.ttWidth), r = m - s.dataPointsDividedHeight + f / 2 - s.tooltipRect.ttHeight / 2) : (o = i.globals.isXNumeric ? x - v / 2 : x - s.dataPointsDividedWidth + v / 2, r = m)
                                }
                                return {
                                    x: o,
                                    y: r,
                                    barHeight: c,
                                    barWidth: h,
                                    i: n,
                                    j: a
                                }
                            }
                        }]), t
                    }(),
                    yt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.ttCtx = e
                        }
                        return h(t, [{
                            key: "drawXaxisTooltip",
                            value: function () {
                                var t = this.w,
                                    e = this.ttCtx,
                                    l = "bottom" === t.config.xaxis.position;
                                e.xaxisOffY = l ? t.globals.gridHeight + 1 : -t.globals.xAxisHeight - t.config.xaxis.axisTicks.height + 3;
                                var i = l ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom" : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top",
                                    a = t.globals.dom.elWrap;
                                e.isXAxisTooltipEnabled && null === t.globals.dom.baseEl.querySelector(".apexcharts-xaxistooltip") && (e.xaxisTooltip = document.createElement("div"), e.xaxisTooltip.setAttribute("class", i + " apexcharts-theme-" + t.config.tooltip.theme), a.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement("div"), e.xaxisTooltipText.classList.add("apexcharts-xaxistooltip-text"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText))
                            }
                        }, {
                            key: "drawYaxisTooltip",
                            value: function () {
                                for (var t = this.w, e = this.ttCtx, l = function (l) {
                                        var i = t.config.yaxis[l].opposite || t.config.yaxis[l].crosshairs.opposite;
                                        e.yaxisOffX = i ? t.globals.gridWidth + 1 : 1;
                                        var a = "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(l, i ? " apexcharts-yaxistooltip-right" : " apexcharts-yaxistooltip-left");
                                        t.globals.yAxisSameScaleIndices.map((function (e, i) {
                                            e.map((function (e, i) {
                                                i === l && (a += t.config.yaxis[i].show ? " " : " apexcharts-yaxistooltip-hidden")
                                            }))
                                        }));
                                        var s = t.globals.dom.elWrap;
                                        null === t.globals.dom.baseEl.querySelector(".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(l)) && (e.yaxisTooltip = document.createElement("div"), e.yaxisTooltip.setAttribute("class", a + " apexcharts-theme-" + t.config.tooltip.theme), s.appendChild(e.yaxisTooltip), 0 === l && (e.yaxisTooltipText = []), e.yaxisTooltipText[l] = document.createElement("div"), e.yaxisTooltipText[l].classList.add("apexcharts-yaxistooltip-text"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[l]))
                                    }, i = 0; i < t.config.yaxis.length; i++) l(i)
                            }
                        }, {
                            key: "setXCrosshairWidth",
                            value: function () {
                                var t = this.w,
                                    e = this.ttCtx,
                                    l = e.getElXCrosshairs();
                                if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width, 10), t.globals.comboCharts) {
                                    var i = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                                    if (null !== i && "barWidth" === t.config.xaxis.crosshairs.width) {
                                        var a = parseFloat(i.getAttribute("barWidth"));
                                        e.xcrosshairsWidth = a
                                    } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
                                        var s = t.globals.labels.length;
                                        e.xcrosshairsWidth = t.globals.gridWidth / s
                                    }
                                } else if ("tickWidth" === t.config.xaxis.crosshairs.width) {
                                    var n = t.globals.labels.length;
                                    e.xcrosshairsWidth = t.globals.gridWidth / n
                                } else if ("barWidth" === t.config.xaxis.crosshairs.width) {
                                    var o = t.globals.dom.baseEl.querySelector(".apexcharts-bar-area");
                                    if (null !== o) {
                                        var r = parseFloat(o.getAttribute("barWidth"));
                                        e.xcrosshairsWidth = r
                                    } else e.xcrosshairsWidth = 1
                                }
                                t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== l && e.xcrosshairsWidth > 0 && l.setAttribute("width", e.xcrosshairsWidth)
                            }
                        }, {
                            key: "handleYCrosshair",
                            value: function () {
                                var t = this.w,
                                    e = this.ttCtx;
                                e.ycrosshairs = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(".apexcharts-ycrosshairs-hidden")
                            }
                        }, {
                            key: "drawYaxisTooltipText",
                            value: function (t, e, l) {
                                var i = this.ttCtx,
                                    a = this.w,
                                    s = a.globals.yLabelFormatters[t];
                                if (i.yaxisTooltips[t]) {
                                    var n = i.getElGrid().getBoundingClientRect(),
                                        o = (e - n.top) * l.yRatio[t],
                                        r = a.globals.maxYArr[t] - a.globals.minYArr[t],
                                        h = a.globals.minYArr[t] + (r - o);
                                    i.tooltipPosition.moveYCrosshairs(e - n.top), i.yaxisTooltipText[t].innerHTML = s(h), i.tooltipPosition.moveYAxisTooltip(t)
                                }
                            }
                        }]), t
                    }(),
                    wt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w;
                            var l = this.w;
                            this.tConfig = l.config.tooltip, this.tooltipUtil = new ft(this), this.tooltipLabels = new vt(this), this.tooltipPosition = new xt(this), this.marker = new mt(this), this.intersect = new bt(this), this.axesTooltip = new yt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !l.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now()
                        }
                        return h(t, [{
                            key: "getElTooltip",
                            value: function (t) {
                                return t || (t = this), t.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip")
                            }
                        }, {
                            key: "getElXCrosshairs",
                            value: function () {
                                return this.w.globals.dom.baseEl.querySelector(".apexcharts-xcrosshairs")
                            }
                        }, {
                            key: "getElGrid",
                            value: function () {
                                return this.w.globals.dom.baseEl.querySelector(".apexcharts-grid")
                            }
                        }, {
                            key: "drawTooltip",
                            value: function (t) {
                                var e = this.w;
                                this.xyRatios = t, this.isXAxisTooltipEnabled = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.yaxisTooltips = e.config.yaxis.map((function (t, l) {
                                    return !!(t.show && t.tooltip.enabled && e.globals.axisCharts)
                                })), this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);
                                var l = document.createElement("div");
                                if (l.classList.add("apexcharts-tooltip"), l.classList.add("apexcharts-theme-".concat(this.tConfig.theme)), e.globals.dom.elWrap.appendChild(l), e.globals.axisCharts) {
                                    this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();
                                    var i = new Z(this.ctx);
                                    this.xAxisTicksPositions = i.getXAxisTicksPositions()
                                }
                                if (!e.globals.comboCharts && !this.tConfig.intersect && "rangeBar" !== e.config.chart.type || this.tConfig.shared || (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {
                                    this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement("div"), this.tooltipTitle.classList.add("apexcharts-tooltip-title"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, l.appendChild(this.tooltipTitle));
                                    var a = e.globals.series.length;
                                    (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (a = this.showOnIntersect ? 1 : e.globals.series.length), this.legendLabels = e.globals.dom.baseEl.querySelectorAll(".apexcharts-legend-text"), this.ttItems = this.createTTElements(a), this.addSVGEvents()
                                }
                            }
                        }, {
                            key: "createTTElements",
                            value: function (t) {
                                for (var e = this, l = this.w, i = [], a = this.getElTooltip(), s = function (s) {
                                        var n = document.createElement("div");
                                        n.classList.add("apexcharts-tooltip-series-group"), n.style.order = l.config.tooltip.inverseOrder ? t - s : s + 1, e.tConfig.shared && e.tConfig.enabledOnSeries && Array.isArray(e.tConfig.enabledOnSeries) && e.tConfig.enabledOnSeries.indexOf(s) < 0 && n.classList.add("apexcharts-tooltip-series-group-hidden");
                                        var o = document.createElement("span");
                                        o.classList.add("apexcharts-tooltip-marker"), o.style.backgroundColor = l.globals.colors[s], n.appendChild(o);
                                        var r = document.createElement("div");
                                        r.classList.add("apexcharts-tooltip-text"), r.style.fontFamily = e.tConfig.style.fontFamily || l.config.chart.fontFamily, r.style.fontSize = e.tConfig.style.fontSize, ["y", "goals", "z"].forEach((function (t) {
                                            var e = document.createElement("div");
                                            e.classList.add("apexcharts-tooltip-".concat(t, "-group"));
                                            var l = document.createElement("span");
                                            l.classList.add("apexcharts-tooltip-text-".concat(t, "-label")), e.appendChild(l);
                                            var i = document.createElement("span");
                                            i.classList.add("apexcharts-tooltip-text-".concat(t, "-value")), e.appendChild(i), r.appendChild(e)
                                        })), n.appendChild(r), a.appendChild(n), i.push(n)
                                    }, n = 0; n < t; n++) s(n);
                                return i
                            }
                        }, {
                            key: "addSVGEvents",
                            value: function () {
                                var t = this.w,
                                    e = t.config.chart.type,
                                    l = this.getElTooltip(),
                                    i = !("bar" !== e && "candlestick" !== e && "boxPlot" !== e && "rangeBar" !== e),
                                    a = "area" === e || "line" === e || "scatter" === e || "bubble" === e || "radar" === e,
                                    s = t.globals.dom.Paper.node,
                                    n = this.getElGrid();
                                n && (this.seriesBound = n.getBoundingClientRect());
                                var o, r = [],
                                    h = [],
                                    c = {
                                        hoverArea: s,
                                        elGrid: n,
                                        tooltipEl: l,
                                        tooltipY: r,
                                        tooltipX: h,
                                        ttItems: this.ttItems
                                    };
                                if (t.globals.axisCharts && (a ? o = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker") : i ? o = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area") : "heatmap" !== e && "treemap" !== e || (o = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap")), o && o.length))
                                    for (var d = 0; d < o.length; d++) r.push(o[d].getAttribute("cy")), h.push(o[d].getAttribute("cx"));
                                if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || i && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([s], c);
                                else if (i && !t.globals.comboCharts || a && this.showOnIntersect) this.addDatapointEventsListeners(c);
                                else if (!t.globals.axisCharts || "heatmap" === e || "treemap" === e) {
                                    var u = t.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                                    this.addPathsEventListeners(u, c)
                                }
                                if (this.showOnIntersect) {
                                    var g = t.globals.dom.baseEl.querySelectorAll(".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker");
                                    g.length > 0 && this.addPathsEventListeners(g, c), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c)
                                }
                            }
                        }, {
                            key: "drawFixedTooltipRect",
                            value: function () {
                                var t = this.w,
                                    e = this.getElTooltip(),
                                    l = e.getBoundingClientRect(),
                                    i = l.width + 10,
                                    a = l.height + 10,
                                    s = this.tConfig.fixed.offsetX,
                                    n = this.tConfig.fixed.offsetY,
                                    o = this.tConfig.fixed.position.toLowerCase();
                                return o.indexOf("right") > -1 && (s = s + t.globals.svgWidth - i + 10), o.indexOf("bottom") > -1 && (n = n + t.globals.svgHeight - a - 10), e.style.left = s + "px", e.style.top = n + "px", {
                                    x: s,
                                    y: n,
                                    ttWidth: i,
                                    ttHeight: a
                                }
                            }
                        }, {
                            key: "addDatapointEventsListeners",
                            value: function (t) {
                                var e = this.w.globals.dom.baseEl.querySelectorAll(".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area");
                                this.addPathsEventListeners(e, t)
                            }
                        }, {
                            key: "addPathsEventListeners",
                            value: function (t, e) {
                                for (var l = this, i = function (i) {
                                        var a = {
                                            paths: t[i],
                                            tooltipEl: e.tooltipEl,
                                            tooltipY: e.tooltipY,
                                            tooltipX: e.tooltipX,
                                            elGrid: e.elGrid,
                                            hoverArea: e.hoverArea,
                                            ttItems: e.ttItems
                                        };
                                        ["mousemove", "mouseup", "touchmove", "mouseout", "touchend"].map((function (e) {
                                            return t[i].addEventListener(e, l.onSeriesHover.bind(l, a), {
                                                capture: !1,
                                                passive: !0
                                            })
                                        }))
                                    }, a = 0; a < t.length; a++) i(a)
                            }
                        }, {
                            key: "onSeriesHover",
                            value: function (t, e) {
                                var l = this,
                                    i = Date.now() - this.lastHoverTime;
                                i >= 100 ? this.seriesHover(t, e) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout((function () {
                                    l.seriesHover(t, e)
                                }), 100 - i))
                            }
                        }, {
                            key: "seriesHover",
                            value: function (t, e) {
                                var l = this;
                                this.lastHoverTime = Date.now();
                                var i = [],
                                    a = this.w;
                                a.config.chart.group && (i = this.ctx.getGroupedCharts()), a.globals.axisCharts && (a.globals.minX === -1 / 0 && a.globals.maxX === 1 / 0 || 0 === a.globals.dataPoints) || (i.length ? i.forEach((function (i) {
                                    var a = l.getElTooltip(i),
                                        s = {
                                            paths: t.paths,
                                            tooltipEl: a,
                                            tooltipY: t.tooltipY,
                                            tooltipX: t.tooltipX,
                                            elGrid: t.elGrid,
                                            hoverArea: t.hoverArea,
                                            ttItems: i.w.globals.tooltip.ttItems
                                        };
                                    i.w.globals.minX === l.w.globals.minX && i.w.globals.maxX === l.w.globals.maxX && i.w.globals.tooltip.seriesHoverByContext({
                                        chartCtx: i,
                                        ttCtx: i.w.globals.tooltip,
                                        opt: s,
                                        e
                                    })
                                })) : this.seriesHoverByContext({
                                    chartCtx: this.ctx,
                                    ttCtx: this.w.globals.tooltip,
                                    opt: t,
                                    e
                                }))
                            }
                        }, {
                            key: "seriesHoverByContext",
                            value: function (t) {
                                var e = t.chartCtx,
                                    l = t.ttCtx,
                                    i = t.opt,
                                    a = t.e,
                                    s = e.w,
                                    n = this.getElTooltip();
                                l.tooltipRect = {
                                    x: 0,
                                    y: 0,
                                    ttWidth: n.getBoundingClientRect().width,
                                    ttHeight: n.getBoundingClientRect().height
                                }, l.e = a, !l.tooltipUtil.hasBars() || s.globals.comboCharts || l.isBarShared || this.tConfig.onDatasetHover.highlightDataSeries && new N(e).toggleSeriesOnHover(a, a.target.parentNode), l.fixedTooltip && l.drawFixedTooltipRect(), s.globals.axisCharts ? l.axisChartsTooltips({
                                    e: a,
                                    opt: i,
                                    tooltipRect: l.tooltipRect
                                }) : l.nonAxisChartsTooltips({
                                    e: a,
                                    opt: i,
                                    tooltipRect: l.tooltipRect
                                })
                            }
                        }, {
                            key: "axisChartsTooltips",
                            value: function (t) {
                                var e, l, i = t.e,
                                    a = t.opt,
                                    s = this.w,
                                    n = a.elGrid.getBoundingClientRect(),
                                    o = "touchmove" === i.type ? i.touches[0].clientX : i.clientX,
                                    r = "touchmove" === i.type ? i.touches[0].clientY : i.clientY;
                                if (this.clientY = r, this.clientX = o, s.globals.capturedSeriesIndex = -1, s.globals.capturedDataPointIndex = -1, r < n.top || r > n.top + n.height) this.handleMouseOut(a);
                                else {
                                    if (Array.isArray(this.tConfig.enabledOnSeries) && !s.config.tooltip.shared) {
                                        var h = parseInt(a.paths.getAttribute("index"), 10);
                                        if (this.tConfig.enabledOnSeries.indexOf(h) < 0) return void this.handleMouseOut(a)
                                    }
                                    var c = this.getElTooltip(),
                                        d = this.getElXCrosshairs(),
                                        u = s.globals.xyCharts || "bar" === s.config.chart.type && !s.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || s.globals.comboCharts && this.tooltipUtil.hasBars();
                                    if ("mousemove" === i.type || "touchmove" === i.type || "mouseup" === i.type) {
                                        null !== d && d.classList.add("apexcharts-active");
                                        var g = this.yaxisTooltips.filter((function (t) {
                                            return !0 === t
                                        }));
                                        if (null !== this.ycrosshairs && g.length && this.ycrosshairs.classList.add("apexcharts-active"), u && !this.showOnIntersect) this.handleStickyTooltip(i, o, r, a);
                                        else if ("heatmap" === s.config.chart.type || "treemap" === s.config.chart.type) {
                                            var p = this.intersect.handleHeatTreeTooltip({
                                                e: i,
                                                opt: a,
                                                x: e,
                                                y: l,
                                                type: s.config.chart.type
                                            });
                                            e = p.x, l = p.y, c.style.left = e + "px", c.style.top = l + "px"
                                        } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({
                                            e: i,
                                            opt: a
                                        }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({
                                            e: i,
                                            opt: a,
                                            x: e,
                                            y: l
                                        });
                                        if (this.yaxisTooltips.length)
                                            for (var f = 0; f < s.config.yaxis.length; f++) this.axesTooltip.drawYaxisTooltipText(f, r, this.xyRatios);
                                        a.tooltipEl.classList.add("apexcharts-active")
                                    } else "mouseout" !== i.type && "touchend" !== i.type || this.handleMouseOut(a)
                                }
                            }
                        }, {
                            key: "nonAxisChartsTooltips",
                            value: function (t) {
                                var e = t.e,
                                    l = t.opt,
                                    i = t.tooltipRect,
                                    a = this.w,
                                    s = l.paths.getAttribute("rel"),
                                    n = this.getElTooltip(),
                                    o = a.globals.dom.elWrap.getBoundingClientRect();
                                if ("mousemove" === e.type || "touchmove" === e.type) {
                                    n.classList.add("apexcharts-active"), this.tooltipLabels.drawSeriesTexts({
                                        ttItems: l.ttItems,
                                        i: parseInt(s, 10) - 1,
                                        shared: !1
                                    });
                                    var r = a.globals.clientX - o.left - i.ttWidth / 2,
                                        h = a.globals.clientY - o.top - i.ttHeight - 10;
                                    if (n.style.left = r + "px", n.style.top = h + "px", a.config.legend.tooltipHoverFormatter) {
                                        var c = s - 1,
                                            d = (0, a.config.legend.tooltipHoverFormatter)(this.legendLabels[c].getAttribute("data:default-text"), {
                                                seriesIndex: c,
                                                dataPointIndex: c,
                                                w: a
                                            });
                                        this.legendLabels[c].innerHTML = d
                                    }
                                } else "mouseout" !== e.type && "touchend" !== e.type || (n.classList.remove("apexcharts-active"), a.config.legend.tooltipHoverFormatter && this.legendLabels.forEach((function (t) {
                                    var e = t.getAttribute("data:default-text");
                                    t.innerHTML = decodeURIComponent(e)
                                })))
                            }
                        }, {
                            key: "handleStickyTooltip",
                            value: function (t, e, l, i) {
                                var a = this.w,
                                    s = this.tooltipUtil.getNearestValues({
                                        context: this,
                                        hoverArea: i.hoverArea,
                                        elGrid: i.elGrid,
                                        clientX: e,
                                        clientY: l
                                    }),
                                    n = s.j,
                                    o = s.capturedSeries,
                                    r = i.elGrid.getBoundingClientRect();
                                s.hoverX < 0 || s.hoverX > r.width ? this.handleMouseOut(i) : null !== o ? this.handleStickyCapturedSeries(t, o, i, n) : (this.tooltipUtil.isXoverlap(n) || a.globals.isBarHorizontal) && this.create(t, this, 0, n, i.ttItems)
                            }
                        }, {
                            key: "handleStickyCapturedSeries",
                            value: function (t, e, l, i) {
                                var a = this.w;
                                this.tConfig.shared || null !== a.globals.series[e][i] ? void 0 !== a.globals.series[e][i] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(i) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t, this, e, i, l.ttItems) : this.create(t, this, e, i, l.ttItems, !1) : this.tooltipUtil.isXoverlap(i) && this.create(t, this, 0, i, l.ttItems) : this.handleMouseOut(l)
                            }
                        }, {
                            key: "deactivateHoverFilter",
                            value: function () {
                                for (var t = this.w, e = new w(this.ctx), l = t.globals.dom.Paper.select(".apexcharts-bar-area"), i = 0; i < l.length; i++) e.pathMouseLeave(l[i])
                            }
                        }, {
                            key: "handleMouseOut",
                            value: function (t) {
                                var e = this.w,
                                    l = this.getElXCrosshairs();
                                if (t.tooltipEl.classList.remove("apexcharts-active"), this.deactivateHoverFilter(), "bubble" !== e.config.chart.type && this.marker.resetPointsSize(), null !== l && l.classList.remove("apexcharts-active"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove("apexcharts-active"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove("apexcharts-active"), this.yaxisTooltips.length) {
                                    null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(".apexcharts-yaxistooltip"));
                                    for (var i = 0; i < this.yaxisTTEls.length; i++) this.yaxisTTEls[i].classList.remove("apexcharts-active")
                                }
                                e.config.legend.tooltipHoverFormatter && this.legendLabels.forEach((function (t) {
                                    var e = t.getAttribute("data:default-text");
                                    t.innerHTML = decodeURIComponent(e)
                                }))
                            }
                        }, {
                            key: "markerClick",
                            value: function (t, e, l) {
                                var i = this.w;
                                "function" == typeof i.config.chart.events.markerClick && i.config.chart.events.markerClick(t, this.ctx, {
                                    seriesIndex: e,
                                    dataPointIndex: l,
                                    w: i
                                }), this.ctx.events.fireEvent("markerClick", [t, this.ctx, {
                                    seriesIndex: e,
                                    dataPointIndex: l,
                                    w: i
                                }])
                            }
                        }, {
                            key: "create",
                            value: function (t, e, l, i, a) {
                                var s = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
                                    n = this.w,
                                    o = e;
                                "mouseup" === t.type && this.markerClick(t, l, i), null === s && (s = this.tConfig.shared);
                                var r = this.tooltipUtil.hasMarkers(),
                                    h = this.tooltipUtil.getElBars();
                                if (n.config.legend.tooltipHoverFormatter) {
                                    var c = n.config.legend.tooltipHoverFormatter,
                                        d = Array.from(this.legendLabels);
                                    d.forEach((function (t) {
                                        var e = t.getAttribute("data:default-text");
                                        t.innerHTML = decodeURIComponent(e)
                                    }));
                                    for (var u = 0; u < d.length; u++) {
                                        var g = d[u],
                                            p = parseInt(g.getAttribute("i"), 10),
                                            f = decodeURIComponent(g.getAttribute("data:default-text")),
                                            v = c(f, {
                                                seriesIndex: s ? p : l,
                                                dataPointIndex: i,
                                                w: n
                                            });
                                        if (s) g.innerHTML = n.globals.collapsedSeriesIndices.indexOf(p) < 0 ? v : f;
                                        else if (g.innerHTML = p === l ? v : f, l === p) break
                                    }
                                }
                                if (s) {
                                    if (o.tooltipLabels.drawSeriesTexts({
                                            ttItems: a,
                                            i: l,
                                            j: i,
                                            shared: !this.showOnIntersect && this.tConfig.shared
                                        }), r && (n.globals.markers.largestSize > 0 ? o.marker.enlargePoints(i) : o.tooltipPosition.moveDynamicPointsOnHover(i)), this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h), this.barSeriesHeight > 0)) {
                                        var x = new w(this.ctx),
                                            m = n.globals.dom.Paper.select(".apexcharts-bar-area[j='".concat(i, "']"));
                                        this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(i);
                                        for (var b = 0; b < m.length; b++) x.pathMouseEnter(m[b])
                                    }
                                } else o.tooltipLabels.drawSeriesTexts({
                                    shared: !1,
                                    ttItems: a,
                                    i: l,
                                    j: i
                                }), this.tooltipUtil.hasBars() && o.tooltipPosition.moveStickyTooltipOverBars(i), r && o.tooltipPosition.moveMarkers(l, i)
                            }
                        }]), t
                    }(),
                    At = function (t) {
                        d(l, R);
                        var e = f(l);

                        function l() {
                            return o(this, l), e.apply(this, arguments)
                        }
                        return h(l, [{
                            key: "draw",
                            value: function (t, e) {
                                var l = this,
                                    i = this.w;
                                this.graphics = new w(this.ctx), this.bar = new R(this.ctx, this.xyRatios);
                                var a = new k(this.ctx, i);
                                t = a.getLogSeries(t), this.yRatio = a.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t), "100%" === i.config.chart.stackType && (t = i.globals.seriesPercent.slice()), this.series = t, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];
                                for (var n = 0; n < t.length; n++) t[n].length > 0 && (this.totalItems += t[n].length);
                                for (var o = this.graphics.group({
                                        class: "apexcharts-bar-series apexcharts-plot-series"
                                    }), r = 0, h = 0, c = function (a, n) {
                                        var c = void 0,
                                            d = void 0,
                                            u = void 0,
                                            g = void 0,
                                            p = [],
                                            f = [],
                                            v = i.globals.comboCharts ? e[a] : a;
                                        l.yRatio.length > 1 && (l.yaxisIndex = v), l.isReversed = i.config.yaxis[l.yaxisIndex] && i.config.yaxis[l.yaxisIndex].reversed;
                                        var x = l.graphics.group({
                                            class: "apexcharts-series",
                                            seriesName: m.escapeString(i.globals.seriesNames[v]),
                                            rel: a + 1,
                                            "data:realIndex": v
                                        });
                                        l.ctx.series.addCollapsedClassToSeries(x, v);
                                        var b = l.graphics.group({
                                                class: "apexcharts-datalabels",
                                                "data:realIndex": v
                                            }),
                                            y = 0,
                                            w = 0,
                                            A = l.initialPositions(r, h, c, d, u, g);
                                        h = A.y, y = A.barHeight, d = A.yDivision, g = A.zeroW, r = A.x, w = A.barWidth, c = A.xDivision, u = A.zeroH, l.yArrj = [], l.yArrjF = [], l.yArrjVal = [], l.xArrj = [], l.xArrjF = [], l.xArrjVal = [], 1 === l.prevY.length && l.prevY[0].every((function (t) {
                                            return isNaN(t)
                                        })) && (l.prevY[0] = l.prevY[0].map((function (t) {
                                            return u
                                        })), l.prevYF[0] = l.prevYF[0].map((function (t) {
                                            return 0
                                        })));
                                        for (var S = 0; S < i.globals.dataPoints; S++) {
                                            var k = l.barHelpers.getStrokeWidth(a, S, v),
                                                L = {
                                                    indexes: {
                                                        i: a,
                                                        j: S,
                                                        realIndex: v,
                                                        bc: n
                                                    },
                                                    strokeWidth: k,
                                                    x: r,
                                                    y: h,
                                                    elSeries: x
                                                },
                                                C = null;
                                            l.isHorizontal ? (C = l.drawStackedBarPaths(s(s({}, L), {}, {
                                                zeroW: g,
                                                barHeight: y,
                                                yDivision: d
                                            })), w = l.series[a][S] / l.invertedYRatio) : (C = l.drawStackedColumnPaths(s(s({}, L), {}, {
                                                xDivision: c,
                                                barWidth: w,
                                                zeroH: u
                                            })), y = l.series[a][S] / l.yRatio[l.yaxisIndex]), h = C.y, r = C.x, p.push(r), f.push(h);
                                            var M = l.barHelpers.getPathFillColor(t, a, S, v);
                                            x = l.renderSeries({
                                                realIndex: v,
                                                pathFill: M,
                                                j: S,
                                                i: a,
                                                pathFrom: C.pathFrom,
                                                pathTo: C.pathTo,
                                                strokeWidth: k,
                                                elSeries: x,
                                                x: r,
                                                y: h,
                                                series: t,
                                                barHeight: y,
                                                barWidth: w,
                                                elDataLabelsWrap: b,
                                                type: "bar",
                                                visibleSeries: 0
                                            })
                                        }
                                        i.globals.seriesXvalues[v] = p, i.globals.seriesYvalues[v] = f, l.prevY.push(l.yArrj), l.prevYF.push(l.yArrjF), l.prevYVal.push(l.yArrjVal), l.prevX.push(l.xArrj), l.prevXF.push(l.xArrjF), l.prevXVal.push(l.xArrjVal), o.add(x)
                                    }, d = 0, u = 0; d < t.length; d++, u++) c(d, u);
                                return o
                            }
                        }, {
                            key: "initialPositions",
                            value: function (t, e, l, i, a, s) {
                                var n, o, r = this.w;
                                return this.isHorizontal ? (n = (n = i = r.globals.gridHeight / r.globals.dataPoints) * parseInt(r.config.plotOptions.bar.barHeight, 10) / 100, s = this.baseLineInvertedY + r.globals.padHorizontal + (this.isReversed ? r.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (i - n) / 2) : (o = l = r.globals.gridWidth / r.globals.dataPoints, o = r.globals.isXNumeric && r.globals.dataPoints > 1 ? (l = r.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : o * parseInt(r.config.plotOptions.bar.columnWidth, 10) / 100, a = this.baseLineY[this.yaxisIndex] + (this.isReversed ? r.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = r.globals.padHorizontal + (l - o) / 2), {
                                    x: t,
                                    y: e,
                                    yDivision: i,
                                    xDivision: l,
                                    barHeight: n,
                                    barWidth: o,
                                    zeroH: a,
                                    zeroW: s
                                }
                            }
                        }, {
                            key: "drawStackedBarPaths",
                            value: function (t) {
                                for (var e, l = t.indexes, i = t.barHeight, a = t.strokeWidth, s = t.zeroW, n = t.x, o = t.y, r = t.yDivision, h = t.elSeries, c = this.w, d = o, u = l.i, g = l.j, p = 0, f = 0; f < this.prevXF.length; f++) p += this.prevXF[f][g];
                                if (u > 0) {
                                    var v = s;
                                    this.prevXVal[u - 1][g] < 0 ? v = this.series[u][g] >= 0 ? this.prevX[u - 1][g] + p - 2 * (this.isReversed ? p : 0) : this.prevX[u - 1][g] : this.prevXVal[u - 1][g] >= 0 && (v = this.series[u][g] >= 0 ? this.prevX[u - 1][g] : this.prevX[u - 1][g] - p + 2 * (this.isReversed ? p : 0)), e = v
                                } else e = s;
                                n = null === this.series[u][g] ? e : e + this.series[u][g] / this.invertedYRatio - 2 * (this.isReversed ? this.series[u][g] / this.invertedYRatio : 0);
                                var x = this.barHelpers.getBarpaths({
                                    barYPosition: d,
                                    barHeight: i,
                                    x1: e,
                                    x2: n,
                                    strokeWidth: a,
                                    series: this.series,
                                    realIndex: l.realIndex,
                                    i: u,
                                    j: g,
                                    w: c
                                });
                                return this.barHelpers.barBackground({
                                    j: g,
                                    i: u,
                                    y1: d,
                                    y2: i,
                                    elSeries: h
                                }), o += r, {
                                    pathTo: x.pathTo,
                                    pathFrom: x.pathFrom,
                                    x: n,
                                    y: o
                                }
                            }
                        }, {
                            key: "drawStackedColumnPaths",
                            value: function (t) {
                                var e = t.indexes,
                                    l = t.x,
                                    i = t.y,
                                    a = t.xDivision,
                                    s = t.barWidth,
                                    n = t.zeroH;
                                t.strokeWidth;
                                var o = t.elSeries,
                                    r = this.w,
                                    h = e.i,
                                    c = e.j,
                                    d = e.bc;
                                if (r.globals.isXNumeric) {
                                    var u = r.globals.seriesX[h][c];
                                    u || (u = 0), l = (u - r.globals.minX) / this.xRatio - s / 2
                                }
                                for (var g, p = l, f = 0, v = 0; v < this.prevYF.length; v++) f += isNaN(this.prevYF[v][c]) ? 0 : this.prevYF[v][c];
                                if (h > 0 && !r.globals.isXNumeric || h > 0 && r.globals.isXNumeric && r.globals.seriesX[h - 1][c] === r.globals.seriesX[h][c]) {
                                    var x, m, b = Math.min(this.yRatio.length + 1, h + 1);
                                    if (void 0 !== this.prevY[h - 1])
                                        for (var y = 1; y < b; y++)
                                            if (!isNaN(this.prevY[h - y][c])) {
                                                m = this.prevY[h - y][c];
                                                break
                                            } for (var w = 1; w < b; w++) {
                                        if (this.prevYVal[h - w][c] < 0) {
                                            x = this.series[h][c] >= 0 ? m - f + 2 * (this.isReversed ? f : 0) : m;
                                            break
                                        }
                                        if (this.prevYVal[h - w][c] >= 0) {
                                            x = this.series[h][c] >= 0 ? m : m + f - 2 * (this.isReversed ? f : 0);
                                            break
                                        }
                                    }
                                    void 0 === x && (x = r.globals.gridHeight), g = this.prevYF[0].every((function (t) {
                                        return 0 === t
                                    })) && this.prevYF.slice(1, h).every((function (t) {
                                        return t.every((function (t) {
                                            return isNaN(t)
                                        }))
                                    })) ? r.globals.gridHeight - n : x
                                } else g = r.globals.gridHeight - n;
                                i = g - this.series[h][c] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[h][c] / this.yRatio[this.yaxisIndex] : 0);
                                var A = this.barHelpers.getColumnPaths({
                                    barXPosition: p,
                                    barWidth: s,
                                    y1: g,
                                    y2: i,
                                    yRatio: this.yRatio[this.yaxisIndex],
                                    strokeWidth: this.strokeWidth,
                                    series: this.series,
                                    realIndex: e.realIndex,
                                    i: h,
                                    j: c,
                                    w: r
                                });
                                return this.barHelpers.barBackground({
                                    bc: d,
                                    j: c,
                                    i: h,
                                    x1: p,
                                    x2: s,
                                    elSeries: o
                                }), l += a, {
                                    pathTo: A.pathTo,
                                    pathFrom: A.pathFrom,
                                    x: r.globals.isXNumeric ? l - a : l,
                                    y: i
                                }
                            }
                        }]), l
                    }(),
                    St = function (t) {
                        d(l, R);
                        var e = f(l);

                        function l() {
                            return o(this, l), e.apply(this, arguments)
                        }
                        return h(l, [{
                            key: "draw",
                            value: function (t, e) {
                                var l = this,
                                    i = this.w,
                                    a = new w(this.ctx),
                                    n = new P(this.ctx);
                                this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = i.config.plotOptions.bar.horizontal;
                                var o = new k(this.ctx, i);
                                t = o.getLogSeries(t), this.series = t, this.yRatio = o.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);
                                for (var r = a.group({
                                        class: "apexcharts-".concat(i.config.chart.type, "-series apexcharts-plot-series")
                                    }), h = function (o) {
                                        l.isBoxPlot = "boxPlot" === i.config.chart.type || "boxPlot" === i.config.series[o].type;
                                        var h, c, d, u, g, p, f = void 0,
                                            v = void 0,
                                            x = [],
                                            b = [],
                                            y = i.globals.comboCharts ? e[o] : o,
                                            w = a.group({
                                                class: "apexcharts-series",
                                                seriesName: m.escapeString(i.globals.seriesNames[y]),
                                                rel: o + 1,
                                                "data:realIndex": y
                                            });
                                        l.ctx.series.addCollapsedClassToSeries(w, y), t[o].length > 0 && (l.visibleI = l.visibleI + 1), l.yRatio.length > 1 && (l.yaxisIndex = y);
                                        var A = l.barHelpers.initialPositions();
                                        v = A.y, g = A.barHeight, c = A.yDivision, u = A.zeroW, f = A.x, p = A.barWidth, h = A.xDivision, d = A.zeroH, b.push(f + p / 2);
                                        for (var S = a.group({
                                                class: "apexcharts-datalabels",
                                                "data:realIndex": y
                                            }), k = function (e) {
                                                var a = l.barHelpers.getStrokeWidth(o, e, y),
                                                    r = null,
                                                    m = {
                                                        indexes: {
                                                            i: o,
                                                            j: e,
                                                            realIndex: y
                                                        },
                                                        x: f,
                                                        y: v,
                                                        strokeWidth: a,
                                                        elSeries: w
                                                    };
                                                r = l.isHorizontal ? l.drawHorizontalBoxPaths(s(s({}, m), {}, {
                                                    yDivision: c,
                                                    barHeight: g,
                                                    zeroW: u
                                                })) : l.drawVerticalBoxPaths(s(s({}, m), {}, {
                                                    xDivision: h,
                                                    barWidth: p,
                                                    zeroH: d
                                                })), v = r.y, f = r.x, e > 0 && b.push(f + p / 2), x.push(v), r.pathTo.forEach((function (s, h) {
                                                    var c = !l.isBoxPlot && l.candlestickOptions.wick.useFillColor ? r.color[h] : i.globals.stroke.colors[o],
                                                        d = n.fillPath({
                                                            seriesNumber: y,
                                                            dataPointIndex: e,
                                                            color: r.color[h],
                                                            value: t[o][e]
                                                        });
                                                    l.renderSeries({
                                                        realIndex: y,
                                                        pathFill: d,
                                                        lineFill: c,
                                                        j: e,
                                                        i: o,
                                                        pathFrom: r.pathFrom,
                                                        pathTo: s,
                                                        strokeWidth: a,
                                                        elSeries: w,
                                                        x: f,
                                                        y: v,
                                                        series: t,
                                                        barHeight: g,
                                                        barWidth: p,
                                                        elDataLabelsWrap: S,
                                                        visibleSeries: l.visibleI,
                                                        type: i.config.chart.type
                                                    })
                                                }))
                                            }, L = 0; L < i.globals.dataPoints; L++) k(L);
                                        i.globals.seriesXvalues[y] = b, i.globals.seriesYvalues[y] = x, r.add(w)
                                    }, c = 0; c < t.length; c++) h(c);
                                return r
                            }
                        }, {
                            key: "drawVerticalBoxPaths",
                            value: function (t) {
                                var e = t.indexes,
                                    l = t.x;
                                t.y;
                                var i = t.xDivision,
                                    a = t.barWidth,
                                    s = t.zeroH,
                                    n = t.strokeWidth,
                                    o = this.w,
                                    r = new w(this.ctx),
                                    h = e.i,
                                    c = e.j,
                                    d = !0,
                                    u = o.config.plotOptions.candlestick.colors.upward,
                                    g = o.config.plotOptions.candlestick.colors.downward,
                                    p = "";
                                this.isBoxPlot && (p = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
                                var f = this.yRatio[this.yaxisIndex],
                                    v = e.realIndex,
                                    x = this.getOHLCValue(v, c),
                                    m = s,
                                    b = s;
                                x.o > x.c && (d = !1);
                                var y = Math.min(x.o, x.c),
                                    A = Math.max(x.o, x.c),
                                    S = x.m;
                                o.globals.isXNumeric && (l = (o.globals.seriesX[v][c] - o.globals.minX) / this.xRatio - a / 2);
                                var k = l + a * this.visibleI;
                                void 0 === this.series[h][c] || null === this.series[h][c] ? (y = s, A = s) : (y = s - y / f, A = s - A / f, m = s - x.h / f, b = s - x.l / f, S = s - x.m / f);
                                var L = r.move(k, s),
                                    C = r.move(k + a / 2, y);
                                return o.globals.previousPaths.length > 0 && (C = this.getPreviousPath(v, c, !0)), L = this.isBoxPlot ? [r.move(k, y) + r.line(k + a / 2, y) + r.line(k + a / 2, m) + r.line(k + a / 4, m) + r.line(k + a - a / 4, m) + r.line(k + a / 2, m) + r.line(k + a / 2, y) + r.line(k + a, y) + r.line(k + a, S) + r.line(k, S) + r.line(k, y + n / 2), r.move(k, S) + r.line(k + a, S) + r.line(k + a, A) + r.line(k + a / 2, A) + r.line(k + a / 2, b) + r.line(k + a - a / 4, b) + r.line(k + a / 4, b) + r.line(k + a / 2, b) + r.line(k + a / 2, A) + r.line(k, A) + r.line(k, S) + "z"] : [r.move(k, A) + r.line(k + a / 2, A) + r.line(k + a / 2, m) + r.line(k + a / 2, A) + r.line(k + a, A) + r.line(k + a, y) + r.line(k + a / 2, y) + r.line(k + a / 2, b) + r.line(k + a / 2, y) + r.line(k, y) + r.line(k, A - n / 2)], C += r.move(k, y), o.globals.isXNumeric || (l += i), {
                                    pathTo: L,
                                    pathFrom: C,
                                    x: l,
                                    y: A,
                                    barXPosition: k,
                                    color: this.isBoxPlot ? p : d ? [u] : [g]
                                }
                            }
                        }, {
                            key: "drawHorizontalBoxPaths",
                            value: function (t) {
                                var e = t.indexes;
                                t.x;
                                var l = t.y,
                                    i = t.yDivision,
                                    a = t.barHeight,
                                    s = t.zeroW,
                                    n = t.strokeWidth,
                                    o = this.w,
                                    r = new w(this.ctx),
                                    h = e.i,
                                    c = e.j,
                                    d = this.boxOptions.colors.lower;
                                this.isBoxPlot && (d = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);
                                var u = this.invertedYRatio,
                                    g = e.realIndex,
                                    p = this.getOHLCValue(g, c),
                                    f = s,
                                    v = s,
                                    x = Math.min(p.o, p.c),
                                    m = Math.max(p.o, p.c),
                                    b = p.m;
                                o.globals.isXNumeric && (l = (o.globals.seriesX[g][c] - o.globals.minX) / this.invertedXRatio - a / 2);
                                var y = l + a * this.visibleI;
                                void 0 === this.series[h][c] || null === this.series[h][c] ? (x = s, m = s) : (x = s + x / u, m = s + m / u, f = s + p.h / u, v = s + p.l / u, b = s + p.m / u);
                                var A = r.move(s, y),
                                    S = r.move(x, y + a / 2);
                                return o.globals.previousPaths.length > 0 && (S = this.getPreviousPath(g, c, !0)), A = [r.move(x, y) + r.line(x, y + a / 2) + r.line(f, y + a / 2) + r.line(f, y + a / 2 - a / 4) + r.line(f, y + a / 2 + a / 4) + r.line(f, y + a / 2) + r.line(x, y + a / 2) + r.line(x, y + a) + r.line(b, y + a) + r.line(b, y) + r.line(x + n / 2, y), r.move(b, y) + r.line(b, y + a) + r.line(m, y + a) + r.line(m, y + a / 2) + r.line(v, y + a / 2) + r.line(v, y + a - a / 4) + r.line(v, y + a / 4) + r.line(v, y + a / 2) + r.line(m, y + a / 2) + r.line(m, y) + r.line(b, y) + "z"], S += r.move(x, y), o.globals.isXNumeric || (l += i), {
                                    pathTo: A,
                                    pathFrom: S,
                                    x: m,
                                    y: l,
                                    barYPosition: y,
                                    color: d
                                }
                            }
                        }, {
                            key: "getOHLCValue",
                            value: function (t, e) {
                                var l = this.w;
                                return {
                                    o: this.isBoxPlot ? l.globals.seriesCandleH[t][e] : l.globals.seriesCandleO[t][e],
                                    h: this.isBoxPlot ? l.globals.seriesCandleO[t][e] : l.globals.seriesCandleH[t][e],
                                    m: l.globals.seriesCandleM[t][e],
                                    l: this.isBoxPlot ? l.globals.seriesCandleC[t][e] : l.globals.seriesCandleL[t][e],
                                    c: this.isBoxPlot ? l.globals.seriesCandleL[t][e] : l.globals.seriesCandleC[t][e]
                                }
                            }
                        }]), l
                    }(),
                    kt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "checkColorRange",
                            value: function () {
                                var t = this.w,
                                    e = !1,
                                    l = t.config.plotOptions[t.config.chart.type];
                                return l.colorScale.ranges.length > 0 && l.colorScale.ranges.map((function (t, l) {
                                    t.from <= 0 && (e = !0)
                                })), e
                            }
                        }, {
                            key: "getShadeColor",
                            value: function (t, e, l, i) {
                                var a = this.w,
                                    s = 1,
                                    n = a.config.plotOptions[t].shadeIntensity,
                                    o = this.determineColor(t, e, l);
                                a.globals.hasNegs || i ? s = a.config.plotOptions[t].reverseNegativeShade ? o.percent < 0 ? o.percent / 100 * (1.25 * n) : (1 - o.percent / 100) * (1.25 * n) : o.percent <= 0 ? 1 - (1 + o.percent / 100) * n : (1 - o.percent / 100) * n : (s = 1 - o.percent / 100, "treemap" === t && (s = (1 - o.percent / 100) * (1.25 * n)));
                                var r = o.color,
                                    h = new m;
                                return a.config.plotOptions[t].enableShades && (r = "dark" === this.w.config.theme.mode ? m.hexToRgba(h.shadeColor(-1 * s, o.color), a.config.fill.opacity) : m.hexToRgba(h.shadeColor(s, o.color), a.config.fill.opacity)), {
                                    color: r,
                                    colorProps: o
                                }
                            }
                        }, {
                            key: "determineColor",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = i.globals.series[e][l],
                                    s = i.config.plotOptions[t],
                                    n = s.colorScale.inverse ? l : e;
                                s.distributed && "treemap" === i.config.chart.type && (n = l);
                                var o = i.globals.colors[n],
                                    r = null,
                                    h = Math.min.apply(Math, v(i.globals.series[e])),
                                    c = Math.max.apply(Math, v(i.globals.series[e]));
                                s.distributed || "heatmap" !== t || (h = i.globals.minY, c = i.globals.maxY), void 0 !== s.colorScale.min && (h = s.colorScale.min < i.globals.minY ? s.colorScale.min : i.globals.minY, c = s.colorScale.max > i.globals.maxY ? s.colorScale.max : i.globals.maxY);
                                var d = Math.abs(c) + Math.abs(h),
                                    u = 100 * a / (0 === d ? d - 1e-6 : d);
                                return s.colorScale.ranges.length > 0 && s.colorScale.ranges.map((function (t, e) {
                                    if (a >= t.from && a <= t.to) {
                                        o = t.color, r = t.foreColor ? t.foreColor : null, h = t.from, c = t.to;
                                        var l = Math.abs(c) + Math.abs(h);
                                        u = 100 * a / (0 === l ? l - 1e-6 : l)
                                    }
                                })), {
                                    color: o,
                                    foreColor: r,
                                    percent: u
                                }
                            }
                        }, {
                            key: "calculateDataLabels",
                            value: function (t) {
                                var e = t.text,
                                    l = t.x,
                                    i = t.y,
                                    a = t.i,
                                    s = t.j,
                                    n = t.colorProps,
                                    o = t.fontSize,
                                    r = this.w.config.dataLabels,
                                    h = new w(this.ctx),
                                    c = new O(this.ctx),
                                    d = null;
                                if (r.enabled) {
                                    d = h.group({
                                        class: "apexcharts-data-labels"
                                    });
                                    var u = r.offsetX,
                                        g = r.offsetY,
                                        p = l + u,
                                        f = i + parseFloat(r.style.fontSize) / 3 + g;
                                    c.plotDataLabelsText({
                                        x: p,
                                        y: f,
                                        text: e,
                                        i: a,
                                        j: s,
                                        color: n.foreColor,
                                        parent: d,
                                        fontSize: o,
                                        dataLabelsConfig: r
                                    })
                                }
                                return d
                            }
                        }, {
                            key: "addListeners",
                            value: function (t) {
                                var e = new w(this.ctx);
                                t.node.addEventListener("mouseenter", e.pathMouseEnter.bind(this, t)), t.node.addEventListener("mouseleave", e.pathMouseLeave.bind(this, t)), t.node.addEventListener("mousedown", e.pathMouseDown.bind(this, t))
                            }
                        }]), t
                    }(),
                    Lt = function () {
                        function t(e, l) {
                            o(this, t), this.ctx = e, this.w = e.w, this.xRatio = l.xRatio, this.yRatio = l.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new kt(e), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0
                        }
                        return h(t, [{
                            key: "draw",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx),
                                    i = l.group({
                                        class: "apexcharts-heatmap"
                                    });
                                i.attr("clip-path", "url(#gridRectMask".concat(e.globals.cuid, ")"));
                                var a = e.globals.gridWidth / e.globals.dataPoints,
                                    s = e.globals.gridHeight / e.globals.series.length,
                                    n = 0,
                                    o = !1;
                                this.negRange = this.helpers.checkColorRange();
                                var r = t.slice();
                                e.config.yaxis[0].reversed && (o = !0, r.reverse());
                                for (var h = o ? 0 : r.length - 1; o ? h < r.length : h >= 0; o ? h++ : h--) {
                                    var c = l.group({
                                        class: "apexcharts-series apexcharts-heatmap-series",
                                        seriesName: m.escapeString(e.globals.seriesNames[h]),
                                        rel: h + 1,
                                        "data:realIndex": h
                                    });
                                    if (this.ctx.series.addCollapsedClassToSeries(c, h), e.config.chart.dropShadow.enabled) {
                                        var d = e.config.chart.dropShadow;
                                        new y(this.ctx).dropShadow(c, d, h)
                                    }
                                    for (var u = 0, g = e.config.plotOptions.heatmap.shadeIntensity, p = 0; p < r[h].length; p++) {
                                        var f = this.helpers.getShadeColor(e.config.chart.type, h, p, this.negRange),
                                            v = f.color,
                                            x = f.colorProps;
                                        "image" === e.config.fill.type && (v = new P(this.ctx).fillPath({
                                            seriesNumber: h,
                                            dataPointIndex: p,
                                            opacity: e.globals.hasNegs ? x.percent < 0 ? 1 - (1 + x.percent / 100) : g + x.percent / 100 : x.percent / 100,
                                            patternID: m.randomId(),
                                            width: e.config.fill.image.width ? e.config.fill.image.width : a,
                                            height: e.config.fill.image.height ? e.config.fill.image.height : s
                                        }));
                                        var b = this.rectRadius,
                                            A = l.drawRect(u, n, a, s, b);
                                        if (A.attr({
                                                cx: u,
                                                cy: n
                                            }), A.node.classList.add("apexcharts-heatmap-rect"), c.add(A), A.attr({
                                                fill: v,
                                                i: h,
                                                index: h,
                                                j: p,
                                                val: r[h][p],
                                                "stroke-width": this.strokeWidth,
                                                stroke: e.config.plotOptions.heatmap.useFillColorAsStroke ? v : e.globals.stroke.colors[0],
                                                color: v
                                            }), this.helpers.addListeners(A), e.config.chart.animations.enabled && !e.globals.dataChanged) {
                                            var S = 1;
                                            e.globals.resized || (S = e.config.chart.animations.speed), this.animateHeatMap(A, u, n, a, s, S)
                                        }
                                        if (e.globals.dataChanged) {
                                            var k = 1;
                                            if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {
                                                k = this.dynamicAnim.speed;
                                                var L = e.globals.previousPaths[h] && e.globals.previousPaths[h][p] && e.globals.previousPaths[h][p].color;
                                                L || (L = "rgba(255, 255, 255, 0)"), this.animateHeatColor(A, m.isColorHex(L) ? L : m.rgb2hex(L), m.isColorHex(v) ? v : m.rgb2hex(v), k)
                                            }
                                        }
                                        var C = (0, e.config.dataLabels.formatter)(e.globals.series[h][p], {
                                                value: e.globals.series[h][p],
                                                seriesIndex: h,
                                                dataPointIndex: p,
                                                w: e
                                            }),
                                            M = this.helpers.calculateDataLabels({
                                                text: C,
                                                x: u + a / 2,
                                                y: n + s / 2,
                                                i: h,
                                                j: p,
                                                colorProps: x,
                                                series: r
                                            });
                                        null !== M && c.add(M), u += a
                                    }
                                    n += s, i.add(c)
                                }
                                var z = e.globals.yAxisScale[0].result.slice();
                                e.config.yaxis[0].reversed ? z.unshift("") : z.push(""), e.globals.yAxisScale[0].result = z;
                                var E = e.globals.gridHeight / e.globals.series.length;
                                return e.config.yaxis[0].labels.offsetY = -E / 2, i
                            }
                        }, {
                            key: "animateHeatMap",
                            value: function (t, e, l, i, a, s) {
                                var n = new b(this.ctx);
                                n.animateRect(t, {
                                    x: e + i / 2,
                                    y: l + a / 2,
                                    width: 0,
                                    height: 0
                                }, {
                                    x: e,
                                    y: l,
                                    width: i,
                                    height: a
                                }, s, (function () {
                                    n.animationCompleted(t)
                                }))
                            }
                        }, {
                            key: "animateHeatColor",
                            value: function (t, e, l, i) {
                                t.attr({
                                    fill: e
                                }).animate(i).attr({
                                    fill: l
                                })
                            }
                        }]), t
                    }(),
                    Ct = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "drawYAxisTexts",
                            value: function (t, e, l, i) {
                                var a = this.w,
                                    s = a.config.yaxis[0],
                                    n = a.globals.yLabelFormatters[0];
                                return new w(this.ctx).drawText({
                                    x: t + s.labels.offsetX,
                                    y: e + s.labels.offsetY,
                                    text: n(i, l),
                                    textAnchor: "middle",
                                    fontSize: s.labels.style.fontSize,
                                    fontFamily: s.labels.style.fontFamily,
                                    foreColor: Array.isArray(s.labels.style.colors) ? s.labels.style.colors[l] : s.labels.style.colors
                                })
                            }
                        }]), t
                    }(),
                    Mt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w;
                            var l = this.w;
                            this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== l.globals.stroke.colors ? l.globals.stroke.colors : l.globals.colors, this.defaultSize = Math.min(l.globals.gridWidth, l.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = l.globals.gridWidth / 2, "radialBar" === l.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(l.config.plotOptions.pie.endAngle - l.config.plotOptions.pie.startAngle), this.initialAngle = l.config.plotOptions.pie.startAngle % this.fullAngle, l.globals.radialSize = this.defaultSize / 2.05 - l.config.stroke.width - (l.config.chart.sparkline.enabled ? 0 : l.config.chart.dropShadow.blur), this.donutSize = l.globals.radialSize * parseInt(l.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = []
                        }
                        return h(t, [{
                            key: "draw",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = new w(this.ctx);
                                if (this.ret = i.group({
                                        class: "apexcharts-pie"
                                    }), l.globals.noData) return this.ret;
                                for (var a = 0, s = 0; s < t.length; s++) a += m.negToZero(t[s]);
                                var n = [],
                                    o = i.group();
                                0 === a && (a = 1e-5), t.forEach((function (t) {
                                    e.maxY = Math.max(e.maxY, t)
                                })), l.config.yaxis[0].max && (this.maxY = l.config.yaxis[0].max), "back" === l.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret);
                                for (var r = 0; r < t.length; r++) {
                                    var h = this.fullAngle * m.negToZero(t[r]) / a;
                                    n.push(h), "polarArea" === this.chartType ? (n[r] = this.fullAngle / t.length, this.sliceSizes.push(l.globals.radialSize * t[r] / this.maxY)) : this.sliceSizes.push(l.globals.radialSize)
                                }
                                if (l.globals.dataChanged) {
                                    for (var c, d = 0, u = 0; u < l.globals.previousPaths.length; u++) d += m.negToZero(l.globals.previousPaths[u]);
                                    for (var g = 0; g < l.globals.previousPaths.length; g++) c = this.fullAngle * m.negToZero(l.globals.previousPaths[g]) / d, this.prevSectorAngleArr.push(c)
                                }
                                this.donutSize < 0 && (this.donutSize = 0);
                                var p = l.config.plotOptions.pie.customScale,
                                    f = l.globals.gridWidth / 2,
                                    v = l.globals.gridHeight / 2,
                                    x = f - l.globals.gridWidth / 2 * p,
                                    b = v - l.globals.gridHeight / 2 * p;
                                if ("donut" === this.chartType) {
                                    var y = i.drawCircle(this.donutSize);
                                    y.attr({
                                        cx: this.centerX,
                                        cy: this.centerY,
                                        fill: l.config.plotOptions.pie.donut.background ? l.config.plotOptions.pie.donut.background : "transparent"
                                    }), o.add(y)
                                }
                                var A = this.drawArcs(n, t);
                                if (this.sliceLabels.forEach((function (t) {
                                        A.add(t)
                                    })), o.attr({
                                        transform: "translate(".concat(x, ", ").concat(b, ") scale(").concat(p, ")")
                                    }), o.add(A), this.ret.add(o), this.donutDataLabels.show) {
                                    var S = this.renderInnerDataLabels(this.donutDataLabels, {
                                        hollowSize: this.donutSize,
                                        centerX: this.centerX,
                                        centerY: this.centerY,
                                        opacity: this.donutDataLabels.show,
                                        translateX: x,
                                        translateY: b
                                    });
                                    this.ret.add(S)
                                }
                                return "front" === l.config.grid.position && "polarArea" === this.chartType && this.drawPolarElements(this.ret), this.ret
                            }
                        }, {
                            key: "drawArcs",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new y(this.ctx),
                                    a = new w(this.ctx),
                                    s = new P(this.ctx),
                                    n = a.group({
                                        class: "apexcharts-slices"
                                    }),
                                    o = this.initialAngle,
                                    r = this.initialAngle,
                                    h = this.initialAngle,
                                    c = this.initialAngle;
                                this.strokeWidth = l.config.stroke.show ? l.config.stroke.width : 0;
                                for (var d = 0; d < t.length; d++) {
                                    var u = a.group({
                                        class: "apexcharts-series apexcharts-pie-series",
                                        seriesName: m.escapeString(l.globals.seriesNames[d]),
                                        rel: d + 1,
                                        "data:realIndex": d
                                    });
                                    n.add(u), r = c, h = (o = h) + t[d], c = r + this.prevSectorAngleArr[d];
                                    var g = h < o ? this.fullAngle + h - o : h - o,
                                        p = s.fillPath({
                                            seriesNumber: d,
                                            size: this.sliceSizes[d],
                                            value: e[d]
                                        }),
                                        f = this.getChangedPath(r, c),
                                        v = a.drawPath({
                                            d: f,
                                            stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d] : this.lineColorArr,
                                            strokeWidth: 0,
                                            fill: p,
                                            fillOpacity: l.config.fill.opacity,
                                            classes: "apexcharts-pie-area apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(d)
                                        });
                                    if (v.attr({
                                            index: 0,
                                            j: d
                                        }), i.setSelectionFilter(v, 0, d), l.config.chart.dropShadow.enabled) {
                                        var x = l.config.chart.dropShadow;
                                        i.dropShadow(v, x, d)
                                    }
                                    this.addListeners(v, this.donutDataLabels), w.setAttrs(v.node, {
                                        "data:angle": g,
                                        "data:startAngle": o,
                                        "data:strokeWidth": this.strokeWidth,
                                        "data:value": e[d]
                                    });
                                    var b = {
                                        x: 0,
                                        y: 0
                                    };
                                    "pie" === this.chartType || "polarArea" === this.chartType ? b = m.polarToCartesian(this.centerX, this.centerY, l.globals.radialSize / 1.25 + l.config.plotOptions.pie.dataLabels.offset, (o + g / 2) % this.fullAngle) : "donut" === this.chartType && (b = m.polarToCartesian(this.centerX, this.centerY, (l.globals.radialSize + this.donutSize) / 2 + l.config.plotOptions.pie.dataLabels.offset, (o + g / 2) % this.fullAngle)), u.add(v);
                                    var A = 0;
                                    if (!this.initialAnim || l.globals.resized || l.globals.dataChanged ? this.animBeginArr.push(0) : (0 == (A = g / this.fullAngle * l.config.chart.animations.speed) && (A = 1), this.animDur = A + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && l.globals.dataChanged ? this.animatePaths(v, {
                                            size: this.sliceSizes[d],
                                            endAngle: h,
                                            startAngle: o,
                                            prevStartAngle: r,
                                            prevEndAngle: c,
                                            animateStartingPos: !0,
                                            i: d,
                                            animBeginArr: this.animBeginArr,
                                            shouldSetPrevPaths: !0,
                                            dur: l.config.chart.animations.dynamicAnimation.speed
                                        }) : this.animatePaths(v, {
                                            size: this.sliceSizes[d],
                                            endAngle: h,
                                            startAngle: o,
                                            i: d,
                                            totalItems: t.length - 1,
                                            animBeginArr: this.animBeginArr,
                                            dur: A
                                        }), l.config.plotOptions.pie.expandOnClick && "polarArea" !== this.chartType && v.click(this.pieClicked.bind(this, d)), void 0 !== l.globals.selectedDataPoints[0] && l.globals.selectedDataPoints[0].indexOf(d) > -1 && this.pieClicked(d), l.config.dataLabels.enabled) {
                                        var S = b.x,
                                            k = b.y,
                                            L = 100 * g / this.fullAngle + "%";
                                        if (0 !== g && l.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[d]) {
                                            var C = l.config.dataLabels.formatter;
                                            void 0 !== C && (L = C(l.globals.seriesPercent[d][0], {
                                                seriesIndex: d,
                                                w: l
                                            }));
                                            var M = l.globals.dataLabels.style.colors[d],
                                                z = a.group({
                                                    class: "apexcharts-datalabels"
                                                }),
                                                E = a.drawText({
                                                    x: S,
                                                    y: k,
                                                    text: L,
                                                    textAnchor: "middle",
                                                    fontSize: l.config.dataLabels.style.fontSize,
                                                    fontFamily: l.config.dataLabels.style.fontFamily,
                                                    fontWeight: l.config.dataLabels.style.fontWeight,
                                                    foreColor: M
                                                });
                                            if (z.add(E), l.config.dataLabels.dropShadow.enabled) {
                                                var T = l.config.dataLabels.dropShadow;
                                                i.dropShadow(E, T)
                                            }
                                            E.node.classList.add("apexcharts-pie-label"), l.config.chart.animations.animate && !1 === l.globals.resized && (E.node.classList.add("apexcharts-pie-label-delay"), E.node.style.animationDelay = l.config.chart.animations.speed / 940 + "s"), this.sliceLabels.push(z)
                                        }
                                    }
                                }
                                return n
                            }
                        }, {
                            key: "addListeners",
                            value: function (t, e) {
                                var l = new w(this.ctx);
                                t.node.addEventListener("mouseenter", l.pathMouseEnter.bind(this, t)), t.node.addEventListener("mouseleave", l.pathMouseLeave.bind(this, t)), t.node.addEventListener("mouseleave", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener("mousedown", l.pathMouseDown.bind(this, t)), this.donutDataLabels.total.showAlways || (t.node.addEventListener("mouseenter", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener("mousedown", this.printDataLabelsInner.bind(this, t.node, e)))
                            }
                        }, {
                            key: "animatePaths",
                            value: function (t, e) {
                                var l = this.w,
                                    i = e.endAngle < e.startAngle ? this.fullAngle + e.endAngle - e.startAngle : e.endAngle - e.startAngle,
                                    a = i,
                                    s = e.startAngle,
                                    n = e.startAngle;
                                void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (s = e.prevEndAngle, a = e.prevEndAngle < e.prevStartAngle ? this.fullAngle + e.prevEndAngle - e.prevStartAngle : e.prevEndAngle - e.prevStartAngle), e.i === l.config.series.length - 1 && (i + n > this.fullAngle ? e.endAngle = e.endAngle - (i + n) : i + n < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (i + n)))), i === this.fullAngle && (i = this.fullAngle - .01), this.animateArc(t, s, n, i, a, e)
                            }
                        }, {
                            key: "animateArc",
                            value: function (t, e, l, i, a, s) {
                                var n, o = this,
                                    r = this.w,
                                    h = new b(this.ctx),
                                    c = s.size;
                                (isNaN(e) || isNaN(a)) && (e = l, a = i, s.dur = 0);
                                var d = i,
                                    u = l,
                                    g = e < l ? this.fullAngle + e - l : e - l;
                                r.globals.dataChanged && s.shouldSetPrevPaths && s.prevEndAngle && (n = o.getPiePath({
                                    me: o,
                                    startAngle: s.prevStartAngle,
                                    angle: s.prevEndAngle < s.prevStartAngle ? this.fullAngle + s.prevEndAngle - s.prevStartAngle : s.prevEndAngle - s.prevStartAngle,
                                    size: c
                                }), t.attr({
                                    d: n
                                })), 0 !== s.dur ? t.animate(s.dur, r.globals.easing, s.animBeginArr[s.i]).afterAll((function () {
                                    "pie" !== o.chartType && "donut" !== o.chartType && "polarArea" !== o.chartType || this.animate(r.config.chart.animations.dynamicAnimation.speed).attr({
                                        "stroke-width": o.strokeWidth
                                    }), s.i === r.config.series.length - 1 && h.animationCompleted(t)
                                })).during((function (r) {
                                    d = g + (i - g) * r, s.animateStartingPos && (d = a + (i - a) * r, u = e - a + (l - (e - a)) * r), n = o.getPiePath({
                                        me: o,
                                        startAngle: u,
                                        angle: d,
                                        size: c
                                    }), t.node.setAttribute("data:pathOrig", n), t.attr({
                                        d: n
                                    })
                                })) : (n = o.getPiePath({
                                    me: o,
                                    startAngle: u,
                                    angle: i,
                                    size: c
                                }), s.isTrack || (r.globals.animationEnded = !0), t.node.setAttribute("data:pathOrig", n), t.attr({
                                    d: n,
                                    "stroke-width": o.strokeWidth
                                }))
                            }
                        }, {
                            key: "pieClicked",
                            value: function (t) {
                                var e, l = this.w,
                                    i = this,
                                    a = i.sliceSizes[t] + (l.config.plotOptions.pie.expandOnClick ? 4 : 0),
                                    s = l.globals.dom.Paper.select(".apexcharts-".concat(i.chartType.toLowerCase(), "-slice-").concat(t)).members[0];
                                if ("true" !== s.attr("data:pieClicked")) {
                                    var n = l.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area");
                                    Array.prototype.forEach.call(n, (function (t) {
                                        t.setAttribute("data:pieClicked", "false");
                                        var e = t.getAttribute("data:pathOrig");
                                        t.setAttribute("d", e)
                                    })), s.attr("data:pieClicked", "true");
                                    var o = parseInt(s.attr("data:startAngle"), 10),
                                        r = parseInt(s.attr("data:angle"), 10);
                                    e = i.getPiePath({
                                        me: i,
                                        startAngle: o,
                                        angle: r,
                                        size: a
                                    }), 360 !== r && s.plot(e)
                                } else {
                                    s.attr({
                                        "data:pieClicked": "false"
                                    }), this.revertDataLabelsInner(s.node, this.donutDataLabels);
                                    var h = s.attr("data:pathOrig");
                                    s.attr({
                                        d: h
                                    })
                                }
                            }
                        }, {
                            key: "getChangedPath",
                            value: function (t, e) {
                                var l = "";
                                return this.dynamicAnim && this.w.globals.dataChanged && (l = this.getPiePath({
                                    me: this,
                                    startAngle: t,
                                    angle: e - t,
                                    size: this.size
                                })), l
                            }
                        }, {
                            key: "getPiePath",
                            value: function (t) {
                                var e = t.me,
                                    l = t.startAngle,
                                    i = t.angle,
                                    a = t.size,
                                    s = l,
                                    n = Math.PI * (s - 90) / 180,
                                    o = i + l;
                                Math.ceil(o) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (o = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - .01), Math.ceil(o) > this.fullAngle && (o -= this.fullAngle);
                                var r = Math.PI * (o - 90) / 180,
                                    h = e.centerX + a * Math.cos(n),
                                    c = e.centerY + a * Math.sin(n),
                                    d = e.centerX + a * Math.cos(r),
                                    u = e.centerY + a * Math.sin(r),
                                    g = m.polarToCartesian(e.centerX, e.centerY, e.donutSize, o),
                                    p = m.polarToCartesian(e.centerX, e.centerY, e.donutSize, s),
                                    f = i > 180 ? 1 : 0,
                                    v = ["M", h, c, "A", a, a, 0, f, 1, d, u];
                                return "donut" === e.chartType ? [].concat(v, ["L", g.x, g.y, "A", e.donutSize, e.donutSize, 0, f, 0, p.x, p.y, "L", h, c, "z"]).join(" ") : "pie" === e.chartType || "polarArea" === e.chartType ? [].concat(v, ["L", e.centerX, e.centerY, "L", h, c]).join(" ") : [].concat(v).join(" ")
                            }
                        }, {
                            key: "drawPolarElements",
                            value: function (t) {
                                var e = this.w,
                                    l = new K(this.ctx),
                                    i = new w(this.ctx),
                                    a = new Ct(this.ctx),
                                    s = i.group(),
                                    n = i.group(),
                                    o = l.niceScale(0, Math.ceil(this.maxY), e.config.yaxis[0].tickAmount, 0, !0),
                                    r = o.result.reverse(),
                                    h = o.result.length;
                                this.maxY = o.niceMax;
                                for (var c = e.globals.radialSize, d = c / (h - 1), u = 0; u < h - 1; u++) {
                                    var g = i.drawCircle(c);
                                    if (g.attr({
                                            cx: this.centerX,
                                            cy: this.centerY,
                                            fill: "none",
                                            "stroke-width": e.config.plotOptions.polarArea.rings.strokeWidth,
                                            stroke: e.config.plotOptions.polarArea.rings.strokeColor
                                        }), e.config.yaxis[0].show) {
                                        var p = a.drawYAxisTexts(this.centerX, this.centerY - c + parseInt(e.config.yaxis[0].labels.style.fontSize, 10) / 2, u, r[u]);
                                        n.add(p)
                                    }
                                    s.add(g), c -= d
                                }
                                this.drawSpokes(t), t.add(s), t.add(n)
                            }
                        }, {
                            key: "renderInnerDataLabels",
                            value: function (t, e) {
                                var l = this.w,
                                    i = new w(this.ctx),
                                    a = i.group({
                                        class: "apexcharts-datalabels-group",
                                        transform: "translate(".concat(e.translateX ? e.translateX : 0, ", ").concat(e.translateY ? e.translateY : 0, ") scale(").concat(l.config.plotOptions.pie.customScale, ")")
                                    }),
                                    s = t.total.show;
                                a.node.style.opacity = e.opacity;
                                var n, o, r = e.centerX,
                                    h = e.centerY;
                                n = void 0 === t.name.color ? l.globals.colors[0] : t.name.color;
                                var c = t.name.fontSize,
                                    d = t.name.fontFamily,
                                    u = t.name.fontWeight;
                                o = void 0 === t.value.color ? l.config.chart.foreColor : t.value.color;
                                var g = t.value.formatter,
                                    p = "",
                                    f = "";
                                if (s ? (n = t.total.color, c = t.total.fontSize, d = t.total.fontFamily, u = t.total.fontWeight, f = t.total.label, p = t.total.formatter(l)) : 1 === l.globals.series.length && (p = g(l.globals.series[0], l), f = l.globals.seriesNames[0]), f && (f = t.name.formatter(f, t.total.show, l)), t.name.show) {
                                    var v = i.drawText({
                                        x: r,
                                        y: h + parseFloat(t.name.offsetY),
                                        text: f,
                                        textAnchor: "middle",
                                        foreColor: n,
                                        fontSize: c,
                                        fontWeight: u,
                                        fontFamily: d
                                    });
                                    v.node.classList.add("apexcharts-datalabel-label"), a.add(v)
                                }
                                if (t.value.show) {
                                    var x = t.name.show ? parseFloat(t.value.offsetY) + 16 : t.value.offsetY,
                                        m = i.drawText({
                                            x: r,
                                            y: h + x,
                                            text: p,
                                            textAnchor: "middle",
                                            foreColor: o,
                                            fontWeight: t.value.fontWeight,
                                            fontSize: t.value.fontSize,
                                            fontFamily: t.value.fontFamily
                                        });
                                    m.node.classList.add("apexcharts-datalabel-value"), a.add(m)
                                }
                                return a
                            }
                        }, {
                            key: "printInnerLabels",
                            value: function (t, e, l, i) {
                                var a, s = this.w;
                                i ? a = void 0 === t.name.color ? s.globals.colors[parseInt(i.parentNode.getAttribute("rel"), 10) - 1] : t.name.color : s.globals.series.length > 1 && t.total.show && (a = t.total.color);
                                var n = s.globals.dom.baseEl.querySelector(".apexcharts-datalabel-label"),
                                    o = s.globals.dom.baseEl.querySelector(".apexcharts-datalabel-value");
                                l = (0, t.value.formatter)(l, s), i || "function" != typeof t.total.formatter || (l = t.total.formatter(s));
                                var r = e === t.total.label;
                                e = t.name.formatter(e, r, s), null !== n && (n.textContent = e), null !== o && (o.textContent = l), null !== n && (n.style.fill = a)
                            }
                        }, {
                            key: "printDataLabelsInner",
                            value: function (t, e) {
                                var l = this.w,
                                    i = t.getAttribute("data:value"),
                                    a = l.globals.seriesNames[parseInt(t.parentNode.getAttribute("rel"), 10) - 1];
                                l.globals.series.length > 1 && this.printInnerLabels(e, a, i, t);
                                var s = l.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group");
                                null !== s && (s.style.opacity = 1)
                            }
                        }, {
                            key: "drawSpokes",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = new w(this.ctx),
                                    a = l.config.plotOptions.polarArea.spokes;
                                if (0 !== a.strokeWidth) {
                                    for (var s = [], n = 360 / l.globals.series.length, o = 0; o < l.globals.series.length; o++) s.push(m.polarToCartesian(this.centerX, this.centerY, l.globals.radialSize, l.config.plotOptions.pie.startAngle + n * o));
                                    s.forEach((function (l, s) {
                                        var n = i.drawLine(l.x, l.y, e.centerX, e.centerY, Array.isArray(a.connectorColors) ? a.connectorColors[s] : a.connectorColors);
                                        t.add(n)
                                    }))
                                }
                            }
                        }, {
                            key: "revertDataLabelsInner",
                            value: function (t, e, l) {
                                var i = this,
                                    a = this.w,
                                    s = a.globals.dom.baseEl.querySelector(".apexcharts-datalabels-group"),
                                    n = !1,
                                    o = a.globals.dom.baseEl.getElementsByClassName("apexcharts-pie-area"),
                                    r = function (t) {
                                        var l = t.makeSliceOut,
                                            a = t.printLabel;
                                        Array.prototype.forEach.call(o, (function (t) {
                                            "true" === t.getAttribute("data:pieClicked") && (l && (n = !0), a && i.printDataLabelsInner(t, e))
                                        }))
                                    };
                                if (r({
                                        makeSliceOut: !0,
                                        printLabel: !1
                                    }), e.total.show && a.globals.series.length > 1) n && !e.total.showAlways ? r({
                                    makeSliceOut: !1,
                                    printLabel: !0
                                }) : this.printInnerLabels(e, e.total.label, e.total.formatter(a));
                                else if (r({
                                        makeSliceOut: !1,
                                        printLabel: !0
                                    }), !n)
                                    if (a.globals.selectedDataPoints.length && a.globals.series.length > 1)
                                        if (a.globals.selectedDataPoints[0].length > 0) {
                                            var h = a.globals.selectedDataPoints[0],
                                                c = a.globals.dom.baseEl.querySelector(".apexcharts-".concat(this.chartType.toLowerCase(), "-slice-").concat(h));
                                            this.printDataLabelsInner(c, e)
                                        } else s && a.globals.selectedDataPoints.length && 0 === a.globals.selectedDataPoints[0].length && (s.style.opacity = 0);
                                else s && a.globals.series.length > 1 && (s.style.opacity = 0)
                            }
                        }]), t
                    }(),
                    zt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;
                            var l = this.w;
                            this.graphics = new w(this.ctx), this.lineColorArr = void 0 !== l.globals.stroke.colors ? l.globals.stroke.colors : l.globals.colors, this.defaultSize = l.globals.svgHeight < l.globals.svgWidth ? l.globals.gridHeight + 1.5 * l.globals.goldenPadding : l.globals.gridWidth, this.isLog = l.config.yaxis[0].logarithmic, this.coreUtils = new k(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(l.globals.maxY, 0) : l.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : l.globals.minY, this.polygons = l.config.plotOptions.radar.polygons, this.strokeWidth = l.config.stroke.show ? l.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - l.config.chart.dropShadow.blur, l.config.xaxis.labels.show && (this.size = this.size - l.globals.xAxisLabelsWidth / 1.75), void 0 !== l.config.plotOptions.radar.size && (this.size = l.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = []
                        }
                        return h(t, [{
                            key: "draw",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = new P(this.ctx),
                                    a = [],
                                    n = new O(this.ctx);
                                t.length && (this.dataPointsLen = t[l.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;
                                var o = l.globals.gridWidth / 2,
                                    r = l.globals.gridHeight / 2,
                                    h = o + l.config.plotOptions.radar.offsetX,
                                    c = r + l.config.plotOptions.radar.offsetY,
                                    d = this.graphics.group({
                                        class: "apexcharts-radar-series apexcharts-plot-series",
                                        transform: "translate(".concat(h || 0, ", ").concat(c || 0, ")")
                                    }),
                                    u = [],
                                    g = null,
                                    p = null;
                                if (this.yaxisLabels = this.graphics.group({
                                        class: "apexcharts-yaxis"
                                    }), t.forEach((function (t, o) {
                                        var r = t.length === l.globals.dataPoints,
                                            h = e.graphics.group().attr({
                                                class: "apexcharts-series",
                                                "data:longestSeries": r,
                                                seriesName: m.escapeString(l.globals.seriesNames[o]),
                                                rel: o + 1,
                                                "data:realIndex": o
                                            });
                                        e.dataRadiusOfPercent[o] = [], e.dataRadius[o] = [], e.angleArr[o] = [], t.forEach((function (t, l) {
                                            var i = Math.abs(e.maxValue - e.minValue);
                                            t += Math.abs(e.minValue), e.isLog && (t = e.coreUtils.getLogVal(t, 0)), e.dataRadiusOfPercent[o][l] = t / i, e.dataRadius[o][l] = e.dataRadiusOfPercent[o][l] * e.size, e.angleArr[o][l] = l * e.disAngle
                                        })), u = e.getDataPointsPos(e.dataRadius[o], e.angleArr[o]);
                                        var c = e.createPaths(u, {
                                            x: 0,
                                            y: 0
                                        });
                                        g = e.graphics.group({
                                            class: "apexcharts-series-markers-wrap apexcharts-element-hidden"
                                        }), p = e.graphics.group({
                                            class: "apexcharts-datalabels",
                                            "data:realIndex": o
                                        }), l.globals.delayedElements.push({
                                            el: g.node,
                                            index: o
                                        });
                                        var d = {
                                                i: o,
                                                realIndex: o,
                                                animationDelay: o,
                                                initialSpeed: l.config.chart.animations.speed,
                                                dataChangeSpeed: l.config.chart.animations.dynamicAnimation.speed,
                                                className: "apexcharts-radar",
                                                shouldClipToGrid: !1,
                                                bindEventsOnPaths: !1,
                                                stroke: l.globals.stroke.colors[o],
                                                strokeLineCap: l.config.stroke.lineCap
                                            },
                                            f = null;
                                        l.globals.previousPaths.length > 0 && (f = e.getPreviousPath(o));
                                        for (var v = 0; v < c.linePathsTo.length; v++) {
                                            var x = e.graphics.renderPaths(s(s({}, d), {}, {
                                                pathFrom: null === f ? c.linePathsFrom[v] : f,
                                                pathTo: c.linePathsTo[v],
                                                strokeWidth: Array.isArray(e.strokeWidth) ? e.strokeWidth[o] : e.strokeWidth,
                                                fill: "none",
                                                drawShadow: !1
                                            }));
                                            h.add(x);
                                            var b = i.fillPath({
                                                    seriesNumber: o
                                                }),
                                                w = e.graphics.renderPaths(s(s({}, d), {}, {
                                                    pathFrom: null === f ? c.areaPathsFrom[v] : f,
                                                    pathTo: c.areaPathsTo[v],
                                                    strokeWidth: 0,
                                                    fill: b,
                                                    drawShadow: !1
                                                }));
                                            if (l.config.chart.dropShadow.enabled) {
                                                var A = new y(e.ctx),
                                                    S = l.config.chart.dropShadow;
                                                A.dropShadow(w, Object.assign({}, S, {
                                                    noUserSpaceOnUse: !0
                                                }), o)
                                            }
                                            h.add(w)
                                        }
                                        t.forEach((function (t, i) {
                                            var a = new T(e.ctx).getMarkerConfig({
                                                    cssClass: "apexcharts-marker",
                                                    seriesIndex: o,
                                                    dataPointIndex: i
                                                }),
                                                r = e.graphics.drawMarker(u[i].x, u[i].y, a);
                                            r.attr("rel", i), r.attr("j", i), r.attr("index", o), r.node.setAttribute("default-marker-size", a.pSize);
                                            var c = e.graphics.group({
                                                class: "apexcharts-series-markers"
                                            });
                                            c && c.add(r), g.add(c), h.add(g);
                                            var d = l.config.dataLabels;
                                            if (d.enabled) {
                                                var f = d.formatter(l.globals.series[o][i], {
                                                    seriesIndex: o,
                                                    dataPointIndex: i,
                                                    w: l
                                                });
                                                n.plotDataLabelsText({
                                                    x: u[i].x,
                                                    y: u[i].y,
                                                    text: f,
                                                    textAnchor: "middle",
                                                    i: o,
                                                    j: o,
                                                    parent: p,
                                                    offsetCorrection: !1,
                                                    dataLabelsConfig: s({}, d)
                                                })
                                            }
                                            h.add(p)
                                        })), a.push(h)
                                    })), this.drawPolygons({
                                        parent: d
                                    }), l.config.xaxis.labels.show) {
                                    var f = this.drawXAxisTexts();
                                    d.add(f)
                                }
                                return a.forEach((function (t) {
                                    d.add(t)
                                })), d.add(this.yaxisLabels), d
                            }
                        }, {
                            key: "drawPolygons",
                            value: function (t) {
                                for (var e = this, l = this.w, i = t.parent, a = new Ct(this.ctx), s = l.globals.yAxisScale[0].result.reverse(), n = s.length, o = [], r = this.size / (n - 1), h = 0; h < n; h++) o[h] = r * h;
                                o.reverse();
                                var c = [],
                                    d = [];
                                o.forEach((function (t, l) {
                                    var i = m.getPolygonPos(t, e.dataPointsLen),
                                        a = "";
                                    i.forEach((function (t, i) {
                                        if (0 === l) {
                                            var s = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[i] : e.polygons.connectorColors);
                                            d.push(s)
                                        }
                                        0 === i && e.yaxisLabelsTextsPos.push({
                                            x: t.x,
                                            y: t.y
                                        }), a += t.x + "," + t.y + " "
                                    })), c.push(a)
                                })), c.forEach((function (t, a) {
                                    var s = e.polygons.strokeColors,
                                        n = e.polygons.strokeWidth,
                                        o = e.graphics.drawPolygon(t, Array.isArray(s) ? s[a] : s, Array.isArray(n) ? n[a] : n, l.globals.radarPolygons.fill.colors[a]);
                                    i.add(o)
                                })), d.forEach((function (t) {
                                    i.add(t)
                                })), l.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach((function (t, l) {
                                    var i = a.drawYAxisTexts(t.x, t.y, l, s[l]);
                                    e.yaxisLabels.add(i)
                                }))
                            }
                        }, {
                            key: "drawXAxisTexts",
                            value: function () {
                                var t = this,
                                    e = this.w,
                                    l = e.config.xaxis.labels,
                                    i = this.graphics.group({
                                        class: "apexcharts-xaxis"
                                    }),
                                    a = m.getPolygonPos(this.size, this.dataPointsLen);
                                return e.globals.labels.forEach((function (n, o) {
                                    var r = e.config.xaxis.labels.formatter,
                                        h = new O(t.ctx);
                                    if (a[o]) {
                                        var c = t.getTextPos(a[o], t.size),
                                            d = r(n, {
                                                seriesIndex: -1,
                                                dataPointIndex: o,
                                                w: e
                                            });
                                        h.plotDataLabelsText({
                                            x: c.newX,
                                            y: c.newY,
                                            text: d,
                                            textAnchor: c.textAnchor,
                                            i: o,
                                            j: o,
                                            parent: i,
                                            color: Array.isArray(l.style.colors) && l.style.colors[o] ? l.style.colors[o] : "#a8a8a8",
                                            dataLabelsConfig: s({
                                                textAnchor: c.textAnchor,
                                                dropShadow: {
                                                    enabled: !1
                                                }
                                            }, l),
                                            offsetCorrection: !1
                                        })
                                    }
                                })), i
                            }
                        }, {
                            key: "createPaths",
                            value: function (t, e) {
                                var l = this,
                                    i = [],
                                    a = [],
                                    s = [],
                                    n = [];
                                if (t.length) {
                                    a = [this.graphics.move(e.x, e.y)], n = [this.graphics.move(e.x, e.y)];
                                    var o = this.graphics.move(t[0].x, t[0].y),
                                        r = this.graphics.move(t[0].x, t[0].y);
                                    t.forEach((function (e, i) {
                                        o += l.graphics.line(e.x, e.y), r += l.graphics.line(e.x, e.y), i === t.length - 1 && (o += "Z", r += "Z")
                                    })), i.push(o), s.push(r)
                                }
                                return {
                                    linePathsFrom: a,
                                    linePathsTo: i,
                                    areaPathsFrom: n,
                                    areaPathsTo: s
                                }
                            }
                        }, {
                            key: "getTextPos",
                            value: function (t, e) {
                                var l = "middle",
                                    i = t.x,
                                    a = t.y;
                                return Math.abs(t.x) >= 10 ? t.x > 0 ? (l = "start", i += 10) : t.x < 0 && (l = "end", i -= 10) : l = "middle", Math.abs(t.y) >= e - 10 && (t.y < 0 ? a -= 10 : t.y > 0 && (a += 10)), {
                                    textAnchor: l,
                                    newX: i,
                                    newY: a
                                }
                            }
                        }, {
                            key: "getPreviousPath",
                            value: function (t) {
                                for (var e = this.w, l = null, i = 0; i < e.globals.previousPaths.length; i++) {
                                    var a = e.globals.previousPaths[i];
                                    a.paths.length > 0 && parseInt(a.realIndex, 10) === parseInt(t, 10) && void 0 !== e.globals.previousPaths[i].paths[0] && (l = e.globals.previousPaths[i].paths[0].d)
                                }
                                return l
                            }
                        }, {
                            key: "getDataPointsPos",
                            value: function (t, e) {
                                var l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;
                                t = t || [], e = e || [];
                                for (var i = [], a = 0; a < l; a++) {
                                    var s = {};
                                    s.x = t[a] * Math.sin(e[a]), s.y = -t[a] * Math.cos(e[a]), i.push(s)
                                }
                                return i
                            }
                        }]), t
                    }(),
                    Et = function (t) {
                        d(l, Mt);
                        var e = f(l);

                        function l(t) {
                            var i;
                            o(this, l), (i = e.call(this, t)).ctx = t, i.w = t.w, i.animBeginArr = [0], i.animDur = 0;
                            var a = i.w;
                            return i.startAngle = a.config.plotOptions.radialBar.startAngle, i.endAngle = a.config.plotOptions.radialBar.endAngle, i.totalAngle = Math.abs(a.config.plotOptions.radialBar.endAngle - a.config.plotOptions.radialBar.startAngle), i.trackStartAngle = a.config.plotOptions.radialBar.track.startAngle, i.trackEndAngle = a.config.plotOptions.radialBar.track.endAngle, i.donutDataLabels = i.w.config.plotOptions.radialBar.dataLabels, i.radialDataLabels = i.donutDataLabels, i.trackStartAngle || (i.trackStartAngle = i.startAngle), i.trackEndAngle || (i.trackEndAngle = i.endAngle), 360 === i.endAngle && (i.endAngle = 359.99), i.margin = parseInt(a.config.plotOptions.radialBar.track.margin, 10), i
                        }
                        return h(l, [{
                            key: "draw",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx),
                                    i = l.group({
                                        class: "apexcharts-radialbar"
                                    });
                                if (e.globals.noData) return i;
                                var a = l.group(),
                                    s = this.defaultSize / 2,
                                    n = e.globals.gridWidth / 2,
                                    o = this.defaultSize / 2.05;
                                e.config.chart.sparkline.enabled || (o = o - e.config.stroke.width - e.config.chart.dropShadow.blur);
                                var r = e.globals.fill.colors;
                                if (e.config.plotOptions.radialBar.track.show) {
                                    var h = this.drawTracks({
                                        size: o,
                                        centerX: n,
                                        centerY: s,
                                        colorArr: r,
                                        series: t
                                    });
                                    a.add(h)
                                }
                                var c = this.drawArcs({
                                        size: o,
                                        centerX: n,
                                        centerY: s,
                                        colorArr: r,
                                        series: t
                                    }),
                                    d = 360;
                                e.config.plotOptions.radialBar.startAngle < 0 && (d = this.totalAngle);
                                var u = (360 - d) / 360;
                                if (e.globals.radialSize = o - o * u, this.radialDataLabels.value.show) {
                                    var g = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);
                                    e.globals.radialSize += g * u
                                }
                                return a.add(c.g), "front" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), i.add(a), i
                            }
                        }, {
                            key: "drawTracks",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx),
                                    i = l.group({
                                        class: "apexcharts-tracks"
                                    }),
                                    a = new y(this.ctx),
                                    s = new P(this.ctx),
                                    n = this.getStrokeWidth(t);
                                t.size = t.size - n / 2;
                                for (var o = 0; o < t.series.length; o++) {
                                    var r = l.group({
                                        class: "apexcharts-radialbar-track apexcharts-track"
                                    });
                                    i.add(r), r.attr({
                                        rel: o + 1
                                    }), t.size = t.size - n - this.margin;
                                    var h = e.config.plotOptions.radialBar.track,
                                        c = s.fillPath({
                                            seriesNumber: 0,
                                            size: t.size,
                                            fillColors: Array.isArray(h.background) ? h.background[o] : h.background,
                                            solid: !0
                                        }),
                                        d = this.trackStartAngle,
                                        u = this.trackEndAngle;
                                    Math.abs(u) + Math.abs(d) >= 360 && (u = 360 - Math.abs(this.startAngle) - .1);
                                    var g = l.drawPath({
                                        d: "",
                                        stroke: c,
                                        strokeWidth: n * parseInt(h.strokeWidth, 10) / 100,
                                        fill: "none",
                                        strokeOpacity: h.opacity,
                                        classes: "apexcharts-radialbar-area"
                                    });
                                    if (h.dropShadow.enabled) {
                                        var p = h.dropShadow;
                                        a.dropShadow(g, p)
                                    }
                                    r.add(g), g.attr("id", "apexcharts-radialbarTrack-" + o), this.animatePaths(g, {
                                        centerX: t.centerX,
                                        centerY: t.centerY,
                                        endAngle: u,
                                        startAngle: d,
                                        size: t.size,
                                        i: o,
                                        totalItems: 2,
                                        animBeginArr: 0,
                                        dur: 0,
                                        isTrack: !0,
                                        easing: e.globals.easing
                                    })
                                }
                                return i
                            }
                        }, {
                            key: "drawArcs",
                            value: function (t) {
                                var e = this.w,
                                    l = new w(this.ctx),
                                    i = new P(this.ctx),
                                    a = new y(this.ctx),
                                    s = l.group(),
                                    n = this.getStrokeWidth(t);
                                t.size = t.size - n / 2;
                                var o = e.config.plotOptions.radialBar.hollow.background,
                                    r = t.size - n * t.series.length - this.margin * t.series.length - n * parseInt(e.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2,
                                    h = r - e.config.plotOptions.radialBar.hollow.margin;
                                void 0 !== e.config.plotOptions.radialBar.hollow.image && (o = this.drawHollowImage(t, s, r, o));
                                var c = this.drawHollow({
                                    size: h,
                                    centerX: t.centerX,
                                    centerY: t.centerY,
                                    fill: o || "transparent"
                                });
                                if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
                                    var d = e.config.plotOptions.radialBar.hollow.dropShadow;
                                    a.dropShadow(c, d)
                                }
                                var u = 1;
                                !this.radialDataLabels.total.show && e.globals.series.length > 1 && (u = 0);
                                var g = null;
                                this.radialDataLabels.show && (g = this.renderInnerDataLabels(this.radialDataLabels, {
                                    hollowSize: r,
                                    centerX: t.centerX,
                                    centerY: t.centerY,
                                    opacity: u
                                })), "back" === e.config.plotOptions.radialBar.hollow.position && (s.add(c), g && s.add(g));
                                var p = !1;
                                e.config.plotOptions.radialBar.inverseOrder && (p = !0);
                                for (var f = p ? t.series.length - 1 : 0; p ? f >= 0 : f < t.series.length; p ? f-- : f++) {
                                    var v = l.group({
                                        class: "apexcharts-series apexcharts-radial-series",
                                        seriesName: m.escapeString(e.globals.seriesNames[f])
                                    });
                                    s.add(v), v.attr({
                                        rel: f + 1,
                                        "data:realIndex": f
                                    }), this.ctx.series.addCollapsedClassToSeries(v, f), t.size = t.size - n - this.margin;
                                    var x = i.fillPath({
                                            seriesNumber: f,
                                            size: t.size,
                                            value: t.series[f]
                                        }),
                                        b = this.startAngle,
                                        A = void 0,
                                        S = m.negToZero(t.series[f] > 100 ? 100 : t.series[f]) / 100,
                                        k = Math.round(this.totalAngle * S) + this.startAngle,
                                        L = void 0;
                                    e.globals.dataChanged && (A = this.startAngle, L = Math.round(this.totalAngle * m.negToZero(e.globals.previousPaths[f]) / 100) + A), Math.abs(k) + Math.abs(b) >= 360 && (k -= .01), Math.abs(L) + Math.abs(A) >= 360 && (L -= .01);
                                    var C = k - b,
                                        M = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[f] : e.config.stroke.dashArray,
                                        z = l.drawPath({
                                            d: "",
                                            stroke: x,
                                            strokeWidth: n,
                                            fill: "none",
                                            fillOpacity: e.config.fill.opacity,
                                            classes: "apexcharts-radialbar-area apexcharts-radialbar-slice-" + f,
                                            strokeDashArray: M
                                        });
                                    if (w.setAttrs(z.node, {
                                            "data:angle": C,
                                            "data:value": t.series[f]
                                        }), e.config.chart.dropShadow.enabled) {
                                        var E = e.config.chart.dropShadow;
                                        a.dropShadow(z, E, f)
                                    }
                                    a.setSelectionFilter(z, 0, f), this.addListeners(z, this.radialDataLabels), v.add(z), z.attr({
                                        index: 0,
                                        j: f
                                    });
                                    var T = 0;
                                    !this.initialAnim || e.globals.resized || e.globals.dataChanged || (T = (k - b) / 360 * e.config.chart.animations.speed, this.animDur = T / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), e.globals.dataChanged && (T = (k - b) / 360 * e.config.chart.animations.dynamicAnimation.speed, this.animDur = T / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur)), this.animatePaths(z, {
                                        centerX: t.centerX,
                                        centerY: t.centerY,
                                        endAngle: k,
                                        startAngle: b,
                                        prevEndAngle: L,
                                        prevStartAngle: A,
                                        size: t.size,
                                        i: f,
                                        totalItems: 2,
                                        animBeginArr: this.animBeginArr,
                                        dur: T,
                                        shouldSetPrevPaths: !0,
                                        easing: e.globals.easing
                                    })
                                }
                                return {
                                    g: s,
                                    elHollow: c,
                                    dataLabels: g
                                }
                            }
                        }, {
                            key: "drawHollow",
                            value: function (t) {
                                var e = new w(this.ctx).drawCircle(2 * t.size);
                                return e.attr({
                                    class: "apexcharts-radialbar-hollow",
                                    cx: t.centerX,
                                    cy: t.centerY,
                                    r: t.size,
                                    fill: t.fill
                                }), e
                            }
                        }, {
                            key: "drawHollowImage",
                            value: function (t, e, l, i) {
                                var a = this.w,
                                    s = new P(this.ctx),
                                    n = m.randomId(),
                                    o = a.config.plotOptions.radialBar.hollow.image;
                                if (a.config.plotOptions.radialBar.hollow.imageClipped) s.clippedImgArea({
                                    width: l,
                                    height: l,
                                    image: o,
                                    patternID: "pattern".concat(a.globals.cuid).concat(n)
                                }), i = "url(#pattern".concat(a.globals.cuid).concat(n, ")");
                                else {
                                    var r = a.config.plotOptions.radialBar.hollow.imageWidth,
                                        h = a.config.plotOptions.radialBar.hollow.imageHeight;
                                    if (void 0 === r && void 0 === h) {
                                        var c = a.globals.dom.Paper.image(o).loaded((function (e) {
                                            this.move(t.centerX - e.width / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetY)
                                        }));
                                        e.add(c)
                                    } else {
                                        var d = a.globals.dom.Paper.image(o).loaded((function (e) {
                                            this.move(t.centerX - r / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + a.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(r, h)
                                        }));
                                        e.add(d)
                                    }
                                }
                                return i
                            }
                        }, {
                            key: "getStrokeWidth",
                            value: function (t) {
                                var e = this.w;
                                return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t.series.length + 1) - this.margin
                            }
                        }]), l
                    }(),
                    Pt = function () {
                        function t(e) {
                            o(this, t), this.w = e.w, this.lineCtx = e
                        }
                        return h(t, [{
                            key: "sameValueSeriesFix",
                            value: function (t, e) {
                                var l = this.w;
                                if ("line" === l.config.chart.type && ("gradient" === l.config.fill.type || "gradient" === l.config.fill.type[t]) && new k(this.lineCtx.ctx, l).seriesHaveSameValues(t)) {
                                    var i = e[t].slice();
                                    i[i.length - 1] = i[i.length - 1] + 1e-6, e[t] = i
                                }
                                return e
                            }
                        }, {
                            key: "calculatePoints",
                            value: function (t) {
                                var e = t.series,
                                    l = t.realIndex,
                                    i = t.x,
                                    a = t.y,
                                    s = t.i,
                                    n = t.j,
                                    o = t.prevY,
                                    r = this.w,
                                    h = [],
                                    c = [];
                                if (0 === n) {
                                    var d = this.lineCtx.categoryAxisCorrection + r.config.markers.offsetX;
                                    r.globals.isXNumeric && (d = (r.globals.seriesX[l][0] - r.globals.minX) / this.lineCtx.xRatio + r.config.markers.offsetX), h.push(d), c.push(m.isNumber(e[s][0]) ? o + r.config.markers.offsetY : null), h.push(i + r.config.markers.offsetX), c.push(m.isNumber(e[s][n + 1]) ? a + r.config.markers.offsetY : null)
                                } else h.push(i + r.config.markers.offsetX), c.push(m.isNumber(e[s][n + 1]) ? a + r.config.markers.offsetY : null);
                                return {
                                    x: h,
                                    y: c
                                }
                            }
                        }, {
                            key: "checkPreviousPaths",
                            value: function (t) {
                                for (var e = t.pathFromLine, l = t.pathFromArea, i = t.realIndex, a = this.w, s = 0; s < a.globals.previousPaths.length; s++) {
                                    var n = a.globals.previousPaths[s];
                                    ("line" === n.type || "area" === n.type) && n.paths.length > 0 && parseInt(n.realIndex, 10) === parseInt(i, 10) && ("line" === n.type ? (this.lineCtx.appendPathFrom = !1, e = a.globals.previousPaths[s].paths[0].d) : "area" === n.type && (this.lineCtx.appendPathFrom = !1, l = a.globals.previousPaths[s].paths[0].d, a.config.stroke.show && a.globals.previousPaths[s].paths[1] && (e = a.globals.previousPaths[s].paths[1].d)))
                                }
                                return {
                                    pathFromLine: e,
                                    pathFromArea: l
                                }
                            }
                        }, {
                            key: "determineFirstPrevY",
                            value: function (t) {
                                var e = t.i,
                                    l = t.series,
                                    i = t.prevY,
                                    a = t.lineYPosition,
                                    s = this.w;
                                if (void 0 !== l[e][0]) i = (a = s.config.chart.stacked && e > 0 ? this.lineCtx.prevSeriesY[e - 1][0] : this.lineCtx.zeroY) - l[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? l[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);
                                else if (s.config.chart.stacked && e > 0 && void 0 === l[e][0])
                                    for (var n = e - 1; n >= 0; n--)
                                        if (null !== l[n][0] && void 0 !== l[n][0]) {
                                            i = a = this.lineCtx.prevSeriesY[n][0];
                                            break
                                        } return {
                                    prevY: i,
                                    lineYPosition: a
                                }
                            }
                        }]), t
                    }(),
                    Tt = function () {
                        function t(e, l, i) {
                            o(this, t), this.ctx = e, this.w = e.w, this.xyRatios = l, this.pointsChart = !("bubble" !== this.w.config.chart.type && "scatter" !== this.w.config.chart.type) || i, this.scatter = new I(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Pt(this), this.markers = new T(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0
                        }
                        return h(t, [{
                            key: "draw",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = new w(this.ctx),
                                    s = i.globals.comboCharts ? e : i.config.chart.type,
                                    n = a.group({
                                        class: "apexcharts-".concat(s, "-series apexcharts-plot-series")
                                    }),
                                    o = new k(this.ctx, i);
                                this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t = o.getLogSeries(t), this.yRatio = o.getLogYRatios(this.yRatio);
                                for (var r = [], h = 0; h < t.length; h++) {
                                    t = this.lineHelpers.sameValueSeriesFix(h, t);
                                    var c = i.globals.comboCharts ? l[h] : h;
                                    this._initSerieVariables(t, h, c);
                                    var d = [],
                                        u = [],
                                        g = i.globals.padHorizontal + this.categoryAxisCorrection;
                                    this.ctx.series.addCollapsedClassToSeries(this.elSeries, c), i.globals.isXNumeric && i.globals.seriesX.length > 0 && (g = (i.globals.seriesX[c][0] - i.globals.minX) / this.xRatio), u.push(g);
                                    var p, f = g,
                                        v = f,
                                        x = this.zeroY;
                                    x = this.lineHelpers.determineFirstPrevY({
                                        i: h,
                                        series: t,
                                        prevY: x,
                                        lineYPosition: 0
                                    }).prevY, d.push(x), p = x;
                                    var m = this._calculatePathsFrom({
                                            series: t,
                                            i: h,
                                            realIndex: c,
                                            prevX: v,
                                            prevY: x
                                        }),
                                        b = this._iterateOverDataPoints({
                                            series: t,
                                            realIndex: c,
                                            i: h,
                                            x: g,
                                            y: 1,
                                            pX: f,
                                            pY: p,
                                            pathsFrom: m,
                                            linePaths: [],
                                            areaPaths: [],
                                            seriesIndex: l,
                                            lineYPosition: 0,
                                            xArrj: u,
                                            yArrj: d
                                        });
                                    this._handlePaths({
                                        type: s,
                                        realIndex: c,
                                        i: h,
                                        paths: b
                                    }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), r.push(this.elSeries)
                                }
                                if (i.config.chart.stacked)
                                    for (var y = r.length; y > 0; y--) n.add(r[y - 1]);
                                else
                                    for (var A = 0; A < r.length; A++) n.add(r[A]);
                                return n
                            }
                        }, {
                            key: "_initSerieVariables",
                            value: function (t, e, l) {
                                var i = this.w,
                                    a = new w(this.ctx);
                                this.xDivision = i.globals.gridWidth / (i.globals.dataPoints - ("on" === i.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(i.config.stroke.width) ? i.config.stroke.width[l] : i.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = l), this.isReversed = i.config.yaxis[this.yaxisIndex] && i.config.yaxis[this.yaxisIndex].reversed, this.zeroY = i.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? i.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > i.globals.gridHeight || "end" === i.config.plotOptions.area.fillTo) && (this.areaBottomY = i.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = a.group({
                                    class: "apexcharts-series",
                                    seriesName: m.escapeString(i.globals.seriesNames[l])
                                }), this.elPointsMain = a.group({
                                    class: "apexcharts-series-markers-wrap",
                                    "data:realIndex": l
                                }), this.elDataLabelsWrap = a.group({
                                    class: "apexcharts-datalabels",
                                    "data:realIndex": l
                                });
                                var s = t[e].length === i.globals.dataPoints;
                                this.elSeries.attr({
                                    "data:longestSeries": s,
                                    rel: e + 1,
                                    "data:realIndex": l
                                }), this.appendPathFrom = !0
                            }
                        }, {
                            key: "_calculatePathsFrom",
                            value: function (t) {
                                var e, l, i, a, s = t.series,
                                    n = t.i,
                                    o = t.realIndex,
                                    r = t.prevX,
                                    h = t.prevY,
                                    c = this.w,
                                    d = new w(this.ctx);
                                if (null === s[n][0]) {
                                    for (var u = 0; u < s[n].length; u++)
                                        if (null !== s[n][u]) {
                                            r = this.xDivision * u, h = this.zeroY - s[n][u] / this.yRatio[this.yaxisIndex], e = d.move(r, h), l = d.move(r, this.areaBottomY);
                                            break
                                        }
                                } else e = d.move(r, h), l = d.move(r, this.areaBottomY) + d.line(r, h);
                                if (i = d.move(-1, this.zeroY) + d.line(-1, this.zeroY), a = d.move(-1, this.zeroY) + d.line(-1, this.zeroY), c.globals.previousPaths.length > 0) {
                                    var g = this.lineHelpers.checkPreviousPaths({
                                        pathFromLine: i,
                                        pathFromArea: a,
                                        realIndex: o
                                    });
                                    i = g.pathFromLine, a = g.pathFromArea
                                }
                                return {
                                    prevX: r,
                                    prevY: h,
                                    linePath: e,
                                    areaPath: l,
                                    pathFromLine: i,
                                    pathFromArea: a
                                }
                            }
                        }, {
                            key: "_handlePaths",
                            value: function (t) {
                                var e = t.type,
                                    l = t.realIndex,
                                    i = t.i,
                                    a = t.paths,
                                    n = this.w,
                                    o = new w(this.ctx),
                                    r = new P(this.ctx);
                                this.prevSeriesY.push(a.yArrj), n.globals.seriesXvalues[l] = a.xArrj, n.globals.seriesYvalues[l] = a.yArrj;
                                var h = n.config.forecastDataPoints;
                                if (h.count > 0) {
                                    var c = n.globals.seriesXvalues[l][n.globals.seriesXvalues[l].length - h.count - 1],
                                        d = o.drawRect(c, 0, n.globals.gridWidth, n.globals.gridHeight, 0);
                                    n.globals.dom.elForecastMask.appendChild(d.node);
                                    var u = o.drawRect(0, 0, c, n.globals.gridHeight, 0);
                                    n.globals.dom.elNonForecastMask.appendChild(u.node)
                                }
                                this.pointsChart || n.globals.delayedElements.push({
                                    el: this.elPointsMain.node,
                                    index: l
                                });
                                var g = {
                                    i,
                                    realIndex: l,
                                    animationDelay: i,
                                    initialSpeed: n.config.chart.animations.speed,
                                    dataChangeSpeed: n.config.chart.animations.dynamicAnimation.speed,
                                    className: "apexcharts-".concat(e)
                                };
                                if ("area" === e)
                                    for (var p = r.fillPath({
                                            seriesNumber: l
                                        }), f = 0; f < a.areaPaths.length; f++) {
                                        var v = o.renderPaths(s(s({}, g), {}, {
                                            pathFrom: a.pathFromArea,
                                            pathTo: a.areaPaths[f],
                                            stroke: "none",
                                            strokeWidth: 0,
                                            strokeLineCap: null,
                                            fill: p
                                        }));
                                        this.elSeries.add(v)
                                    }
                                if (n.config.stroke.show && !this.pointsChart) {
                                    var x;
                                    x = "line" === e ? r.fillPath({
                                        seriesNumber: l,
                                        i
                                    }) : n.globals.stroke.colors[l];
                                    for (var m = 0; m < a.linePaths.length; m++) {
                                        var b = s(s({}, g), {}, {
                                                pathFrom: a.pathFromLine,
                                                pathTo: a.linePaths[m],
                                                stroke: x,
                                                strokeWidth: this.strokeWidth,
                                                strokeLineCap: n.config.stroke.lineCap,
                                                fill: "none"
                                            }),
                                            y = o.renderPaths(b);
                                        if (this.elSeries.add(y), h.count > 0) {
                                            var A = o.renderPaths(b);
                                            A.node.setAttribute("stroke-dasharray", h.dashArray), h.strokeWidth && A.node.setAttribute("stroke-width", h.strokeWidth), this.elSeries.add(A), A.attr("clip-path", "url(#forecastMask".concat(n.globals.cuid, ")")), y.attr("clip-path", "url(#nonForecastMask".concat(n.globals.cuid, ")"))
                                        }
                                    }
                                }
                            }
                        }, {
                            key: "_iterateOverDataPoints",
                            value: function (t) {
                                for (var e = t.series, l = t.realIndex, i = t.i, a = t.x, s = t.y, n = t.pX, o = t.pY, r = t.pathsFrom, h = t.linePaths, c = t.areaPaths, d = t.seriesIndex, u = t.lineYPosition, g = t.xArrj, p = t.yArrj, f = this.w, v = new w(this.ctx), x = this.yRatio, b = r.prevY, y = r.linePath, A = r.areaPath, S = r.pathFromLine, k = r.pathFromArea, L = m.isNumber(f.globals.minYArr[l]) ? f.globals.minYArr[l] : f.globals.minY, C = f.globals.dataPoints > 1 ? f.globals.dataPoints - 1 : f.globals.dataPoints, M = 0; M < C; M++) {
                                    var z = void 0 === e[i][M + 1] || null === e[i][M + 1];
                                    if (f.globals.isXNumeric) {
                                        var E = f.globals.seriesX[l][M + 1];
                                        void 0 === f.globals.seriesX[l][M + 1] && (E = f.globals.seriesX[l][C - 1]), a = (E - f.globals.minX) / this.xRatio
                                    } else a += this.xDivision;
                                    u = f.config.chart.stacked && i > 0 && f.globals.collapsedSeries.length < f.config.series.length - 1 ? this.prevSeriesY[function (t) {
                                        for (var e = t, l = 0; l < f.globals.series.length; l++)
                                            if (f.globals.collapsedSeriesIndices.indexOf(t) > -1) {
                                                e--;
                                                break
                                            } return e >= 0 ? e : 0
                                    }(i - 1)][M + 1] : this.zeroY, s = z ? u - L / x[this.yaxisIndex] + 2 * (this.isReversed ? L / x[this.yaxisIndex] : 0) : u - e[i][M + 1] / x[this.yaxisIndex] + 2 * (this.isReversed ? e[i][M + 1] / x[this.yaxisIndex] : 0), g.push(a), p.push(s);
                                    var P = this.lineHelpers.calculatePoints({
                                            series: e,
                                            x: a,
                                            y: s,
                                            realIndex: l,
                                            i,
                                            j: M,
                                            prevY: b
                                        }),
                                        T = this._createPaths({
                                            series: e,
                                            i,
                                            realIndex: l,
                                            j: M,
                                            x: a,
                                            y: s,
                                            pX: n,
                                            pY: o,
                                            linePath: y,
                                            areaPath: A,
                                            linePaths: h,
                                            areaPaths: c,
                                            seriesIndex: d
                                        });
                                    c = T.areaPaths, h = T.linePaths, n = T.pX, o = T.pY, A = T.areaPath, y = T.linePath, this.appendPathFrom && (S += v.line(a, this.zeroY), k += v.line(a, this.zeroY)), this.handleNullDataPoints(e, P, i, M, l), this._handleMarkersAndLabels({
                                        pointsPos: P,
                                        series: e,
                                        x: a,
                                        y: s,
                                        prevY: b,
                                        i,
                                        j: M,
                                        realIndex: l
                                    })
                                }
                                return {
                                    yArrj: p,
                                    xArrj: g,
                                    pathFromArea: k,
                                    areaPaths: c,
                                    pathFromLine: S,
                                    linePaths: h
                                }
                            }
                        }, {
                            key: "_handleMarkersAndLabels",
                            value: function (t) {
                                var e = t.pointsPos;
                                t.series, t.x, t.y, t.prevY;
                                var l = t.i,
                                    i = t.j,
                                    a = t.realIndex,
                                    s = this.w,
                                    n = new O(this.ctx);
                                if (this.pointsChart) this.scatter.draw(this.elSeries, i, {
                                    realIndex: a,
                                    pointsPos: e,
                                    zRatio: this.zRatio,
                                    elParent: this.elPointsMain
                                });
                                else {
                                    s.globals.series[l].length > 1 && this.elPointsMain.node.classList.add("apexcharts-element-hidden");
                                    var o = this.markers.plotChartMarkers(e, a, i + 1);
                                    null !== o && this.elPointsMain.add(o)
                                }
                                var r = n.drawDataLabel(e, a, i + 1, null);
                                null !== r && this.elDataLabelsWrap.add(r)
                            }
                        }, {
                            key: "_createPaths",
                            value: function (t) {
                                var e = t.series,
                                    l = t.i,
                                    i = t.realIndex,
                                    a = t.j,
                                    s = t.x,
                                    n = t.y,
                                    o = t.pX,
                                    r = t.pY,
                                    h = t.linePath,
                                    c = t.areaPath,
                                    d = t.linePaths,
                                    u = t.areaPaths,
                                    g = t.seriesIndex,
                                    p = this.w,
                                    f = new w(this.ctx),
                                    v = p.config.stroke.curve,
                                    x = this.areaBottomY;
                                if (Array.isArray(p.config.stroke.curve) && (v = Array.isArray(g) ? p.config.stroke.curve[g[l]] : p.config.stroke.curve[l]), "smooth" === v) {
                                    var m = .35 * (s - o);
                                    p.globals.hasNullValues ? (null !== e[l][a] && (null !== e[l][a + 1] ? (h = f.move(o, r) + f.curve(o + m, r, s - m, n, s + 1, n), c = f.move(o + 1, r) + f.curve(o + m, r, s - m, n, s + 1, n) + f.line(s, x) + f.line(o, x) + "z") : (h = f.move(o, r), c = f.move(o, r) + "z")), d.push(h), u.push(c)) : (h += f.curve(o + m, r, s - m, n, s, n), c += f.curve(o + m, r, s - m, n, s, n)), o = s, r = n, a === e[l].length - 2 && (c = c + f.curve(o, r, s, n, s, x) + f.move(s, n) + "z", p.globals.hasNullValues || (d.push(h), u.push(c)))
                                } else {
                                    if (null === e[l][a + 1]) {
                                        h += f.move(s, n);
                                        var b = p.globals.isXNumeric ? (p.globals.seriesX[i][a] - p.globals.minX) / this.xRatio : s - this.xDivision;
                                        c = c + f.line(b, x) + f.move(s, n) + "z"
                                    }
                                    null === e[l][a] && (h += f.move(s, n), c += f.move(s, x)), "stepline" === v ? (h = h + f.line(s, null, "H") + f.line(null, n, "V"), c = c + f.line(s, null, "H") + f.line(null, n, "V")) : "straight" === v && (h += f.line(s, n), c += f.line(s, n)), a === e[l].length - 2 && (c = c + f.line(s, x) + f.move(s, n) + "z", d.push(h), u.push(c))
                                }
                                return {
                                    linePaths: d,
                                    areaPaths: u,
                                    pX: o,
                                    pY: r,
                                    linePath: h,
                                    areaPath: c
                                }
                            }
                        }, {
                            key: "handleNullDataPoints",
                            value: function (t, e, l, i, a) {
                                var s = this.w;
                                if (null === t[l][i] && s.config.markers.showNullDataPoints || 1 === t[l].length) {
                                    var n = this.markers.plotChartMarkers(e, a, i + 1, this.strokeWidth - s.config.markers.strokeWidth / 2, !0);
                                    null !== n && this.elPointsMain.add(n)
                                }
                            }
                        }]), t
                    }();
                window.TreemapSquared = {}, window.TreemapSquared.generate = function () {
                    function t(e, l, i, a) {
                        this.xoffset = e, this.yoffset = l, this.height = a, this.width = i, this.shortestEdge = function () {
                            return Math.min(this.height, this.width)
                        }, this.getCoordinates = function (t) {
                            var e, l = [],
                                i = this.xoffset,
                                a = this.yoffset,
                                n = s(t) / this.height,
                                o = s(t) / this.width;
                            if (this.width >= this.height)
                                for (e = 0; e < t.length; e++) l.push([i, a, i + n, a + t[e] / n]), a += t[e] / n;
                            else
                                for (e = 0; e < t.length; e++) l.push([i, a, i + t[e] / o, a + o]), i += t[e] / o;
                            return l
                        }, this.cutArea = function (e) {
                            var l;
                            if (this.width >= this.height) {
                                var i = e / this.height,
                                    a = this.width - i;
                                l = new t(this.xoffset + i, this.yoffset, a, this.height)
                            } else {
                                var s = e / this.width,
                                    n = this.height - s;
                                l = new t(this.xoffset, this.yoffset + s, this.width, n)
                            }
                            return l
                        }
                    }

                    function e(e, i, a, n, o) {
                        return n = void 0 === n ? 0 : n, o = void 0 === o ? 0 : o,
                            function (t) {
                                var e, l, i = [];
                                for (e = 0; e < t.length; e++)
                                    for (l = 0; l < t[e].length; l++) i.push(t[e][l]);
                                return i
                            }(l(function (t, e) {
                                var l, i = [],
                                    a = e / s(t);
                                for (l = 0; l < t.length; l++) i[l] = t[l] * a;
                                return i
                            }(e, i * a), [], new t(n, o, i, a), []))
                    }

                    function l(t, e, a, n) {
                        var o, r, h;
                        if (0 !== t.length) return o = a.shortestEdge(),
                            function (t, e, l) {
                                var a;
                                return 0 === t.length || ((a = t.slice()).push(e), i(t, l) >= i(a, l))
                            }(e, r = t[0], o) ? (e.push(r), l(t.slice(1), e, a, n)) : (h = a.cutArea(s(e), n), n.push(a.getCoordinates(e)), l(t, [], h, n)), n;
                        n.push(a.getCoordinates(e))
                    }

                    function i(t, e) {
                        var l = Math.min.apply(Math, t),
                            i = Math.max.apply(Math, t),
                            a = s(t);
                        return Math.max(Math.pow(e, 2) * i / Math.pow(a, 2), Math.pow(a, 2) / (Math.pow(e, 2) * l))
                    }

                    function a(t) {
                        return t && t.constructor === Array
                    }

                    function s(t) {
                        var e, l = 0;
                        for (e = 0; e < t.length; e++) l += t[e];
                        return l
                    }

                    function n(t) {
                        var e, l = 0;
                        if (a(t[0]))
                            for (e = 0; e < t.length; e++) l += n(t[e]);
                        else l = s(t);
                        return l
                    }
                    return function t(l, i, s, o, r) {
                        o = void 0 === o ? 0 : o, r = void 0 === r ? 0 : r;
                        var h, c, d = [],
                            u = [];
                        if (a(l[0])) {
                            for (c = 0; c < l.length; c++) d[c] = n(l[c]);
                            for (h = e(d, i, s, o, r), c = 0; c < l.length; c++) u.push(t(l[c], h[c][2] - h[c][0], h[c][3] - h[c][1], h[c][0], h[c][1]))
                        } else u = e(l, i, s, o, r);
                        return u
                    }
                }();
                var It, Ot, Dt = function () {
                        function t(e, l) {
                            o(this, t), this.ctx = e, this.w = e.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new kt(e), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = []
                        }
                        return h(t, [{
                            key: "draw",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = new w(this.ctx),
                                    a = new P(this.ctx),
                                    s = i.group({
                                        class: "apexcharts-treemap"
                                    });
                                if (l.globals.noData) return s;
                                var n = [];
                                return t.forEach((function (t) {
                                    var e = t.map((function (t) {
                                        return Math.abs(t)
                                    }));
                                    n.push(e)
                                })), this.negRange = this.helpers.checkColorRange(), l.config.series.forEach((function (t, l) {
                                    t.data.forEach((function (t) {
                                        Array.isArray(e.labels[l]) || (e.labels[l] = []), e.labels[l].push(t.x)
                                    }))
                                })), window.TreemapSquared.generate(n, l.globals.gridWidth, l.globals.gridHeight).forEach((function (n, o) {
                                    var r = i.group({
                                        class: "apexcharts-series apexcharts-treemap-series",
                                        seriesName: m.escapeString(l.globals.seriesNames[o]),
                                        rel: o + 1,
                                        "data:realIndex": o
                                    });
                                    if (l.config.chart.dropShadow.enabled) {
                                        var h = l.config.chart.dropShadow;
                                        new y(e.ctx).dropShadow(s, h, o)
                                    }
                                    var c = i.group({
                                        class: "apexcharts-data-labels"
                                    });
                                    n.forEach((function (s, n) {
                                        var h = s[0],
                                            c = s[1],
                                            d = s[2],
                                            u = s[3],
                                            g = i.drawRect(h, c, d - h, u - c, 0, "#fff", 1, e.strokeWidth, l.config.plotOptions.treemap.useFillColorAsStroke ? f : l.globals.stroke.colors[o]);
                                        g.attr({
                                            cx: h,
                                            cy: c,
                                            index: o,
                                            i: o,
                                            j: n,
                                            width: d - h,
                                            height: u - c
                                        });
                                        var p = e.helpers.getShadeColor(l.config.chart.type, o, n, e.negRange),
                                            f = p.color;
                                        void 0 !== l.config.series[o].data[n] && l.config.series[o].data[n].fillColor && (f = l.config.series[o].data[n].fillColor);
                                        var v = a.fillPath({
                                            color: f,
                                            seriesNumber: o,
                                            dataPointIndex: n
                                        });
                                        g.node.classList.add("apexcharts-treemap-rect"), g.attr({
                                            fill: v
                                        }), e.helpers.addListeners(g);
                                        var x = {
                                                x: h + (d - h) / 2,
                                                y: c + (u - c) / 2,
                                                width: 0,
                                                height: 0
                                            },
                                            m = {
                                                x: h,
                                                y: c,
                                                width: d - h,
                                                height: u - c
                                            };
                                        if (l.config.chart.animations.enabled && !l.globals.dataChanged) {
                                            var b = 1;
                                            l.globals.resized || (b = l.config.chart.animations.speed), e.animateTreemap(g, x, m, b)
                                        }
                                        if (l.globals.dataChanged) {
                                            var y = 1;
                                            e.dynamicAnim.enabled && l.globals.shouldAnimate && (y = e.dynamicAnim.speed, l.globals.previousPaths[o] && l.globals.previousPaths[o][n] && l.globals.previousPaths[o][n].rect && (x = l.globals.previousPaths[o][n].rect), e.animateTreemap(g, x, m, y))
                                        }
                                        var w = e.getFontSize(s),
                                            A = l.config.dataLabels.formatter(e.labels[o][n], {
                                                value: l.globals.series[o][n],
                                                seriesIndex: o,
                                                dataPointIndex: n,
                                                w: l
                                            }),
                                            S = e.helpers.calculateDataLabels({
                                                text: A,
                                                x: (h + d) / 2,
                                                y: (c + u) / 2 + e.strokeWidth / 2 + w / 3,
                                                i: o,
                                                j: n,
                                                colorProps: p,
                                                fontSize: w,
                                                series: t
                                            });
                                        l.config.dataLabels.enabled && S && e.rotateToFitLabel(S, A, h, c, d, u), r.add(g), null !== S && r.add(S)
                                    })), r.add(c), s.add(r)
                                })), s
                            }
                        }, {
                            key: "getFontSize",
                            value: function (t) {
                                var e, l, i = this.w,
                                    a = function t(e) {
                                        var l, i = 0;
                                        if (Array.isArray(e[0]))
                                            for (l = 0; l < e.length; l++) i += t(e[l]);
                                        else
                                            for (l = 0; l < e.length; l++) i += e[l].length;
                                        return i
                                    }(this.labels) / function t(e) {
                                        var l, i = 0;
                                        if (Array.isArray(e[0]))
                                            for (l = 0; l < e.length; l++) i += t(e[l]);
                                        else
                                            for (l = 0; l < e.length; l++) i += 1;
                                        return i
                                    }(this.labels);
                                return e = (t[2] - t[0]) * (t[3] - t[1]), l = Math.pow(e, .5), Math.min(l / a, parseInt(i.config.dataLabels.style.fontSize, 10))
                            }
                        }, {
                            key: "rotateToFitLabel",
                            value: function (t, e, l, i, a, s) {
                                var n = new w(this.ctx),
                                    o = n.getTextRects(e);
                                if (o.width + 5 > a - l && o.width <= s - i) {
                                    var r = n.rotateAroundCenter(t.node);
                                    t.node.setAttribute("transform", "rotate(-90 ".concat(r.x, " ").concat(r.y, ")"))
                                }
                            }
                        }, {
                            key: "animateTreemap",
                            value: function (t, e, l, i) {
                                var a = new b(this.ctx);
                                a.animateRect(t, {
                                    x: e.x,
                                    y: e.y,
                                    width: e.width,
                                    height: e.height
                                }, {
                                    x: l.x,
                                    y: l.y,
                                    width: l.width,
                                    height: l.height
                                }, i, (function () {
                                    a.animationCompleted(t)
                                }))
                            }
                        }]), t
                    }(),
                    Nt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC
                        }
                        return h(t, [{
                            key: "calculateTimeScaleTicks",
                            value: function (t, e) {
                                var l = this,
                                    i = this.w;
                                if (i.globals.allSeriesCollapsed) return i.globals.labels = [], i.globals.timescaleLabels = [], [];
                                var a = new Y(this.ctx),
                                    n = (e - t) / 864e5;
                                this.determineInterval(n), i.globals.disableZoomIn = !1, i.globals.disableZoomOut = !1, n < .00011574074074074075 ? i.globals.disableZoomIn = !0 : n > 5e4 && (i.globals.disableZoomOut = !0);
                                var o = a.getTimeUnitsfromTimestamp(t, e, this.utc),
                                    r = i.globals.gridWidth / n,
                                    h = r / 24,
                                    c = h / 60,
                                    d = c / 60,
                                    u = Math.floor(24 * n),
                                    g = Math.floor(1440 * n),
                                    p = Math.floor(86400 * n),
                                    f = Math.floor(n),
                                    v = Math.floor(n / 30),
                                    x = Math.floor(n / 365),
                                    m = {
                                        minMillisecond: o.minMillisecond,
                                        minSecond: o.minSecond,
                                        minMinute: o.minMinute,
                                        minHour: o.minHour,
                                        minDate: o.minDate,
                                        minMonth: o.minMonth,
                                        minYear: o.minYear
                                    },
                                    b = {
                                        firstVal: m,
                                        currentMillisecond: m.minMillisecond,
                                        currentSecond: m.minSecond,
                                        currentMinute: m.minMinute,
                                        currentHour: m.minHour,
                                        currentMonthDate: m.minDate,
                                        currentDate: m.minDate,
                                        currentMonth: m.minMonth,
                                        currentYear: m.minYear,
                                        daysWidthOnXAxis: r,
                                        hoursWidthOnXAxis: h,
                                        minutesWidthOnXAxis: c,
                                        secondsWidthOnXAxis: d,
                                        numberOfSeconds: p,
                                        numberOfMinutes: g,
                                        numberOfHours: u,
                                        numberOfDays: f,
                                        numberOfMonths: v,
                                        numberOfYears: x
                                    };
                                switch (this.tickInterval) {
                                    case "years":
                                        this.generateYearScale(b);
                                        break;
                                    case "months":
                                    case "half_year":
                                        this.generateMonthScale(b);
                                        break;
                                    case "months_days":
                                    case "months_fortnight":
                                    case "days":
                                    case "week_days":
                                        this.generateDayScale(b);
                                        break;
                                    case "hours":
                                        this.generateHourScale(b);
                                        break;
                                    case "minutes_fives":
                                    case "minutes":
                                        this.generateMinuteScale(b);
                                        break;
                                    case "seconds_tens":
                                    case "seconds_fives":
                                    case "seconds":
                                        this.generateSecondScale(b)
                                }
                                var y = this.timeScaleArray.map((function (t) {
                                    var e = {
                                        position: t.position,
                                        unit: t.unit,
                                        year: t.year,
                                        day: t.day ? t.day : 1,
                                        hour: t.hour ? t.hour : 0,
                                        month: t.month + 1
                                    };
                                    return "month" === t.unit ? s(s({}, e), {}, {
                                        day: 1,
                                        value: t.value + 1
                                    }) : "day" === t.unit || "hour" === t.unit ? s(s({}, e), {}, {
                                        value: t.value
                                    }) : "minute" === t.unit ? s(s({}, e), {}, {
                                        value: t.value,
                                        minute: t.value
                                    }) : "second" === t.unit ? s(s({}, e), {}, {
                                        value: t.value,
                                        minute: t.minute,
                                        second: t.second
                                    }) : t
                                }));
                                return y.filter((function (t) {
                                    var e = 1,
                                        a = Math.ceil(i.globals.gridWidth / 120),
                                        s = t.value;
                                    void 0 !== i.config.xaxis.tickAmount && (a = i.config.xaxis.tickAmount), y.length > a && (e = Math.floor(y.length / a));
                                    var n = !1,
                                        o = !1;
                                    switch (l.tickInterval) {
                                        case "years":
                                            "year" === t.unit && (n = !0);
                                            break;
                                        case "half_year":
                                            e = 7, "year" === t.unit && (n = !0);
                                            break;
                                        case "months":
                                            e = 1, "year" === t.unit && (n = !0);
                                            break;
                                        case "months_fortnight":
                                            e = 15, "year" !== t.unit && "month" !== t.unit || (n = !0), 30 === s && (o = !0);
                                            break;
                                        case "months_days":
                                            e = 10, "month" === t.unit && (n = !0), 30 === s && (o = !0);
                                            break;
                                        case "week_days":
                                            e = 8, "month" === t.unit && (n = !0);
                                            break;
                                        case "days":
                                            e = 1, "month" === t.unit && (n = !0);
                                            break;
                                        case "hours":
                                            "day" === t.unit && (n = !0);
                                            break;
                                        case "minutes_fives":
                                        case "seconds_fives":
                                            s % 5 != 0 && (o = !0);
                                            break;
                                        case "seconds_tens":
                                            s % 10 != 0 && (o = !0)
                                    }
                                    if ("hours" === l.tickInterval || "minutes_fives" === l.tickInterval || "seconds_tens" === l.tickInterval || "seconds_fives" === l.tickInterval) {
                                        if (!o) return !0
                                    } else if ((s % e == 0 || n) && !o) return !0
                                }))
                            }
                        }, {
                            key: "recalcDimensionsBasedOnFormat",
                            value: function (t, e) {
                                var l = this.w,
                                    i = this.formatDates(t),
                                    a = this.removeOverlappingTS(i);
                                l.globals.timescaleLabels = a.slice(), new ct(this.ctx).plotCoords()
                            }
                        }, {
                            key: "determineInterval",
                            value: function (t) {
                                var e = 24 * t,
                                    l = 60 * e;
                                switch (!0) {
                                    case t / 365 > 5:
                                        this.tickInterval = "years";
                                        break;
                                    case t > 800:
                                        this.tickInterval = "half_year";
                                        break;
                                    case t > 180:
                                        this.tickInterval = "months";
                                        break;
                                    case t > 90:
                                        this.tickInterval = "months_fortnight";
                                        break;
                                    case t > 60:
                                        this.tickInterval = "months_days";
                                        break;
                                    case t > 30:
                                        this.tickInterval = "week_days";
                                        break;
                                    case t > 2:
                                        this.tickInterval = "days";
                                        break;
                                    case e > 2.4:
                                        this.tickInterval = "hours";
                                        break;
                                    case l > 15:
                                        this.tickInterval = "minutes_fives";
                                        break;
                                    case l > 5:
                                        this.tickInterval = "minutes";
                                        break;
                                    case l > 1:
                                        this.tickInterval = "seconds_tens";
                                        break;
                                    case 60 * l > 20:
                                        this.tickInterval = "seconds_fives";
                                        break;
                                    default:
                                        this.tickInterval = "seconds"
                                }
                            }
                        }, {
                            key: "generateYearScale",
                            value: function (t) {
                                var e = t.firstVal,
                                    l = t.currentMonth,
                                    i = t.currentYear,
                                    a = t.daysWidthOnXAxis,
                                    s = t.numberOfYears,
                                    n = e.minYear,
                                    o = 0,
                                    r = new Y(this.ctx),
                                    h = "year";
                                if (e.minDate > 1 || e.minMonth > 0) {
                                    var c = r.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);
                                    o = (r.determineDaysOfYear(e.minYear) - c + 1) * a, n = e.minYear + 1, this.timeScaleArray.push({
                                        position: o,
                                        value: n,
                                        unit: h,
                                        year: n,
                                        month: m.monthMod(l + 1)
                                    })
                                } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({
                                    position: o,
                                    value: n,
                                    unit: h,
                                    year: i,
                                    month: m.monthMod(l + 1)
                                });
                                for (var d = n, u = o, g = 0; g < s; g++) d++, u = r.determineDaysOfYear(d - 1) * a + u, this.timeScaleArray.push({
                                    position: u,
                                    value: d,
                                    unit: h,
                                    year: d,
                                    month: 1
                                })
                            }
                        }, {
                            key: "generateMonthScale",
                            value: function (t) {
                                var e = t.firstVal,
                                    l = t.currentMonthDate,
                                    i = t.currentMonth,
                                    a = t.currentYear,
                                    s = t.daysWidthOnXAxis,
                                    n = t.numberOfMonths,
                                    o = i,
                                    r = 0,
                                    h = new Y(this.ctx),
                                    c = "month",
                                    d = 0;
                                if (e.minDate > 1) {
                                    r = (h.determineDaysOfMonths(i + 1, e.minYear) - l + 1) * s, o = m.monthMod(i + 1);
                                    var u = a + d,
                                        g = m.monthMod(o),
                                        p = o;
                                    0 === o && (c = "year", p = u, g = 1, u += d += 1), this.timeScaleArray.push({
                                        position: r,
                                        value: p,
                                        unit: c,
                                        year: u,
                                        month: g
                                    })
                                } else this.timeScaleArray.push({
                                    position: r,
                                    value: o,
                                    unit: c,
                                    year: a,
                                    month: m.monthMod(i)
                                });
                                for (var f = o + 1, v = r, x = 0, b = 1; x < n; x++, b++) {
                                    0 === (f = m.monthMod(f)) ? (c = "year", d += 1) : c = "month";
                                    var y = this._getYear(a, f, d);
                                    v = h.determineDaysOfMonths(f, y) * s + v;
                                    var w = 0 === f ? y : f;
                                    this.timeScaleArray.push({
                                        position: v,
                                        value: w,
                                        unit: c,
                                        year: y,
                                        month: 0 === f ? 1 : f
                                    }), f++
                                }
                            }
                        }, {
                            key: "generateDayScale",
                            value: function (t) {
                                var e = t.firstVal,
                                    l = t.currentMonth,
                                    i = t.currentYear,
                                    a = t.hoursWidthOnXAxis,
                                    s = t.numberOfDays,
                                    n = new Y(this.ctx),
                                    o = "day",
                                    r = e.minDate + 1,
                                    h = r,
                                    c = function (t, e, l) {
                                        return t > n.determineDaysOfMonths(e + 1, l) ? (h = 1, o = "month", u = e += 1, e) : e
                                    },
                                    d = (24 - e.minHour) * a,
                                    u = r,
                                    g = c(h, l, i);
                                0 === e.minHour && 1 === e.minDate ? (d = 0, u = m.monthMod(e.minMonth), o = "month", h = e.minDate, s++) : 1 !== e.minDate && 0 === e.minHour && 0 === e.minMinute && (d = 0, r = e.minDate, u = r, g = c(h = r, l, i)), this.timeScaleArray.push({
                                    position: d,
                                    value: u,
                                    unit: o,
                                    year: this._getYear(i, g, 0),
                                    month: m.monthMod(g),
                                    day: h
                                });
                                for (var p = d, f = 0; f < s; f++) {
                                    o = "day", g = c(h += 1, g, this._getYear(i, g, 0));
                                    var v = this._getYear(i, g, 0);
                                    p = 24 * a + p;
                                    var x = 1 === h ? m.monthMod(g) : h;
                                    this.timeScaleArray.push({
                                        position: p,
                                        value: x,
                                        unit: o,
                                        year: v,
                                        month: m.monthMod(g),
                                        day: x
                                    })
                                }
                            }
                        }, {
                            key: "generateHourScale",
                            value: function (t) {
                                var e = t.firstVal,
                                    l = t.currentDate,
                                    i = t.currentMonth,
                                    a = t.currentYear,
                                    s = t.minutesWidthOnXAxis,
                                    n = t.numberOfHours,
                                    o = new Y(this.ctx),
                                    r = "hour",
                                    h = function (t, e) {
                                        return t > o.determineDaysOfMonths(e + 1, a) && (f = 1, e += 1), {
                                            month: e,
                                            date: f
                                        }
                                    },
                                    c = function (t, e) {
                                        return t > o.determineDaysOfMonths(e + 1, a) ? e += 1 : e
                                    },
                                    d = 60 - (e.minMinute + e.minSecond / 60),
                                    u = d * s,
                                    g = e.minHour + 1,
                                    p = g + 1;
                                60 === d && (u = 0, p = (g = e.minHour) + 1);
                                var f = l,
                                    v = c(f, i);
                                this.timeScaleArray.push({
                                    position: u,
                                    value: g,
                                    unit: r,
                                    day: f,
                                    hour: p,
                                    year: a,
                                    month: m.monthMod(v)
                                });
                                for (var x = u, b = 0; b < n; b++) {
                                    r = "hour", p >= 24 && (p = 0, r = "day", v = h(f += 1, v).month, v = c(f, v));
                                    var y = this._getYear(a, v, 0);
                                    x = 0 === p && 0 === b ? d * s : 60 * s + x;
                                    var w = 0 === p ? f : p;
                                    this.timeScaleArray.push({
                                        position: x,
                                        value: w,
                                        unit: r,
                                        hour: p,
                                        day: f,
                                        year: y,
                                        month: m.monthMod(v)
                                    }), p++
                                }
                            }
                        }, {
                            key: "generateMinuteScale",
                            value: function (t) {
                                for (var e = t.currentMillisecond, l = t.currentSecond, i = t.currentMinute, a = t.currentHour, s = t.currentDate, n = t.currentMonth, o = t.currentYear, r = t.minutesWidthOnXAxis, h = t.secondsWidthOnXAxis, c = t.numberOfMinutes, d = i + 1, u = s, g = n, p = o, f = a, v = (60 - l - e / 1e3) * h, x = 0; x < c; x++) d >= 60 && (d = 0, 24 === (f += 1) && (f = 0)), this.timeScaleArray.push({
                                    position: v,
                                    value: d,
                                    unit: "minute",
                                    hour: f,
                                    minute: d,
                                    day: u,
                                    year: this._getYear(p, g, 0),
                                    month: m.monthMod(g)
                                }), v += r, d++
                            }
                        }, {
                            key: "generateSecondScale",
                            value: function (t) {
                                for (var e = t.currentMillisecond, l = t.currentSecond, i = t.currentMinute, a = t.currentHour, s = t.currentDate, n = t.currentMonth, o = t.currentYear, r = t.secondsWidthOnXAxis, h = t.numberOfSeconds, c = l + 1, d = i, u = s, g = n, p = o, f = a, v = (1e3 - e) / 1e3 * r, x = 0; x < h; x++) c >= 60 && (c = 0, ++d >= 60 && (d = 0, 24 == ++f && (f = 0))), this.timeScaleArray.push({
                                    position: v,
                                    value: c,
                                    unit: "second",
                                    hour: f,
                                    minute: d,
                                    second: c,
                                    day: u,
                                    year: this._getYear(p, g, 0),
                                    month: m.monthMod(g)
                                }), v += r, c++
                            }
                        }, {
                            key: "createRawDateString",
                            value: function (t, e) {
                                var l = t.year;
                                return 0 === t.month && (t.month = 1), l += "-" + ("0" + t.month.toString()).slice(-2), "day" === t.unit ? l += "day" === t.unit ? "-" + ("0" + e).slice(-2) : "-01" : l += "-" + ("0" + (t.day ? t.day : "1")).slice(-2), "hour" === t.unit ? l += "hour" === t.unit ? "T" + ("0" + e).slice(-2) : "T00" : l += "T" + ("0" + (t.hour ? t.hour : "0")).slice(-2), "minute" === t.unit ? l += ":" + ("0" + e).slice(-2) : l += ":" + (t.minute ? ("0" + t.minute).slice(-2) : "00"), "second" === t.unit ? l += ":" + ("0" + e).slice(-2) : l += ":00", this.utc && (l += ".000Z"), l
                            }
                        }, {
                            key: "formatDates",
                            value: function (t) {
                                var e = this,
                                    l = this.w;
                                return t.map((function (t) {
                                    var i = t.value.toString(),
                                        a = new Y(e.ctx),
                                        s = e.createRawDateString(t, i),
                                        n = a.getDate(a.parseDate(s));
                                    if (e.utc || (n = a.getDate(a.parseDateWithTimezone(s))), void 0 === l.config.xaxis.labels.format) {
                                        var o = "dd MMM",
                                            r = l.config.xaxis.labels.datetimeFormatter;
                                        "year" === t.unit && (o = r.year), "month" === t.unit && (o = r.month), "day" === t.unit && (o = r.day), "hour" === t.unit && (o = r.hour), "minute" === t.unit && (o = r.minute), "second" === t.unit && (o = r.second), i = a.formatDate(n, o)
                                    } else i = a.formatDate(n, l.config.xaxis.labels.format);
                                    return {
                                        dateString: s,
                                        position: t.position,
                                        value: i,
                                        unit: t.unit,
                                        year: t.year,
                                        month: t.month
                                    }
                                }))
                            }
                        }, {
                            key: "removeOverlappingTS",
                            value: function (t) {
                                var e, l = this,
                                    i = new w(this.ctx),
                                    a = !1;
                                t.length > 0 && t[0].value && t.every((function (e) {
                                    return e.value.length === t[0].value.length
                                })) && (a = !0, e = i.getTextRects(t[0].value).width);
                                var s = 0,
                                    n = t.map((function (n, o) {
                                        if (o > 0 && l.w.config.xaxis.labels.hideOverlappingLabels) {
                                            var r = a ? e : i.getTextRects(t[s].value).width,
                                                h = t[s].position;
                                            return n.position > h + r + 10 ? (s = o, n) : null
                                        }
                                        return n
                                    }));
                                return n.filter((function (t) {
                                    return null !== t
                                }))
                            }
                        }, {
                            key: "_getYear",
                            value: function (t, e, l) {
                                return t + Math.floor(e / 12) + l
                            }
                        }]), t
                    }(),
                    Xt = function () {
                        function t(e, l) {
                            o(this, t), this.ctx = l, this.w = l.w, this.el = e
                        }
                        return h(t, [{
                            key: "setupElements",
                            value: function () {
                                var t = this.w.globals,
                                    e = this.w.config,
                                    l = e.chart.type;
                                t.axisCharts = ["line", "area", "bar", "rangeBar", "candlestick", "boxPlot", "scatter", "bubble", "radar", "heatmap", "treemap"].indexOf(l) > -1, t.xyCharts = ["line", "area", "bar", "rangeBar", "candlestick", "boxPlot", "scatter", "bubble"].indexOf(l) > -1, t.isBarHorizontal = ("bar" === e.chart.type || "rangeBar" === e.chart.type || "boxPlot" === e.chart.type) && e.plotOptions.bar.horizontal, t.chartClass = ".apexcharts" + t.chartID, t.dom.baseEl = this.el, t.dom.elWrap = document.createElement("div"), w.setAttrs(t.dom.elWrap, {
                                    id: t.chartClass.substring(1),
                                    class: "apexcharts-canvas " + t.chartClass.substring(1)
                                }), this.el.appendChild(t.dom.elWrap), t.dom.Paper = new window.SVG.Doc(t.dom.elWrap), t.dom.Paper.attr({
                                    class: "apexcharts-svg",
                                    "xmlns:data": "ApexChartsNS",
                                    transform: "translate(".concat(e.chart.offsetX, ", ").concat(e.chart.offsetY, ")")
                                }), t.dom.Paper.node.style.background = e.chart.background, this.setSVGDimensions(), t.dom.elGraphical = t.dom.Paper.group().attr({
                                    class: "apexcharts-inner apexcharts-graphical"
                                }), t.dom.elAnnotations = t.dom.Paper.group().attr({
                                    class: "apexcharts-annotations"
                                }), t.dom.elDefs = t.dom.Paper.defs(), t.dom.elLegendWrap = document.createElement("div"), t.dom.elLegendWrap.classList.add("apexcharts-legend"), t.dom.elWrap.appendChild(t.dom.elLegendWrap), t.dom.Paper.add(t.dom.elGraphical), t.dom.elGraphical.add(t.dom.elDefs)
                            }
                        }, {
                            key: "plotChartType",
                            value: function (t, e) {
                                var l = this.w,
                                    i = l.config,
                                    a = l.globals,
                                    s = {
                                        series: [],
                                        i: []
                                    },
                                    n = {
                                        series: [],
                                        i: []
                                    },
                                    o = {
                                        series: [],
                                        i: []
                                    },
                                    r = {
                                        series: [],
                                        i: []
                                    },
                                    h = {
                                        series: [],
                                        i: []
                                    },
                                    c = {
                                        series: [],
                                        i: []
                                    },
                                    d = {
                                        series: [],
                                        i: []
                                    };
                                a.series.map((function (e, u) {
                                    var g = 0;
                                    void 0 !== t[u].type ? ("column" === t[u].type || "bar" === t[u].type ? (a.series.length > 1 && i.plotOptions.bar.horizontal && console.warn("Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"), h.series.push(e), h.i.push(u), g++, l.globals.columnSeries = h.series) : "area" === t[u].type ? (n.series.push(e), n.i.push(u), g++) : "line" === t[u].type ? (s.series.push(e), s.i.push(u), g++) : "scatter" === t[u].type ? (o.series.push(e), o.i.push(u)) : "bubble" === t[u].type ? (r.series.push(e), r.i.push(u), g++) : "candlestick" === t[u].type ? (c.series.push(e), c.i.push(u), g++) : "boxPlot" === t[u].type ? (d.series.push(e), d.i.push(u), g++) : console.warn("You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble"), g > 1 && (a.comboCharts = !0)) : (s.series.push(e), s.i.push(u))
                                }));
                                var u = new Tt(this.ctx, e),
                                    g = new St(this.ctx, e);
                                this.ctx.pie = new Mt(this.ctx);
                                var p = new Et(this.ctx);
                                this.ctx.rangeBar = new F(this.ctx, e);
                                var f = new zt(this.ctx),
                                    v = [];
                                if (a.comboCharts) {
                                    if (n.series.length > 0 && v.push(u.draw(n.series, "area", n.i)), h.series.length > 0)
                                        if (l.config.chart.stacked) {
                                            var x = new At(this.ctx, e);
                                            v.push(x.draw(h.series, h.i))
                                        } else this.ctx.bar = new R(this.ctx, e), v.push(this.ctx.bar.draw(h.series, h.i));
                                    if (s.series.length > 0 && v.push(u.draw(s.series, "line", s.i)), c.series.length > 0 && v.push(g.draw(c.series, c.i)), d.series.length > 0 && v.push(g.draw(d.series, d.i)), o.series.length > 0) {
                                        var m = new Tt(this.ctx, e, !0);
                                        v.push(m.draw(o.series, "scatter", o.i))
                                    }
                                    if (r.series.length > 0) {
                                        var b = new Tt(this.ctx, e, !0);
                                        v.push(b.draw(r.series, "bubble", r.i))
                                    }
                                } else switch (i.chart.type) {
                                    case "line":
                                        v = u.draw(a.series, "line");
                                        break;
                                    case "area":
                                        v = u.draw(a.series, "area");
                                        break;
                                    case "bar":
                                        i.chart.stacked ? v = new At(this.ctx, e).draw(a.series) : (this.ctx.bar = new R(this.ctx, e), v = this.ctx.bar.draw(a.series));
                                        break;
                                    case "candlestick":
                                    case "boxPlot":
                                        v = new St(this.ctx, e).draw(a.series);
                                        break;
                                    case "rangeBar":
                                        v = this.ctx.rangeBar.draw(a.series);
                                        break;
                                    case "heatmap":
                                        v = new Lt(this.ctx, e).draw(a.series);
                                        break;
                                    case "treemap":
                                        v = new Dt(this.ctx, e).draw(a.series);
                                        break;
                                    case "pie":
                                    case "donut":
                                    case "polarArea":
                                        v = this.ctx.pie.draw(a.series);
                                        break;
                                    case "radialBar":
                                        v = p.draw(a.series);
                                        break;
                                    case "radar":
                                        v = f.draw(a.series);
                                        break;
                                    default:
                                        v = u.draw(a.series)
                                }
                                return v
                            }
                        }, {
                            key: "setSVGDimensions",
                            value: function () {
                                var t = this.w.globals,
                                    e = this.w.config;
                                t.svgWidth = e.chart.width, t.svgHeight = e.chart.height;
                                var l = m.getDimensions(this.el),
                                    i = e.chart.width.toString().split(/[0-9]+/g).pop();
                                "%" === i ? m.isNumber(l[0]) && (0 === l[0].width && (l = m.getDimensions(this.el.parentNode)), t.svgWidth = l[0] * parseInt(e.chart.width, 10) / 100) : "px" !== i && "" !== i || (t.svgWidth = parseInt(e.chart.width, 10));
                                var a = e.chart.height.toString().split(/[0-9]+/g).pop();
                                if ("auto" !== t.svgHeight && "" !== t.svgHeight)
                                    if ("%" === a) {
                                        var s = m.getDimensions(this.el.parentNode);
                                        t.svgHeight = s[1] * parseInt(e.chart.height, 10) / 100
                                    } else t.svgHeight = parseInt(e.chart.height, 10);
                                else t.axisCharts ? t.svgHeight = t.svgWidth / 1.61 : t.svgHeight = t.svgWidth / 1.2;
                                if (t.svgWidth < 0 && (t.svgWidth = 0), t.svgHeight < 0 && (t.svgHeight = 0), w.setAttrs(t.dom.Paper.node, {
                                        width: t.svgWidth,
                                        height: t.svgHeight
                                    }), "%" !== a) {
                                    var n = e.chart.sparkline.enabled ? 0 : t.axisCharts ? e.chart.parentHeightOffset : 0;
                                    t.dom.Paper.node.parentNode.parentNode.style.minHeight = t.svgHeight + n + "px"
                                }
                                t.dom.elWrap.style.width = t.svgWidth + "px", t.dom.elWrap.style.height = t.svgHeight + "px"
                            }
                        }, {
                            key: "shiftGraphPosition",
                            value: function () {
                                var t = this.w.globals,
                                    e = t.translateY,
                                    l = {
                                        transform: "translate(" + t.translateX + ", " + e + ")"
                                    };
                                w.setAttrs(t.dom.elGraphical.node, l)
                            }
                        }, {
                            key: "resizeNonAxisCharts",
                            value: function () {
                                var t = this.w,
                                    e = t.globals,
                                    l = 0,
                                    i = t.config.chart.sparkline.enabled ? 1 : 15;
                                i += t.config.grid.padding.bottom, "top" !== t.config.legend.position && "bottom" !== t.config.legend.position || !t.config.legend.show || t.config.legend.floating || (l = new ut(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
                                var a = t.globals.dom.baseEl.querySelector(".apexcharts-radialbar, .apexcharts-pie"),
                                    s = 2.05 * t.globals.radialSize;
                                if (a && !t.config.chart.sparkline.enabled && 0 !== t.config.plotOptions.radialBar.startAngle) {
                                    var n = m.getBoundingClientRect(a);
                                    s = n.bottom;
                                    var o = n.bottom - n.top;
                                    s = Math.max(2.05 * t.globals.radialSize, o)
                                }
                                var r = s + e.translateY + l + i;
                                e.dom.elLegendForeign && e.dom.elLegendForeign.setAttribute("height", r), e.dom.elWrap.style.height = r + "px", w.setAttrs(e.dom.Paper.node, {
                                    height: r
                                }), e.dom.Paper.node.parentNode.parentNode.style.minHeight = r + "px"
                            }
                        }, {
                            key: "coreCalculations",
                            value: function () {
                                new J(this.ctx).init()
                            }
                        }, {
                            key: "resetGlobals",
                            value: function () {
                                var t = this,
                                    e = function () {
                                        return t.w.config.series.map((function (t) {
                                            return []
                                        }))
                                    },
                                    l = new W,
                                    i = this.w.globals;
                                l.initGlobalVars(i), i.seriesXvalues = e(), i.seriesYvalues = e()
                            }
                        }, {
                            key: "isMultipleY",
                            value: function () {
                                if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.globals.isMultipleYAxis = !0, !0
                            }
                        }, {
                            key: "xySettings",
                            value: function () {
                                var t = null,
                                    e = this.w;
                                if (e.globals.axisCharts) {
                                    if ("back" === e.config.xaxis.crosshairs.position && new lt(this.ctx).drawXCrosshairs(), "back" === e.config.yaxis[0].crosshairs.position && new lt(this.ctx).drawYCrosshairs(), "datetime" === e.config.xaxis.type && void 0 === e.config.xaxis.labels.formatter) {
                                        this.ctx.timeScale = new Nt(this.ctx);
                                        var l = [];
                                        isFinite(e.globals.minX) && isFinite(e.globals.maxX) && !e.globals.isBarHorizontal ? l = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minX, e.globals.maxX) : e.globals.isBarHorizontal && (l = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minY, e.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(l)
                                    }
                                    t = new k(this.ctx).getCalculatedRatios()
                                }
                                return t
                            }
                        }, {
                            key: "updateSourceChart",
                            value: function (t) {
                                this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({
                                    chart: {
                                        selection: {
                                            xaxis: {
                                                min: t.w.globals.minX,
                                                max: t.w.globals.maxX
                                            }
                                        }
                                    }
                                }, !1, !1)
                            }
                        }, {
                            key: "setupBrushHandler",
                            value: function () {
                                var t = this,
                                    e = this.w;
                                if (e.config.chart.brush.enabled && "function" != typeof e.config.chart.events.selection) {
                                    var l = e.config.chart.brush.targets || [e.config.chart.brush.target];
                                    l.forEach((function (e) {
                                        var l = ApexCharts.getChartByID(e);
                                        l.w.globals.brushSource = t.ctx, "function" != typeof l.w.config.chart.events.zoomed && (l.w.config.chart.events.zoomed = function () {
                                            t.updateSourceChart(l)
                                        }), "function" != typeof l.w.config.chart.events.scrolled && (l.w.config.chart.events.scrolled = function () {
                                            t.updateSourceChart(l)
                                        })
                                    })), e.config.chart.events.selection = function (t, i) {
                                        l.forEach((function (t) {
                                            var l = ApexCharts.getChartByID(t),
                                                a = m.clone(e.config.yaxis);
                                            if (e.config.chart.brush.autoScaleYaxis && 1 === l.w.globals.series.length) {
                                                var n = new K(l);
                                                a = n.autoScaleY(l, a, i)
                                            }
                                            var o = l.w.config.yaxis.reduce((function (t, e, i) {
                                                return [].concat(v(t), [s(s({}, l.w.config.yaxis[i]), {}, {
                                                    min: a[0].min,
                                                    max: a[0].max
                                                })])
                                            }), []);
                                            l.ctx.updateHelpers._updateOptions({
                                                xaxis: {
                                                    min: i.xaxis.min,
                                                    max: i.xaxis.max
                                                },
                                                yaxis: o
                                            }, !1, !1, !1, !1)
                                        }))
                                    }
                                }
                            }
                        }]), t
                    }(),
                    Rt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "_updateOptions",
                            value: function (t) {
                                var e = this,
                                    l = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                                    i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                    a = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                                    s = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                                return new Promise((function (o) {
                                    var r = [e.ctx];
                                    a && (r = e.ctx.getSyncedCharts()), e.ctx.w.globals.isExecCalled && (r = [e.ctx], e.ctx.w.globals.isExecCalled = !1), r.forEach((function (a, h) {
                                        var c = a.w;
                                        return c.globals.shouldAnimate = i, l || (c.globals.resized = !0, c.globals.dataChanged = !0, i && a.series.getPreviousPaths()), t && "object" === n(t) && (a.config = new B(t), t = k.extendArrayProps(a.config, t, c), a.w.globals.chartID !== e.ctx.w.globals.chartID && delete t.series, c.config = m.extend(c.config, t), s && (c.globals.lastXAxis = t.xaxis ? m.clone(t.xaxis) : [], c.globals.lastYAxis = t.yaxis ? m.clone(t.yaxis) : [], c.globals.initialConfig = m.extend({}, c.config), c.globals.initialSeries = m.clone(c.config.series))), a.update(t).then((function () {
                                            h === r.length - 1 && o(a)
                                        }))
                                    }))
                                }))
                            }
                        }, {
                            key: "_updateSeries",
                            value: function (t, e) {
                                var l = this,
                                    i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                                return new Promise((function (a) {
                                    var s, n = l.w;
                                    return n.globals.shouldAnimate = e, n.globals.dataChanged = !0, e && l.ctx.series.getPreviousPaths(), n.globals.axisCharts ? (0 === (s = t.map((function (t, e) {
                                        return l._extendSeries(t, e)
                                    }))).length && (s = [{
                                        data: []
                                    }]), n.config.series = s) : n.config.series = t.slice(), i && (n.globals.initialSeries = m.clone(n.config.series)), l.ctx.update().then((function () {
                                        a(l.ctx)
                                    }))
                                }))
                            }
                        }, {
                            key: "_extendSeries",
                            value: function (t, e) {
                                var l = this.w,
                                    i = l.config.series[e];
                                return s(s({}, l.config.series[e]), {}, {
                                    name: t.name ? t.name : i && i.name,
                                    color: t.color ? t.color : i && i.color,
                                    type: t.type ? t.type : i && i.type,
                                    data: t.data ? t.data : i && i.data
                                })
                            }
                        }, {
                            key: "toggleDataPointSelection",
                            value: function (t, e) {
                                var l = this.w,
                                    i = null,
                                    a = ".apexcharts-series[data\\:realIndex='".concat(t, "']");
                                return l.globals.axisCharts ? i = l.globals.dom.Paper.select("".concat(a, " path[j='").concat(e, "'], ").concat(a, " circle[j='").concat(e, "'], ").concat(a, " rect[j='").concat(e, "']")).members[0] : void 0 === e && (i = l.globals.dom.Paper.select("".concat(a, " path[j='").concat(t, "']")).members[0], "pie" !== l.config.chart.type && "polarArea" !== l.config.chart.type && "donut" !== l.config.chart.type || this.ctx.pie.pieClicked(t)), i ? (new w(this.ctx).pathMouseDown(i, null), i.node ? i.node : null) : (console.warn("toggleDataPointSelection: Element not found"), null)
                            }
                        }, {
                            key: "forceXAxisUpdate",
                            value: function (t) {
                                var e = this.w;
                                if (["min", "max"].forEach((function (l) {
                                        void 0 !== t.xaxis[l] && (e.config.xaxis[l] = t.xaxis[l], e.globals.lastXAxis[l] = t.xaxis[l])
                                    })), t.xaxis.categories && t.xaxis.categories.length && (e.config.xaxis.categories = t.xaxis.categories), e.config.xaxis.convertedCatToNumeric) {
                                    var l = new H(t);
                                    t = l.convertCatToNumericXaxis(t, this.ctx)
                                }
                                return t
                            }
                        }, {
                            key: "forceYAxisUpdate",
                            value: function (t) {
                                var e = this.w;
                                return e.config.chart.stacked && "100%" === e.config.chart.stackType && (Array.isArray(t.yaxis) ? t.yaxis.forEach((function (e, l) {
                                    t.yaxis[l].min = 0, t.yaxis[l].max = 100
                                })) : (t.yaxis.min = 0, t.yaxis.max = 100)), t
                            }
                        }, {
                            key: "revertDefaultAxisMinMax",
                            value: function (t) {
                                var e = this,
                                    l = this.w,
                                    i = l.globals.lastXAxis,
                                    a = l.globals.lastYAxis;
                                t && t.xaxis && (i = t.xaxis), t && t.yaxis && (a = t.yaxis), l.config.xaxis.min = i.min, l.config.xaxis.max = i.max, l.config.yaxis.map((function (t, i) {
                                    l.globals.zoomed || void 0 !== a[i] ? function (t) {
                                        void 0 !== a[t] && (l.config.yaxis[t].min = a[t].min, l.config.yaxis[t].max = a[t].max)
                                    }(i) : void 0 !== e.ctx.opts.yaxis[i] && (t.min = e.ctx.opts.yaxis[i].min, t.max = e.ctx.opts.yaxis[i].max)
                                }))
                            }
                        }]), t
                    }();
                It = "undefined" != typeof window ? window : void 0, Ot = function (t, e) {
                        var l = (void 0 !== this ? this : t).SVG = function (t) {
                            if (l.supported) return t = new l.Doc(t), l.parser.draw || l.prepare(), t
                        };
                        if (l.ns = "http://www.w3.org/2000/svg", l.xmlns = "http://www.w3.org/2000/xmlns/", l.xlink = "http://www.w3.org/1999/xlink", l.svgjs = "http://svgjs.dev", l.supported = !0, !l.supported) return !1;
                        l.did = 1e3, l.eid = function (t) {
                            return "Svgjs" + d(t) + l.did++
                        }, l.create = function (t) {
                            var l = e.createElementNS(this.ns, t);
                            return l.setAttribute("id", this.eid(t)), l
                        }, l.extend = function () {
                            var t, e;
                            e = (t = [].slice.call(arguments)).pop();
                            for (var i = t.length - 1; i >= 0; i--)
                                if (t[i])
                                    for (var a in e) t[i].prototype[a] = e[a];
                            l.Set && l.Set.inherit && l.Set.inherit()
                        }, l.invent = function (t) {
                            var e = "function" == typeof t.create ? t.create : function () {
                                this.constructor.call(this, l.create(t.create))
                            };
                            return t.inherit && (e.prototype = new t.inherit), t.extend && l.extend(e, t.extend), t.construct && l.extend(t.parent || l.Container, t.construct), e
                        }, l.adopt = function (e) {
                            return e ? e.instance ? e.instance : ((i = "svg" == e.nodeName ? e.parentNode instanceof t.SVGElement ? new l.Nested : new l.Doc : "linearGradient" == e.nodeName ? new l.Gradient("linear") : "radialGradient" == e.nodeName ? new l.Gradient("radial") : l[d(e.nodeName)] ? new(l[d(e.nodeName)]) : new l.Element(e)).type = e.nodeName, i.node = e, e.instance = i, i instanceof l.Doc && i.namespace().defs(), i.setData(JSON.parse(e.getAttribute("svgjs:data")) || {}), i) : null;
                            var i
                        }, l.prepare = function () {
                            var t = e.getElementsByTagName("body")[0],
                                i = (t ? new l.Doc(t) : l.adopt(e.documentElement).nested()).size(2, 0);
                            l.parser = {
                                body: t || e.documentElement,
                                draw: i.style("opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden").node,
                                poly: i.polyline().node,
                                path: i.path().node,
                                native: l.create("svg")
                            }
                        }, l.parser = {
                            native: l.create("svg")
                        }, e.addEventListener("DOMContentLoaded", (function () {
                            l.parser.draw || l.prepare()
                        }), !1), l.regex = {
                            numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
                            hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
                            rgb: /rgb\((\d+),(\d+),(\d+)\)/,
                            reference: /#([a-z0-9\-_]+)/i,
                            transforms: /\)\s*,?\s*/,
                            whitespace: /\s/g,
                            isHex: /^#[a-f0-9]{3,6}$/i,
                            isRgb: /^rgb\(/,
                            isCss: /[^:]+:[^;]+;?/,
                            isBlank: /^(\s+)?$/,
                            isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
                            isPercent: /^-?[\d\.]+%$/,
                            isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
                            delimiter: /[\s,]+/,
                            hyphen: /([^e])\-/gi,
                            pathLetters: /[MLHVCSQTAZ]/gi,
                            isPathLetter: /[MLHVCSQTAZ]/i,
                            numbersWithDots: /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
                            dots: /\./g
                        }, l.utils = {
                            map: function (t, e) {
                                for (var l = t.length, i = [], a = 0; a < l; a++) i.push(e(t[a]));
                                return i
                            },
                            filter: function (t, e) {
                                for (var l = t.length, i = [], a = 0; a < l; a++) e(t[a]) && i.push(t[a]);
                                return i
                            },
                            filterSVGElements: function (e) {
                                return this.filter(e, (function (e) {
                                    return e instanceof t.SVGElement
                                }))
                            }
                        }, l.defaults = {
                            attrs: {
                                "fill-opacity": 1,
                                "stroke-opacity": 1,
                                "stroke-width": 0,
                                "stroke-linejoin": "miter",
                                "stroke-linecap": "butt",
                                fill: "#000000",
                                stroke: "#000000",
                                opacity: 1,
                                x: 0,
                                y: 0,
                                cx: 0,
                                cy: 0,
                                width: 0,
                                height: 0,
                                r: 0,
                                rx: 0,
                                ry: 0,
                                offset: 0,
                                "stop-opacity": 1,
                                "stop-color": "#000000",
                                "font-size": 16,
                                "font-family": "Helvetica, Arial, sans-serif",
                                "text-anchor": "start"
                            }
                        }, l.Color = function (t) {
                            var e, i;
                            this.r = 0, this.g = 0, this.b = 0, t && ("string" == typeof t ? l.regex.isRgb.test(t) ? (e = l.regex.rgb.exec(t.replace(l.regex.whitespace, "")), this.r = parseInt(e[1]), this.g = parseInt(e[2]), this.b = parseInt(e[3])) : l.regex.isHex.test(t) && (e = l.regex.hex.exec(4 == (i = t).length ? ["#", i.substring(1, 2), i.substring(1, 2), i.substring(2, 3), i.substring(2, 3), i.substring(3, 4), i.substring(3, 4)].join("") : i), this.r = parseInt(e[1], 16), this.g = parseInt(e[2], 16), this.b = parseInt(e[3], 16)) : "object" === n(t) && (this.r = t.r, this.g = t.g, this.b = t.b))
                        }, l.extend(l.Color, {
                            toString: function () {
                                return this.toHex()
                            },
                            toHex: function () {
                                return "#" + u(this.r) + u(this.g) + u(this.b)
                            },
                            toRgb: function () {
                                return "rgb(" + [this.r, this.g, this.b].join() + ")"
                            },
                            brightness: function () {
                                return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11
                            },
                            morph: function (t) {
                                return this.destination = new l.Color(t), this
                            },
                            at: function (t) {
                                return this.destination ? (t = t < 0 ? 0 : t > 1 ? 1 : t, new l.Color({
                                    r: ~~(this.r + (this.destination.r - this.r) * t),
                                    g: ~~(this.g + (this.destination.g - this.g) * t),
                                    b: ~~(this.b + (this.destination.b - this.b) * t)
                                })) : this
                            }
                        }), l.Color.test = function (t) {
                            return t += "", l.regex.isHex.test(t) || l.regex.isRgb.test(t)
                        }, l.Color.isRgb = function (t) {
                            return t && "number" == typeof t.r && "number" == typeof t.g && "number" == typeof t.b
                        }, l.Color.isColor = function (t) {
                            return l.Color.isRgb(t) || l.Color.test(t)
                        }, l.Array = function (t, e) {
                            0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()), this.value = this.parse(t)
                        }, l.extend(l.Array, {
                            toString: function () {
                                return this.value.join(" ")
                            },
                            valueOf: function () {
                                return this.value
                            },
                            parse: function (t) {
                                return t = t.valueOf(), Array.isArray(t) ? t : this.split(t)
                            }
                        }), l.PointArray = function (t, e) {
                            l.Array.call(this, t, e || [
                                [0, 0]
                            ])
                        }, l.PointArray.prototype = new l.Array, l.PointArray.prototype.constructor = l.PointArray;
                        for (var i = {
                                M: function (t, e, l) {
                                    return e.x = l.x = t[0], e.y = l.y = t[1], ["M", e.x, e.y]
                                },
                                L: function (t, e) {
                                    return e.x = t[0], e.y = t[1], ["L", t[0], t[1]]
                                },
                                H: function (t, e) {
                                    return e.x = t[0], ["H", t[0]]
                                },
                                V: function (t, e) {
                                    return e.y = t[0], ["V", t[0]]
                                },
                                C: function (t, e) {
                                    return e.x = t[4], e.y = t[5], ["C", t[0], t[1], t[2], t[3], t[4], t[5]]
                                },
                                Q: function (t, e) {
                                    return e.x = t[2], e.y = t[3], ["Q", t[0], t[1], t[2], t[3]]
                                },
                                Z: function (t, e, l) {
                                    return e.x = l.x, e.y = l.y, ["Z"]
                                }
                            }, a = "mlhvqtcsaz".split(""), s = 0, o = a.length; s < o; ++s) i[a[s]] = function (t) {
                            return function (e, l, a) {
                                if ("H" == t) e[0] = e[0] + l.x;
                                else if ("V" == t) e[0] = e[0] + l.y;
                                else if ("A" == t) e[5] = e[5] + l.x, e[6] = e[6] + l.y;
                                else
                                    for (var s = 0, n = e.length; s < n; ++s) e[s] = e[s] + (s % 2 ? l.y : l.x);
                                if (i && "function" == typeof i[t]) return i[t](e, l, a)
                            }
                        }(a[s].toUpperCase());
                        l.PathArray = function (t, e) {
                            l.Array.call(this, t, e || [
                                ["M", 0, 0]
                            ])
                        }, l.PathArray.prototype = new l.Array, l.PathArray.prototype.constructor = l.PathArray, l.extend(l.PathArray, {
                            toString: function () {
                                return function (t) {
                                    for (var e = 0, l = t.length, i = ""; e < l; e++) i += t[e][0], null != t[e][1] && (i += t[e][1], null != t[e][2] && (i += " ", i += t[e][2], null != t[e][3] && (i += " ", i += t[e][3], i += " ", i += t[e][4], null != t[e][5] && (i += " ", i += t[e][5], i += " ", i += t[e][6], null != t[e][7] && (i += " ", i += t[e][7])))));
                                    return i + " "
                                }(this.value)
                            },
                            move: function (t, e) {
                                var l = this.bbox();
                                return l.x, l.y, this
                            },
                            at: function (t) {
                                if (!this.destination) return this;
                                for (var e = this.value, i = this.destination.value, a = [], s = new l.PathArray, n = 0, o = e.length; n < o; n++) {
                                    a[n] = [e[n][0]];
                                    for (var r = 1, h = e[n].length; r < h; r++) a[n][r] = e[n][r] + (i[n][r] - e[n][r]) * t;
                                    "A" === a[n][0] && (a[n][4] = +(0 != a[n][4]), a[n][5] = +(0 != a[n][5]))
                                }
                                return s.value = a, s
                            },
                            parse: function (t) {
                                if (t instanceof l.PathArray) return t.valueOf();
                                var e, a = {
                                    M: 2,
                                    L: 2,
                                    H: 1,
                                    V: 1,
                                    C: 6,
                                    S: 4,
                                    Q: 4,
                                    T: 2,
                                    A: 7,
                                    Z: 0
                                };
                                t = "string" == typeof t ? t.replace(l.regex.numbersWithDots, h).replace(l.regex.pathLetters, " $& ").replace(l.regex.hyphen, "$1 -").trim().split(l.regex.delimiter) : t.reduce((function (t, e) {
                                    return [].concat.call(t, e)
                                }), []);
                                var s = [],
                                    n = new l.Point,
                                    o = new l.Point,
                                    r = 0,
                                    c = t.length;
                                do {
                                    l.regex.isPathLetter.test(t[r]) ? (e = t[r], ++r) : "M" == e ? e = "L" : "m" == e && (e = "l"), s.push(i[e].call(null, t.slice(r, r += a[e.toUpperCase()]).map(parseFloat), n, o))
                                } while (c > r);
                                return s
                            },
                            bbox: function () {
                                return l.parser.draw || l.prepare(), l.parser.path.setAttribute("d", this.toString()), l.parser.path.getBBox()
                            }
                        }), l.Number = l.invent({
                            create: function (t, e) {
                                this.value = 0, this.unit = e || "", "number" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -34e37 : 34e37 : "string" == typeof t ? (e = t.match(l.regex.numberAndUnit)) && (this.value = parseFloat(e[1]), "%" == e[5] ? this.value /= 100 : "s" == e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof l.Number && (this.value = t.valueOf(), this.unit = t.unit)
                            },
                            extend: {
                                toString: function () {
                                    return ("%" == this.unit ? ~~(1e8 * this.value) / 1e6 : "s" == this.unit ? this.value / 1e3 : this.value) + this.unit
                                },
                                toJSON: function () {
                                    return this.toString()
                                },
                                valueOf: function () {
                                    return this.value
                                },
                                plus: function (t) {
                                    return t = new l.Number(t), new l.Number(this + t, this.unit || t.unit)
                                },
                                minus: function (t) {
                                    return t = new l.Number(t), new l.Number(this - t, this.unit || t.unit)
                                },
                                times: function (t) {
                                    return t = new l.Number(t), new l.Number(this * t, this.unit || t.unit)
                                },
                                divide: function (t) {
                                    return t = new l.Number(t), new l.Number(this / t, this.unit || t.unit)
                                },
                                to: function (t) {
                                    var e = new l.Number(this);
                                    return "string" == typeof t && (e.unit = t), e
                                },
                                morph: function (t) {
                                    return this.destination = new l.Number(t), t.relative && (this.destination.value += this.value), this
                                },
                                at: function (t) {
                                    return this.destination ? new l.Number(this.destination).minus(this).times(t).plus(this) : this
                                }
                            }
                        }), l.Element = l.invent({
                            create: function (t) {
                                this._stroke = l.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t) && (this.type = t.nodeName, this.node.instance = this, this._stroke = t.getAttribute("stroke") || this._stroke)
                            },
                            extend: {
                                x: function (t) {
                                    return this.attr("x", t)
                                },
                                y: function (t) {
                                    return this.attr("y", t)
                                },
                                cx: function (t) {
                                    return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2)
                                },
                                cy: function (t) {
                                    return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2)
                                },
                                move: function (t, e) {
                                    return this.x(t).y(e)
                                },
                                center: function (t, e) {
                                    return this.cx(t).cy(e)
                                },
                                width: function (t) {
                                    return this.attr("width", t)
                                },
                                height: function (t) {
                                    return this.attr("height", t)
                                },
                                size: function (t, e) {
                                    var i = g(this, t, e);
                                    return this.width(new l.Number(i.width)).height(new l.Number(i.height))
                                },
                                clone: function (t) {
                                    this.writeDataToDom();
                                    var e = v(this.node.cloneNode(!0));
                                    return t ? t.add(e) : this.after(e), e
                                },
                                remove: function () {
                                    return this.parent() && this.parent().removeElement(this), this
                                },
                                replace: function (t) {
                                    return this.after(t).remove(), t
                                },
                                addTo: function (t) {
                                    return t.put(this)
                                },
                                putIn: function (t) {
                                    return t.add(this)
                                },
                                id: function (t) {
                                    return this.attr("id", t)
                                },
                                show: function () {
                                    return this.style("display", "")
                                },
                                hide: function () {
                                    return this.style("display", "none")
                                },
                                visible: function () {
                                    return "none" != this.style("display")
                                },
                                toString: function () {
                                    return this.attr("id")
                                },
                                classes: function () {
                                    var t = this.attr("class");
                                    return null == t ? [] : t.trim().split(l.regex.delimiter)
                                },
                                hasClass: function (t) {
                                    return -1 != this.classes().indexOf(t)
                                },
                                addClass: function (t) {
                                    if (!this.hasClass(t)) {
                                        var e = this.classes();
                                        e.push(t), this.attr("class", e.join(" "))
                                    }
                                    return this
                                },
                                removeClass: function (t) {
                                    return this.hasClass(t) && this.attr("class", this.classes().filter((function (e) {
                                        return e != t
                                    })).join(" ")), this
                                },
                                toggleClass: function (t) {
                                    return this.hasClass(t) ? this.removeClass(t) : this.addClass(t)
                                },
                                reference: function (t) {
                                    return l.get(this.attr(t))
                                },
                                parent: function (e) {
                                    var i = this;
                                    if (!i.node.parentNode) return null;
                                    if (i = l.adopt(i.node.parentNode), !e) return i;
                                    for (; i && i.node instanceof t.SVGElement;) {
                                        if ("string" == typeof e ? i.matches(e) : i instanceof e) return i;
                                        if (!i.node.parentNode || "#document" == i.node.parentNode.nodeName) return null;
                                        i = l.adopt(i.node.parentNode)
                                    }
                                },
                                doc: function () {
                                    return this instanceof l.Doc ? this : this.parent(l.Doc)
                                },
                                parents: function (t) {
                                    var e = [],
                                        l = this;
                                    do {
                                        if (!(l = l.parent(t)) || !l.node) break;
                                        e.push(l)
                                    } while (l.parent);
                                    return e
                                },
                                matches: function (t) {
                                    return function (t, e) {
                                        return (t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector).call(t, e)
                                    }(this.node, t)
                                },
                                native: function () {
                                    return this.node
                                },
                                svg: function (t) {
                                    var i = e.createElement("svg");
                                    if (!(t && this instanceof l.Parent)) return i.appendChild(t = e.createElement("svg")), this.writeDataToDom(), t.appendChild(this.node.cloneNode(!0)), i.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "");
                                    i.innerHTML = "<svg>" + t.replace(/\n/, "").replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") + "</svg>";
                                    for (var a = 0, s = i.firstChild.childNodes.length; a < s; a++) this.node.appendChild(i.firstChild.firstChild);
                                    return this
                                },
                                writeDataToDom: function () {
                                    return (this.each || this.lines) && (this.each ? this : this.lines()).each((function () {
                                        this.writeDataToDom()
                                    })), this.node.removeAttribute("svgjs:data"), Object.keys(this.dom).length && this.node.setAttribute("svgjs:data", JSON.stringify(this.dom)), this
                                },
                                setData: function (t) {
                                    return this.dom = t, this
                                },
                                is: function (t) {
                                    return function (t, e) {
                                        return t instanceof e
                                    }(this, t)
                                }
                            }
                        }), l.easing = {
                            "-": function (t) {
                                return t
                            },
                            "<>": function (t) {
                                return -Math.cos(t * Math.PI) / 2 + .5
                            },
                            ">": function (t) {
                                return Math.sin(t * Math.PI / 2)
                            },
                            "<": function (t) {
                                return 1 - Math.cos(t * Math.PI / 2)
                            }
                        }, l.morph = function (t) {
                            return function (e, i) {
                                return new l.MorphObj(e, i).at(t)
                            }
                        }, l.Situation = l.invent({
                            create: function (t) {
                                this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new l.Number(t.duration).valueOf(), this.delay = new l.Number(t.delay).valueOf(), this.start = +new Date + this.delay, this.finish = this.start + this.duration, this.ease = t.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {}
                            }
                        }), l.FX = l.invent({
                            create: function (t) {
                                this._target = t, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1
                            },
                            extend: {
                                animate: function (t, e, i) {
                                    "object" === n(t) && (e = t.ease, i = t.delay, t = t.duration);
                                    var a = new l.Situation({
                                        duration: t || 1e3,
                                        delay: i || 0,
                                        ease: l.easing[e || "-"] || e
                                    });
                                    return this.queue(a), this
                                },
                                target: function (t) {
                                    return t && t instanceof l.Element ? (this._target = t, this) : this._target
                                },
                                timeToAbsPos: function (t) {
                                    return (t - this.situation.start) / (this.situation.duration / this._speed)
                                },
                                absPosToTime: function (t) {
                                    return this.situation.duration / this._speed * t + this.situation.start
                                },
                                startAnimFrame: function () {
                                    this.stopAnimFrame(), this.animationFrame = t.requestAnimationFrame(function () {
                                        this.step()
                                    }.bind(this))
                                },
                                stopAnimFrame: function () {
                                    t.cancelAnimationFrame(this.animationFrame)
                                },
                                start: function () {
                                    return !this.active && this.situation && (this.active = !0, this.startCurrent()), this
                                },
                                startCurrent: function () {
                                    return this.situation.start = +new Date + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step()
                                },
                                queue: function (t) {
                                    return ("function" == typeof t || t instanceof l.Situation) && this.situations.push(t), this.situation || (this.situation = this.situations.shift()), this
                                },
                                dequeue: function () {
                                    return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof l.Situation ? this.start() : this.situation.call(this)), this
                                },
                                initAnimations: function () {
                                    var t, e = this.situation;
                                    if (e.init) return this;
                                    for (var i in e.animations) {
                                        t = this.target()[i](), Array.isArray(t) || (t = [t]), Array.isArray(e.animations[i]) || (e.animations[i] = [e.animations[i]]);
                                        for (var a = t.length; a--;) e.animations[i][a] instanceof l.Number && (t[a] = new l.Number(t[a])), e.animations[i][a] = t[a].morph(e.animations[i][a])
                                    }
                                    for (var i in e.attrs) e.attrs[i] = new l.MorphObj(this.target().attr(i), e.attrs[i]);
                                    for (var i in e.styles) e.styles[i] = new l.MorphObj(this.target().style(i), e.styles[i]);
                                    return e.initialTransformation = this.target().matrixify(), e.init = !0, this
                                },
                                clearQueue: function () {
                                    return this.situations = [], this
                                },
                                clearCurrent: function () {
                                    return this.situation = null, this
                                },
                                stop: function (t, e) {
                                    var l = this.active;
                                    return this.active = !1, e && this.clearQueue(), t && this.situation && (!l && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent()
                                },
                                after: function (t) {
                                    var e = this.last();
                                    return this.target().on("finished.fx", (function l(i) {
                                        i.detail.situation == e && (t.call(this, e), this.off("finished.fx", l))
                                    })), this._callStart()
                                },
                                during: function (t) {
                                    var e = this.last(),
                                        i = function (i) {
                                            i.detail.situation == e && t.call(this, i.detail.pos, l.morph(i.detail.pos), i.detail.eased, e)
                                        };
                                    return this.target().off("during.fx", i).on("during.fx", i), this.after((function () {
                                        this.off("during.fx", i)
                                    })), this._callStart()
                                },
                                afterAll: function (t) {
                                    var e = function e(l) {
                                        t.call(this), this.off("allfinished.fx", e)
                                    };
                                    return this.target().off("allfinished.fx", e).on("allfinished.fx", e), this._callStart()
                                },
                                last: function () {
                                    return this.situations.length ? this.situations[this.situations.length - 1] : this.situation
                                },
                                add: function (t, e, l) {
                                    return this.last()[l || "animations"][t] = e, this._callStart()
                                },
                                step: function (t) {
                                    var e, l, i;
                                    t || (this.absPos = this.timeToAbsPos(+new Date)), !1 !== this.situation.loops ? (e = Math.max(this.absPos, 0), l = Math.floor(e), !0 === this.situation.loops || l < this.situation.loops ? (this.pos = e - l, i = this.situation.loop, this.situation.loop = l) : (this.absPos = this.situation.loops, this.pos = 1, i = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - i) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);
                                    var a = this.situation.ease(this.pos);
                                    for (var s in this.situation.once) s > this.lastPos && s <= a && (this.situation.once[s].call(this.target(), this.pos, a), delete this.situation.once[s]);
                                    return this.active && this.target().fire("during", {
                                        pos: this.pos,
                                        eased: a,
                                        fx: this,
                                        situation: this.situation
                                    }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire("finished", {
                                        fx: this,
                                        situation: this.situation
                                    }), this.situations.length || (this.target().fire("allfinished"), this.situations.length || (this.target().off(".fx"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = a, this) : this
                                },
                                eachAt: function () {
                                    var t, e = this,
                                        i = this.target(),
                                        a = this.situation;
                                    for (var s in a.animations) t = [].concat(a.animations[s]).map((function (t) {
                                        return "string" != typeof t && t.at ? t.at(a.ease(e.pos), e.pos) : t
                                    })), i[s].apply(i, t);
                                    for (var s in a.attrs) t = [s].concat(a.attrs[s]).map((function (t) {
                                        return "string" != typeof t && t.at ? t.at(a.ease(e.pos), e.pos) : t
                                    })), i.attr.apply(i, t);
                                    for (var s in a.styles) t = [s].concat(a.styles[s]).map((function (t) {
                                        return "string" != typeof t && t.at ? t.at(a.ease(e.pos), e.pos) : t
                                    })), i.style.apply(i, t);
                                    if (a.transforms.length) {
                                        t = a.initialTransformation, s = 0;
                                        for (var n = a.transforms.length; s < n; s++) {
                                            var o = a.transforms[s];
                                            o instanceof l.Matrix ? t = o.relative ? t.multiply((new l.Matrix).morph(o).at(a.ease(this.pos))) : t.morph(o).at(a.ease(this.pos)) : (o.relative || o.undo(t.extract()), t = t.multiply(o.at(a.ease(this.pos))))
                                        }
                                        i.matrix(t)
                                    }
                                    return this
                                },
                                once: function (t, e, l) {
                                    var i = this.last();
                                    return l || (t = i.ease(t)), i.once[t] = e, this
                                },
                                _callStart: function () {
                                    return setTimeout(function () {
                                        this.start()
                                    }.bind(this), 0), this
                                }
                            },
                            parent: l.Element,
                            construct: {
                                animate: function (t, e, i) {
                                    return (this.fx || (this.fx = new l.FX(this))).animate(t, e, i)
                                },
                                delay: function (t) {
                                    return (this.fx || (this.fx = new l.FX(this))).delay(t)
                                },
                                stop: function (t, e) {
                                    return this.fx && this.fx.stop(t, e), this
                                },
                                finish: function () {
                                    return this.fx && this.fx.finish(), this
                                }
                            }
                        }), l.MorphObj = l.invent({
                            create: function (t, e) {
                                return l.Color.isColor(e) ? new l.Color(t).morph(e) : l.regex.delimiter.test(t) ? l.regex.pathLetters.test(t) ? new l.PathArray(t).morph(e) : new l.Array(t).morph(e) : l.regex.numberAndUnit.test(e) ? new l.Number(t).morph(e) : (this.value = t, void(this.destination = e))
                            },
                            extend: {
                                at: function (t, e) {
                                    return e < 1 ? this.value : this.destination
                                },
                                valueOf: function () {
                                    return this.value
                                }
                            }
                        }), l.extend(l.FX, {
                            attr: function (t, e, l) {
                                if ("object" === n(t))
                                    for (var i in t) this.attr(i, t[i]);
                                else this.add(t, e, "attrs");
                                return this
                            },
                            plot: function (t, e, l, i) {
                                return 4 == arguments.length ? this.plot([t, e, l, i]) : this.add("plot", new(this.target().morphArray)(t))
                            }
                        }), l.Box = l.invent({
                            create: function (t, e, i, a) {
                                if (!("object" !== n(t) || t instanceof l.Element)) return l.Box.call(this, null != t.left ? t.left : t.x, null != t.top ? t.top : t.y, t.width, t.height);
                                4 == arguments.length && (this.x = t, this.y = e, this.width = i, this.height = a), x(this)
                            }
                        }), l.BBox = l.invent({
                            create: function (t) {
                                if (l.Box.apply(this, [].slice.call(arguments)), t instanceof l.Element) {
                                    var i;
                                    try {
                                        if (!e.documentElement.contains) {
                                            for (var a = t.node; a.parentNode;) a = a.parentNode;
                                            if (a != e) throw new Error("Element not in the dom")
                                        }
                                        i = t.node.getBBox()
                                    } catch (e) {
                                        if (t instanceof l.Shape) {
                                            l.parser.draw || l.prepare();
                                            var s = t.clone(l.parser.draw.instance).show();
                                            s && s.node && "function" == typeof s.node.getBBox && (i = s.node.getBBox()), s && "function" == typeof s.remove && s.remove()
                                        } else i = {
                                            x: t.node.clientLeft,
                                            y: t.node.clientTop,
                                            width: t.node.clientWidth,
                                            height: t.node.clientHeight
                                        }
                                    }
                                    l.Box.call(this, i)
                                }
                            },
                            inherit: l.Box,
                            parent: l.Element,
                            construct: {
                                bbox: function () {
                                    return new l.BBox(this)
                                }
                            }
                        }), l.BBox.prototype.constructor = l.BBox, l.Matrix = l.invent({
                            create: function (t) {
                                var e = f([1, 0, 0, 1, 0, 0]);
                                t = null === t ? e : t instanceof l.Element ? t.matrixify() : "string" == typeof t ? f(t.split(l.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? f([].slice.call(arguments)) : Array.isArray(t) ? f(t) : t && "object" === n(t) ? t : e;
                                for (var i = b.length - 1; i >= 0; --i) this[b[i]] = null != t[b[i]] ? t[b[i]] : e[b[i]]
                            },
                            extend: {
                                extract: function () {
                                    var t = p(this, 0, 1);
                                    p(this, 1, 0);
                                    var e = 180 / Math.PI * Math.atan2(t.y, t.x) - 90;
                                    return {
                                        x: this.e,
                                        y: this.f,
                                        transformedX: (this.e * Math.cos(e * Math.PI / 180) + this.f * Math.sin(e * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),
                                        transformedY: (this.f * Math.cos(e * Math.PI / 180) + this.e * Math.sin(-e * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),
                                        rotation: e,
                                        a: this.a,
                                        b: this.b,
                                        c: this.c,
                                        d: this.d,
                                        e: this.e,
                                        f: this.f,
                                        matrix: new l.Matrix(this)
                                    }
                                },
                                clone: function () {
                                    return new l.Matrix(this)
                                },
                                morph: function (t) {
                                    return this.destination = new l.Matrix(t), this
                                },
                                multiply: function (t) {
                                    return new l.Matrix(this.native().multiply(function (t) {
                                        return t instanceof l.Matrix || (t = new l.Matrix(t)), t
                                    }(t).native()))
                                },
                                inverse: function () {
                                    return new l.Matrix(this.native().inverse())
                                },
                                translate: function (t, e) {
                                    return new l.Matrix(this.native().translate(t || 0, e || 0))
                                },
                                native: function () {
                                    for (var t = l.parser.native.createSVGMatrix(), e = b.length - 1; e >= 0; e--) t[b[e]] = this[b[e]];
                                    return t
                                },
                                toString: function () {
                                    return "matrix(" + m(this.a) + "," + m(this.b) + "," + m(this.c) + "," + m(this.d) + "," + m(this.e) + "," + m(this.f) + ")"
                                }
                            },
                            parent: l.Element,
                            construct: {
                                ctm: function () {
                                    return new l.Matrix(this.node.getCTM())
                                },
                                screenCTM: function () {
                                    if (this instanceof l.Nested) {
                                        var t = this.rect(1, 1),
                                            e = t.node.getScreenCTM();
                                        return t.remove(), new l.Matrix(e)
                                    }
                                    return new l.Matrix(this.node.getScreenCTM())
                                }
                            }
                        }), l.Point = l.invent({
                            create: function (t, e) {
                                var l;
                                l = Array.isArray(t) ? {
                                    x: t[0],
                                    y: t[1]
                                } : "object" === n(t) ? {
                                    x: t.x,
                                    y: t.y
                                } : null != t ? {
                                    x: t,
                                    y: null != e ? e : t
                                } : {
                                    x: 0,
                                    y: 0
                                }, this.x = l.x, this.y = l.y
                            },
                            extend: {
                                clone: function () {
                                    return new l.Point(this)
                                },
                                morph: function (t, e) {
                                    return this.destination = new l.Point(t, e), this
                                }
                            }
                        }), l.extend(l.Element, {
                            point: function (t, e) {
                                return new l.Point(t, e).transform(this.screenCTM().inverse())
                            }
                        }), l.extend(l.Element, {
                            attr: function (t, e, i) {
                                if (null == t) {
                                    for (t = {}, i = (e = this.node.attributes).length - 1; i >= 0; i--) t[e[i].nodeName] = l.regex.isNumber.test(e[i].nodeValue) ? parseFloat(e[i].nodeValue) : e[i].nodeValue;
                                    return t
                                }
                                if ("object" === n(t))
                                    for (var a in t) this.attr(a, t[a]);
                                else if (null === e) this.node.removeAttribute(t);
                                else {
                                    if (null == e) return null == (e = this.node.getAttribute(t)) ? l.defaults.attrs[t] : l.regex.isNumber.test(e) ? parseFloat(e) : e;
                                    "stroke-width" == t ? this.attr("stroke", parseFloat(e) > 0 ? this._stroke : null) : "stroke" == t && (this._stroke = e), "fill" != t && "stroke" != t || (l.regex.isImage.test(e) && (e = this.doc().defs().image(e, 0, 0)), e instanceof l.Image && (e = this.doc().defs().pattern(0, 0, (function () {
                                        this.add(e)
                                    })))), "number" == typeof e ? e = new l.Number(e) : l.Color.isColor(e) ? e = new l.Color(e) : Array.isArray(e) && (e = new l.Array(e)), "leading" == t ? this.leading && this.leading(e) : "string" == typeof i ? this.node.setAttributeNS(i, t, e.toString()) : this.node.setAttribute(t, e.toString()), !this.rebuild || "font-size" != t && "x" != t || this.rebuild(t, e)
                                }
                                return this
                            }
                        }), l.extend(l.Element, {
                            transform: function (t, e) {
                                var i;
                                return "object" !== n(t) ? (i = new l.Matrix(this).extract(), "string" == typeof t ? i[t] : i) : (i = new l.Matrix(this), e = !!e || !!t.relative, null != t.a && (i = e ? i.multiply(new l.Matrix(t)) : new l.Matrix(t)), this.attr("transform", i))
                            }
                        }), l.extend(l.Element, {
                            untransform: function () {
                                return this.attr("transform", null)
                            },
                            matrixify: function () {
                                return (this.attr("transform") || "").split(l.regex.transforms).slice(0, -1).map((function (t) {
                                    var e = t.trim().split("(");
                                    return [e[0], e[1].split(l.regex.delimiter).map((function (t) {
                                        return parseFloat(t)
                                    }))]
                                })).reduce((function (t, e) {
                                    return "matrix" == e[0] ? t.multiply(f(e[1])) : t[e[0]].apply(t, e[1])
                                }), new l.Matrix)
                            },
                            toParent: function (t) {
                                if (this == t) return this;
                                var e = this.screenCTM(),
                                    l = t.screenCTM().inverse();
                                return this.addTo(t).untransform().transform(l.multiply(e)), this
                            },
                            toDoc: function () {
                                return this.toParent(this.doc())
                            }
                        }), l.Transformation = l.invent({
                            create: function (t, e) {
                                if (arguments.length > 1 && "boolean" != typeof e) return this.constructor.call(this, [].slice.call(arguments));
                                if (Array.isArray(t))
                                    for (var l = 0, i = this.arguments.length; l < i; ++l) this[this.arguments[l]] = t[l];
                                else if (t && "object" === n(t))
                                    for (l = 0, i = this.arguments.length; l < i; ++l) this[this.arguments[l]] = t[this.arguments[l]];
                                this.inversed = !1, !0 === e && (this.inversed = !0)
                            }
                        }), l.Translate = l.invent({
                            parent: l.Matrix,
                            inherit: l.Transformation,
                            create: function (t, e) {
                                this.constructor.apply(this, [].slice.call(arguments))
                            },
                            extend: {
                                arguments: ["transformedX", "transformedY"],
                                method: "translate"
                            }
                        }), l.extend(l.Element, {
                            style: function (t, e) {
                                if (0 == arguments.length) return this.node.style.cssText || "";
                                if (arguments.length < 2)
                                    if ("object" === n(t))
                                        for (var i in t) this.style(i, t[i]);
                                    else {
                                        if (!l.regex.isCss.test(t)) return this.node.style[c(t)];
                                        for (t = t.split(/\s*;\s*/).filter((function (t) {
                                                return !!t
                                            })).map((function (t) {
                                                return t.split(/\s*:\s*/)
                                            })); e = t.pop();) this.style(e[0], e[1])
                                    }
                                else this.node.style[c(t)] = null === e || l.regex.isBlank.test(e) ? "" : e;
                                return this
                            }
                        }), l.Parent = l.invent({
                            create: function (t) {
                                this.constructor.call(this, t)
                            },
                            inherit: l.Element,
                            extend: {
                                children: function () {
                                    return l.utils.map(l.utils.filterSVGElements(this.node.childNodes), (function (t) {
                                        return l.adopt(t)
                                    }))
                                },
                                add: function (t, e) {
                                    return null == e ? this.node.appendChild(t.node) : t.node != this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this
                                },
                                put: function (t, e) {
                                    return this.add(t, e), t
                                },
                                has: function (t) {
                                    return this.index(t) >= 0
                                },
                                index: function (t) {
                                    return [].slice.call(this.node.childNodes).indexOf(t.node)
                                },
                                get: function (t) {
                                    return l.adopt(this.node.childNodes[t])
                                },
                                first: function () {
                                    return this.get(0)
                                },
                                last: function () {
                                    return this.get(this.node.childNodes.length - 1)
                                },
                                each: function (t, e) {
                                    for (var i = this.children(), a = 0, s = i.length; a < s; a++) i[a] instanceof l.Element && t.apply(i[a], [a, i]), e && i[a] instanceof l.Container && i[a].each(t, e);
                                    return this
                                },
                                removeElement: function (t) {
                                    return this.node.removeChild(t.node), this
                                },
                                clear: function () {
                                    for (; this.node.hasChildNodes();) this.node.removeChild(this.node.lastChild);
                                    return delete this._defs, this
                                },
                                defs: function () {
                                    return this.doc().defs()
                                }
                            }
                        }), l.extend(l.Parent, {
                            ungroup: function (t, e) {
                                return 0 === e || this instanceof l.Defs || this.node == l.parser.draw || (t = t || (this instanceof l.Doc ? this : this.parent(l.Parent)), e = e || 1 / 0, this.each((function () {
                                    return this instanceof l.Defs ? this : this instanceof l.Parent ? this.ungroup(t, e - 1) : this.toParent(t)
                                })), this.node.firstChild || this.remove()), this
                            },
                            flatten: function (t, e) {
                                return this.ungroup(t, e)
                            }
                        }), l.Container = l.invent({
                            create: function (t) {
                                this.constructor.call(this, t)
                            },
                            inherit: l.Parent
                        }), l.ViewBox = l.invent({
                            parent: l.Container,
                            construct: {}
                        }), ["click", "dblclick", "mousedown", "mouseup", "mouseover", "mouseout", "mousemove", "touchstart", "touchmove", "touchleave", "touchend", "touchcancel"].forEach((function (t) {
                            l.Element.prototype[t] = function (e) {
                                return l.on(this.node, t, e), this
                            }
                        })), l.listeners = [], l.handlerMap = [], l.listenerId = 0, l.on = function (t, e, i, a, s) {
                            var n = i.bind(a || t.instance || t),
                                o = (l.handlerMap.indexOf(t) + 1 || l.handlerMap.push(t)) - 1,
                                r = e.split(".")[0],
                                h = e.split(".")[1] || "*";
                            l.listeners[o] = l.listeners[o] || {}, l.listeners[o][r] = l.listeners[o][r] || {}, l.listeners[o][r][h] = l.listeners[o][r][h] || {}, i._svgjsListenerId || (i._svgjsListenerId = ++l.listenerId), l.listeners[o][r][h][i._svgjsListenerId] = n, t.addEventListener(r, n, s || {
                                passive: !0
                            })
                        }, l.off = function (t, e, i) {
                            var a = l.handlerMap.indexOf(t),
                                s = e && e.split(".")[0],
                                n = e && e.split(".")[1],
                                o = "";
                            if (-1 != a)
                                if (i) {
                                    if ("function" == typeof i && (i = i._svgjsListenerId), !i) return;
                                    l.listeners[a][s] && l.listeners[a][s][n || "*"] && (t.removeEventListener(s, l.listeners[a][s][n || "*"][i], !1), delete l.listeners[a][s][n || "*"][i])
                                } else if (n && s) {
                                if (l.listeners[a][s] && l.listeners[a][s][n]) {
                                    for (var r in l.listeners[a][s][n]) l.off(t, [s, n].join("."), r);
                                    delete l.listeners[a][s][n]
                                }
                            } else if (n)
                                for (var h in l.listeners[a])
                                    for (var o in l.listeners[a][h]) n === o && l.off(t, [h, n].join("."));
                            else if (s) {
                                if (l.listeners[a][s]) {
                                    for (var o in l.listeners[a][s]) l.off(t, [s, o].join("."));
                                    delete l.listeners[a][s]
                                }
                            } else {
                                for (var h in l.listeners[a]) l.off(t, h);
                                delete l.listeners[a], delete l.handlerMap[a]
                            }
                        }, l.extend(l.Element, {
                            on: function (t, e, i, a) {
                                return l.on(this.node, t, e, i, a), this
                            },
                            off: function (t, e) {
                                return l.off(this.node, t, e), this
                            },
                            fire: function (e, i) {
                                return e instanceof t.Event ? this.node.dispatchEvent(e) : this.node.dispatchEvent(e = new l.CustomEvent(e, {
                                    detail: i,
                                    cancelable: !0
                                })), this._event = e, this
                            },
                            event: function () {
                                return this._event
                            }
                        }), l.Defs = l.invent({
                            create: "defs",
                            inherit: l.Container
                        }), l.G = l.invent({
                            create: "g",
                            inherit: l.Container,
                            extend: {
                                x: function (t) {
                                    return null == t ? this.transform("x") : this.transform({
                                        x: t - this.x()
                                    }, !0)
                                }
                            },
                            construct: {
                                group: function () {
                                    return this.put(new l.G)
                                }
                            }
                        }), l.Doc = l.invent({
                            create: function (t) {
                                t && ("svg" == (t = "string" == typeof t ? e.getElementById(t) : t).nodeName ? this.constructor.call(this, t) : (this.constructor.call(this, l.create("svg")), t.appendChild(this.node), this.size("100%", "100%")), this.namespace().defs())
                            },
                            inherit: l.Container,
                            extend: {
                                namespace: function () {
                                    return this.attr({
                                        xmlns: l.ns,
                                        version: "1.1"
                                    }).attr("xmlns:xlink", l.xlink, l.xmlns).attr("xmlns:svgjs", l.svgjs, l.xmlns)
                                },
                                defs: function () {
                                    var t;
                                    return this._defs || ((t = this.node.getElementsByTagName("defs")[0]) ? this._defs = l.adopt(t) : this._defs = new l.Defs, this.node.appendChild(this._defs.node)), this._defs
                                },
                                parent: function () {
                                    return this.node.parentNode && "#document" != this.node.parentNode.nodeName ? this.node.parentNode : null
                                },
                                remove: function () {
                                    return this.parent() && this.parent().removeChild(this.node), this
                                },
                                clear: function () {
                                    for (; this.node.hasChildNodes();) this.node.removeChild(this.node.lastChild);
                                    return delete this._defs, l.parser.draw && !l.parser.draw.parentNode && this.node.appendChild(l.parser.draw), this
                                },
                                clone: function (t) {
                                    this.writeDataToDom();
                                    var e = this.node,
                                        l = v(e.cloneNode(!0));
                                    return t ? (t.node || t).appendChild(l.node) : e.parentNode.insertBefore(l.node, e.nextSibling), l
                                }
                            }
                        }), l.extend(l.Element, {}), l.Gradient = l.invent({
                            create: function (t) {
                                this.constructor.call(this, l.create(t + "Gradient")), this.type = t
                            },
                            inherit: l.Container,
                            extend: {
                                at: function (t, e, i) {
                                    return this.put(new l.Stop).update(t, e, i)
                                },
                                update: function (t) {
                                    return this.clear(), "function" == typeof t && t.call(this, this), this
                                },
                                fill: function () {
                                    return "url(#" + this.id() + ")"
                                },
                                toString: function () {
                                    return this.fill()
                                },
                                attr: function (t, e, i) {
                                    return "transform" == t && (t = "gradientTransform"), l.Container.prototype.attr.call(this, t, e, i)
                                }
                            },
                            construct: {
                                gradient: function (t, e) {
                                    return this.defs().gradient(t, e)
                                }
                            }
                        }), l.extend(l.Gradient, l.FX, {
                            from: function (t, e) {
                                return "radial" == (this._target || this).type ? this.attr({
                                    fx: new l.Number(t),
                                    fy: new l.Number(e)
                                }) : this.attr({
                                    x1: new l.Number(t),
                                    y1: new l.Number(e)
                                })
                            },
                            to: function (t, e) {
                                return "radial" == (this._target || this).type ? this.attr({
                                    cx: new l.Number(t),
                                    cy: new l.Number(e)
                                }) : this.attr({
                                    x2: new l.Number(t),
                                    y2: new l.Number(e)
                                })
                            }
                        }), l.extend(l.Defs, {
                            gradient: function (t, e) {
                                return this.put(new l.Gradient(t)).update(e)
                            }
                        }), l.Stop = l.invent({
                            create: "stop",
                            inherit: l.Element,
                            extend: {
                                update: function (t) {
                                    return ("number" == typeof t || t instanceof l.Number) && (t = {
                                        offset: arguments[0],
                                        color: arguments[1],
                                        opacity: arguments[2]
                                    }), null != t.opacity && this.attr("stop-opacity", t.opacity), null != t.color && this.attr("stop-color", t.color), null != t.offset && this.attr("offset", new l.Number(t.offset)), this
                                }
                            }
                        }), l.Pattern = l.invent({
                            create: "pattern",
                            inherit: l.Container,
                            extend: {
                                fill: function () {
                                    return "url(#" + this.id() + ")"
                                },
                                update: function (t) {
                                    return this.clear(), "function" == typeof t && t.call(this, this), this
                                },
                                toString: function () {
                                    return this.fill()
                                },
                                attr: function (t, e, i) {
                                    return "transform" == t && (t = "patternTransform"), l.Container.prototype.attr.call(this, t, e, i)
                                }
                            },
                            construct: {
                                pattern: function (t, e, l) {
                                    return this.defs().pattern(t, e, l)
                                }
                            }
                        }), l.extend(l.Defs, {
                            pattern: function (t, e, i) {
                                return this.put(new l.Pattern).update(i).attr({
                                    x: 0,
                                    y: 0,
                                    width: t,
                                    height: e,
                                    patternUnits: "userSpaceOnUse"
                                })
                            }
                        }), l.Shape = l.invent({
                            create: function (t) {
                                this.constructor.call(this, t)
                            },
                            inherit: l.Element
                        }), l.Symbol = l.invent({
                            create: "symbol",
                            inherit: l.Container,
                            construct: {
                                symbol: function () {
                                    return this.put(new l.Symbol)
                                }
                            }
                        }), l.Use = l.invent({
                            create: "use",
                            inherit: l.Shape,
                            extend: {
                                element: function (t, e) {
                                    return this.attr("href", (e || "") + "#" + t, l.xlink)
                                }
                            },
                            construct: {
                                use: function (t, e) {
                                    return this.put(new l.Use).element(t, e)
                                }
                            }
                        }), l.Rect = l.invent({
                            create: "rect",
                            inherit: l.Shape,
                            construct: {
                                rect: function (t, e) {
                                    return this.put(new l.Rect).size(t, e)
                                }
                            }
                        }), l.Circle = l.invent({
                            create: "circle",
                            inherit: l.Shape,
                            construct: {
                                circle: function (t) {
                                    return this.put(new l.Circle).rx(new l.Number(t).divide(2)).move(0, 0)
                                }
                            }
                        }), l.extend(l.Circle, l.FX, {
                            rx: function (t) {
                                return this.attr("r", t)
                            },
                            ry: function (t) {
                                return this.rx(t)
                            }
                        }), l.Ellipse = l.invent({
                            create: "ellipse",
                            inherit: l.Shape,
                            construct: {
                                ellipse: function (t, e) {
                                    return this.put(new l.Ellipse).size(t, e).move(0, 0)
                                }
                            }
                        }), l.extend(l.Ellipse, l.Rect, l.FX, {
                            rx: function (t) {
                                return this.attr("rx", t)
                            },
                            ry: function (t) {
                                return this.attr("ry", t)
                            }
                        }), l.extend(l.Circle, l.Ellipse, {
                            x: function (t) {
                                return null == t ? this.cx() - this.rx() : this.cx(t + this.rx())
                            },
                            y: function (t) {
                                return null == t ? this.cy() - this.ry() : this.cy(t + this.ry())
                            },
                            cx: function (t) {
                                return null == t ? this.attr("cx") : this.attr("cx", t)
                            },
                            cy: function (t) {
                                return null == t ? this.attr("cy") : this.attr("cy", t)
                            },
                            width: function (t) {
                                return null == t ? 2 * this.rx() : this.rx(new l.Number(t).divide(2))
                            },
                            height: function (t) {
                                return null == t ? 2 * this.ry() : this.ry(new l.Number(t).divide(2))
                            },
                            size: function (t, e) {
                                var i = g(this, t, e);
                                return this.rx(new l.Number(i.width).divide(2)).ry(new l.Number(i.height).divide(2))
                            }
                        }), l.Line = l.invent({
                            create: "line",
                            inherit: l.Shape,
                            extend: {
                                array: function () {
                                    return new l.PointArray([
                                        [this.attr("x1"), this.attr("y1")],
                                        [this.attr("x2"), this.attr("y2")]
                                    ])
                                },
                                plot: function (t, e, i, a) {
                                    return null == t ? this.array() : (t = void 0 !== e ? {
                                        x1: t,
                                        y1: e,
                                        x2: i,
                                        y2: a
                                    } : new l.PointArray(t).toLine(), this.attr(t))
                                },
                                move: function (t, e) {
                                    return this.attr(this.array().move(t, e).toLine())
                                },
                                size: function (t, e) {
                                    var l = g(this, t, e);
                                    return this.attr(this.array().size(l.width, l.height).toLine())
                                }
                            },
                            construct: {
                                line: function (t, e, i, a) {
                                    return l.Line.prototype.plot.apply(this.put(new l.Line), null != t ? [t, e, i, a] : [0, 0, 0, 0])
                                }
                            }
                        }), l.Polyline = l.invent({
                            create: "polyline",
                            inherit: l.Shape,
                            construct: {
                                polyline: function (t) {
                                    return this.put(new l.Polyline).plot(t || new l.PointArray)
                                }
                            }
                        }), l.Polygon = l.invent({
                            create: "polygon",
                            inherit: l.Shape,
                            construct: {
                                polygon: function (t) {
                                    return this.put(new l.Polygon).plot(t || new l.PointArray)
                                }
                            }
                        }), l.extend(l.Polyline, l.Polygon, {
                            array: function () {
                                return this._array || (this._array = new l.PointArray(this.attr("points")))
                            },
                            plot: function (t) {
                                return null == t ? this.array() : this.clear().attr("points", "string" == typeof t ? t : this._array = new l.PointArray(t))
                            },
                            clear: function () {
                                return delete this._array, this
                            },
                            move: function (t, e) {
                                return this.attr("points", this.array().move(t, e))
                            },
                            size: function (t, e) {
                                var l = g(this, t, e);
                                return this.attr("points", this.array().size(l.width, l.height))
                            }
                        }), l.extend(l.Line, l.Polyline, l.Polygon, {
                            morphArray: l.PointArray,
                            x: function (t) {
                                return null == t ? this.bbox().x : this.move(t, this.bbox().y)
                            },
                            y: function (t) {
                                return null == t ? this.bbox().y : this.move(this.bbox().x, t)
                            },
                            width: function (t) {
                                var e = this.bbox();
                                return null == t ? e.width : this.size(t, e.height)
                            },
                            height: function (t) {
                                var e = this.bbox();
                                return null == t ? e.height : this.size(e.width, t)
                            }
                        }), l.Path = l.invent({
                            create: "path",
                            inherit: l.Shape,
                            extend: {
                                morphArray: l.PathArray,
                                array: function () {
                                    return this._array || (this._array = new l.PathArray(this.attr("d")))
                                },
                                plot: function (t) {
                                    return null == t ? this.array() : this.clear().attr("d", "string" == typeof t ? t : this._array = new l.PathArray(t))
                                },
                                clear: function () {
                                    return delete this._array, this
                                }
                            },
                            construct: {
                                path: function (t) {
                                    return this.put(new l.Path).plot(t || new l.PathArray)
                                }
                            }
                        }), l.Image = l.invent({
                            create: "image",
                            inherit: l.Shape,
                            extend: {
                                load: function (e) {
                                    if (!e) return this;
                                    var i = this,
                                        a = new t.Image;
                                    return l.on(a, "load", (function () {
                                        l.off(a);
                                        var t = i.parent(l.Pattern);
                                        null !== t && (0 == i.width() && 0 == i.height() && i.size(a.width, a.height), t && 0 == t.width() && 0 == t.height() && t.size(i.width(), i.height()), "function" == typeof i._loaded && i._loaded.call(i, {
                                            width: a.width,
                                            height: a.height,
                                            ratio: a.width / a.height,
                                            url: e
                                        }))
                                    })), l.on(a, "error", (function (t) {
                                        l.off(a), "function" == typeof i._error && i._error.call(i, t)
                                    })), this.attr("href", a.src = this.src = e, l.xlink)
                                },
                                loaded: function (t) {
                                    return this._loaded = t, this
                                },
                                error: function (t) {
                                    return this._error = t, this
                                }
                            },
                            construct: {
                                image: function (t, e, i) {
                                    return this.put(new l.Image).load(t).size(e || 0, i || e || 0)
                                }
                            }
                        }), l.Text = l.invent({
                            create: function () {
                                this.constructor.call(this, l.create("text")), this.dom.leading = new l.Number(1.3), this._rebuild = !0, this._build = !1, this.attr("font-family", l.defaults.attrs["font-family"])
                            },
                            inherit: l.Shape,
                            extend: {
                                x: function (t) {
                                    return null == t ? this.attr("x") : this.attr("x", t)
                                },
                                text: function (t) {
                                    if (void 0 === t) {
                                        t = "";
                                        for (var e = this.node.childNodes, i = 0, a = e.length; i < a; ++i) 0 != i && 3 != e[i].nodeType && 1 == l.adopt(e[i]).dom.newLined && (t += "\n"), t += e[i].textContent;
                                        return t
                                    }
                                    if (this.clear().build(!0), "function" == typeof t) t.call(this, this);
                                    else {
                                        i = 0;
                                        for (var s = (t = t.split("\n")).length; i < s; i++) this.tspan(t[i]).newLine()
                                    }
                                    return this.build(!1).rebuild()
                                },
                                size: function (t) {
                                    return this.attr("font-size", t).rebuild()
                                },
                                leading: function (t) {
                                    return null == t ? this.dom.leading : (this.dom.leading = new l.Number(t), this.rebuild())
                                },
                                lines: function () {
                                    var t = (this.textPath && this.textPath() || this).node,
                                        e = l.utils.map(l.utils.filterSVGElements(t.childNodes), (function (t) {
                                            return l.adopt(t)
                                        }));
                                    return new l.Set(e)
                                },
                                rebuild: function (t) {
                                    if ("boolean" == typeof t && (this._rebuild = t), this._rebuild) {
                                        var e = this,
                                            i = 0,
                                            a = this.dom.leading * new l.Number(this.attr("font-size"));
                                        this.lines().each((function () {
                                            this.dom.newLined && (e.textPath() || this.attr("x", e.attr("x")), "\n" == this.text() ? i += a : (this.attr("dy", a + i), i = 0))
                                        })), this.fire("rebuild")
                                    }
                                    return this
                                },
                                build: function (t) {
                                    return this._build = !!t, this
                                },
                                setData: function (t) {
                                    return this.dom = t, this.dom.leading = new l.Number(t.leading || 1.3), this
                                }
                            },
                            construct: {
                                text: function (t) {
                                    return this.put(new l.Text).text(t)
                                },
                                plain: function (t) {
                                    return this.put(new l.Text).plain(t)
                                }
                            }
                        }), l.Tspan = l.invent({
                            create: "tspan",
                            inherit: l.Shape,
                            extend: {
                                text: function (t) {
                                    return null == t ? this.node.textContent + (this.dom.newLined ? "\n" : "") : ("function" == typeof t ? t.call(this, this) : this.plain(t), this)
                                },
                                dx: function (t) {
                                    return this.attr("dx", t)
                                },
                                dy: function (t) {
                                    return this.attr("dy", t)
                                },
                                newLine: function () {
                                    var t = this.parent(l.Text);
                                    return this.dom.newLined = !0, this.dy(t.dom.leading * t.attr("font-size")).attr("x", t.x())
                                }
                            }
                        }), l.extend(l.Text, l.Tspan, {
                            plain: function (t) {
                                return !1 === this._build && this.clear(), this.node.appendChild(e.createTextNode(t)), this
                            },
                            tspan: function (t) {
                                var e = (this.textPath && this.textPath() || this).node,
                                    i = new l.Tspan;
                                return !1 === this._build && this.clear(), e.appendChild(i.node), i.text(t)
                            },
                            clear: function () {
                                for (var t = (this.textPath && this.textPath() || this).node; t.hasChildNodes();) t.removeChild(t.lastChild);
                                return this
                            },
                            length: function () {
                                return this.node.getComputedTextLength()
                            }
                        }), l.TextPath = l.invent({
                            create: "textPath",
                            inherit: l.Parent,
                            parent: l.Text,
                            construct: {
                                morphArray: l.PathArray,
                                array: function () {
                                    var t = this.track();
                                    return t ? t.array() : null
                                },
                                plot: function (t) {
                                    var e = this.track(),
                                        l = null;
                                    return e && (l = e.plot(t)), null == t ? l : this
                                },
                                track: function () {
                                    var t = this.textPath();
                                    if (t) return t.reference("href")
                                },
                                textPath: function () {
                                    if (this.node.firstChild && "textPath" == this.node.firstChild.nodeName) return l.adopt(this.node.firstChild)
                                }
                            }
                        }), l.Nested = l.invent({
                            create: function () {
                                this.constructor.call(this, l.create("svg")), this.style("overflow", "visible")
                            },
                            inherit: l.Container,
                            construct: {
                                nested: function () {
                                    return this.put(new l.Nested)
                                }
                            }
                        });
                        var r = {
                            stroke: ["color", "width", "opacity", "linecap", "linejoin", "miterlimit", "dasharray", "dashoffset"],
                            fill: ["color", "opacity", "rule"],
                            prefix: function (t, e) {
                                return "color" == e ? t : t + "-" + e
                            }
                        };

                        function h(t, e, i, a) {
                            return i + a.replace(l.regex.dots, " .")
                        }

                        function c(t) {
                            return t.toLowerCase().replace(/-(.)/g, (function (t, e) {
                                return e.toUpperCase()
                            }))
                        }

                        function d(t) {
                            return t.charAt(0).toUpperCase() + t.slice(1)
                        }

                        function u(t) {
                            var e = t.toString(16);
                            return 1 == e.length ? "0" + e : e
                        }

                        function g(t, e, l) {
                            if (null == e || null == l) {
                                var i = t.bbox();
                                null == e ? e = i.width / i.height * l : null == l && (l = i.height / i.width * e)
                            }
                            return {
                                width: e,
                                height: l
                            }
                        }

                        function p(t, e, l) {
                            return {
                                x: e * t.a + l * t.c + 0,
                                y: e * t.b + l * t.d + 0
                            }
                        }

                        function f(t) {
                            return {
                                a: t[0],
                                b: t[1],
                                c: t[2],
                                d: t[3],
                                e: t[4],
                                f: t[5]
                            }
                        }

                        function v(e) {
                            for (var i = e.childNodes.length - 1; i >= 0; i--) e.childNodes[i] instanceof t.SVGElement && v(e.childNodes[i]);
                            return l.adopt(e).id(l.eid(e.nodeName))
                        }

                        function x(t) {
                            return null == t.x && (t.x = 0, t.y = 0, t.width = 0, t.height = 0), t.w = t.width, t.h = t.height, t.x2 = t.x + t.width, t.y2 = t.y + t.height, t.cx = t.x + t.width / 2, t.cy = t.y + t.height / 2, t
                        }

                        function m(t) {
                            return Math.abs(t) > 1e-37 ? t : 0
                        } ["fill", "stroke"].forEach((function (t) {
                            var e = {};
                            e[t] = function (e) {
                                if (void 0 === e) return this;
                                if ("string" == typeof e || l.Color.isRgb(e) || e && "function" == typeof e.fill) this.attr(t, e);
                                else
                                    for (var i = r[t].length - 1; i >= 0; i--) null != e[r[t][i]] && this.attr(r.prefix(t, r[t][i]), e[r[t][i]]);
                                return this
                            }, l.extend(l.Element, l.FX, e)
                        })), l.extend(l.Element, l.FX, {
                            translate: function (t, e) {
                                return this.transform({
                                    x: t,
                                    y: e
                                })
                            },
                            matrix: function (t) {
                                return this.attr("transform", new l.Matrix(6 == arguments.length ? [].slice.call(arguments) : t))
                            },
                            opacity: function (t) {
                                return this.attr("opacity", t)
                            },
                            dx: function (t) {
                                return this.x(new l.Number(t).plus(this instanceof l.FX ? 0 : this.x()), !0)
                            },
                            dy: function (t) {
                                return this.y(new l.Number(t).plus(this instanceof l.FX ? 0 : this.y()), !0)
                            }
                        }), l.extend(l.Path, {
                            length: function () {
                                return this.node.getTotalLength()
                            },
                            pointAt: function (t) {
                                return this.node.getPointAtLength(t)
                            }
                        }), l.Set = l.invent({
                            create: function (t) {
                                Array.isArray(t) ? this.members = t : this.clear()
                            },
                            extend: {
                                add: function () {
                                    for (var t = [].slice.call(arguments), e = 0, l = t.length; e < l; e++) this.members.push(t[e]);
                                    return this
                                },
                                remove: function (t) {
                                    var e = this.index(t);
                                    return e > -1 && this.members.splice(e, 1), this
                                },
                                each: function (t) {
                                    for (var e = 0, l = this.members.length; e < l; e++) t.apply(this.members[e], [e, this.members]);
                                    return this
                                },
                                clear: function () {
                                    return this.members = [], this
                                },
                                length: function () {
                                    return this.members.length
                                },
                                has: function (t) {
                                    return this.index(t) >= 0
                                },
                                index: function (t) {
                                    return this.members.indexOf(t)
                                },
                                get: function (t) {
                                    return this.members[t]
                                },
                                first: function () {
                                    return this.get(0)
                                },
                                last: function () {
                                    return this.get(this.members.length - 1)
                                },
                                valueOf: function () {
                                    return this.members
                                }
                            },
                            construct: {
                                set: function (t) {
                                    return new l.Set(t)
                                }
                            }
                        }), l.FX.Set = l.invent({
                            create: function (t) {
                                this.set = t
                            }
                        }), l.Set.inherit = function () {
                            var t = [];
                            for (var e in l.Shape.prototype) "function" == typeof l.Shape.prototype[e] && "function" != typeof l.Set.prototype[e] && t.push(e);
                            for (var e in t.forEach((function (t) {
                                    l.Set.prototype[t] = function () {
                                        for (var e = 0, i = this.members.length; e < i; e++) this.members[e] && "function" == typeof this.members[e][t] && this.members[e][t].apply(this.members[e], arguments);
                                        return "animate" == t ? this.fx || (this.fx = new l.FX.Set(this)) : this
                                    }
                                })), t = [], l.FX.prototype) "function" == typeof l.FX.prototype[e] && "function" != typeof l.FX.Set.prototype[e] && t.push(e);
                            t.forEach((function (t) {
                                l.FX.Set.prototype[t] = function () {
                                    for (var e = 0, l = this.set.members.length; e < l; e++) this.set.members[e].fx[t].apply(this.set.members[e].fx, arguments);
                                    return this
                                }
                            }))
                        }, l.extend(l.Element, {}), l.extend(l.Element, {
                            remember: function (t, e) {
                                if ("object" === n(arguments[0]))
                                    for (var l in t) this.remember(l, t[l]);
                                else {
                                    if (1 == arguments.length) return this.memory()[t];
                                    this.memory()[t] = e
                                }
                                return this
                            },
                            forget: function () {
                                if (0 == arguments.length) this._memory = {};
                                else
                                    for (var t = arguments.length - 1; t >= 0; t--) delete this.memory()[arguments[t]];
                                return this
                            },
                            memory: function () {
                                return this._memory || (this._memory = {})
                            }
                        }), l.get = function (t) {
                            var i = e.getElementById(function (t) {
                                var e = (t || "").toString().match(l.regex.reference);
                                if (e) return e[1]
                            }(t) || t);
                            return l.adopt(i)
                        }, l.select = function (t, i) {
                            return new l.Set(l.utils.map((i || e).querySelectorAll(t), (function (t) {
                                return l.adopt(t)
                            })))
                        }, l.extend(l.Parent, {
                            select: function (t) {
                                return l.select(t, this.node)
                            }
                        });
                        var b = "abcdef".split("");
                        if ("function" != typeof t.CustomEvent) {
                            var y = function (t, l) {
                                l = l || {
                                    bubbles: !1,
                                    cancelable: !1,
                                    detail: void 0
                                };
                                var i = e.createEvent("CustomEvent");
                                return i.initCustomEvent(t, l.bubbles, l.cancelable, l.detail), i
                            };
                            y.prototype = t.Event.prototype, l.CustomEvent = y
                        } else l.CustomEvent = t.CustomEvent;
                        return l
                    }, void 0 !== (i = function () {
                        return Ot(It, It.document)
                    }.call(e, l, e, t)) && (t.exports = i),
                    function () {
                        SVG.Filter = SVG.invent({
                            create: "filter",
                            inherit: SVG.Parent,
                            extend: {
                                source: "SourceGraphic",
                                sourceAlpha: "SourceAlpha",
                                background: "BackgroundImage",
                                backgroundAlpha: "BackgroundAlpha",
                                fill: "FillPaint",
                                stroke: "StrokePaint",
                                autoSetIn: !0,
                                put: function (t, e) {
                                    return this.add(t, e), !t.attr("in") && this.autoSetIn && t.attr("in", this.source), t.attr("result") || t.attr("result", t), t
                                },
                                blend: function (t, e, l) {
                                    return this.put(new SVG.BlendEffect(t, e, l))
                                },
                                colorMatrix: function (t, e) {
                                    return this.put(new SVG.ColorMatrixEffect(t, e))
                                },
                                convolveMatrix: function (t) {
                                    return this.put(new SVG.ConvolveMatrixEffect(t))
                                },
                                componentTransfer: function (t) {
                                    return this.put(new SVG.ComponentTransferEffect(t))
                                },
                                composite: function (t, e, l) {
                                    return this.put(new SVG.CompositeEffect(t, e, l))
                                },
                                flood: function (t, e) {
                                    return this.put(new SVG.FloodEffect(t, e))
                                },
                                offset: function (t, e) {
                                    return this.put(new SVG.OffsetEffect(t, e))
                                },
                                image: function (t) {
                                    return this.put(new SVG.ImageEffect(t))
                                },
                                merge: function () {
                                    var t = [void 0];
                                    for (var e in arguments) t.push(arguments[e]);
                                    return this.put(new(SVG.MergeEffect.bind.apply(SVG.MergeEffect, t)))
                                },
                                gaussianBlur: function (t, e) {
                                    return this.put(new SVG.GaussianBlurEffect(t, e))
                                },
                                morphology: function (t, e) {
                                    return this.put(new SVG.MorphologyEffect(t, e))
                                },
                                diffuseLighting: function (t, e, l) {
                                    return this.put(new SVG.DiffuseLightingEffect(t, e, l))
                                },
                                displacementMap: function (t, e, l, i, a) {
                                    return this.put(new SVG.DisplacementMapEffect(t, e, l, i, a))
                                },
                                specularLighting: function (t, e, l, i) {
                                    return this.put(new SVG.SpecularLightingEffect(t, e, l, i))
                                },
                                tile: function () {
                                    return this.put(new SVG.TileEffect)
                                },
                                turbulence: function (t, e, l, i, a) {
                                    return this.put(new SVG.TurbulenceEffect(t, e, l, i, a))
                                },
                                toString: function () {
                                    return "url(#" + this.attr("id") + ")"
                                }
                            }
                        }), SVG.extend(SVG.Defs, {
                            filter: function (t) {
                                var e = this.put(new SVG.Filter);
                                return "function" == typeof t && t.call(e, e), e
                            }
                        }), SVG.extend(SVG.Container, {
                            filter: function (t) {
                                return this.defs().filter(t)
                            }
                        }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
                            filter: function (t) {
                                return this.filterer = t instanceof SVG.Element ? t : this.doc().filter(t), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr("filter", this.filterer), this.filterer
                            },
                            unfilter: function (t) {
                                return this.filterer && !0 === t && this.filterer.remove(), delete this.filterer, this.attr("filter", null)
                            }
                        }), SVG.Effect = SVG.invent({
                            create: function () {
                                this.constructor.call(this)
                            },
                            inherit: SVG.Element,
                            extend: {
                                in: function (t) {
                                    return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t)
                                },
                                result: function (t) {
                                    return null == t ? this.attr("result") : this.attr("result", t)
                                },
                                toString: function () {
                                    return this.result()
                                }
                            }
                        }), SVG.ParentEffect = SVG.invent({
                            create: function () {
                                this.constructor.call(this)
                            },
                            inherit: SVG.Parent,
                            extend: {
                                in: function (t) {
                                    return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in") + '"]').get(0) || this.attr("in") : this.attr("in", t)
                                },
                                result: function (t) {
                                    return null == t ? this.attr("result") : this.attr("result", t)
                                },
                                toString: function () {
                                    return this.result()
                                }
                            }
                        });
                        var t = {
                            blend: function (t, e) {
                                return this.parent() && this.parent().blend(this, t, e)
                            },
                            colorMatrix: function (t, e) {
                                return this.parent() && this.parent().colorMatrix(t, e).in(this)
                            },
                            convolveMatrix: function (t) {
                                return this.parent() && this.parent().convolveMatrix(t).in(this)
                            },
                            componentTransfer: function (t) {
                                return this.parent() && this.parent().componentTransfer(t).in(this)
                            },
                            composite: function (t, e) {
                                return this.parent() && this.parent().composite(this, t, e)
                            },
                            flood: function (t, e) {
                                return this.parent() && this.parent().flood(t, e)
                            },
                            offset: function (t, e) {
                                return this.parent() && this.parent().offset(t, e).in(this)
                            },
                            image: function (t) {
                                return this.parent() && this.parent().image(t)
                            },
                            merge: function () {
                                return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments))
                            },
                            gaussianBlur: function (t, e) {
                                return this.parent() && this.parent().gaussianBlur(t, e).in(this)
                            },
                            morphology: function (t, e) {
                                return this.parent() && this.parent().morphology(t, e).in(this)
                            },
                            diffuseLighting: function (t, e, l) {
                                return this.parent() && this.parent().diffuseLighting(t, e, l).in(this)
                            },
                            displacementMap: function (t, e, l, i) {
                                return this.parent() && this.parent().displacementMap(this, t, e, l, i)
                            },
                            specularLighting: function (t, e, l, i) {
                                return this.parent() && this.parent().specularLighting(t, e, l, i).in(this)
                            },
                            tile: function () {
                                return this.parent() && this.parent().tile().in(this)
                            },
                            turbulence: function (t, e, l, i, a) {
                                return this.parent() && this.parent().turbulence(t, e, l, i, a).in(this)
                            }
                        };
                        SVG.extend(SVG.Effect, t), SVG.extend(SVG.ParentEffect, t), SVG.ChildEffect = SVG.invent({
                            create: function () {
                                this.constructor.call(this)
                            },
                            inherit: SVG.Element,
                            extend: {
                                in: function (t) {
                                    this.attr("in", t)
                                }
                            }
                        });
                        var e = {
                                blend: function (t, e, l) {
                                    this.attr({
                                        in: t,
                                        in2: e,
                                        mode: l || "normal"
                                    })
                                },
                                colorMatrix: function (t, e) {
                                    "matrix" == t && (e = a(e)), this.attr({
                                        type: t,
                                        values: void 0 === e ? null : e
                                    })
                                },
                                convolveMatrix: function (t) {
                                    t = a(t), this.attr({
                                        order: Math.sqrt(t.split(" ").length),
                                        kernelMatrix: t
                                    })
                                },
                                composite: function (t, e, l) {
                                    this.attr({
                                        in: t,
                                        in2: e,
                                        operator: l
                                    })
                                },
                                flood: function (t, e) {
                                    this.attr("flood-color", t), null != e && this.attr("flood-opacity", e)
                                },
                                offset: function (t, e) {
                                    this.attr({
                                        dx: t,
                                        dy: e
                                    })
                                },
                                image: function (t) {
                                    this.attr("href", t, SVG.xlink)
                                },
                                displacementMap: function (t, e, l, i, a) {
                                    this.attr({
                                        in: t,
                                        in2: e,
                                        scale: l,
                                        xChannelSelector: i,
                                        yChannelSelector: a
                                    })
                                },
                                gaussianBlur: function (t, e) {
                                    null != t || null != e ? this.attr("stdDeviation", s(Array.prototype.slice.call(arguments))) : this.attr("stdDeviation", "0 0")
                                },
                                morphology: function (t, e) {
                                    this.attr({
                                        operator: t,
                                        radius: e
                                    })
                                },
                                tile: function () {},
                                turbulence: function (t, e, l, i, a) {
                                    this.attr({
                                        numOctaves: e,
                                        seed: l,
                                        stitchTiles: i,
                                        baseFrequency: t,
                                        type: a
                                    })
                                }
                            },
                            l = {
                                merge: function () {
                                    var t;
                                    if (arguments[0] instanceof SVG.Set) {
                                        var e = this;
                                        arguments[0].each((function (t) {
                                            this instanceof SVG.MergeNode ? e.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e.put(new SVG.MergeNode(this))
                                        }))
                                    } else {
                                        t = Array.isArray(arguments[0]) ? arguments[0] : arguments;
                                        for (var l = 0; l < t.length; l++) t[l] instanceof SVG.MergeNode ? this.put(t[l]) : this.put(new SVG.MergeNode(t[l]))
                                    }
                                },
                                componentTransfer: function (t) {
                                    if (this.rgb = new SVG.Set, ["r", "g", "b", "a"].forEach(function (t) {
                                            this[t] = new(SVG["Func" + t.toUpperCase()])("identity"), this.rgb.add(this[t]), this.node.appendChild(this[t].node)
                                        }.bind(this)), t)
                                        for (var e in t.rgb && (["r", "g", "b"].forEach(function (e) {
                                                this[e].attr(t.rgb)
                                            }.bind(this)), delete t.rgb), t) this[e].attr(t[e])
                                },
                                diffuseLighting: function (t, e, l) {
                                    this.attr({
                                        surfaceScale: t,
                                        diffuseConstant: e,
                                        kernelUnitLength: l
                                    })
                                },
                                specularLighting: function (t, e, l, i) {
                                    this.attr({
                                        surfaceScale: t,
                                        diffuseConstant: e,
                                        specularExponent: l,
                                        kernelUnitLength: i
                                    })
                                }
                            },
                            i = {
                                distantLight: function (t, e) {
                                    this.attr({
                                        azimuth: t,
                                        elevation: e
                                    })
                                },
                                pointLight: function (t, e, l) {
                                    this.attr({
                                        x: t,
                                        y: e,
                                        z: l
                                    })
                                },
                                spotLight: function (t, e, l, i, a, s) {
                                    this.attr({
                                        x: t,
                                        y: e,
                                        z: l,
                                        pointsAtX: i,
                                        pointsAtY: a,
                                        pointsAtZ: s
                                    })
                                },
                                mergeNode: function (t) {
                                    this.attr("in", t)
                                }
                            };

                        function a(t) {
                            return Array.isArray(t) && (t = new SVG.Array(t)), t.toString().replace(/^\s+/, "").replace(/\s+$/, "").replace(/\s+/g, " ")
                        }

                        function s(t) {
                            if (!Array.isArray(t)) return t;
                            for (var e = 0, l = t.length, i = []; e < l; e++) i.push(t[e]);
                            return i.join(" ")
                        }

                        function n() {
                            var t = function () {};
                            for (var e in "function" == typeof arguments[arguments.length - 1] && (t = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments)
                                for (var l in arguments[e]) t(arguments[e][l], l, arguments[e])
                        } ["r", "g", "b", "a"].forEach((function (t) {
                            i["Func" + t.toUpperCase()] = function (t) {
                                switch (this.attr("type", t), t) {
                                    case "table":
                                        this.attr("tableValues", arguments[1]);
                                        break;
                                    case "linear":
                                        this.attr("slope", arguments[1]), this.attr("intercept", arguments[2]);
                                        break;
                                    case "gamma":
                                        this.attr("amplitude", arguments[1]), this.attr("exponent", arguments[2]), this.attr("offset", arguments[2])
                                }
                            }
                        })), n(e, (function (t, e) {
                            var l = e.charAt(0).toUpperCase() + e.slice(1);
                            SVG[l + "Effect"] = SVG.invent({
                                create: function () {
                                    this.constructor.call(this, SVG.create("fe" + l)), t.apply(this, arguments), this.result(this.attr("id") + "Out")
                                },
                                inherit: SVG.Effect,
                                extend: {}
                            })
                        })), n(l, (function (t, e) {
                            var l = e.charAt(0).toUpperCase() + e.slice(1);
                            SVG[l + "Effect"] = SVG.invent({
                                create: function () {
                                    this.constructor.call(this, SVG.create("fe" + l)), t.apply(this, arguments), this.result(this.attr("id") + "Out")
                                },
                                inherit: SVG.ParentEffect,
                                extend: {}
                            })
                        })), n(i, (function (t, e) {
                            var l = e.charAt(0).toUpperCase() + e.slice(1);
                            SVG[l] = SVG.invent({
                                create: function () {
                                    this.constructor.call(this, SVG.create("fe" + l)), t.apply(this, arguments)
                                },
                                inherit: SVG.ChildEffect,
                                extend: {}
                            })
                        })), SVG.extend(SVG.MergeEffect, {
                            in: function (t) {
                                return t instanceof SVG.MergeNode ? this.add(t, 0) : this.add(new SVG.MergeNode(t), 0), this
                            }
                        }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {
                            in2: function (t) {
                                return null == t ? this.parent() && this.parent().select('[result="' + this.attr("in2") + '"]').get(0) || this.attr("in2") : this.attr("in2", t)
                            }
                        }), SVG.filter = {
                            sepiatone: [.343, .669, .119, 0, 0, .249, .626, .13, 0, 0, .172, .334, .111, 0, 0, 0, 0, 0, 1, 0]
                        }
                    }.call(void 0),
                    function () {
                        function t(t, a, s, n, o, r, h) {
                            for (var c = t.slice(a, s || h), d = n.slice(o, r || h), u = 0, g = {
                                    pos: [0, 0],
                                    start: [0, 0]
                                }, p = {
                                    pos: [0, 0],
                                    start: [0, 0]
                                }; c[u] = e.call(g, c[u]), d[u] = e.call(p, d[u]), c[u][0] != d[u][0] || "M" == c[u][0] || "A" == c[u][0] && (c[u][4] != d[u][4] || c[u][5] != d[u][5]) ? (Array.prototype.splice.apply(c, [u, 1].concat(i.call(g, c[u]))), Array.prototype.splice.apply(d, [u, 1].concat(i.call(p, d[u])))) : (c[u] = l.call(g, c[u]), d[u] = l.call(p, d[u])), ++u != c.length || u != d.length;) u == c.length && c.push(["C", g.pos[0], g.pos[1], g.pos[0], g.pos[1], g.pos[0], g.pos[1]]), u == d.length && d.push(["C", p.pos[0], p.pos[1], p.pos[0], p.pos[1], p.pos[0], p.pos[1]]);
                            return {
                                start: c,
                                dest: d
                            }
                        }

                        function e(t) {
                            switch (t[0]) {
                                case "z":
                                case "Z":
                                    t[0] = "L", t[1] = this.start[0], t[2] = this.start[1];
                                    break;
                                case "H":
                                    t[0] = "L", t[2] = this.pos[1];
                                    break;
                                case "V":
                                    t[0] = "L", t[2] = t[1], t[1] = this.pos[0];
                                    break;
                                case "T":
                                    t[0] = "Q", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];
                                    break;
                                case "S":
                                    t[0] = "C", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0]
                            }
                            return t
                        }

                        function l(t) {
                            var e = t.length;
                            return this.pos = [t[e - 2], t[e - 1]], -1 != "SCQT".indexOf(t[0]) && (this.reflection = [2 * this.pos[0] - t[e - 4], 2 * this.pos[1] - t[e - 3]]), t
                        }

                        function i(t) {
                            var e = [t];
                            switch (t[0]) {
                                case "M":
                                    return this.pos = this.start = [t[1], t[2]], e;
                                case "L":
                                    t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];
                                    break;
                                case "Q":
                                    t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;
                                    break;
                                case "A":
                                    t = (e = function (t, e) {
                                        var l, i, a, s, n, o, r, h, c, d, u, g, p, f, v, x, m, b, y, w, A, S, k, L, C, M, z = Math.abs(e[1]),
                                            E = Math.abs(e[2]),
                                            P = e[3] % 360,
                                            T = e[4],
                                            I = e[5],
                                            O = e[6],
                                            D = e[7],
                                            N = new SVG.Point(t),
                                            X = new SVG.Point(O, D),
                                            R = [];
                                        if (0 === z || 0 === E || N.x === X.x && N.y === X.y) return [
                                            ["C", N.x, N.y, X.x, X.y, X.x, X.y]
                                        ];
                                        for ((i = (l = new SVG.Point((N.x - X.x) / 2, (N.y - X.y) / 2).transform((new SVG.Matrix).rotate(P))).x * l.x / (z * z) + l.y * l.y / (E * E)) > 1 && (z *= i = Math.sqrt(i), E *= i), a = (new SVG.Matrix).rotate(P).scale(1 / z, 1 / E).rotate(-P), N = N.transform(a), o = (s = [(X = X.transform(a)).x - N.x, X.y - N.y])[0] * s[0] + s[1] * s[1], n = Math.sqrt(o), s[0] /= n, s[1] /= n, r = o < 4 ? Math.sqrt(1 - o / 4) : 0, T === I && (r *= -1), h = new SVG.Point((X.x + N.x) / 2 + r * -s[1], (X.y + N.y) / 2 + r * s[0]), c = new SVG.Point(N.x - h.x, N.y - h.y), d = new SVG.Point(X.x - h.x, X.y - h.y), u = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (u *= -1), g = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (g *= -1), I && u > g && (g += 2 * Math.PI), !I && u < g && (g -= 2 * Math.PI), x = [], m = u, p = (g - u) / (f = Math.ceil(2 * Math.abs(u - g) / Math.PI)), v = 4 * Math.tan(p / 4) / 3, A = 0; A <= f; A++) y = Math.cos(m), b = Math.sin(m), w = new SVG.Point(h.x + y, h.y + b), x[A] = [new SVG.Point(w.x + v * b, w.y - v * y), w, new SVG.Point(w.x - v * b, w.y + v * y)], m += p;
                                        for (x[0][0] = x[0][1].clone(), x[x.length - 1][2] = x[x.length - 1][1].clone(), a = (new SVG.Matrix).rotate(P).scale(z, E).rotate(-P), A = 0, S = x.length; A < S; A++) x[A][0] = x[A][0].transform(a), x[A][1] = x[A][1].transform(a), x[A][2] = x[A][2].transform(a);
                                        for (A = 1, S = x.length; A < S; A++) k = (w = x[A - 1][2]).x, L = w.y, C = (w = x[A][0]).x, M = w.y, O = (w = x[A][1]).x, D = w.y, R.push(["C", k, L, C, M, O, D]);
                                        return R
                                    }(this.pos, t))[0]
                            }
                            return t[0] = "C", this.pos = [t[5], t[6]], this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]], e
                        }

                        function a(t, e) {
                            if (!1 === e) return !1;
                            for (var l = e, i = t.length; l < i; ++l)
                                if ("M" == t[l][0]) return l;
                            return !1
                        }
                        SVG.extend(SVG.PathArray, {
                            morph: function (e) {
                                for (var l = this.value, i = this.parse(e), s = 0, n = 0, o = !1, r = !1; !1 !== s || !1 !== n;) {
                                    var h;
                                    o = a(l, !1 !== s && s + 1), r = a(i, !1 !== n && n + 1), !1 === s && (s = 0 == (h = new SVG.PathArray(c.start).bbox()).height || 0 == h.width ? l.push(l[0]) - 1 : l.push(["M", h.x + h.width / 2, h.y + h.height / 2]) - 1), !1 === n && (n = 0 == (h = new SVG.PathArray(c.dest).bbox()).height || 0 == h.width ? i.push(i[0]) - 1 : i.push(["M", h.x + h.width / 2, h.y + h.height / 2]) - 1);
                                    var c = t(l, s, o, i, n, r);
                                    l = l.slice(0, s).concat(c.start, !1 === o ? [] : l.slice(o)), i = i.slice(0, n).concat(c.dest, !1 === r ? [] : i.slice(r)), s = !1 !== o && s + c.start.length, n = !1 !== r && n + c.dest.length
                                }
                                return this.value = l, this.destination = new SVG.PathArray, this.destination.value = i, this
                            }
                        })
                    }(),
                    function () {
                        function t(t) {
                            t.remember("_draggable", this), this.el = t
                        }
                        t.prototype.init = function (t, e) {
                            var l = this;
                            this.constraint = t, this.value = e, this.el.on("mousedown.drag", (function (t) {
                                l.start(t)
                            })), this.el.on("touchstart.drag", (function (t) {
                                l.start(t)
                            }))
                        }, t.prototype.transformPoint = function (t, e) {
                            var l = (t = t || window.event).changedTouches && t.changedTouches[0] || t;
                            return this.p.x = l.clientX - (e || 0), this.p.y = l.clientY, this.p.matrixTransform(this.m)
                        }, t.prototype.getBBox = function () {
                            var t = this.el.bbox();
                            return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t.x = this.el.x(), t.y = this.el.y()), t
                        }, t.prototype.start = function (t) {
                            if ("click" != t.type && "mousedown" != t.type && "mousemove" != t.type || 1 == (t.which || t.buttons)) {
                                var e = this;
                                if (this.el.fire("beforedrag", {
                                        event: t,
                                        handler: this
                                    }), !this.el.event().defaultPrevented) {
                                    t.preventDefault(), t.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();
                                    var l, i = this.getBBox();
                                    if (this.el instanceof SVG.Text) switch (l = this.el.node.getComputedTextLength(), this.el.attr("text-anchor")) {
                                        case "middle":
                                            l /= 2;
                                            break;
                                        case "start":
                                            l = 0
                                    }
                                    this.startPoints = {
                                        point: this.transformPoint(t, l),
                                        box: i,
                                        transform: this.el.transform()
                                    }, SVG.on(window, "mousemove.drag", (function (t) {
                                        e.drag(t)
                                    })), SVG.on(window, "touchmove.drag", (function (t) {
                                        e.drag(t)
                                    })), SVG.on(window, "mouseup.drag", (function (t) {
                                        e.end(t)
                                    })), SVG.on(window, "touchend.drag", (function (t) {
                                        e.end(t)
                                    })), this.el.fire("dragstart", {
                                        event: t,
                                        p: this.startPoints.point,
                                        m: this.m,
                                        handler: this
                                    })
                                }
                            }
                        }, t.prototype.drag = function (t) {
                            var e = this.getBBox(),
                                l = this.transformPoint(t),
                                i = this.startPoints.box.x + l.x - this.startPoints.point.x,
                                a = this.startPoints.box.y + l.y - this.startPoints.point.y,
                                s = this.constraint,
                                n = l.x - this.startPoints.point.x,
                                o = l.y - this.startPoints.point.y;
                            if (this.el.fire("dragmove", {
                                    event: t,
                                    p: l,
                                    m: this.m,
                                    handler: this
                                }), this.el.event().defaultPrevented) return l;
                            if ("function" == typeof s) {
                                var r = s.call(this.el, i, a, this.m);
                                "boolean" == typeof r && (r = {
                                    x: r,
                                    y: r
                                }), !0 === r.x ? this.el.x(i) : !1 !== r.x && this.el.x(r.x), !0 === r.y ? this.el.y(a) : !1 !== r.y && this.el.y(r.y)
                            } else "object" == typeof s && (null != s.minX && i < s.minX ? n = (i = s.minX) - this.startPoints.box.x : null != s.maxX && i > s.maxX - e.width && (n = (i = s.maxX - e.width) - this.startPoints.box.x), null != s.minY && a < s.minY ? o = (a = s.minY) - this.startPoints.box.y : null != s.maxY && a > s.maxY - e.height && (o = (a = s.maxY - e.height) - this.startPoints.box.y), null != s.snapToGrid && (i -= i % s.snapToGrid, a -= a % s.snapToGrid, n -= n % s.snapToGrid, o -= o % s.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({
                                x: n,
                                y: o
                            }, !0) : this.el.move(i, a));
                            return l
                        }, t.prototype.end = function (t) {
                            var e = this.drag(t);
                            this.el.fire("dragend", {
                                event: t,
                                p: e,
                                m: this.m,
                                handler: this
                            }), SVG.off(window, "mousemove.drag"), SVG.off(window, "touchmove.drag"), SVG.off(window, "mouseup.drag"), SVG.off(window, "touchend.drag")
                        }, SVG.extend(SVG.Element, {
                            draggable: function (e, l) {
                                "function" != typeof e && "object" != typeof e || (l = e, e = !0);
                                var i = this.remember("_draggable") || new t(this);
                                return (e = void 0 === e || e) ? i.init(l || {}, e) : (this.off("mousedown.drag"), this.off("touchstart.drag")), this
                            }
                        })
                    }.call(void 0),
                    function () {
                        function t(t) {
                            this.el = t, t.remember("_selectHandler", this), this.pointSelection = {
                                isSelected: !1
                            }, this.rectSelection = {
                                isSelected: !1
                            }, this.pointsList = {
                                lt: [0, 0],
                                rt: ["width", 0],
                                rb: ["width", "height"],
                                lb: [0, "height"],
                                t: ["width", 0],
                                r: ["width", "height"],
                                b: ["width", "height"],
                                l: [0, "height"]
                            }, this.pointCoord = function (t, e, l) {
                                var i = "string" != typeof t ? t : e[t];
                                return l ? i / 2 : i
                            }, this.pointCoords = function (t, e) {
                                var l = this.pointsList[t];
                                return {
                                    x: this.pointCoord(l[0], e, "t" === t || "b" === t),
                                    y: this.pointCoord(l[1], e, "r" === t || "l" === t)
                                }
                            }
                        }
                        t.prototype.init = function (t, e) {
                            var l = this.el.bbox();
                            this.options = {};
                            var i = this.el.selectize.defaults.points;
                            for (var a in this.el.selectize.defaults) this.options[a] = this.el.selectize.defaults[a], void 0 !== e[a] && (this.options[a] = e[a]);
                            var s = ["points", "pointsExclude"];
                            for (var a in s) {
                                var n = this.options[s[a]];
                                "string" == typeof n ? n = n.length > 0 ? n.split(/\s*,\s*/i) : [] : "boolean" == typeof n && "points" === s[a] && (n = n ? i : []), this.options[s[a]] = n
                            }
                            this.options.points = [i, this.options.points].reduce((function (t, e) {
                                return t.filter((function (t) {
                                    return e.indexOf(t) > -1
                                }))
                            })), this.options.points = [this.options.points, this.options.pointsExclude].reduce((function (t, e) {
                                return t.filter((function (t) {
                                    return e.indexOf(t) < 0
                                }))
                            })), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(l.x, l.y)), this.options.deepSelect && -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup()
                        }, t.prototype.selectPoints = function (t) {
                            return this.pointSelection.isSelected = t, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this
                        }, t.prototype.getPointArray = function () {
                            var t = this.el.bbox();
                            return this.el.array().valueOf().map((function (e) {
                                return [e[0] - t.x, e[1] - t.y]
                            }))
                        }, t.prototype.drawPoints = function () {
                            for (var t = this, e = this.getPointArray(), l = 0, i = e.length; l < i; ++l) {
                                var a = function (e) {
                                        return function (l) {
                                            (l = l || window.event).preventDefault ? l.preventDefault() : l.returnValue = !1, l.stopPropagation();
                                            var i = l.pageX || l.touches[0].pageX,
                                                a = l.pageY || l.touches[0].pageY;
                                            t.el.fire("point", {
                                                x: i,
                                                y: a,
                                                i: e,
                                                event: l
                                            })
                                        }
                                    }(l),
                                    s = this.drawPoint(e[l][0], e[l][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + "_point").on("touchstart", a).on("mousedown", a);
                                this.pointSelection.set.add(s)
                            }
                        }, t.prototype.drawPoint = function (t, e) {
                            var l = this.options.pointType;
                            switch (l) {
                                case "circle":
                                    return this.drawCircle(t, e);
                                case "rect":
                                    return this.drawRect(t, e);
                                default:
                                    if ("function" == typeof l) return l.call(this, t, e);
                                    throw new Error("Unknown " + l + " point type!")
                            }
                        }, t.prototype.drawCircle = function (t, e) {
                            return this.nested.circle(this.options.pointSize).center(t, e)
                        }, t.prototype.drawRect = function (t, e) {
                            return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t, e)
                        }, t.prototype.updatePointSelection = function () {
                            var t = this.getPointArray();
                            this.pointSelection.set.each((function (e) {
                                this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1])
                            }))
                        }, t.prototype.updateRectSelection = function () {
                            var t = this,
                                e = this.el.bbox();
                            if (this.rectSelection.set.get(0).attr({
                                    width: e.width,
                                    height: e.height
                                }), this.options.points.length && this.options.points.map((function (l, i) {
                                    var a = t.pointCoords(l, e);
                                    t.rectSelection.set.get(i + 1).center(a.x, a.y)
                                })), this.options.rotationPoint) {
                                var l = this.rectSelection.set.length();
                                this.rectSelection.set.get(l - 1).center(e.width / 2, 20)
                            }
                        }, t.prototype.selectRect = function (t) {
                            var e = this,
                                l = this.el.bbox();

                            function i(t) {
                                return function (l) {
                                    (l = l || window.event).preventDefault ? l.preventDefault() : l.returnValue = !1, l.stopPropagation();
                                    var i = l.pageX || l.touches[0].pageX,
                                        a = l.pageY || l.touches[0].pageY;
                                    e.el.fire(t, {
                                        x: i,
                                        y: a,
                                        event: l
                                    })
                                }
                            }
                            if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(l.width, l.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2 && (this.options.points.map((function (t, a) {
                                    var s = e.pointCoords(t, l),
                                        n = e.drawPoint(s.x, s.y).attr("class", e.options.classPoints + "_" + t).on("mousedown", i(t)).on("touchstart", i(t));
                                    e.rectSelection.set.add(n)
                                })), this.rectSelection.set.each((function () {
                                    this.addClass(e.options.classPoints)
                                }))), this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {
                                var a = function (t) {
                                        (t = t || window.event).preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation();
                                        var l = t.pageX || t.touches[0].pageX,
                                            i = t.pageY || t.touches[0].pageY;
                                        e.el.fire("rot", {
                                            x: l,
                                            y: i,
                                            event: t
                                        })
                                    },
                                    s = this.drawPoint(l.width / 2, 20).attr("class", this.options.classPoints + "_rot").on("touchstart", a).on("mousedown", a);
                                this.rectSelection.set.add(s)
                            }
                        }, t.prototype.handler = function () {
                            var t = this.el.bbox();
                            this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection()
                        }, t.prototype.observe = function () {
                            var t = this;
                            if (MutationObserver)
                                if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver((function () {
                                    t.handler()
                                })), this.observerInst.observe(this.el.node, {
                                    attributes: !0
                                });
                                else try {
                                    this.observerInst.disconnect(), delete this.observerInst
                                } catch (t) {} else this.el.off("DOMAttrModified.select"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on("DOMAttrModified.select", (function () {
                                    t.handler()
                                }))
                        }, t.prototype.cleanup = function () {
                            !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each((function () {
                                this.remove()
                            })), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each((function () {
                                this.remove()
                            })), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested)
                        }, SVG.extend(SVG.Element, {
                            selectize: function (e, l) {
                                return "object" == typeof e && (l = e, e = !0), (this.remember("_selectHandler") || new t(this)).init(void 0 === e || e, l || {}), this
                            }
                        }), SVG.Element.prototype.selectize.defaults = {
                            points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"],
                            pointsExclude: [],
                            classRect: "svg_select_boundingRect",
                            classPoints: "svg_select_points",
                            pointSize: 7,
                            rotationPoint: !0,
                            deepSelect: !1,
                            pointType: "circle"
                        }
                    }(),
                    function () {
                        (function () {
                            function t(t) {
                                t.remember("_resizeHandler", this), this.el = t, this.parameters = {}, this.lastUpdateCall = null, this.p = t.doc().node.createSVGPoint()
                            }
                            t.prototype.transformPoint = function (t, e, l) {
                                return this.p.x = t - (this.offset.x - window.pageXOffset), this.p.y = e - (this.offset.y - window.pageYOffset), this.p.matrixTransform(l || this.m)
                            }, t.prototype._extractPosition = function (t) {
                                return {
                                    x: null != t.clientX ? t.clientX : t.touches[0].clientX,
                                    y: null != t.clientY ? t.clientY : t.touches[0].clientY
                                }
                            }, t.prototype.init = function (t) {
                                var e = this;
                                if (this.stop(), "stop" !== t) {
                                    for (var l in this.options = {}, this.el.resize.defaults) this.options[l] = this.el.resize.defaults[l], void 0 !== t[l] && (this.options[l] = t[l]);
                                    this.el.on("lt.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("rt.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("rb.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("lb.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("t.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("r.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("b.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("l.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("rot.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.el.on("point.resize", (function (t) {
                                        e.resize(t || window.event)
                                    })), this.update()
                                }
                            }, t.prototype.stop = function () {
                                return this.el.off("lt.resize"), this.el.off("rt.resize"), this.el.off("rb.resize"), this.el.off("lb.resize"), this.el.off("t.resize"), this.el.off("r.resize"), this.el.off("b.resize"), this.el.off("l.resize"), this.el.off("rot.resize"), this.el.off("point.resize"), this
                            }, t.prototype.resize = function (t) {
                                var e = this;
                                this.m = this.el.node.getScreenCTM().inverse(), this.offset = {
                                    x: window.pageXOffset,
                                    y: window.pageYOffset
                                };
                                var l = this._extractPosition(t.detail.event);
                                if (this.parameters = {
                                        type: this.el.type,
                                        p: this.transformPoint(l.x, l.y),
                                        x: t.detail.x,
                                        y: t.detail.y,
                                        box: this.el.bbox(),
                                        rotation: this.el.transform().rotation
                                    }, "text" === this.el.type && (this.parameters.fontSize = this.el.attr()["font-size"]), void 0 !== t.detail.i) {
                                    var i = this.el.array().valueOf();
                                    this.parameters.i = t.detail.i, this.parameters.pointCoords = [i[t.detail.i][0], i[t.detail.i][1]]
                                }
                                switch (t.type) {
                                    case "lt":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e);
                                            if (this.parameters.box.width - l[0] > 0 && this.parameters.box.height - l[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + l[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - l[0]);
                                                l = this.checkAspectRatio(l), this.el.move(this.parameters.box.x + l[0], this.parameters.box.y + l[1]).size(this.parameters.box.width - l[0], this.parameters.box.height - l[1])
                                            }
                                        };
                                        break;
                                    case "rt":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, 2);
                                            if (this.parameters.box.width + l[0] > 0 && this.parameters.box.height - l[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - l[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + l[0]);
                                                l = this.checkAspectRatio(l, !0), this.el.move(this.parameters.box.x, this.parameters.box.y + l[1]).size(this.parameters.box.width + l[0], this.parameters.box.height - l[1])
                                            }
                                        };
                                        break;
                                    case "rb":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, 0);
                                            if (this.parameters.box.width + l[0] > 0 && this.parameters.box.height + l[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x - l[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize + l[0]);
                                                l = this.checkAspectRatio(l), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + l[0], this.parameters.box.height + l[1])
                                            }
                                        };
                                        break;
                                    case "lb":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, 1);
                                            if (this.parameters.box.width - l[0] > 0 && this.parameters.box.height + l[1] > 0) {
                                                if ("text" === this.parameters.type) return this.el.move(this.parameters.box.x + l[0], this.parameters.box.y), void this.el.attr("font-size", this.parameters.fontSize - l[0]);
                                                l = this.checkAspectRatio(l, !0), this.el.move(this.parameters.box.x + l[0], this.parameters.box.y).size(this.parameters.box.width - l[0], this.parameters.box.height + l[1])
                                            }
                                        };
                                        break;
                                    case "t":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, 2);
                                            if (this.parameters.box.height - l[1] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x, this.parameters.box.y + l[1]).height(this.parameters.box.height - l[1])
                                            }
                                        };
                                        break;
                                    case "r":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, 0);
                                            if (this.parameters.box.width + l[0] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + l[0])
                                            }
                                        };
                                        break;
                                    case "b":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, 0);
                                            if (this.parameters.box.height + l[1] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + l[1])
                                            }
                                        };
                                        break;
                                    case "l":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, 1);
                                            if (this.parameters.box.width - l[0] > 0) {
                                                if ("text" === this.parameters.type) return;
                                                this.el.move(this.parameters.box.x + l[0], this.parameters.box.y).width(this.parameters.box.width - l[0])
                                            }
                                        };
                                        break;
                                    case "rot":
                                        this.calc = function (t, e) {
                                            var l = t + this.parameters.p.x,
                                                i = e + this.parameters.p.y,
                                                a = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),
                                                s = Math.atan2(i - this.parameters.box.y - this.parameters.box.height / 2, l - this.parameters.box.x - this.parameters.box.width / 2),
                                                n = this.parameters.rotation + 180 * (s - a) / Math.PI + this.options.snapToAngle / 2;
                                            this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(n - n % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy)
                                        };
                                        break;
                                    case "point":
                                        this.calc = function (t, e) {
                                            var l = this.snapToGrid(t, e, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),
                                                i = this.el.array().valueOf();
                                            i[this.parameters.i][0] = this.parameters.pointCoords[0] + l[0], i[this.parameters.i][1] = this.parameters.pointCoords[1] + l[1], this.el.plot(i)
                                        }
                                }
                                this.el.fire("resizestart", {
                                    dx: this.parameters.x,
                                    dy: this.parameters.y,
                                    event: t
                                }), SVG.on(window, "touchmove.resize", (function (t) {
                                    e.update(t || window.event)
                                })), SVG.on(window, "touchend.resize", (function () {
                                    e.done()
                                })), SVG.on(window, "mousemove.resize", (function (t) {
                                    e.update(t || window.event)
                                })), SVG.on(window, "mouseup.resize", (function () {
                                    e.done()
                                }))
                            }, t.prototype.update = function (t) {
                                if (t) {
                                    var e = this._extractPosition(t),
                                        l = this.transformPoint(e.x, e.y),
                                        i = l.x - this.parameters.p.x,
                                        a = l.y - this.parameters.p.y;
                                    this.lastUpdateCall = [i, a], this.calc(i, a), this.el.fire("resizing", {
                                        dx: i,
                                        dy: a,
                                        event: t
                                    })
                                } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1])
                            }, t.prototype.done = function () {
                                this.lastUpdateCall = null, SVG.off(window, "mousemove.resize"), SVG.off(window, "mouseup.resize"), SVG.off(window, "touchmove.resize"), SVG.off(window, "touchend.resize"), this.el.fire("resizedone")
                            }, t.prototype.snapToGrid = function (t, e, l, i) {
                                var a;
                                return void 0 !== i ? a = [(l + t) % this.options.snapToGrid, (i + e) % this.options.snapToGrid] : (l = null == l ? 3 : l, a = [(this.parameters.box.x + t + (1 & l ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e + (2 & l ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t < 0 && (a[0] -= this.options.snapToGrid), e < 0 && (a[1] -= this.options.snapToGrid), t -= Math.abs(a[0]) < this.options.snapToGrid / 2 ? a[0] : a[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e -= Math.abs(a[1]) < this.options.snapToGrid / 2 ? a[1] : a[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t, e, l, i)
                            }, t.prototype.constraintToBox = function (t, e, l, i) {
                                var a, s, n = this.options.constraint || {};
                                return void 0 !== i ? (a = l, s = i) : (a = this.parameters.box.x + (1 & l ? 0 : this.parameters.box.width), s = this.parameters.box.y + (2 & l ? 0 : this.parameters.box.height)), void 0 !== n.minX && a + t < n.minX && (t = n.minX - a), void 0 !== n.maxX && a + t > n.maxX && (t = n.maxX - a), void 0 !== n.minY && s + e < n.minY && (e = n.minY - s), void 0 !== n.maxY && s + e > n.maxY && (e = n.maxY - s), [t, e]
                            }, t.prototype.checkAspectRatio = function (t, e) {
                                if (!this.options.saveAspectRatio) return t;
                                var l = t.slice(),
                                    i = this.parameters.box.width / this.parameters.box.height,
                                    a = this.parameters.box.width + t[0],
                                    s = this.parameters.box.height - t[1],
                                    n = a / s;
                                return n < i ? (l[1] = a / i - this.parameters.box.height, e && (l[1] = -l[1])) : n > i && (l[0] = this.parameters.box.width - s * i, e && (l[0] = -l[0])), l
                            }, SVG.extend(SVG.Element, {
                                resize: function (e) {
                                    return (this.remember("_resizeHandler") || new t(this)).init(e || {}), this
                                }
                            }), SVG.Element.prototype.resize.defaults = {
                                snapToAngle: .1,
                                snapToGrid: 1,
                                constraint: {},
                                saveAspectRatio: !1
                            }
                        }).call(this)
                    }(), void 0 === window.Apex && (window.Apex = {});
                var Yt = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "initModules",
                            value: function () {
                                this.ctx.publicMethods = ["updateOptions", "updateSeries", "appendData", "appendSeries", "toggleSeries", "showSeries", "hideSeries", "setLocale", "resetSeries", "zoomX", "toggleDataPointSelection", "dataURI", "addXaxisAnnotation", "addYaxisAnnotation", "addPointAnnotation", "clearAnnotations", "removeAnnotation", "paper", "destroy"], this.ctx.eventList = ["click", "mousedown", "mousemove", "mouseleave", "touchstart", "touchmove", "touchleave", "mouseup", "touchend"], this.ctx.animations = new b(this.ctx), this.ctx.axes = new et(this.ctx), this.ctx.core = new Xt(this.ctx.el, this.ctx), this.ctx.config = new B({}), this.ctx.data = new V(this.ctx), this.ctx.grid = new q(this.ctx), this.ctx.graphics = new w(this.ctx), this.ctx.coreUtils = new k(this.ctx), this.ctx.crosshairs = new lt(this.ctx), this.ctx.events = new Q(this.ctx), this.ctx.exports = new U(this.ctx), this.ctx.localization = new tt(this.ctx), this.ctx.options = new z, this.ctx.responsive = new it(this.ctx), this.ctx.series = new N(this.ctx), this.ctx.theme = new at(this.ctx), this.ctx.formatters = new _(this.ctx), this.ctx.titleSubtitle = new st(this.ctx), this.ctx.legend = new ut(this.ctx), this.ctx.toolbar = new gt(this.ctx), this.ctx.dimensions = new ct(this.ctx), this.ctx.updateHelpers = new Rt(this.ctx), this.ctx.zoomPanSelection = new pt(this.ctx), this.ctx.w.globals.tooltip = new wt(this.ctx)
                            }
                        }]), t
                    }(),
                    Ft = function () {
                        function t(e) {
                            o(this, t), this.ctx = e, this.w = e.w
                        }
                        return h(t, [{
                            key: "clear",
                            value: function (t) {
                                var e = t.isUpdating;
                                this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({
                                    isUpdating: e
                                })
                            }
                        }, {
                            key: "killSVG",
                            value: function (t) {
                                t.each((function (t, e) {
                                    this.removeClass("*"), this.off(), this.stop()
                                }), !0), t.ungroup(), t.clear()
                            }
                        }, {
                            key: "clearDomElements",
                            value: function (t) {
                                var e = this,
                                    l = t.isUpdating,
                                    i = this.w.globals.dom.Paper.node;
                                i.parentNode && i.parentNode.parentNode && !l && (i.parentNode.parentNode.style.minHeight = "unset");
                                var a = this.w.globals.dom.baseEl;
                                a && this.ctx.eventList.forEach((function (t) {
                                    a.removeEventListener(t, e.ctx.events.documentEvent)
                                }));
                                var s = this.w.globals.dom;
                                if (null !== this.ctx.el)
                                    for (; this.ctx.el.firstChild;) this.ctx.el.removeChild(this.ctx.el.firstChild);
                                this.killSVG(s.Paper), s.Paper.remove(), s.elWrap = null, s.elGraphical = null, s.elAnnotations = null, s.elLegendWrap = null, s.baseEl = null, s.elGridRect = null, s.elGridRectMask = null, s.elGridRectMarkerMask = null, s.elForecastMask = null, s.elNonForecastMask = null, s.elDefs = null
                            }
                        }]), t
                    }(),
                    Ht = new WeakMap,
                    Bt = function () {
                        function t(e, l) {
                            o(this, t), this.opts = l, this.ctx = this, this.w = new G(l).init(), this.el = e, this.w.globals.cuid = m.randomId(), this.w.globals.chartID = this.w.config.chart.id ? m.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Yt(this).initModules(), this.create = m.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this)
                        }
                        return h(t, [{
                            key: "render",
                            value: function () {
                                var t = this;
                                return new Promise((function (e, l) {
                                    if (null !== t.el) {
                                        void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({
                                            id: t.w.globals.chartID,
                                            group: t.w.config.chart.group,
                                            chart: t
                                        }), t.setLocale(t.w.config.chart.defaultLocale);
                                        var i = t.w.config.chart.events.beforeMount;
                                        if ("function" == typeof i && i(t, t.w), t.events.fireEvent("beforeMount", [t, t.w]), window.addEventListener("resize", t.windowResizeHandler), h = t.el.parentNode, c = t.parentResizeHandler, d = !1, u = new ResizeObserver((function (t) {
                                                d && c.call(h, t), d = !0
                                            })), h.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(h.children).forEach((function (t) {
                                                return u.observe(t)
                                            })) : u.observe(h), Ht.set(c, u), !t.css) {
                                            var a = t.el.getRootNode && t.el.getRootNode(),
                                                s = m.is("ShadowRoot", a),
                                                n = t.el.ownerDocument,
                                                o = n.getElementById("apexcharts-css");
                                            !s && o || (t.css = document.createElement("style"), t.css.id = "apexcharts-css", t.css.textContent = '.apexcharts-canvas {\n  position: relative;\n  user-select: none;\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\n}\n\n\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px;\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, .5);\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\n}\n\n\n.apexcharts-inner {\n  position: relative;\n}\n\n.apexcharts-text tspan {\n  font-family: inherit;\n}\n\n.legend-mouseover-inactive {\n  transition: 0.15s ease all;\n  opacity: 0.20;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0;\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255, 255, 255, 0.96);\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30, 30, 30, 0.8);\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit;\n}\n\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px;\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #ECEFF1;\n  border-bottom: 1px solid #ddd;\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0, 0, 0, 0.7);\n  border-bottom: 1px solid #333;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  font-weight: 600;\n  margin-left: 5px;\n}\n\n.apexcharts-tooltip-text-y-label:empty,\n.apexcharts-tooltip-text-y-value:empty,\n.apexcharts-tooltip-text-goals-label:empty,\n.apexcharts-tooltip-text-goals-value:empty,\n.apexcharts-tooltip-text-z-value:empty {\n  display: none;\n}\n\n.apexcharts-tooltip-text-y-value,\n.apexcharts-tooltip-text-goals-value,\n.apexcharts-tooltip-text-z-value {\n  font-weight: 600;\n}\n\n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-goals-group, \n.apexcharts-tooltip-text-goals-label, \n.apexcharts-tooltip-text-goals-value {\n  display: flex;\n}\n.apexcharts-tooltip-text-goals-label:not(:empty),\n.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px;\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0px;\n  margin-right: 10px;\n  border-radius: 50%;\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1;\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,\n.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px;\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0 !important;\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px;\n}\n\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\n  padding: 4px 8px;\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse;\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0;\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: bold;\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px;\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777;\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: bold;\n  display: block;\n  margin-bottom: 5px;\n}\n\n.apexcharts-xaxistooltip {\n  opacity: 0;\n  padding: 9px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-xaxistooltip:after,\n.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-left: -6px;\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-left: -7px;\n}\n\n.apexcharts-xaxistooltip-bottom:after,\n.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%;\n}\n\n.apexcharts-xaxistooltip-top:after,\n.apexcharts-xaxistooltip-top:before {\n  top: 100%;\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #ECEFF1;\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #ECEFF1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90A4AE;\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-yaxistooltip {\n  opacity: 0;\n  padding: 4px 10px;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #ECEFF1;\n  border: 1px solid #90A4AE;\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(0, 0, 0, 0.5);\n  color: #fff;\n}\n\n.apexcharts-yaxistooltip:after,\n.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: rgba(236, 239, 241, 0);\n  border-width: 6px;\n  margin-top: -6px;\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: rgba(144, 164, 174, 0);\n  border-width: 7px;\n  margin-top: -7px;\n}\n\n.apexcharts-yaxistooltip-left:after,\n.apexcharts-yaxistooltip-left:before {\n  left: 100%;\n}\n\n.apexcharts-yaxistooltip-right:after,\n.apexcharts-yaxistooltip-right:before {\n  right: 100%;\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #ECEFF1;\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90A4AE;\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0, 0, 0, 0.5);\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1;\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none;\n}\n\n.apexcharts-xcrosshairs,\n.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,\n.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0;\n}\n\n.apexcharts-selection-rect {\n  cursor: move;\n}\n\n.svg_select_boundingRect, .svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden;\n}\n.apexcharts-selection-rect + g .svg_select_boundingRect,\n.apexcharts-selection-rect + g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.apexcharts-selection-rect + g .svg_select_points_l,\n.apexcharts-selection-rect + g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible;\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2;\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon,\n.apexcharts-reset-icon,\n.apexcharts-pan-icon,\n.apexcharts-selection-icon,\n.apexcharts-menu-icon,\n.apexcharts-toolbar-custom-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6E8192;\n  text-align: center;\n}\n\n.apexcharts-zoom-icon svg,\n.apexcharts-zoomin-icon svg,\n.apexcharts-zoomout-icon svg,\n.apexcharts-reset-icon svg,\n.apexcharts-menu-icon svg {\n  fill: #6E8192;\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(0.76)\n}\n\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\n  fill: #f3f4f5;\n}\n\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\n  fill: #008FFB;\n}\n\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\n  fill: #333;\n}\n\n.apexcharts-selection-icon,\n.apexcharts-menu-icon {\n  position: relative;\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px;\n}\n\n.apexcharts-zoom-icon,\n.apexcharts-reset-icon,\n.apexcharts-menu-icon {\n  transform: scale(0.85);\n}\n\n.apexcharts-zoomin-icon,\n.apexcharts-zoomout-icon {\n  transform: scale(0.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px;\n}\n\n.apexcharts-pan-icon {\n  transform: scale(0.62);\n  position: relative;\n  left: 1px;\n  top: 0px;\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6E8192;\n  stroke-width: 2;\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008FFB;\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333;\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0px 6px 2px 6px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: 0.15s ease all;\n  pointer-events: none;\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: 0.15s ease all;\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee;\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0, 0, 0, 0.7);\n  color: #fff;\n}\n\n@media screen and (min-width: 768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n    opacity: 1;\n  }\n}\n\n.apexcharts-datalabel.apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-pie-label,\n.apexcharts-datalabels,\n.apexcharts-datalabel,\n.apexcharts-datalabel-label,\n.apexcharts-datalabel-value {\n  cursor: default;\n  pointer-events: none;\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: 0.3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease;\n}\n\n.apexcharts-canvas .apexcharts-element-hidden {\n  opacity: 0;\n}\n\n.apexcharts-hide .apexcharts-series-points {\n  opacity: 0;\n}\n\n.apexcharts-gridline,\n.apexcharts-annotation-rect,\n.apexcharts-tooltip .apexcharts-marker,\n.apexcharts-area-series .apexcharts-area,\n.apexcharts-line,\n.apexcharts-zoom-rect,\n.apexcharts-toolbar svg,\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\n.apexcharts-radar-series path,\n.apexcharts-radar-series polygon {\n  pointer-events: none;\n}\n\n\n/* markers */\n\n.apexcharts-marker {\n  transition: 0.15s ease all;\n}\n\n@keyframes opaque {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n\n/* Resize generated styles */\n\n@keyframes resizeanim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.resize-triggers,\n.resize-triggers>div,\n.contract-trigger:before {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n}\n\n.resize-triggers>div {\n  background: #eee;\n  overflow: auto;\n}\n\n.contract-trigger:before {\n  width: 200%;\n  height: 200%;\n}', s ? a.prepend(t.css) : n.head.appendChild(t.css))
                                        }
                                        var r = t.create(t.w.config.series, {});
                                        if (!r) return e(t);
                                        t.mount(r).then((function () {
                                            "function" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.events.fireEvent("mounted", [t, t.w]), e(r)
                                        })).catch((function (t) {
                                            l(t)
                                        }))
                                    } else l(new Error("Element not found"));
                                    var h, c, d, u
                                }))
                            }
                        }, {
                            key: "create",
                            value: function (t, e) {
                                var l = this.w;
                                new Yt(this).initModules();
                                var i = this.w.globals;
                                if (i.noData = !1, i.animationEnded = !1, this.responsive.checkResponsiveConfig(e), l.config.xaxis.convertedCatToNumeric && new H(l.config).convertCatToNumericXaxis(l.config, this.ctx), null === this.el) return i.animationEnded = !0, null;
                                if (this.core.setupElements(), "treemap" === l.config.chart.type && (l.config.grid.show = !1, l.config.yaxis[0].show = !1), 0 === i.svgWidth) return i.animationEnded = !0, null;
                                var a = k.checkComboSeries(t);
                                i.comboCharts = a.comboCharts, i.comboBarCount = a.comboBarCount;
                                var s = t.every((function (t) {
                                    return t.data && 0 === t.data.length
                                }));
                                (0 === t.length || s) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t), this.theme.init(), new T(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), i.noData && i.collapsedSeries.length !== i.series.length && !l.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), i.axisCharts && (this.core.coreCalculations(), "category" !== l.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = l.globals.minX, this.ctx.toolbar.maxX = l.globals.maxX), this.formatters.heatmapLabelFormatters(), this.dimensions.plotCoords();
                                var n = this.core.xySettings();
                                this.grid.createGridMask();
                                var o = this.core.plotChartType(t, n),
                                    r = new O(this);
                                r.bringForward(), l.config.dataLabels.background.enabled && r.dataLabelsBackground(), this.core.shiftGraphPosition();
                                var h = {
                                    plot: {
                                        left: l.globals.translateX,
                                        top: l.globals.translateY,
                                        width: l.globals.gridWidth,
                                        height: l.globals.gridHeight
                                    }
                                };
                                return {
                                    elGraph: o,
                                    xyRatios: n,
                                    elInner: l.globals.dom.elGraphical,
                                    dimensions: h
                                }
                            }
                        }, {
                            key: "mount",
                            value: function () {
                                var t = this,
                                    e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
                                    l = this,
                                    i = l.w;
                                return new Promise((function (a, s) {
                                    if (null === l.el) return s(new Error("Not enough data to display or target element not found"));
                                    (null === e || i.globals.allSeriesCollapsed) && l.series.handleNoData(), "treemap" !== i.config.chart.type && l.axes.drawAxis(i.config.chart.type, e.xyRatios), l.grid = new q(l);
                                    var n = l.grid.drawGrid();
                                    l.annotations = new E(l), l.annotations.drawImageAnnos(), l.annotations.drawTextAnnos(), "back" === i.config.grid.position && n && i.globals.dom.elGraphical.add(n.el);
                                    var o = new Z(t.ctx),
                                        r = new $(t.ctx);
                                    if (null !== n && (o.xAxisLabelCorrections(n.xAxisTickWidth), r.setYAxisTextAlignments(), i.config.yaxis.map((function (t, e) {
                                            -1 === i.globals.ignoreYAxisIndexes.indexOf(e) && r.yAxisTitleRotate(e, t.opposite)
                                        }))), "back" === i.config.annotations.position && (i.globals.dom.Paper.add(i.globals.dom.elAnnotations), l.annotations.drawAxesAnnotations()), Array.isArray(e.elGraph))
                                        for (var h = 0; h < e.elGraph.length; h++) i.globals.dom.elGraphical.add(e.elGraph[h]);
                                    else i.globals.dom.elGraphical.add(e.elGraph);
                                    if ("front" === i.config.grid.position && n && i.globals.dom.elGraphical.add(n.el), "front" === i.config.xaxis.crosshairs.position && l.crosshairs.drawXCrosshairs(), "front" === i.config.yaxis[0].crosshairs.position && l.crosshairs.drawYCrosshairs(), "front" === i.config.annotations.position && (i.globals.dom.Paper.add(i.globals.dom.elAnnotations), l.annotations.drawAxesAnnotations()), !i.globals.noData) {
                                        if (i.config.tooltip.enabled && !i.globals.noData && l.w.globals.tooltip.drawTooltip(e.xyRatios), i.globals.axisCharts && (i.globals.isXNumeric || i.config.xaxis.convertedCatToNumeric || i.globals.isRangeBar))(i.config.chart.zoom.enabled || i.config.chart.selection && i.config.chart.selection.enabled || i.config.chart.pan && i.config.chart.pan.enabled) && l.zoomPanSelection.init({
                                            xyRatios: e.xyRatios
                                        });
                                        else {
                                            var c = i.config.chart.toolbar.tools;
                                            ["zoom", "zoomin", "zoomout", "selection", "pan", "reset"].forEach((function (t) {
                                                c[t] = !1
                                            }))
                                        }
                                        i.config.chart.toolbar.show && !i.globals.allSeriesCollapsed && l.toolbar.createToolbar()
                                    }
                                    i.globals.memory.methodsToExec.length > 0 && i.globals.memory.methodsToExec.forEach((function (t) {
                                        t.method(t.params, !1, t.context)
                                    })), i.globals.axisCharts || i.globals.noData || l.core.resizeNonAxisCharts(), a(l)
                                }))
                            }
                        }, {
                            key: "destroy",
                            value: function () {
                                var t, e;
                                window.removeEventListener("resize", this.windowResizeHandler), this.el.parentNode, t = this.parentResizeHandler, (e = Ht.get(t)) && (e.disconnect(), Ht.delete(t));
                                var l = this.w.config.chart.id;
                                l && Apex._chartInstances.forEach((function (t, e) {
                                    t.id === m.escapeString(l) && Apex._chartInstances.splice(e, 1)
                                })), new Ft(this.ctx).clear({
                                    isUpdating: !1
                                })
                            }
                        }, {
                            key: "updateOptions",
                            value: function (t) {
                                var e = this,
                                    l = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                                    i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                    a = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                                    s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
                                    n = this.w;
                                return n.globals.selection = void 0, t.series && (this.series.resetSeries(!1, !0, !1), t.series.length && t.series[0].data && (t.series = t.series.map((function (t, l) {
                                    return e.updateHelpers._extendSeries(t, l)
                                }))), this.updateHelpers.revertDefaultAxisMinMax()), t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)), t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)), n.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this.updateHelpers._updateOptions(t, l, i, a, s)
                            }
                        }, {
                            key: "updateSeries",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                    e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                    l = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                                return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t, e, l)
                            }
                        }, {
                            key: "appendSeries",
                            value: function (t) {
                                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                    l = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
                                    i = this.w.config.series.slice();
                                return i.push(t), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(i, e, l)
                            }
                        }, {
                            key: "appendData",
                            value: function (t) {
                                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                    l = this;
                                l.w.globals.dataChanged = !0, l.series.getPreviousPaths();
                                for (var i = l.w.config.series.slice(), a = 0; a < i.length; a++)
                                    if (null !== t[a] && void 0 !== t[a])
                                        for (var s = 0; s < t[a].data.length; s++) i[a].data.push(t[a].data[s]);
                                return l.w.config.series = i, e && (l.w.globals.initialSeries = m.clone(l.w.config.series)), this.update()
                            }
                        }, {
                            key: "update",
                            value: function (t) {
                                var e = this;
                                return new Promise((function (l, i) {
                                    new Ft(e.ctx).clear({
                                        isUpdating: !0
                                    });
                                    var a = e.create(e.w.config.series, t);
                                    if (!a) return l(e);
                                    e.mount(a).then((function () {
                                        "function" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.events.fireEvent("updated", [e, e.w]), e.w.globals.isDirty = !0, l(e)
                                    })).catch((function (t) {
                                        i(t)
                                    }))
                                }))
                            }
                        }, {
                            key: "getSyncedCharts",
                            value: function () {
                                var t = this.getGroupedCharts(),
                                    e = [this];
                                return t.length && (e = [], t.forEach((function (t) {
                                    e.push(t)
                                }))), e
                            }
                        }, {
                            key: "getGroupedCharts",
                            value: function () {
                                var t = this;
                                return Apex._chartInstances.filter((function (t) {
                                    if (t.group) return !0
                                })).map((function (e) {
                                    return t.w.config.chart.group === e.group ? e.chart : t
                                }))
                            }
                        }, {
                            key: "toggleSeries",
                            value: function (t) {
                                return this.series.toggleSeries(t)
                            }
                        }, {
                            key: "highlightSeriesOnLegendHover",
                            value: function (t, e) {
                                return this.series.toggleSeriesOnHover(t, e)
                            }
                        }, {
                            key: "showSeries",
                            value: function (t) {
                                this.series.showSeries(t)
                            }
                        }, {
                            key: "hideSeries",
                            value: function (t) {
                                this.series.hideSeries(t)
                            }
                        }, {
                            key: "resetSeries",
                            value: function () {
                                var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                                    e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                                this.series.resetSeries(t, e)
                            }
                        }, {
                            key: "addEventListener",
                            value: function (t, e) {
                                this.events.addEventListener(t, e)
                            }
                        }, {
                            key: "removeEventListener",
                            value: function (t, e) {
                                this.events.removeEventListener(t, e)
                            }
                        }, {
                            key: "addXaxisAnnotation",
                            value: function (t) {
                                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                    l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
                                    i = this;
                                l && (i = l), i.annotations.addXaxisAnnotationExternal(t, e, i)
                            }
                        }, {
                            key: "addYaxisAnnotation",
                            value: function (t) {
                                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                    l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
                                    i = this;
                                l && (i = l), i.annotations.addYaxisAnnotationExternal(t, e, i)
                            }
                        }, {
                            key: "addPointAnnotation",
                            value: function (t) {
                                var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                                    l = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,
                                    i = this;
                                l && (i = l), i.annotations.addPointAnnotationExternal(t, e, i)
                            }
                        }, {
                            key: "clearAnnotations",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,
                                    e = this;
                                t && (e = t), e.annotations.clearAnnotations(e)
                            }
                        }, {
                            key: "removeAnnotation",
                            value: function (t) {
                                var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0,
                                    l = this;
                                e && (l = e), l.annotations.removeAnnotation(l, t)
                            }
                        }, {
                            key: "getChartArea",
                            value: function () {
                                return this.w.globals.dom.baseEl.querySelector(".apexcharts-inner")
                            }
                        }, {
                            key: "getSeriesTotalXRange",
                            value: function (t, e) {
                                return this.coreUtils.getSeriesTotalsXRange(t, e)
                            }
                        }, {
                            key: "getHighestValueInSeries",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                    e = new J(this.ctx);
                                return e.getMinYMaxY(t).highestY
                            }
                        }, {
                            key: "getLowestValueInSeries",
                            value: function () {
                                var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                                    e = new J(this.ctx);
                                return e.getMinYMaxY(t).lowestY
                            }
                        }, {
                            key: "getSeriesTotal",
                            value: function () {
                                return this.w.globals.seriesTotals
                            }
                        }, {
                            key: "toggleDataPointSelection",
                            value: function (t, e) {
                                return this.updateHelpers.toggleDataPointSelection(t, e)
                            }
                        }, {
                            key: "zoomX",
                            value: function (t, e) {
                                this.ctx.toolbar.zoomUpdateOptions(t, e)
                            }
                        }, {
                            key: "setLocale",
                            value: function (t) {
                                this.localization.setCurrentLocaleValues(t)
                            }
                        }, {
                            key: "dataURI",
                            value: function (t) {
                                return new U(this.ctx).dataURI(t)
                            }
                        }, {
                            key: "paper",
                            value: function () {
                                return this.w.globals.dom.Paper
                            }
                        }, {
                            key: "_parentResizeCallback",
                            value: function () {
                                this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize()
                            }
                        }, {
                            key: "_windowResize",
                            value: function () {
                                var t = this;
                                clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout((function () {
                                    t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.ctx.update()
                                }), 150)
                            }
                        }, {
                            key: "_windowResizeHandler",
                            value: function () {
                                var t = this.w.config.chart.redrawOnWindowResize;
                                "function" == typeof t && (t = t()), t && this._windowResize()
                            }
                        }], [{
                            key: "getChartByID",
                            value: function (t) {
                                var e = m.escapeString(t),
                                    l = Apex._chartInstances.filter((function (t) {
                                        return t.id === e
                                    }))[0];
                                return l && l.chart
                            }
                        }, {
                            key: "initOnLoad",
                            value: function () {
                                for (var e = document.querySelectorAll("[data-apexcharts]"), l = 0; l < e.length; l++) new t(e[l], JSON.parse(e[l].getAttribute("data-options"))).render()
                            }
                        }, {
                            key: "exec",
                            value: function (t, e) {
                                var l = this.getChartByID(t);
                                if (l) {
                                    l.w.globals.isExecCalled = !0;
                                    var i = null;
                                    if (-1 !== l.publicMethods.indexOf(e)) {
                                        for (var a = arguments.length, s = new Array(a > 2 ? a - 2 : 0), n = 2; n < a; n++) s[n - 2] = arguments[n];
                                        i = l[e].apply(l, s)
                                    }
                                    return i
                                }
                            }
                        }, {
                            key: "merge",
                            value: function (t, e) {
                                return m.extend(t, e)
                            }
                        }]), t
                    }();
                t.exports = Bt
            },
            260: (t, e, l) => {
                var i = l(16);
                t.exports = i
            },
            552: (t, e, l) => {
                var i = l(256);
                t.exports = {
                    enable: function (t) {
                        var e = t.svg.querySelector("defs");
                        if (e || (e = document.createElementNS(i.svgNS, "defs"), t.svg.appendChild(e)), !e.querySelector("style#svg-pan-zoom-controls-styles")) {
                            var l = document.createElementNS(i.svgNS, "style");
                            l.setAttribute("id", "svg-pan-zoom-controls-styles"), l.setAttribute("type", "text/css"), l.textContent = ".svg-pan-zoom-control { cursor: pointer; fill: black; fill-opacity: 0.333; } .svg-pan-zoom-control:hover { fill-opacity: 0.8; } .svg-pan-zoom-control-background { fill: white; fill-opacity: 0.5; } .svg-pan-zoom-control-background { fill-opacity: 0.8; }", e.appendChild(l)
                        }
                        var a = document.createElementNS(i.svgNS, "g");
                        a.setAttribute("id", "svg-pan-zoom-controls"), a.setAttribute("transform", "translate(" + (t.width - 70) + " " + (t.height - 76) + ") scale(0.75)"), a.setAttribute("class", "svg-pan-zoom-control"), a.appendChild(this._createZoomIn(t)), a.appendChild(this._createZoomReset(t)), a.appendChild(this._createZoomOut(t)), t.svg.appendChild(a), t.controlIcons = a
                    },
                    _createZoomIn: function (t) {
                        var e = document.createElementNS(i.svgNS, "g");
                        e.setAttribute("id", "svg-pan-zoom-zoom-in"), e.setAttribute("transform", "translate(30.5 5) scale(0.015)"), e.setAttribute("class", "svg-pan-zoom-control"), e.addEventListener("click", (function () {
                            t.getPublicInstance().zoomIn()
                        }), !1), e.addEventListener("touchstart", (function () {
                            t.getPublicInstance().zoomIn()
                        }), !1);
                        var l = document.createElementNS(i.svgNS, "rect");
                        l.setAttribute("x", "0"), l.setAttribute("y", "0"), l.setAttribute("width", "1500"), l.setAttribute("height", "1400"), l.setAttribute("class", "svg-pan-zoom-control-background"), e.appendChild(l);
                        var a = document.createElementNS(i.svgNS, "path");
                        return a.setAttribute("d", "M1280 576v128q0 26 -19 45t-45 19h-320v320q0 26 -19 45t-45 19h-128q-26 0 -45 -19t-19 -45v-320h-320q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h320v-320q0 -26 19 -45t45 -19h128q26 0 45 19t19 45v320h320q26 0 45 19t19 45zM1536 1120v-960 q0 -119 -84.5 -203.5t-203.5 -84.5h-960q-119 0 -203.5 84.5t-84.5 203.5v960q0 119 84.5 203.5t203.5 84.5h960q119 0 203.5 -84.5t84.5 -203.5z"), a.setAttribute("class", "svg-pan-zoom-control-element"), e.appendChild(a), e
                    },
                    _createZoomReset: function (t) {
                        var e = document.createElementNS(i.svgNS, "g");
                        e.setAttribute("id", "svg-pan-zoom-reset-pan-zoom"), e.setAttribute("transform", "translate(5 35) scale(0.4)"), e.setAttribute("class", "svg-pan-zoom-control"), e.addEventListener("click", (function () {
                            t.getPublicInstance().reset()
                        }), !1), e.addEventListener("touchstart", (function () {
                            t.getPublicInstance().reset()
                        }), !1);
                        var l = document.createElementNS(i.svgNS, "rect");
                        l.setAttribute("x", "2"), l.setAttribute("y", "2"), l.setAttribute("width", "182"), l.setAttribute("height", "58"), l.setAttribute("class", "svg-pan-zoom-control-background"), e.appendChild(l);
                        var a = document.createElementNS(i.svgNS, "path");
                        a.setAttribute("d", "M33.051,20.632c-0.742-0.406-1.854-0.609-3.338-0.609h-7.969v9.281h7.769c1.543,0,2.701-0.188,3.473-0.562c1.365-0.656,2.048-1.953,2.048-3.891C35.032,22.757,34.372,21.351,33.051,20.632z"), a.setAttribute("class", "svg-pan-zoom-control-element"), e.appendChild(a);
                        var s = document.createElementNS(i.svgNS, "path");
                        return s.setAttribute("d", "M170.231,0.5H15.847C7.102,0.5,0.5,5.708,0.5,11.84v38.861C0.5,56.833,7.102,61.5,15.847,61.5h154.384c8.745,0,15.269-4.667,15.269-10.798V11.84C185.5,5.708,178.976,0.5,170.231,0.5z M42.837,48.569h-7.969c-0.219-0.766-0.375-1.383-0.469-1.852c-0.188-0.969-0.289-1.961-0.305-2.977l-0.047-3.211c-0.03-2.203-0.41-3.672-1.142-4.406c-0.732-0.734-2.103-1.102-4.113-1.102h-7.05v13.547h-7.055V14.022h16.524c2.361,0.047,4.178,0.344,5.45,0.891c1.272,0.547,2.351,1.352,3.234,2.414c0.731,0.875,1.31,1.844,1.737,2.906s0.64,2.273,0.64,3.633c0,1.641-0.414,3.254-1.242,4.84s-2.195,2.707-4.102,3.363c1.594,0.641,2.723,1.551,3.387,2.73s0.996,2.98,0.996,5.402v2.32c0,1.578,0.063,2.648,0.19,3.211c0.19,0.891,0.635,1.547,1.333,1.969V48.569z M75.579,48.569h-26.18V14.022h25.336v6.117H56.454v7.336h16.781v6H56.454v8.883h19.125V48.569z M104.497,46.331c-2.44,2.086-5.887,3.129-10.34,3.129c-4.548,0-8.125-1.027-10.731-3.082s-3.909-4.879-3.909-8.473h6.891c0.224,1.578,0.662,2.758,1.316,3.539c1.196,1.422,3.246,2.133,6.15,2.133c1.739,0,3.151-0.188,4.236-0.562c2.058-0.719,3.087-2.055,3.087-4.008c0-1.141-0.504-2.023-1.512-2.648c-1.008-0.609-2.607-1.148-4.796-1.617l-3.74-0.82c-3.676-0.812-6.201-1.695-7.576-2.648c-2.328-1.594-3.492-4.086-3.492-7.477c0-3.094,1.139-5.664,3.417-7.711s5.623-3.07,10.036-3.07c3.685,0,6.829,0.965,9.431,2.895c2.602,1.93,3.966,4.73,4.093,8.402h-6.938c-0.128-2.078-1.057-3.555-2.787-4.43c-1.154-0.578-2.587-0.867-4.301-0.867c-1.907,0-3.428,0.375-4.565,1.125c-1.138,0.75-1.706,1.797-1.706,3.141c0,1.234,0.561,2.156,1.682,2.766c0.721,0.406,2.25,0.883,4.589,1.43l6.063,1.43c2.657,0.625,4.648,1.461,5.975,2.508c2.059,1.625,3.089,3.977,3.089,7.055C108.157,41.624,106.937,44.245,104.497,46.331z M139.61,48.569h-26.18V14.022h25.336v6.117h-18.281v7.336h16.781v6h-16.781v8.883h19.125V48.569z M170.337,20.14h-10.336v28.43h-7.266V20.14h-10.383v-6.117h27.984V20.14z"), s.setAttribute("class", "svg-pan-zoom-control-element"), e.appendChild(s), e
                    },
                    _createZoomOut: function (t) {
                        var e = document.createElementNS(i.svgNS, "g");
                        e.setAttribute("id", "svg-pan-zoom-zoom-out"), e.setAttribute("transform", "translate(30.5 70) scale(0.015)"), e.setAttribute("class", "svg-pan-zoom-control"), e.addEventListener("click", (function () {
                            t.getPublicInstance().zoomOut()
                        }), !1), e.addEventListener("touchstart", (function () {
                            t.getPublicInstance().zoomOut()
                        }), !1);
                        var l = document.createElementNS(i.svgNS, "rect");
                        l.setAttribute("x", "0"), l.setAttribute("y", "0"), l.setAttribute("width", "1500"), l.setAttribute("height", "1400"), l.setAttribute("class", "svg-pan-zoom-control-background"), e.appendChild(l);
                        var a = document.createElementNS(i.svgNS, "path");
                        return a.setAttribute("d", "M1280 576v128q0 26 -19 45t-45 19h-896q-26 0 -45 -19t-19 -45v-128q0 -26 19 -45t45 -19h896q26 0 45 19t19 45zM1536 1120v-960q0 -119 -84.5 -203.5t-203.5 -84.5h-960q-119 0 -203.5 84.5t-84.5 203.5v960q0 119 84.5 203.5t203.5 84.5h960q119 0 203.5 -84.5 t84.5 -203.5z"), a.setAttribute("class", "svg-pan-zoom-control-element"), e.appendChild(a), e
                    },
                    disable: function (t) {
                        t.controlIcons && (t.controlIcons.parentNode.removeChild(t.controlIcons), t.controlIcons = null)
                    }
                }
            },
            15: (t, e, l) => {
                var i = l(256),
                    a = l(749),
                    s = function (t, e) {
                        this.init(t, e)
                    };
                s.prototype.init = function (t, e) {
                    this.viewport = t, this.options = e, this.originalState = {
                        zoom: 1,
                        x: 0,
                        y: 0
                    }, this.activeState = {
                        zoom: 1,
                        x: 0,
                        y: 0
                    }, this.updateCTMCached = a.proxy(this.updateCTM, this), this.requestAnimationFrame = a.createRequestAnimationFrame(this.options.refreshRate), this.viewBox = {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    }, this.cacheViewBox();
                    var l = this.processCTM();
                    this.setCTM(l), this.updateCTM()
                }, s.prototype.cacheViewBox = function () {
                    var t = this.options.svg.getAttribute("viewBox");
                    if (t) {
                        var e = t.split(/[\s\,]/).filter((function (t) {
                            return t
                        })).map(parseFloat);
                        this.viewBox.x = e[0], this.viewBox.y = e[1], this.viewBox.width = e[2], this.viewBox.height = e[3];
                        var l = Math.min(this.options.width / this.viewBox.width, this.options.height / this.viewBox.height);
                        this.activeState.zoom = l, this.activeState.x = (this.options.width - this.viewBox.width * l) / 2, this.activeState.y = (this.options.height - this.viewBox.height * l) / 2, this.updateCTMOnNextFrame(), this.options.svg.removeAttribute("viewBox")
                    } else this.simpleViewBoxCache()
                }, s.prototype.simpleViewBoxCache = function () {
                    var t = this.viewport.getBBox();
                    this.viewBox.x = t.x, this.viewBox.y = t.y, this.viewBox.width = t.width, this.viewBox.height = t.height
                }, s.prototype.getViewBox = function () {
                    return a.extend({}, this.viewBox)
                }, s.prototype.processCTM = function () {
                    var t, e = this.getCTM();
                    if ((this.options.fit || this.options.contain) && (t = this.options.fit ? Math.min(this.options.width / this.viewBox.width, this.options.height / this.viewBox.height) : Math.max(this.options.width / this.viewBox.width, this.options.height / this.viewBox.height), e.a = t, e.d = t, e.e = -this.viewBox.x * t, e.f = -this.viewBox.y * t), this.options.center) {
                        var l = .5 * (this.options.width - (this.viewBox.width + 2 * this.viewBox.x) * e.a),
                            i = .5 * (this.options.height - (this.viewBox.height + 2 * this.viewBox.y) * e.a);
                        e.e = l, e.f = i
                    }
                    return this.originalState.zoom = e.a, this.originalState.x = e.e, this.originalState.y = e.f, e
                }, s.prototype.getOriginalState = function () {
                    return a.extend({}, this.originalState)
                }, s.prototype.getState = function () {
                    return a.extend({}, this.activeState)
                }, s.prototype.getZoom = function () {
                    return this.activeState.zoom
                }, s.prototype.getRelativeZoom = function () {
                    return this.activeState.zoom / this.originalState.zoom
                }, s.prototype.computeRelativeZoom = function (t) {
                    return t / this.originalState.zoom
                }, s.prototype.getPan = function () {
                    return {
                        x: this.activeState.x,
                        y: this.activeState.y
                    }
                }, s.prototype.getCTM = function () {
                    var t = this.options.svg.createSVGMatrix();
                    return t.a = this.activeState.zoom, t.b = 0, t.c = 0, t.d = this.activeState.zoom, t.e = this.activeState.x, t.f = this.activeState.y, t
                }, s.prototype.setCTM = function (t) {
                    var e = this.isZoomDifferent(t),
                        l = this.isPanDifferent(t);
                    if (e || l) {
                        if (e && (!1 === this.options.beforeZoom(this.getRelativeZoom(), this.computeRelativeZoom(t.a)) ? (t.a = t.d = this.activeState.zoom, e = !1) : (this.updateCache(t), this.options.onZoom(this.getRelativeZoom()))), l) {
                            var i = this.options.beforePan(this.getPan(), {
                                    x: t.e,
                                    y: t.f
                                }),
                                s = !1,
                                n = !1;
                            !1 === i ? (t.e = this.getPan().x, t.f = this.getPan().y, s = n = !0) : a.isObject(i) && (!1 === i.x ? (t.e = this.getPan().x, s = !0) : a.isNumber(i.x) && (t.e = i.x), !1 === i.y ? (t.f = this.getPan().y, n = !0) : a.isNumber(i.y) && (t.f = i.y)), s && n || !this.isPanDifferent(t) ? l = !1 : (this.updateCache(t), this.options.onPan(this.getPan()))
                        }(e || l) && this.updateCTMOnNextFrame()
                    }
                }, s.prototype.isZoomDifferent = function (t) {
                    return this.activeState.zoom !== t.a
                }, s.prototype.isPanDifferent = function (t) {
                    return this.activeState.x !== t.e || this.activeState.y !== t.f
                }, s.prototype.updateCache = function (t) {
                    this.activeState.zoom = t.a, this.activeState.x = t.e, this.activeState.y = t.f
                }, s.prototype.pendingUpdate = !1, s.prototype.updateCTMOnNextFrame = function () {
                    this.pendingUpdate || (this.pendingUpdate = !0, this.requestAnimationFrame.call(window, this.updateCTMCached))
                }, s.prototype.updateCTM = function () {
                    var t = this.getCTM();
                    i.setCTM(this.viewport, t, this.defs), this.pendingUpdate = !1, this.options.onUpdatedCTM && this.options.onUpdatedCTM(t)
                }, t.exports = function (t, e) {
                    return new s(t, e)
                }
            },
            16: (t, e, l) => {
                var i = l(818),
                    a = l(552),
                    s = l(749),
                    n = l(256),
                    o = l(15),
                    r = function (t, e) {
                        this.init(t, e)
                    },
                    h = {
                        viewportSelector: ".svg-pan-zoom_viewport",
                        panEnabled: !0,
                        controlIconsEnabled: !1,
                        zoomEnabled: !0,
                        dblClickZoomEnabled: !0,
                        mouseWheelZoomEnabled: !0,
                        preventMouseEventsDefault: !0,
                        zoomScaleSensitivity: .1,
                        minZoom: .5,
                        maxZoom: 10,
                        fit: !0,
                        contain: !1,
                        center: !0,
                        refreshRate: "auto",
                        beforeZoom: null,
                        onZoom: null,
                        beforePan: null,
                        onPan: null,
                        customEventsHandler: null,
                        eventsListenerElement: null,
                        onUpdatedCTM: null
                    },
                    c = {
                        passive: !0
                    };
                r.prototype.init = function (t, e) {
                    var l = this;
                    this.svg = t, this.defs = t.querySelector("defs"), n.setupSvgAttributes(this.svg), this.options = s.extend(s.extend({}, h), e), this.state = "none";
                    var i = n.getBoundingClientRectNormalized(t);
                    this.width = i.width, this.height = i.height, this.viewport = o(n.getOrCreateViewport(this.svg, this.options.viewportSelector), {
                        svg: this.svg,
                        width: this.width,
                        height: this.height,
                        fit: this.options.fit,
                        contain: this.options.contain,
                        center: this.options.center,
                        refreshRate: this.options.refreshRate,
                        beforeZoom: function (t, e) {
                            if (l.viewport && l.options.beforeZoom) return l.options.beforeZoom(t, e)
                        },
                        onZoom: function (t) {
                            if (l.viewport && l.options.onZoom) return l.options.onZoom(t)
                        },
                        beforePan: function (t, e) {
                            if (l.viewport && l.options.beforePan) return l.options.beforePan(t, e)
                        },
                        onPan: function (t) {
                            if (l.viewport && l.options.onPan) return l.options.onPan(t)
                        },
                        onUpdatedCTM: function (t) {
                            if (l.viewport && l.options.onUpdatedCTM) return l.options.onUpdatedCTM(t)
                        }
                    });
                    var r = this.getPublicInstance();
                    r.setBeforeZoom(this.options.beforeZoom), r.setOnZoom(this.options.onZoom), r.setBeforePan(this.options.beforePan), r.setOnPan(this.options.onPan), r.setOnUpdatedCTM(this.options.onUpdatedCTM), this.options.controlIconsEnabled && a.enable(this), this.lastMouseWheelEventTime = Date.now(), this.setupHandlers()
                }, r.prototype.setupHandlers = function () {
                    var t = this,
                        e = null;
                    if (this.eventListeners = {
                            mousedown: function (l) {
                                var i = t.handleMouseDown(l, e);
                                return e = l, i
                            },
                            touchstart: function (l) {
                                var i = t.handleMouseDown(l, e);
                                return e = l, i
                            },
                            mouseup: function (e) {
                                return t.handleMouseUp(e)
                            },
                            touchend: function (e) {
                                return t.handleMouseUp(e)
                            },
                            mousemove: function (e) {
                                return t.handleMouseMove(e)
                            },
                            touchmove: function (e) {
                                return t.handleMouseMove(e)
                            },
                            mouseleave: function (e) {
                                return t.handleMouseUp(e)
                            },
                            touchleave: function (e) {
                                return t.handleMouseUp(e)
                            },
                            touchcancel: function (e) {
                                return t.handleMouseUp(e)
                            }
                        }, null != this.options.customEventsHandler) {
                        this.options.customEventsHandler.init({
                            svgElement: this.svg,
                            eventsListenerElement: this.options.eventsListenerElement,
                            instance: this.getPublicInstance()
                        });
                        var l = this.options.customEventsHandler.haltEventListeners;
                        if (l && l.length)
                            for (var i = l.length - 1; i >= 0; i--) this.eventListeners.hasOwnProperty(l[i]) && delete this.eventListeners[l[i]]
                    }
                    for (var a in this.eventListeners)(this.options.eventsListenerElement || this.svg).addEventListener(a, this.eventListeners[a], !this.options.preventMouseEventsDefault && c);
                    this.options.mouseWheelZoomEnabled && (this.options.mouseWheelZoomEnabled = !1, this.enableMouseWheelZoom())
                }, r.prototype.enableMouseWheelZoom = function () {
                    if (!this.options.mouseWheelZoomEnabled) {
                        var t = this;
                        this.wheelListener = function (e) {
                            return t.handleMouseWheel(e)
                        };
                        var e = !this.options.preventMouseEventsDefault;
                        i.on(this.options.eventsListenerElement || this.svg, this.wheelListener, e), this.options.mouseWheelZoomEnabled = !0
                    }
                }, r.prototype.disableMouseWheelZoom = function () {
                    if (this.options.mouseWheelZoomEnabled) {
                        var t = !this.options.preventMouseEventsDefault;
                        i.off(this.options.eventsListenerElement || this.svg, this.wheelListener, t), this.options.mouseWheelZoomEnabled = !1
                    }
                }, r.prototype.handleMouseWheel = function (t) {
                    if (this.options.zoomEnabled && "none" === this.state) {
                        this.options.preventMouseEventsDefault && (t.preventDefault ? t.preventDefault() : t.returnValue = !1);
                        var e = t.deltaY || 1,
                            l = Date.now() - this.lastMouseWheelEventTime,
                            i = 3 + Math.max(0, 30 - l);
                        this.lastMouseWheelEventTime = Date.now(), "deltaMode" in t && 0 === t.deltaMode && t.wheelDelta && (e = 0 === t.deltaY ? 0 : Math.abs(t.wheelDelta) / t.deltaY), e = -.3 < e && e < .3 ? e : (e > 0 ? 1 : -1) * Math.log(Math.abs(e) + 10) / i;
                        var a = this.svg.getScreenCTM().inverse(),
                            s = n.getEventPoint(t, this.svg).matrixTransform(a),
                            o = Math.pow(1 + this.options.zoomScaleSensitivity, -1 * e);
                        this.zoomAtPoint(o, s)
                    }
                }, r.prototype.zoomAtPoint = function (t, e, l) {
                    var i = this.viewport.getOriginalState();
                    l ? (t = Math.max(this.options.minZoom * i.zoom, Math.min(this.options.maxZoom * i.zoom, t)), t /= this.getZoom()) : this.getZoom() * t < this.options.minZoom * i.zoom ? t = this.options.minZoom * i.zoom / this.getZoom() : this.getZoom() * t > this.options.maxZoom * i.zoom && (t = this.options.maxZoom * i.zoom / this.getZoom());
                    var a = this.viewport.getCTM(),
                        s = e.matrixTransform(a.inverse()),
                        n = this.svg.createSVGMatrix().translate(s.x, s.y).scale(t).translate(-s.x, -s.y),
                        o = a.multiply(n);
                    o.a !== a.a && this.viewport.setCTM(o)
                }, r.prototype.zoom = function (t, e) {
                    this.zoomAtPoint(t, n.getSvgCenterPoint(this.svg, this.width, this.height), e)
                }, r.prototype.publicZoom = function (t, e) {
                    e && (t = this.computeFromRelativeZoom(t)), this.zoom(t, e)
                }, r.prototype.publicZoomAtPoint = function (t, e, l) {
                    if (l && (t = this.computeFromRelativeZoom(t)), "SVGPoint" !== s.getType(e)) {
                        if (!("x" in e) || !("y" in e)) throw new Error("Given point is invalid");
                        e = n.createSVGPoint(this.svg, e.x, e.y)
                    }
                    this.zoomAtPoint(t, e, l)
                }, r.prototype.getZoom = function () {
                    return this.viewport.getZoom()
                }, r.prototype.getRelativeZoom = function () {
                    return this.viewport.getRelativeZoom()
                }, r.prototype.computeFromRelativeZoom = function (t) {
                    return t * this.viewport.getOriginalState().zoom
                }, r.prototype.resetZoom = function () {
                    var t = this.viewport.getOriginalState();
                    this.zoom(t.zoom, !0)
                }, r.prototype.resetPan = function () {
                    this.pan(this.viewport.getOriginalState())
                }, r.prototype.reset = function () {
                    this.resetZoom(), this.resetPan()
                }, r.prototype.handleDblClick = function (t) {
                    var e;
                    if (this.options.preventMouseEventsDefault && (t.preventDefault ? t.preventDefault() : t.returnValue = !1), this.options.controlIconsEnabled && (t.target.getAttribute("class") || "").indexOf("svg-pan-zoom-control") > -1) return !1;
                    e = t.shiftKey ? 1 / (2 * (1 + this.options.zoomScaleSensitivity)) : 2 * (1 + this.options.zoomScaleSensitivity);
                    var l = n.getEventPoint(t, this.svg).matrixTransform(this.svg.getScreenCTM().inverse());
                    this.zoomAtPoint(e, l)
                }, r.prototype.handleMouseDown = function (t, e) {
                    this.options.preventMouseEventsDefault && (t.preventDefault ? t.preventDefault() : t.returnValue = !1), s.mouseAndTouchNormalize(t, this.svg), this.options.dblClickZoomEnabled && s.isDblClick(t, e) ? this.handleDblClick(t) : (this.state = "pan", this.firstEventCTM = this.viewport.getCTM(), this.stateOrigin = n.getEventPoint(t, this.svg).matrixTransform(this.firstEventCTM.inverse()))
                }, r.prototype.handleMouseMove = function (t) {
                    if (this.options.preventMouseEventsDefault && (t.preventDefault ? t.preventDefault() : t.returnValue = !1), "pan" === this.state && this.options.panEnabled) {
                        var e = n.getEventPoint(t, this.svg).matrixTransform(this.firstEventCTM.inverse()),
                            l = this.firstEventCTM.translate(e.x - this.stateOrigin.x, e.y - this.stateOrigin.y);
                        this.viewport.setCTM(l)
                    }
                }, r.prototype.handleMouseUp = function (t) {
                    this.options.preventMouseEventsDefault && (t.preventDefault ? t.preventDefault() : t.returnValue = !1), "pan" === this.state && (this.state = "none")
                }, r.prototype.fit = function () {
                    var t = this.viewport.getViewBox(),
                        e = Math.min(this.width / t.width, this.height / t.height);
                    this.zoom(e, !0)
                }, r.prototype.contain = function () {
                    var t = this.viewport.getViewBox(),
                        e = Math.max(this.width / t.width, this.height / t.height);
                    this.zoom(e, !0)
                }, r.prototype.center = function () {
                    var t = this.viewport.getViewBox(),
                        e = .5 * (this.width - (t.width + 2 * t.x) * this.getZoom()),
                        l = .5 * (this.height - (t.height + 2 * t.y) * this.getZoom());
                    this.getPublicInstance().pan({
                        x: e,
                        y: l
                    })
                }, r.prototype.updateBBox = function () {
                    this.viewport.simpleViewBoxCache()
                }, r.prototype.pan = function (t) {
                    var e = this.viewport.getCTM();
                    e.e = t.x, e.f = t.y, this.viewport.setCTM(e)
                }, r.prototype.panBy = function (t) {
                    var e = this.viewport.getCTM();
                    e.e += t.x, e.f += t.y, this.viewport.setCTM(e)
                }, r.prototype.getPan = function () {
                    var t = this.viewport.getState();
                    return {
                        x: t.x,
                        y: t.y
                    }
                }, r.prototype.resize = function () {
                    var t = n.getBoundingClientRectNormalized(this.svg);
                    this.width = t.width, this.height = t.height;
                    var e = this.viewport;
                    e.options.width = this.width, e.options.height = this.height, e.processCTM(), this.options.controlIconsEnabled && (this.getPublicInstance().disableControlIcons(), this.getPublicInstance().enableControlIcons())
                }, r.prototype.destroy = function () {
                    var t = this;
                    for (var e in this.beforeZoom = null, this.onZoom = null, this.beforePan = null, this.onPan = null, this.onUpdatedCTM = null, null != this.options.customEventsHandler && this.options.customEventsHandler.destroy({
                            svgElement: this.svg,
                            eventsListenerElement: this.options.eventsListenerElement,
                            instance: this.getPublicInstance()
                        }), this.eventListeners)(this.options.eventsListenerElement || this.svg).removeEventListener(e, this.eventListeners[e], !this.options.preventMouseEventsDefault && c);
                    this.disableMouseWheelZoom(), this.getPublicInstance().disableControlIcons(), this.reset(), d = d.filter((function (e) {
                        return e.svg !== t.svg
                    })), delete this.options, delete this.viewport, delete this.publicInstance, delete this.pi, this.getPublicInstance = function () {
                        return null
                    }
                }, r.prototype.getPublicInstance = function () {
                    var t = this;
                    return this.publicInstance || (this.publicInstance = this.pi = {
                        enablePan: function () {
                            return t.options.panEnabled = !0, t.pi
                        },
                        disablePan: function () {
                            return t.options.panEnabled = !1, t.pi
                        },
                        isPanEnabled: function () {
                            return !!t.options.panEnabled
                        },
                        pan: function (e) {
                            return t.pan(e), t.pi
                        },
                        panBy: function (e) {
                            return t.panBy(e), t.pi
                        },
                        getPan: function () {
                            return t.getPan()
                        },
                        setBeforePan: function (e) {
                            return t.options.beforePan = null === e ? null : s.proxy(e, t.publicInstance), t.pi
                        },
                        setOnPan: function (e) {
                            return t.options.onPan = null === e ? null : s.proxy(e, t.publicInstance), t.pi
                        },
                        enableZoom: function () {
                            return t.options.zoomEnabled = !0, t.pi
                        },
                        disableZoom: function () {
                            return t.options.zoomEnabled = !1, t.pi
                        },
                        isZoomEnabled: function () {
                            return !!t.options.zoomEnabled
                        },
                        enableControlIcons: function () {
                            return t.options.controlIconsEnabled || (t.options.controlIconsEnabled = !0, a.enable(t)), t.pi
                        },
                        disableControlIcons: function () {
                            return t.options.controlIconsEnabled && (t.options.controlIconsEnabled = !1, a.disable(t)), t.pi
                        },
                        isControlIconsEnabled: function () {
                            return !!t.options.controlIconsEnabled
                        },
                        enableDblClickZoom: function () {
                            return t.options.dblClickZoomEnabled = !0, t.pi
                        },
                        disableDblClickZoom: function () {
                            return t.options.dblClickZoomEnabled = !1, t.pi
                        },
                        isDblClickZoomEnabled: function () {
                            return !!t.options.dblClickZoomEnabled
                        },
                        enableMouseWheelZoom: function () {
                            return t.enableMouseWheelZoom(), t.pi
                        },
                        disableMouseWheelZoom: function () {
                            return t.disableMouseWheelZoom(), t.pi
                        },
                        isMouseWheelZoomEnabled: function () {
                            return !!t.options.mouseWheelZoomEnabled
                        },
                        setZoomScaleSensitivity: function (e) {
                            return t.options.zoomScaleSensitivity = e, t.pi
                        },
                        setMinZoom: function (e) {
                            return t.options.minZoom = e, t.pi
                        },
                        setMaxZoom: function (e) {
                            return t.options.maxZoom = e, t.pi
                        },
                        setBeforeZoom: function (e) {
                            return t.options.beforeZoom = null === e ? null : s.proxy(e, t.publicInstance), t.pi
                        },
                        setOnZoom: function (e) {
                            return t.options.onZoom = null === e ? null : s.proxy(e, t.publicInstance), t.pi
                        },
                        zoom: function (e) {
                            return t.publicZoom(e, !0), t.pi
                        },
                        zoomBy: function (e) {
                            return t.publicZoom(e, !1), t.pi
                        },
                        zoomAtPoint: function (e, l) {
                            return t.publicZoomAtPoint(e, l, !0), t.pi
                        },
                        zoomAtPointBy: function (e, l) {
                            return t.publicZoomAtPoint(e, l, !1), t.pi
                        },
                        zoomIn: function () {
                            return this.zoomBy(1 + t.options.zoomScaleSensitivity), t.pi
                        },
                        zoomOut: function () {
                            return this.zoomBy(1 / (1 + t.options.zoomScaleSensitivity)), t.pi
                        },
                        getZoom: function () {
                            return t.getRelativeZoom()
                        },
                        setOnUpdatedCTM: function (e) {
                            return t.options.onUpdatedCTM = null === e ? null : s.proxy(e, t.publicInstance), t.pi
                        },
                        resetZoom: function () {
                            return t.resetZoom(), t.pi
                        },
                        resetPan: function () {
                            return t.resetPan(), t.pi
                        },
                        reset: function () {
                            return t.reset(), t.pi
                        },
                        fit: function () {
                            return t.fit(), t.pi
                        },
                        contain: function () {
                            return t.contain(), t.pi
                        },
                        center: function () {
                            return t.center(), t.pi
                        },
                        updateBBox: function () {
                            return t.updateBBox(), t.pi
                        },
                        resize: function () {
                            return t.resize(), t.pi
                        },
                        getSizes: function () {
                            return {
                                width: t.width,
                                height: t.height,
                                realZoom: t.getZoom(),
                                viewBox: t.viewport.getViewBox()
                            }
                        },
                        destroy: function () {
                            return t.destroy(), t.pi
                        }
                    }), this.publicInstance
                };
                var d = [];
                t.exports = function (t, e) {
                    var l = s.getSvg(t);
                    if (null === l) return null;
                    for (var i = d.length - 1; i >= 0; i--)
                        if (d[i].svg === l) return d[i].instance.getPublicInstance();
                    return d.push({
                        svg: l,
                        instance: new r(l, e)
                    }), d[d.length - 1].instance.getPublicInstance()
                }
            },
            256: function (t, e, l) {
                var i = l(749),
                    a = "unknown";
                document.documentMode && (a = "ie"), t.exports = {
                    svgNS: "http://www.w3.org/2000/svg",
                    xmlNS: "http://www.w3.org/XML/1998/namespace",
                    xmlnsNS: "http://www.w3.org/2000/xmlns/",
                    xlinkNS: "http://www.w3.org/1999/xlink",
                    evNS: "http://www.w3.org/2001/xml-events",
                    getBoundingClientRectNormalized: function (t) {
                        if (t.clientWidth && t.clientHeight) return {
                            width: t.clientWidth,
                            height: t.clientHeight
                        };
                        if (t.getBoundingClientRect()) return t.getBoundingClientRect();
                        throw new Error("Cannot get BoundingClientRect for SVG.")
                    },
                    getOrCreateViewport: function (t, e) {
                        var l = null;
                        if (!(l = i.isElement(e) ? e : t.querySelector(e))) {
                            var a = Array.prototype.slice.call(t.childNodes || t.children).filter((function (t) {
                                return "defs" !== t.nodeName && "#text" !== t.nodeName
                            }));
                            1 === a.length && "g" === a[0].nodeName && null === a[0].getAttribute("transform") && (l = a[0])
                        }
                        if (!l) {
                            var s = "viewport-" + (new Date).toISOString().replace(/\D/g, "");
                            (l = document.createElementNS(this.svgNS, "g")).setAttribute("id", s);
                            var n = t.childNodes || t.children;
                            if (n && n.length > 0)
                                for (var o = n.length; o > 0; o--) "defs" !== n[n.length - o].nodeName && l.appendChild(n[n.length - o]);
                            t.appendChild(l)
                        }
                        var r = [];
                        return l.getAttribute("class") && (r = l.getAttribute("class").split(" ")), ~r.indexOf("svg-pan-zoom_viewport") || (r.push("svg-pan-zoom_viewport"), l.setAttribute("class", r.join(" "))), l
                    },
                    setupSvgAttributes: function (t) {
                        if (t.setAttribute("xmlns", this.svgNS), t.setAttributeNS(this.xmlnsNS, "xmlns:xlink", this.xlinkNS), t.setAttributeNS(this.xmlnsNS, "xmlns:ev", this.evNS), null !== t.parentNode) {
                            var e = t.getAttribute("style") || ""; - 1 === e.toLowerCase().indexOf("overflow") && t.setAttribute("style", "overflow: hidden; " + e)
                        }
                    },
                    internetExplorerRedisplayInterval: 300,
                    refreshDefsGlobal: i.throttle((function () {
                        for (var t = document.querySelectorAll("defs"), e = t.length, l = 0; l < e; l++) {
                            var i = t[l];
                            i.parentNode.insertBefore(i, i)
                        }
                    }), this ? this.internetExplorerRedisplayInterval : null),
                    setCTM: function (t, e, l) {
                        var i = this,
                            s = "matrix(" + e.a + "," + e.b + "," + e.c + "," + e.d + "," + e.e + "," + e.f + ")";
                        t.setAttributeNS(null, "transform", s), "transform" in t.style ? t.style.transform = s : "-ms-transform" in t.style ? t.style["-ms-transform"] = s : "-webkit-transform" in t.style && (t.style["-webkit-transform"] = s), "ie" === a && l && (l.parentNode.insertBefore(l, l), window.setTimeout((function () {
                            i.refreshDefsGlobal()
                        }), i.internetExplorerRedisplayInterval))
                    },
                    getEventPoint: function (t, e) {
                        var l = e.createSVGPoint();
                        return i.mouseAndTouchNormalize(t, e), l.x = t.clientX, l.y = t.clientY, l
                    },
                    getSvgCenterPoint: function (t, e, l) {
                        return this.createSVGPoint(t, e / 2, l / 2)
                    },
                    createSVGPoint: function (t, e, l) {
                        var i = t.createSVGPoint();
                        return i.x = e, i.y = l, i
                    }
                }
            },
            818: t => {
                t.exports = function () {
                    var t, e, l, i = "",
                        a = [],
                        s = {
                            passive: !0
                        };

                    function n(e, n, o, r) {
                        var h;
                        h = "wheel" === l ? o : function (t, e) {
                            var i = function (t) {
                                !t && (t = window.event);
                                var i = {
                                    originalEvent: t,
                                    target: t.target || t.srcElement,
                                    type: "wheel",
                                    deltaMode: "MozMousePixelScroll" == t.type ? 0 : 1,
                                    deltaX: 0,
                                    delatZ: 0,
                                    preventDefault: function () {
                                        t.preventDefault ? t.preventDefault() : t.returnValue = !1
                                    }
                                };
                                return "mousewheel" == l ? (i.deltaY = -1 / 40 * t.wheelDelta, t.wheelDeltaX && (i.deltaX = -1 / 40 * t.wheelDeltaX)) : i.deltaY = t.detail, e(i)
                            };
                            return a.push({
                                element: t,
                                fn: i
                            }), i
                        }(e, o), e[t](i + n, h, !!r && s)
                    }

                    function o(t, n, o, r) {
                        var h;
                        h = "wheel" === l ? o : function (t) {
                                for (var e = 0; e < a.length; e++)
                                    if (a[e].element === t) return a[e].fn;
                                return function () {}
                            }(t), t[e](i + n, h, !!r && s),
                            function (t) {
                                for (var e = 0; e < a.length; e++)
                                    if (a[e].element === t) return a.splice(e, 1)
                            }(t)
                    }
                    return window.addEventListener ? (t = "addEventListener", e = "removeEventListener") : (t = "attachEvent", e = "detachEvent", i = "on"), l = "onwheel" in document.createElement("div") ? "wheel" : void 0 !== document.onmousewheel ? "mousewheel" : "DOMMouseScroll", {
                        on: function (t, e, i) {
                            n(t, l, e, i), "DOMMouseScroll" == l && n(t, "MozMousePixelScroll", e, i)
                        },
                        off: function (t, e, i) {
                            o(t, l, e, i), "DOMMouseScroll" == l && o(t, "MozMousePixelScroll", e, i)
                        }
                    }
                }()
            },
            749: t => {
                function e(t) {
                    return function (e) {
                        window.setTimeout(e, t)
                    }
                }
                t.exports = {
                    extend: function (t, e) {
                        for (var l in t = t || {}, e) this.isObject(e[l]) ? t[l] = this.extend(t[l], e[l]) : t[l] = e[l];
                        return t
                    },
                    isElement: function (t) {
                        return t instanceof HTMLElement || t instanceof SVGElement || t instanceof SVGSVGElement || t && "object" == typeof t && null !== t && 1 === t.nodeType && "string" == typeof t.nodeName
                    },
                    isObject: function (t) {
                        return "[object Object]" === Object.prototype.toString.call(t)
                    },
                    isNumber: function (t) {
                        return !isNaN(parseFloat(t)) && isFinite(t)
                    },
                    getSvg: function (t) {
                        var e, l;
                        if (this.isElement(t)) e = t;
                        else {
                            if (!("string" == typeof t || t instanceof String)) throw new Error("Provided selector is not an HTML object nor String");
                            if (!(e = document.querySelector(t))) throw new Error("Provided selector did not find any elements. Selector: " + t)
                        }
                        if ("svg" === e.tagName.toLowerCase()) l = e;
                        else if ("object" === e.tagName.toLowerCase()) l = e.contentDocument.documentElement;
                        else {
                            if ("embed" !== e.tagName.toLowerCase()) throw "img" === e.tagName.toLowerCase() ? new Error('Cannot script an SVG in an "img" element. Please use an "object" element or an in-line SVG.') : new Error("Cannot get SVG.");
                            l = e.getSVGDocument().documentElement
                        }
                        return l
                    },
                    proxy: function (t, e) {
                        return function () {
                            return t.apply(e, arguments)
                        }
                    },
                    getType: function (t) {
                        return Object.prototype.toString.apply(t).replace(/^\[object\s/, "").replace(/\]$/, "")
                    },
                    mouseAndTouchNormalize: function (t, e) {
                        if (void 0 === t.clientX || null === t.clientX)
                            if (t.clientX = 0, t.clientY = 0, void 0 !== t.touches && t.touches.length) {
                                if (void 0 !== t.touches[0].clientX) t.clientX = t.touches[0].clientX, t.clientY = t.touches[0].clientY;
                                else if (void 0 !== t.touches[0].pageX) {
                                    var l = e.getBoundingClientRect();
                                    t.clientX = t.touches[0].pageX - l.left, t.clientY = t.touches[0].pageY - l.top
                                }
                            } else void 0 !== t.originalEvent && void 0 !== t.originalEvent.clientX && (t.clientX = t.originalEvent.clientX, t.clientY = t.originalEvent.clientY)
                    },
                    isDblClick: function (t, e) {
                        if (2 === t.detail) return !0;
                        if (null != e) {
                            var l = t.timeStamp - e.timeStamp,
                                i = Math.sqrt(Math.pow(t.clientX - e.clientX, 2) + Math.pow(t.clientY - e.clientY, 2));
                            return l < 250 && i < 10
                        }
                        return !1
                    },
                    now: Date.now || function () {
                        return (new Date).getTime()
                    },
                    throttle: function (t, e, l) {
                        var i, a, s, n = this,
                            o = null,
                            r = 0;
                        l || (l = {});
                        var h = function () {
                            r = !1 === l.leading ? 0 : n.now(), o = null, s = t.apply(i, a), o || (i = a = null)
                        };
                        return function () {
                            var c = n.now();
                            r || !1 !== l.leading || (r = c);
                            var d = e - (c - r);
                            return i = this, a = arguments, d <= 0 || d > e ? (clearTimeout(o), o = null, r = c, s = t.apply(i, a), o || (i = a = null)) : o || !1 === l.trailing || (o = setTimeout(h, d)), s
                        }
                    },
                    createRequestAnimationFrame: function (t) {
                        var l = null;
                        return "auto" !== t && t < 60 && t > 1 && (l = Math.floor(1e3 / t)), null === l ? window.requestAnimationFrame || e(33) : e(l)
                    }
                }
            },
            732: function (t, e, l) {
                var i, a, s;
                s = this, i = [l(260)], void 0 === (a = function (t) {
                    return s.svgMap = function (t) {
                        return function (t) {
                            function e(t) {
                                this.init(t)
                            }
                            return e.prototype.init = function (t) {
                                this.options = Object.assign({}, {
                                    targetElementID: "",
                                    minZoom: 1,
                                    maxZoom: 25,
                                    initialZoom: 1.06,
                                    initialPan: {
                                        x: 0,
                                        y: 0
                                    },
                                    zoomScaleSensitivity: .2,
                                    mouseWheelZoomEnabled: !0,
                                    mouseWheelZoomWithKey: !1,
                                    mouseWheelKeyMessage: "Press the [ALT] key to zoom",
                                    mouseWheelKeyMessageMac: "Press the [COMMAND] key to zoom",
                                    colorMax: "#CC0033",
                                    colorMin: "#FFE5D9",
                                    colorNoData: "#E2E2E2",
                                    manualColorAttribute: "color",
                                    flagType: "image",
                                    flagURL: "https://cdn.jsdelivr.net/gh/hjnilsson/country-flags@latest/svg/{0}.svg",
                                    hideFlag: !1,
                                    noDataText: "No data available",
                                    touchLink: !1,
                                    onGetTooltip: function (t, e, l) {
                                        return null
                                    },
                                    countries: {
                                        EH: !0,
                                        Crimea: "UA"
                                    }
                                }, t || {}), this.options.targetElementID && document.getElementById(this.options.targetElementID) || this.error("Target element not found"), this.options.data || this.error("No data"), this.id = this.options.targetElementID, this.wrapper = document.getElementById(this.options.targetElementID), this.wrapper.classList.add("svgMap-wrapper"), this.container = document.createElement("div"), this.container.classList.add("svgMap-container"), this.wrapper.appendChild(this.container), this.options.mouseWheelZoomEnabled && this.options.mouseWheelZoomWithKey && (this.addMouseWheelZoomNotice(), this.addMouseWheelZoomWithKeyEvents()), this.mapContainer = document.createElement("div"), this.mapContainer.classList.add("svgMap-map-container"), this.container.appendChild(this.mapContainer), this.createMap(), this.applyData(this.options.data)
                            }, e.prototype.countries = {
                                AF: "Afghanistan",
                                AX: "Åland Islands",
                                AL: "Albania",
                                DZ: "Algeria",
                                AS: "American Samoa",
                                AD: "Andorra",
                                AO: "Angola",
                                AI: "Anguilla",
                                AQ: "Antarctica",
                                AG: "Antigua and Barbuda",
                                AR: "Argentina",
                                AM: "Armenia",
                                AW: "Aruba",
                                AU: "Australia",
                                AT: "Austria",
                                AZ: "Azerbaijan",
                                BS: "Bahamas",
                                BH: "Bahrain",
                                BD: "Bangladesh",
                                BB: "Barbados",
                                BY: "Belarus",
                                BE: "Belgium",
                                BZ: "Belize",
                                BJ: "Benin",
                                BM: "Bermuda",
                                BT: "Bhutan",
                                BO: "Bolivia",
                                BA: "Bosnia and Herzegovina",
                                BW: "Botswana",
                                BR: "Brazil",
                                IO: "British Indian Ocean Territory",
                                VG: "British Virgin Islands",
                                BN: "Brunei Darussalam",
                                BG: "Bulgaria",
                                BF: "Burkina Faso",
                                BI: "Burundi",
                                KH: "Cambodia",
                                CM: "Cameroon",
                                CA: "Canada",
                                CV: "Cape Verde",
                                BQ: "Caribbean Netherlands",
                                KY: "Cayman Islands",
                                CF: "Central African Republic",
                                TD: "Chad",
                                CL: "Chile",
                                CN: "China",
                                CX: "Christmas Island",
                                CC: "Cocos Islands",
                                CO: "Colombia",
                                KM: "Comoros",
                                CG: "Congo",
                                CK: "Cook Islands",
                                CR: "Costa Rica",
                                HR: "Croatia",
                                CU: "Cuba",
                                CW: "Curaçao",
                                CY: "Cyprus",
                                CZ: "Czech Republic",
                                CD: "Democratic Republic of the Congo",
                                DK: "Denmark",
                                DJ: "Djibouti",
                                DM: "Dominica",
                                DO: "Dominican Republic",
                                EC: "Ecuador",
                                EG: "Egypt",
                                SV: "El Salvador",
                                GQ: "Equatorial Guinea",
                                ER: "Eritrea",
                                EE: "Estonia",
                                ET: "Ethiopia",
                                FK: "Falkland Islands",
                                FO: "Faroe Islands",
                                FM: "Federated States of Micronesia",
                                FJ: "Fiji",
                                FI: "Finland",
                                FR: "France",
                                GF: "French Guiana",
                                PF: "French Polynesia",
                                TF: "French Southern Territories",
                                GA: "Gabon",
                                GM: "Gambia",
                                GE: "Georgia",
                                DE: "Germany",
                                GH: "Ghana",
                                GI: "Gibraltar",
                                GR: "Greece",
                                GL: "Greenland",
                                GD: "Grenada",
                                GP: "Guadeloupe",
                                GU: "Guam",
                                GT: "Guatemala",
                                GN: "Guinea",
                                GW: "Guinea-Bissau",
                                GY: "Guyana",
                                HT: "Haiti",
                                HN: "Honduras",
                                HK: "Hong Kong",
                                HU: "Hungary",
                                IS: "Iceland",
                                IN: "India",
                                ID: "Indonesia",
                                IR: "Iran",
                                IQ: "Iraq",
                                IE: "Ireland",
                                IM: "Isle of Man",
                                IL: "Israel",
                                IT: "Italy",
                                CI: "Ivory Coast",
                                JM: "Jamaica",
                                JP: "Japan",
                                JE: "Jersey",
                                JO: "Jordan",
                                KZ: "Kazakhstan",
                                KE: "Kenya",
                                KI: "Kiribati",
                                XK: "Kosovo",
                                KW: "Kuwait",
                                KG: "Kyrgyzstan",
                                LA: "Laos",
                                LV: "Latvia",
                                LB: "Lebanon",
                                LS: "Lesotho",
                                LR: "Liberia",
                                LY: "Libya",
                                LI: "Liechtenstein",
                                LT: "Lithuania",
                                LU: "Luxembourg",
                                MO: "Macau",
                                MK: "Macedonia",
                                MG: "Madagascar",
                                MW: "Malawi",
                                MY: "Malaysia",
                                MV: "Maldives",
                                ML: "Mali",
                                MT: "Malta",
                                MH: "Marshall Islands",
                                MQ: "Martinique",
                                MR: "Mauritania",
                                MU: "Mauritius",
                                YT: "Mayotte",
                                MX: "Mexico",
                                MD: "Moldova",
                                MC: "Monaco",
                                MN: "Mongolia",
                                ME: "Montenegro",
                                MS: "Montserrat",
                                MA: "Morocco",
                                MZ: "Mozambique",
                                MM: "Myanmar",
                                NA: "Namibia",
                                NR: "Nauru",
                                NP: "Nepal",
                                NL: "Netherlands",
                                NC: "New Caledonia",
                                NZ: "New Zealand",
                                NI: "Nicaragua",
                                NE: "Niger",
                                NG: "Nigeria",
                                NU: "Niue",
                                NF: "Norfolk Island",
                                KP: "North Korea",
                                MP: "Northern Mariana Islands",
                                NO: "Norway",
                                OM: "Oman",
                                PK: "Pakistan",
                                PW: "Palau",
                                PS: "Palestine",
                                PA: "Panama",
                                PG: "Papua New Guinea",
                                PY: "Paraguay",
                                PE: "Peru",
                                PH: "Philippines",
                                PN: "Pitcairn Islands",
                                PL: "Poland",
                                PT: "Portugal",
                                PR: "Puerto Rico",
                                QA: "Qatar",
                                RE: "Reunion",
                                RO: "Romania",
                                RU: "Russia",
                                RW: "Rwanda",
                                SH: "Saint Helena",
                                KN: "Saint Kitts and Nevis",
                                LC: "Saint Lucia",
                                PM: "Saint Pierre and Miquelon",
                                VC: "Saint Vincent and the Grenadines",
                                WS: "Samoa",
                                SM: "San Marino",
                                ST: "São Tomé and Príncipe",
                                SA: "Saudi Arabia",
                                SN: "Senegal",
                                RS: "Serbia",
                                SC: "Seychelles",
                                SL: "Sierra Leone",
                                SG: "Singapore",
                                SX: "Sint Maarten",
                                SK: "Slovakia",
                                SI: "Slovenia",
                                SB: "Solomon Islands",
                                SO: "Somalia",
                                ZA: "South Africa",
                                GS: "South Georgia and the South Sandwich Islands",
                                KR: "South Korea",
                                SS: "South Sudan",
                                ES: "Spain",
                                LK: "Sri Lanka",
                                SD: "Sudan",
                                SR: "Suriname",
                                SJ: "Svalbard and Jan Mayen",
                                SZ: "Eswatini",
                                SE: "Sweden",
                                CH: "Switzerland",
                                SY: "Syria",
                                TW: "Taiwan",
                                TJ: "Tajikistan",
                                TZ: "Tanzania",
                                TH: "Thailand",
                                TL: "Timor-Leste",
                                TG: "Togo",
                                TK: "Tokelau",
                                TO: "Tonga",
                                TT: "Trinidad and Tobago",
                                TN: "Tunisia",
                                TR: "Turkey",
                                TM: "Turkmenistan",
                                TC: "Turks and Caicos Islands",
                                TV: "Tuvalu",
                                UG: "Uganda",
                                UA: "Ukraine",
                                AE: "United Arab Emirates",
                                GB: "United Kingdom",
                                US: "United States",
                                UM: "United States Minor Outlying Islands",
                                VI: "United States Virgin Islands",
                                UY: "Uruguay",
                                UZ: "Uzbekistan",
                                VU: "Vanuatu",
                                VA: "Vatican City",
                                VE: "Venezuela",
                                VN: "Vietnam",
                                WF: "Wallis and Futuna",
                                EH: "Western Sahara",
                                YE: "Yemen",
                                ZM: "Zambia",
                                ZW: "Zimbabwe"
                            }, e.prototype.applyData = function (t) {
                                var e = null,
                                    l = null;
                                Object.keys(t.values).forEach((function (i) {
                                    i = parseInt(t.values[i][t.applyData], 10), (e = null === e ? i : e) < i && (e = i), i < (l = null === l ? i : l) && (l = i)
                                })), t.data[t.applyData].thresholdMax && (e = Math.min(e, t.data[t.applyData].thresholdMax)), t.data[t.applyData].thresholdMin && (l = Math.max(l, t.data[t.applyData].thresholdMin)), Object.keys(this.countries).forEach(function (i) {
                                    var a, s = document.getElementById(this.id + "-map-country-" + i);
                                    s && (t.values[i] ? void 0 === t.values[i].color ? (a = Math.max(l, parseInt(t.values[i][t.applyData], 10)), a = Math.max(0, Math.min(1, (a - l) / (e - l))), a = this.getColor(this.options.colorMax, this.options.colorMin, a || 0 === a ? a : 1), s.setAttribute("fill", a)) : s.setAttribute("fill", t.values[i].color) : s.setAttribute("fill", this.options.colorNoData))
                                }.bind(this))
                            }, e.prototype.emojiFlags = {
                                AF: "🇦🇫",
                                AX: "🇦🇽",
                                AL: "🇦🇱",
                                DZ: "🇩🇿",
                                AS: "🇦🇸",
                                AD: "🇦🇩",
                                AO: "🇦🇴",
                                AI: "🇦🇮",
                                AQ: "🇦🇶",
                                AG: "🇦🇬",
                                AR: "🇦🇷",
                                AM: "🇦🇲",
                                AW: "🇦🇼",
                                AU: "🇦🇺",
                                AT: "🇦🇹",
                                AZ: "🇦🇿",
                                BS: "🇧🇸",
                                BH: "🇧🇭",
                                BD: "🇧🇩",
                                BB: "🇧🇧",
                                BY: "🇧🇾",
                                BE: "🇧🇪",
                                BZ: "🇧🇿",
                                BJ: "🇧🇯",
                                BM: "🇧🇲",
                                BT: "🇧🇹",
                                BO: "🇧🇴",
                                BA: "🇧🇦",
                                BW: "🇧🇼",
                                BR: "🇧🇷",
                                IO: "🇮🇴",
                                VG: "🇻🇬",
                                BN: "🇧🇳",
                                BG: "🇧🇬",
                                BF: "🇧🇫",
                                BI: "🇧🇮",
                                KH: "🇰🇭",
                                CM: "🇨🇲",
                                CA: "🇨🇦",
                                CV: "🇨🇻",
                                BQ: "🇧🇶",
                                KY: "🇰🇾",
                                CF: "🇨🇫",
                                TD: "🇹🇩",
                                CL: "🇨🇱",
                                CN: "🇨🇳",
                                CX: "🇨🇽",
                                CC: "🇨🇨",
                                CO: "🇨🇴",
                                KM: "🇰🇲",
                                CG: "🇨🇬",
                                CK: "🇨🇰",
                                CR: "🇨🇷",
                                HR: "🇭🇷",
                                CU: "🇨🇺",
                                CW: "🇨🇼",
                                CY: "🇨🇾",
                                CZ: "🇨🇿",
                                CD: "🇨🇩",
                                DK: "🇩🇰",
                                DJ: "🇩🇯",
                                DM: "🇩🇲",
                                DO: "🇩🇴",
                                EC: "🇪🇨",
                                EG: "🇪🇬",
                                SV: "🇸🇻",
                                GQ: "🇬🇶",
                                ER: "🇪🇷",
                                EE: "🇪🇪",
                                ET: "🇪🇹",
                                FK: "🇫🇰",
                                FO: "🇫🇴",
                                FM: "🇫🇲",
                                FJ: "🇫🇯",
                                FI: "🇫🇮",
                                FR: "🇫🇷",
                                GF: "🇬🇫",
                                PF: "🇵🇫",
                                TF: "🇹🇫",
                                GA: "🇬🇦",
                                GM: "🇬🇲",
                                GE: "🇬🇪",
                                DE: "🇩🇪",
                                GH: "🇬🇭",
                                GI: "🇬🇮",
                                GR: "🇬🇷",
                                GL: "🇬🇱",
                                GD: "🇬🇩",
                                GP: "🇬🇵",
                                GU: "🇬🇺",
                                GT: "🇬🇹",
                                GN: "🇬🇳",
                                GW: "🇬🇼",
                                GY: "🇬🇾",
                                HT: "🇭🇹",
                                HN: "🇭🇳",
                                HK: "🇭🇰",
                                HU: "🇭🇺",
                                IS: "🇮🇸",
                                IN: "🇮🇳",
                                ID: "🇮🇩",
                                IR: "🇮🇷",
                                IQ: "🇮🇶",
                                IE: "🇮🇪",
                                IM: "🇮🇲",
                                IL: "🇮🇱",
                                IT: "🇮🇹",
                                CI: "🇨🇮",
                                JM: "🇯🇲",
                                JP: "🇯🇵",
                                JE: "🇯🇪",
                                JO: "🇯🇴",
                                KZ: "🇰🇿",
                                KE: "🇰🇪",
                                KI: "🇰🇮",
                                XK: "🇽🇰",
                                KW: "🇰🇼",
                                KG: "🇰🇬",
                                LA: "🇱🇦",
                                LV: "🇱🇻",
                                LB: "🇱🇧",
                                LS: "🇱🇸",
                                LR: "🇱🇷",
                                LY: "🇱🇾",
                                LI: "🇱🇮",
                                LT: "🇱🇹",
                                LU: "🇱🇺",
                                MO: "🇲🇴",
                                MK: "🇲🇰",
                                MG: "🇲🇬",
                                MW: "🇲🇼",
                                MY: "🇲🇾",
                                MV: "🇲🇻",
                                ML: "🇲🇱",
                                MT: "🇲🇹",
                                MH: "🇲🇭",
                                MQ: "🇲🇶",
                                MR: "🇲🇷",
                                MU: "🇲🇺",
                                YT: "🇾🇹",
                                MX: "🇲🇽",
                                MD: "🇲🇩",
                                MC: "🇲🇨",
                                MN: "🇲🇳",
                                ME: "🇲🇪",
                                MS: "🇲🇸",
                                MA: "🇲🇦",
                                MZ: "🇲🇿",
                                MM: "🇲🇲",
                                NA: "🇳🇦",
                                NR: "🇳🇷",
                                NP: "🇳🇵",
                                NL: "🇳🇱",
                                NC: "🇳🇨",
                                NZ: "🇳🇿",
                                NI: "🇳🇮",
                                NE: "🇳🇪",
                                NG: "🇳🇬",
                                NU: "🇳🇺",
                                NF: "🇳🇫",
                                KP: "🇰🇵",
                                MP: "🇲🇵",
                                NO: "🇳🇴",
                                OM: "🇴🇲",
                                PK: "🇵🇰",
                                PW: "🇵🇼",
                                PS: "🇵🇸",
                                PA: "🇵🇦",
                                PG: "🇵🇬",
                                PY: "🇵🇾",
                                PE: "🇵🇪",
                                PH: "🇵🇭",
                                PN: "🇵🇳",
                                PL: "🇵🇱",
                                PT: "🇵🇹",
                                PR: "🇵🇷",
                                QA: "🇶🇦",
                                RE: "🇷🇪",
                                RO: "🇷🇴",
                                RU: "🇷🇺",
                                RW: "🇷🇼",
                                SH: "🇸🇭",
                                KN: "🇰🇳",
                                LC: "🇱🇨",
                                PM: "🇵🇲",
                                VC: "🇻🇨",
                                WS: "🇼🇸",
                                SM: "🇸🇲",
                                ST: "🇸🇹",
                                SA: "🇸🇦",
                                SN: "🇸🇳",
                                RS: "🇷🇸",
                                SC: "🇸🇨",
                                SL: "🇸🇱",
                                SG: "🇸🇬",
                                SX: "🇸🇽",
                                SK: "🇸🇰",
                                SI: "🇸🇮",
                                SB: "🇸🇧",
                                SO: "🇸🇴",
                                ZA: "🇿🇦",
                                GS: "🇬🇸",
                                KR: "🇰🇷",
                                SS: "🇸🇸",
                                ES: "🇪🇸",
                                LK: "🇱🇰",
                                SD: "🇸🇩",
                                SR: "🇸🇷",
                                SJ: "🇸🇯",
                                SZ: "🇸🇿",
                                SE: "🇸🇪",
                                CH: "🇨🇭",
                                SY: "🇸🇾",
                                TW: "🇹🇼",
                                TJ: "🇹🇯",
                                TZ: "🇹🇿",
                                TH: "🇹🇭",
                                TL: "🇹🇱",
                                TG: "🇹🇬",
                                TK: "🇹🇰",
                                TO: "🇹🇴",
                                TT: "🇹🇹",
                                TN: "🇹🇳",
                                TR: "🇹🇷",
                                TM: "🇹🇲",
                                TC: "🇹🇨",
                                TV: "🇹🇻",
                                UG: "🇺🇬",
                                UA: "🇺🇦",
                                AE: "🇦🇪",
                                GB: "🇬🇧",
                                US: "🇺🇸",
                                UM: "🇺🇲",
                                VI: "🇻🇮",
                                UY: "🇺🇾",
                                UZ: "🇺🇿",
                                VU: "🇻🇺",
                                VA: "🇻🇦",
                                VE: "🇻🇪",
                                VN: "🇻🇳",
                                WF: "🇼🇫",
                                EH: "🇪🇭",
                                YE: "🇾🇪",
                                ZM: "🇿🇲",
                                ZW: "🇿🇼"
                            }, e.prototype.createMap = function () {
                                this.createTooltip(), this.mapWrapper = this.createElement("div", "svgMap-map-wrapper", this.mapContainer), this.mapImage = document.createElementNS("http://www.w3.org/2000/svg", "svg"), this.mapImage.setAttribute("viewBox", "0 0 2000 1001"), this.mapImage.classList.add("svgMap-map-image"), this.mapWrapper.appendChild(this.mapImage);
                                var e = this.createElement("div", "svgMap-map-controls-wrapper", this.mapWrapper),
                                    l = this.createElement("div", "svgMap-map-controls-zoom", e);
                                ["in", "out"].forEach(function (t) {
                                    var e = "zoomControl" + t.charAt(0).toUpperCase() + t.slice(1);
                                    this[e] = this.createElement("button", "svgMap-control-button svgMap-zoom-button svgMap-zoom-" + t + "-button", l), this[e].type = "button", this[e].addEventListener("click", function () {
                                        this.zoomMap(t)
                                    }.bind(this), {
                                        passive: !0
                                    })
                                }.bind(this)), this.zoomControlIn.setAttribute("aria-label", "Zoom in"), this.zoomControlOut.setAttribute("aria-label", "Zoom out"), e = Object.assign({}, this.mapPaths), this.options.countries.EH || (e.MA.d = e["MA-EH"].d, delete e.EH), delete e["MA-EH"], "RU" === this.options.countries.Crimea && (e.RU.d = e["RU-WITH-CRIMEA"].d, e.UA.d = e["UA-WITHOUT-CRIMEA"].d), delete e["RU-WITH-CRIMEA"], delete e["UA-WITHOUT-CRIMEA"], this.tooltipMoveEvent = function (t) {
                                    this.moveTooltip(t)
                                }.bind(this), Object.keys(e).forEach(function (t) {
                                    var e, l = this.mapPaths[t];
                                    l.d && ((e = document.createElementNS("http://www.w3.org/2000/svg", "path")).setAttribute("d", l.d), e.setAttribute("id", this.id + "-map-country-" + t), e.setAttribute("data-id", t), e.classList.add("svgMap-country"), this.mapImage.appendChild(e), e.addEventListener("touchstart", function (t) {
                                        e.parentNode.appendChild(e), e.classList.add("svgMap-active");
                                        var l = e.getAttribute("data-id"),
                                            i = e.getAttribute("data-link");
                                        this.options.touchLink && i ? window.location.href = i : (this.setTooltipContent(this.getTooltipContent(l)), this.showTooltip(t), this.moveTooltip(t), e.addEventListener("touchmove", this.tooltipMoveEvent, {
                                            passive: !0
                                        }))
                                    }.bind(this), {
                                        passive: !0
                                    }), e.addEventListener("mouseenter", function (t) {
                                        e.parentNode.appendChild(e);
                                        var l = e.getAttribute("data-id");
                                        this.setTooltipContent(this.getTooltipContent(l)), this.showTooltip(t), e.addEventListener("mousemove", this.tooltipMoveEvent, {
                                            passive: !0
                                        })
                                    }.bind(this), {
                                        passive: !0
                                    }), this.options.data.values && this.options.data.values[t] && this.options.data.values[t].link && (e.setAttribute("data-link", this.options.data.values[t].link), this.options.data.values[t].linkTarget && e.setAttribute("data-link-target", this.options.data.values[t].linkTarget), e.addEventListener("click", (function (t) {
                                        var l = e.getAttribute("data-link"),
                                            i = e.getAttribute("data-link-target");
                                        i ? window.open(l, i) : window.location.href = l
                                    }))), e.addEventListener("mouseleave", function () {
                                        this.hideTooltip(), e.removeEventListener("mousemove", this.tooltipMoveEvent, {
                                            passive: !0
                                        })
                                    }.bind(this), {
                                        passive: !0
                                    }), e.addEventListener("touchend", function () {
                                        this.hideTooltip(), e.classList.remove("svgMap-active"), e.removeEventListener("touchmove", this.tooltipMoveEvent, {
                                            passive: !0
                                        })
                                    }.bind(this), {
                                        passive: !0
                                    }))
                                }.bind(this));
                                var i = this;
                                this.mapPanZoom = t(this.mapImage, {
                                    zoomEnabled: !0,
                                    fit: !0,
                                    center: !0,
                                    minZoom: this.options.minZoom,
                                    maxZoom: this.options.maxZoom,
                                    zoomScaleSensitivity: this.options.zoomScaleSensitivity,
                                    controlIconsEnabled: !1,
                                    mouseWheelZoomEnabled: this.options.mouseWheelZoomEnabled,
                                    preventMouseEventsDefault: !0,
                                    onZoom: function () {
                                        i.setControlStatuses()
                                    },
                                    beforePan: function (t, e) {
                                        var l = .85 * i.mapWrapper.offsetWidth,
                                            a = .85 * i.mapWrapper.offsetHeight,
                                            s = -((o = this.getSizes()).viewBox.x + o.viewBox.width) * o.realZoom + l,
                                            n = o.width - l - o.viewBox.x * o.realZoom,
                                            o = (l = -(o.viewBox.y + o.viewBox.height) * o.realZoom + a, o.height - a - o.viewBox.y * o.realZoom);
                                        return {
                                            x: Math.max(s, Math.min(n, e.x)),
                                            y: Math.max(l, Math.min(o, e.y))
                                        }
                                    }
                                }), 0 != this.options.initialPan.x || 0 != this.options.initialPan.y ? this.mapPanZoom.zoomAtPointBy(this.options.initialZoom, {
                                    x: this.options.initialPan.x,
                                    y: this.options.initialPan.y
                                }) : this.mapPanZoom.zoom(this.options.initialZoom), this.setControlStatuses()
                            }, e.prototype.getTooltipContent = function (t) {
                                if (this.options.onGetTooltip) {
                                    var e = this.options.onGetTooltip(this.tooltip, t, this.options.data.values[t]);
                                    if (e) return e
                                }
                                e = this.createElement("div", "svgMap-tooltip-content-container"), !1 === this.options.hideFlag && (i = this.createElement("div", "svgMap-tooltip-flag-container svgMap-tooltip-flag-container-" + this.options.flagType, e), "image" === this.options.flagType ? this.createElement("img", "svgMap-tooltip-flag", i).setAttribute("src", this.options.flagURL.replace("{0}", t.toLowerCase())) : "emoji" === this.options.flagType && (i.innerHTML = this.emojiFlags[t])), this.createElement("div", "svgMap-tooltip-title", e).innerHTML = this.getCountryName(t);
                                var l, i = this.createElement("div", "svgMap-tooltip-content", e);
                                return this.options.data.values[t] ? (l = "<table>", Object.keys(this.options.data.data).forEach(function (e) {
                                    var i = this.options.data.data[e];
                                    e = this.options.data.values[t][e], i.floatingNumbers && (e = e.toFixed(1)), i.thousandSeparator && (e = this.numberWithCommas(e, i.thousandSeparator)), e = i.format ? i.format.replace("{0}", "<span>" + e + "</span>") : "<span>" + e + "</span>", l += "<tr><td>" + (i.name || "") + "</td><td>" + e + "</td></tr>"
                                }.bind(this)), l += "</table>", i.innerHTML = l) : this.createElement("div", "svgMap-tooltip-no-data", i).innerHTML = this.options.noDataText, e
                            }, e.prototype.setControlStatuses = function () {
                                this.zoomControlIn.classList.remove("svgMap-disabled"), this.zoomControlIn.setAttribute("aria-disabled", "false"), this.zoomControlOut.classList.remove("svgMap-disabled"), this.zoomControlOut.setAttribute("aria-disabled", "false"), this.mapPanZoom.getZoom().toFixed(3) <= this.options.minZoom && (this.zoomControlOut.classList.add("svgMap-disabled"), this.zoomControlOut.setAttribute("aria-disabled", "true")), this.mapPanZoom.getZoom().toFixed(3) >= this.options.maxZoom && (this.zoomControlIn.classList.add("svgMap-disabled"), this.zoomControlIn.setAttribute("aria-disabled", "true"))
                            }, e.prototype.zoomMap = function (t) {
                                if (this["zoomControl" + t.charAt(0).toUpperCase() + t.slice(1)].classList.contains("svgMap-disabled")) return !1;
                                this.mapPanZoom["in" == t ? "zoomIn" : "zoomOut"]()
                            }, e.prototype.addMouseWheelZoomNotice = function () {
                                var t = document.createElement("div");
                                t.classList.add("svgMap-block-zoom-notice");
                                var e = document.createElement("div");
                                e.innerHTML = -1 != navigator.appVersion.indexOf("Mac") ? this.options.mouseWheelKeyMessageMac : this.options.mouseWheelKeyMessage, t.append(e), this.wrapper.append(t)
                            }, e.prototype.showMouseWheelZoomNotice = function (t) {
                                this.mouseWheelNoticeJustHidden || (this.autoHideMouseWheelNoticeTimeout && clearTimeout(this.autoHideMouseWheelNoticeTimeout), this.autoHideMouseWheelNoticeTimeout = setTimeout(function () {
                                    this.hideMouseWheelZoomNotice()
                                }.bind(this), t || 2400), this.wrapper.classList.add("svgMap-block-zoom-notice-active"))
                            }, e.prototype.hideMouseWheelZoomNotice = function () {
                                this.wrapper.classList.remove("svgMap-block-zoom-notice-active"), this.autoHideMouseWheelNoticeTimeout && clearTimeout(this.autoHideMouseWheelNoticeTimeout)
                            }, e.prototype.blockMouseWheelZoomNotice = function (t) {
                                this.mouseWheelNoticeJustHidden = !0, this.mouseWheelNoticeJustHiddenTimeout && clearTimeout(this.mouseWheelNoticeJustHiddenTimeout), this.mouseWheelNoticeJustHiddenTimeout = setTimeout(function () {
                                    this.mouseWheelNoticeJustHidden = !1
                                }.bind(this), t || 600)
                            }, e.prototype.addMouseWheelZoomWithKeyEvents = function () {
                                if (this.wrapper.addEventListener("wheel", function (t) {
                                        document.body.classList.contains("svgMap-zoom-key-pressed") ? (this.hideMouseWheelZoomNotice(), this.blockMouseWheelZoomNotice()) : this.showMouseWheelZoomNotice()
                                    }.bind(this), {
                                        passive: !0
                                    }), document.addEventListener("keydown", function (t) {
                                        "Alt" != t.key && "Control" != t.key && "Meta" != t.key && "Shift" != t.key || (document.body.classList.add("svgMap-zoom-key-pressed"), this.hideMouseWheelZoomNotice(), this.blockMouseWheelZoomNotice())
                                    }.bind(this)), this.wrapper.addEventListener("wheel", (function (t) {
                                        (t.altKey || t.ctrlKey || t.metaKey || t.shiftKey) && document.body.classList.add("svgMap-zoom-key-pressed")
                                    })), document.body.classList.contains("svgMap-key-events-added")) return !1;
                                document.body.classList.add("svgMap-key-events-added"), document.addEventListener("keyup", (function (t) {
                                    "Alt" != t.key && "Control" != t.key && "Meta" != t.key && "Shift" != t.key || document.body.classList.remove("svgMap-zoom-key-pressed")
                                }))
                            }, e.prototype.mapPaths = {
                                AF: {
                                    d: "M1369.9,333.8h-5.4l-3.8-0.5l-2.5,2.9l-2.1,0.7l-1.5,1.3l-2.6-2.1l-1-5.4l-1.6-0.3v-2l-3.2-1.5l-1.7,2.3l0.2,2.6 l-0.6,0.9l-3.2-0.1l-0.9,3l-2.1-1.3l-3.3,2.1l-1.8-0.8l-4.3-1.4h-2.9l-1.6-0.2l-2.9-1.7l-0.3,2.3l-4.1,1.2l0.1,5.2l-2.5,2l-4,0.9 l-0.4,3l-3.9,0.8l-5.9-2.4l-0.5,8l-0.5,4.7l2.5,0.9l-1.6,3.5l2.7,5.1l1.1,4l4.3,1.1l1.1,4l-3.9,5.8l9.6,3.2l5.3-0.9l3.3,0.8l0.9-1.4 l3.8,0.5l6.6-2.6l-0.8-5.4l2.3-3.6h4l0.2-1.7l4-0.9l2.1,0.6l1.7-1.8l-1.1-3.8l1.5-3.8l3-1.6l-3-4.2l5.1,0.2l0.9-2.3l-0.8-2.5l2-2.7 l-1.4-3.2l-1.9-2.8l2.4-2.8l5.3-1.3l5.8-0.8l2.4-1.2l2.8-0.7L1369.9,333.8L1369.9,333.8z"
                                },
                                AL: {
                                    d: "M1077.5,300.5l-2,3.1l0.5,1.9l0,0l1,1l-0.5,1.9l-0.1,4.3l0.7,3l3,2.1l0.2,1.4l1,0.4l2.1-3l0.1-2.1l1.6-0.9V312 l-2.3-1.6l-0.9-2.6l0.4-2.1l0,0l-0.5-2.3l-1.3-0.6l-1.3-1.6l-1.3,0.5L1077.5,300.5L1077.5,300.5z"
                                },
                                DZ: {
                                    d: "M1021,336.9l-3.6,0.4l-2.2-1.5h-5.6l-4.9,2.6l-2.7-1l-8.7,0.5l-8.9,1.2l-5,2l-3.4,2.6l-5.7,1.2l-5.1,3.5l2,4.1 l0.3,3.9l1.8,6.7l1.4,1.4l-1,2.5l-7,1l-2.5,2.4l-3.1,0.5l-0.3,4.7l-6.3,2.5l-2.1,3.2L944,383l-5.4,1l-8.9,4.7l-0.1,7.5v0.4l-0.1,1.2 l20.3,15.5l18.4,13.9l18.6,13.8l1.3,3l3.4,1.8l2.6,1.1l0.1,4l6.1-0.6l7.8-2.8l15.8-12.5l18.6-12.2l-2.5-4l-4.3-2.9l-2.6,1.2l-2-3.6 l-0.2-2.7l-3.4-4.7l2.1-2.6l-0.5-4l0.6-3.5l-0.5-2.9l0.9-5.2l-0.4-3l-1.9-5.6l-2.6-11.3l-3.4-2.6v-1.5l-4.5-3.8l-0.6-4.8l3.2-3.6 l1.1-5.3l-1-6.2L1021,336.9L1021,336.9z"
                                },
                                AD: {
                                    d: "M985.4,301.7l0.2-0.4l-0.2-0.2l-0.7-0.2l-0.3-0.1l-0.4,0.3l-0.1,0.3l0.1,0.1v0.4l0.1,0.2h0.4L985.4,301.7 L985.4,301.7z"
                                },
                                AO: {
                                    d: "M1068.3,609.6l-16.6-0.1l-1.9,0.7l-1.7-0.1l-2.3,0.9l-0.5,1.2l2.8,4l1.1,4.3l1.6,6.1l-1.7,2.6l-0.3,1.3l1.3,3.8 l1.5,3.9l1.6,2.2l0.3,3.6l-0.7,4.8l-1.8,2.8l-3.3,4.2l-1.3,2.6l-1.9,5.7l-0.3,2.7l-2,5.9l-0.9,5.5l0.5,4l2.7-1.2l3.3-1l3.6,0.1 l3.2,2.9l0.9-0.4l22.5-0.3l3.7,3l13.4,0.9l10.3-2.5l-3.5-4l-3.6-5.2l0.8-20.3l11.6,0.1l-0.5-2.2l0.9-2.4l-0.9-3l0.7-3l-0.5-2 l-2.6-0.4l-3.5,1l-2.4-0.2l-1.4,0.6l0.5-7.6l-1.9-2.3l-0.3-4l0.9-3.8l-1.2-2.4v-4h-6.8l0.5-2.3h-2.9l-0.3,1.1l-3.4,0.3l-1.5,3.7 l-0.9,1.6l-3-0.9l-1.9,0.9l-3.7,0.5l-2.1-3.3l-1.3-2.1l-1.6-3.8L1068.3,609.6L1068.3,609.6z M1046.5,608.3l0.2-2.7l0.9-1.7l2-1.3 l-2-2.2l-1.8,1.1l-2.2,2.7l1.4,4.8L1046.5,608.3L1046.5,608.3z"
                                },
                                AI: {
                                    d: "M627.9,456.2l0.1-0.2l-0.2-0.1l-0.8,0.5v0.1L627.9,456.2z"
                                },
                                AG: {
                                    d: "M634.3,463.8l0.2-0.1v-0.1v-0.2l-0.1-0.1l-0.1-0.2l-0.4-0.2l-0.5,0.5v0.2l0.1,0.3l0.6,0.1L634.3,463.8L634.3,463.8z M634.5,460.3v-0.5l-0.1-0.2h-0.3l-0.1-0.1h-0.1l-0.1,0.1l0.1,0.6l0.5,0.3L634.5,460.3L634.5,460.3z"
                                },
                                AR: {
                                    d: "M669.8,920.7l0.9-3l-7.3-1.5l-7.7-3.6l-4.3-4.6l-3-2.8l5.9,13.5h5l2.9,0.2l3.3,2.1L669.8,920.7L669.8,920.7z M619.4,712.6l-7.4-1.5l-4,5.7l0.9,1.6l-1.1,6.6l-5.6,3.2l1.6,10.6l-0.9,2l2,2.5l-3.2,4l-2.6,5.9l-0.9,5.8l1.7,6.2l-2.1,6.5 l4.9,10.9l1.6,1.2l1.3,5.9l-1.6,6.2l1.4,5.4l-2.9,4.3l1.5,5.9l3.3,6.3l-2.5,2.4l0.3,5.7l0.7,6.4l3.3,7.6l-1.6,1.2l3.6,7.1l3.1,2.3 l-0.8,2.6l2.8,1.3l1.3,2.3l-1.8,1.1l1.8,3.7l1.1,8.2l-0.7,5.3l1.8,3.2l-0.1,3.9l-2.7,2.7l3.1,6.6l2.6,2.2l3.1-0.4l1.8,4.6l3.5,3.6 l12,0.8l4.8,0.9l2.2,0.4l-4.7-3.6l-4.1-6.3l0.9-2.9l3.5-2.5l0.5-7.2l4.7-3.5l-0.2-5.6l-5.2-1.3l-6.4-4.5l-0.1-4.7l2.9-3.1l4.7-0.1 l0.2-3.3l-1.2-6.1l2.9-3.9l4.1-1.9l-2.5-3.2l-2.2,2l-4-1.9l-2.5-6.2l1.5-1.6l5.6,2.3l5-0.9l2.5-2.2l-1.8-3.1l-0.1-4.8l-2-3.8 l5.8,0.6l10.2-1.3l6.9-3.4l3.3-8.3l-0.3-3.2l-3.9-2.8l-0.1-4.5l-7.8-5.5l-0.3-3.3l-0.4-4.2l0.9-1.4l-1.1-6.3l0.3-6.5l0.5-5.1 l5.9-8.6l5.3-6.2l3.3-2.6l4.2-3.5l-0.5-5.1l-3.1-3.7l-2.6,1.2l-0.3,5.7l-4.3,4.8l-4.2,1.1l-6.2-1l-5.7-1.8l4.2-9.6l-1.1-2.8 l-5.9-2.5l-7.2-4.7l-4.6-1L632,713.7l-1-1.3l-6.3-0.3l-1.6,5.1L619.4,712.6L619.4,712.6z"
                                },
                                AM: {
                                    d: "M1219,325.1l-0.9-4.4l-2.5-1.1l-2.5-1.7l1-2l-3.1-2.2l0.7-1.5l-2.2-1.1l-1.4-1.7l-6.9,1l1.3,2.2v3.1l4.2,1.5 l2.4,1.9l1-0.2l1.8,1.7h2.3l0.2,1l2.8,3.7L1219,325.1L1219,325.1z"
                                },
                                AW: {
                                    d: "M586.6,492.9l-0.1-0.1l-0.3-0.6l-0.3-0.3l-0.1,0.1l-0.1,0.3l0.3,0.3l0.3,0.4l0.3,0.1L586.6,492.9L586.6,492.9z"
                                },
                                AU: {
                                    d: "M1726.7,832l-3-0.5l-1.9,2.9l-0.6,5.4l-2.1,4l-0.5,5.3l3,0.2l0.8,0.3l6.6-4.3l0.6,1.7l4-4.9l3.2-2.2l4.5-7.3 l-2.8-0.5l-4.8,1.2l-3.4,0.9L1726.7,832L1726.7,832z M1776.8,659.7l0.5-2.3l0.1-3.6l-1.6-3.2l0.1-2.7l-1.3-0.8l0.1-3.9l-1.2-3.2 l-2.3,2.4l-0.4,1.8l-1.5,3.5l-1.8,3.4l0.6,2.1l-1.2,1.3l-1.5,4.8l0.1,3.7l-0.7,1.8l0.3,3.1l-2.6,5l-1.3,3.5l-1.7,2.9l-1.7,3.4 l-4.1,2.1l-4.9-2.1l-0.5-2l-2.5-1.6h-1.6l-3.3-3.8l-2.5-2.2l-3.9-2l-3.9-3.5l-0.1-1.8l2.5-3.1l2.1-3.2l-0.3-2.6l1.9-0.2l2.5-2.5 l2-3.4l-2.2-3.2l-1.5,1.2l-2-0.5l-3.5,1.8l-3.2-2l-1.7,0.7l-4.5-1.6l-2.7-2.7l-3.5-1.5l-3.1,0.9l3.9,2.1l-0.3,3.2l-4.8,1.2l-2.8-0.7 l-3.6,2.2l-2.9,3.7l0.6,1.5l-2.7,1.7l-3.4,5.1l0.6,3.5l-3.4-0.6h-3.5l-2.5-3.8l-3.7-2.9l-2.8,0.8l-2.6,0.9l-0.3,1.6l-2.4-0.7 l-0.3,1.8l-3,1.1l-1.7,2.5l-3.5,3.1l-1.4,4.8l-2.3-1.3l-2.2,3.1l1.5,3l-2.6,1.2l-1.4-5.5l-4.8,5.4l-0.8,3.5l-0.7,2.5l-3.8,3.3 l-2,3.4l-3.5,2.8l-6.1,1.9l-3.1-0.2l-1.5,0.6l-1.1,1.4l-3.5,0.7l-4.7,2.4l-1.4-0.8l-2.6,0.5l-4.6,2.3l-3.2,2.7l-4.8,2.1l-3.1,4.4 l0.4-4.8l-3.1,4.6l-0.1,3.7l-1.3,3.2l-1.5,1.5l-1.3,3.7l0.9,1.9l0.1,2l1.6,5l-0.7,3.3l-1-2.5l-2.3-1.8l0.4,5.9l-1.7-2.8l0.1,2.8 l1.8,5l-0.6,5l1.7,2.5l-0.4,1.9l0.9,4.1l-1.3,3.6l-0.3,3.6l0.7,6.5l-0.7,3.7l-2.2,4.4l-0.6,2.3l-1.5,1.5l-2.9,0.8l-1.5,3.7l2.4,1.2 l4,4.1h3.6l3.8,0.3l3.3-2.1l3.4-1.8l1.4,0.3l4.5-3.4l3.8-0.3l4.1-0.7l4.2,1.2l3.6-0.6l4.6-0.2l3-2.6l2.3-3.3l5.2-1.5l6.9-3.2l5,0.4 l6.9-2.1l7.8-2.3l9.8-0.6l4,3.1l3.7,0.2l5.3,3.8l-1.6,1.5l1.8,2.4l1.3,4.6l-1.6,3.4l2.9,2.6l4.3-5.1l4.3-2.1l6.7-5.5l-1.6,4.7 l-3.4,3.2l-2.5,3.7l-4.4,3.5l5.2-1.2l4.7-4.4l-0.9,4.8l-3.2,3.1l4.7,0.8l1.3,2.6l-0.4,3.3l-1.5,4.9l1.4,4l4,1.9l2.8,0.4l2.4,1 l3.5,1.8l7.2-4.7l3.5-1.2l-2.7,3.4l2.6,1.1l2.7,2.8l4.7-2.7l3.8-2.5l6.3-2.7l6-0.2l4.2-2.3l0.9-2l3-4.5l3.9-4.8l3.6-3.2l4.4-5.6 l3.3-3.1l4.4-5l5.4-3.1l5-5.8l3.1-4.5l1.4-3.6l3.8-5.7l2.1-2.9l2.5-5.7l-0.7-5.4l1.7-3.9l1.1-3.7v-5.1l-2.8-5.1l-1.9-2.5l-2.9-3.9 l0.7-6.7l-1.5,1l-1.6-2.8l-2.5,1.4l-0.6-6.9l-2.2-4l1-1.5l-3.1-2.8l-3.2-3l-5.3-3.3l-0.9-4.3l1.3-3.3l-0.4-5.5l-1.3-0.7l-0.2-3.2 l-0.2-5.5l1.1-2.8l-2.3-2.5l-1.4-2.7l-3.9,2.4L1776.8,659.7L1776.8,659.7z"
                                },
                                AT: {
                                    d: "M1060.2,264l-2.3-1.2l-2.3,0.3l-4-1.9l-1.7,0.5l-2.6,2.5l-3.8-2l-1.5,2.9l-1.7,0.8l1,4l-0.4,1.1l-1.7-1.3l-2.4-0.2 l-3.4,1.2l-4.4-0.3l-0.6,1.6l-2.6-1.7l-1.5,0.3l0.2,1.1l-0.7,1.6l2.3,1.1l2.6,0.2l3.1,0.9l0.5-1.2l4.8-1.1l1.3,2.2l7.2,1.6l4.2,0.4 l2.4-1.4l4.3-0.1l0.9-1.1l1.3-4l-1.1-1.3h2.8l0.2-2.6l-0.7-2.1L1060.2,264L1060.2,264z"
                                },
                                AZ: {
                                    d: "M1210.1,318.9l-1,0.2l1.2,2.4l3.2,2.9l3.7,0.9l-2.8-3.7l-0.2-1h-2.3L1210.1,318.9L1210.1,318.9z M1220.5,309.6 l-4.3-3.8l-1.5-0.2l-1.1,0.9l3.2,3.4l-0.6,0.7l-2.8-0.4l-4.2-1.8l-1.1,1l1.4,1.7l2.2,1.1l-0.7,1.5l3.1,2.2l-1,2l2.5,1.7l2.5,1.1 l0.9,4.4l5.3-4.7l1.9-0.5l1.9,1.9l-1.2,3.1l3.8,3.4l1.3-0.3l-0.8-3.2l1.7-1.5l0.4-2.2l-0.1-5l4.2-0.5l-2-1.7l-2.5-0.2l-3.5-4.5 l-3.4-3.2l0,0l-2.6,2.5l-0.5,1.5L1220.5,309.6L1220.5,309.6z"
                                },
                                BS: {
                                    d: "M574.4,437.3l0.2-0.6l-0.3-0.1l-0.5,0.7l-0.6,0.3h-0.3l-0.7-0.3h-0.5l-0.4,0.5l-0.6,0.1l0.1,0.1v0.2l-0.2,0.3v0.2 l0.1,0.3l1.5-0.1l1.3-0.2l0.7-0.9L574.4,437.3z M575.2,435.3l-0.4-0.3l-0.4,0.3l0.1,0.3L575.2,435.3L575.2,435.3z M575.2,429.5 l-0.4-0.2l-0.3,0.5l0.3,0.1l0.7-0.1l0.5,0.1l0.5,0.4l0.3-0.2l-0.1-0.1l-0.4-0.3l-0.6-0.1h-0.2L575.2,429.5L575.2,429.5z M568.6,430.8l0.7-0.6l0.7-0.3l0.9-1.1l-0.1-0.9l0.2-0.4l-0.6,0.1l-0.1,0.3l-0.1,0.3l0.3,0.4v0.2l-0.2,0.4l-0.3,0.1l-0.1,0.2 l-0.3,0.1l-0.4,0.5l-0.8,0.6l-0.2,0.3L568.6,430.8L568.6,430.8z M569.8,427.6l-0.6-0.2L569,427l-0.4-0.1l-0.1,0.2v0.2l0.1,0.4 l0.2-0.1l0.8,0.4l0.4-0.3L569.8,427.6z M565.7,426.5v-0.7l-0.4-0.5l-0.6-0.4l-0.1-1.2l-0.3-0.7l-0.2-0.6l-0.4-0.8v0.5l0.1,0.1 l0.1,0.6l0.4,0.9l0.1,0.4l-0.1,0.4l-0.4,0.1l-0.1,0.2l0.5,0.3l0.8,0.3l0.5,1.3L565.7,426.5L565.7,426.5z M561.6,423l-0.5-0.3 l-0.2-0.3l-0.7-0.7l-0.3-0.1l-0.2,0.4l0.4,0.1l0.9,0.7l0.4,0.2L561.6,423L561.6,423z M568.9,419l-0.1-0.3h-0.1l-0.3,0.1l-0.3,0.9 h0.3L568.9,419L568.9,419z M551.3,417.9l-0.2-0.3l-0.3,0.2h-0.5l-0.2,0.1h-0.4l-0.3,0.2l0.4,0.8l0.3,0.3l0.1,1l0.2,0.1l-0.1,0.7 l1.1,0.1l0.4-0.8V420v-0.1v-0.2v-0.2v-0.9l-0.3-0.5l-0.4,0.6l-0.4-0.3l0.6-0.4L551.3,417.9L551.3,417.9z M564.2,418.2l-1-1.4v-0.2 l-0.5-1.5l-0.3-0.1l-0.1,0.1l-0.1,0.2l0.4,0.4v0.4l0.3,0.2l0.4,1.1l0.4,0.4l-0.1,0.3l-0.4,0.3l-0.1,0.2h0.1l0.6-0.1h0.4L564.2,418.2 L564.2,418.2z M553.7,413l0.5-0.2l0,0l-0.3-0.2h-0.7l-0.4,0.1l-0.2,0.2l0.1,0.1l0.4,0.1L553.7,413L553.7,413z M551.3,415l-0.5-0.6 l-0.3-0.9l-0.2-0.4l0.1-0.5l-0.3-0.4l-0.6-0.4l-0.3,0.1l0.1,1.1l-0.2,0.6l-0.8,1.1l0.1,0.4l0,0l0.1,0.2l-0.5,0.4v-0.3l-0.6,0.1 l0.3,0.5l0.6,0.4l0.3,0.1l0.3-0.2v0.5l0.3,0.4l0.1,0.4l0.3-0.3l0.6-0.2l0.2-0.2l0.7-0.4v-0.2l0.1-0.6L551.3,415L551.3,415z M558,410 l-0.3-0.5l-0.1,0.1l-0.1,0.4l-0.3,0.4l0.5-0.1l0.4,0.1l0.6,0.5l0.7,0.2l0.3,0.6l0.6,0.6v0.6l-0.4,0.6l-0.1,0.7l-0.6,0.1l0.1,0.1 l0.3,0.3l0.1,0.4l0.2,0.2v-0.7l0.3-0.8l0.4-1.3l-0.1-0.3l-0.3-0.3l-0.7-0.9l-0.7-0.3L558,410L558,410z M549.2,402.1l-0.5-0.4 l-0.2,0.4v0.1l-0.1,0.3l-0.5,0.4l-0.5,0.1l-0.7-0.6l-0.2-0.1l0.8,1.1l0.3,0.1h0.4l0.9-0.3l1.6-0.5l1.7-0.2l0.1-0.2l-0.1-0.3 l-0.8,0.2l-1-0.1l-0.2,0.2h-0.4L549.2,402.1z M555.3,407.3l0.2-0.3l0.4-1.8l0.8-0.6l0.1-1.2l-0.5-0.5l-0.4-0.2l-0.1-0.2l0.1-0.2 l-0.2-0.1l-0.3-0.2l-0.4-0.6l-0.4-0.4l-0.7-0.1l-0.6-0.1l-0.4-0.1l-0.5,0.3h0.8l1.5,0.3l0.7,1.5l0.5,0.4l0.1,0.4l-0.2,0.4v0.4 l-0.3,0.5l-0.1,0.8l-0.3,0.4l-0.7,0.5l0.4,0.2l0.3,0.6L555.3,407.3L555.3,407.3z"
                                },
                                BH: {
                                    d: "M1253,408.3l0.7-3l-0.5-0.9l-1.6,1.2l0.6,0.9l-0.2,0.7L1253,408.3z"
                                },
                                BD: {
                                    d: "M1486.5,431.9l-4.5-10.1l-1.5,0.1l-0.2,4l-3.5-3.3l1.1-3.6l2.4-0.4l1.6-5.3l-3.4-1.1l-5,0.1l-5.4-0.9l-1.2-4.4 l-2.7-0.4l-4.8-2.7l-1.2,4.3l4.6,3.4l-3.1,2.4l-0.8,2.3l3.7,1.7l-0.4,3.8l2.6,4.8l1.6,5.2l2.2,0.6l1.7,0.7l0.6-1.2l2.5,1.3l1.3-3.5 l-0.9-2.6l5.1,0.2l2.8,3.7l1.5,3.1l0.8,3.2l2,3.3l-1.1-5.1l2.1,1L1486.5,431.9L1486.5,431.9z"
                                },
                                BB: {
                                    d: "M644.9,488.9l0.4-0.4l-0.3-0.3l-0.6-0.8l-0.3,0.1v1l0.1,0.3l0.5,0.3L644.9,488.9L644.9,488.9z"
                                },
                                BY: {
                                    d: "M1112.8,219.4l-5.2-1.5l-4.6,2.3l-2.6,1l0.9,2.6l-3.5,2l-0.5,3.4l-4.8,2.2h-4.6l0.6,2.7l1.7,2.3l0.3,2.4l-2.7,1.2 l1.9,2.9l0.5,2.7l2.2-0.3l2.4-1.6l3.7-0.2l5,0.5l5.6,1.5l3.8,0.1l2,0.9l1.6-1.1l1.5,1.5l4.3-0.3l2,0.6l-0.2-3.1l1.2-1.4l4.1-0.3l0,0 l-2-3.9l-1.5-2l0.8-0.6l3.9,0.2l1.6-1.3l-1.7-1.6l-3.4-1.1l0.1-1.1l-2.2-1.1l-3.7-3.9l0.6-1.6l-1-2.9l-4.8-1.4l-2.3,0.7 L1112.8,219.4L1112.8,219.4z"
                                },
                                BE: {
                                    d: "M1000.7,246.2l-4.4,1.3l-3.6-0.5l0,0l-3.8,1.2l0.7,2.2l2.2,0.1l2.4,2.4l3.4,2.9l2.5-0.4l4.4,2.8l0.4-3.5l1.3-0.2 l0.4-4.2l-2.8-1.4L1000.7,246.2L1000.7,246.2z"
                                },
                                BZ: {
                                    d: "M482.5,471.1l1.4-2.2l1-0.2l1.3-1.7l1-3.2l-0.3-0.6l0.9-2.3l-0.4-1l1.3-2.7l0.3-1.8h-1.1l0.1-0.9h-1l-2.5,3.9 l-0.9-0.8l-0.7,0.3l-0.1,1l-0.7,5l-1.2,7.2L482.5,471.1L482.5,471.1z"
                                },
                                BJ: {
                                    d: "M996.9,498l-4.3-3.7h-2l-1.9,1.9l-1.2,1.9l-2.7,0.6l-1.2,2.8l-1.9,0.7l-0.7,3.3l1.7,1.9l2,2.3l0.2,3.1l1.1,1.3 l-0.2,14.6l1.4,4.4l4.6-0.8l0.3-10.2L992,518l1-4l1.7-1.9l2.7-4l-0.6-1.7l1.1-2.5l-1.2-3.8L996.9,498L996.9,498z"
                                },
                                BM: {
                                    d: "M630.2,366.8l0.4-0.6h-0.1l-0.5,0.5l-0.6,0.2l0.1,0.1h0.1L630.2,366.8z"
                                },
                                BT: {
                                    d: "M1474.7,395.5l-2.7-1.8l-2.9-0.1l-4.2-1.5l-2.6,1.6l-2.6,4.8l0.3,1.2l5.5,2.5l3.2-1l4.7,0.4l4.4-0.2l-0.4-3.9 L1474.7,395.5L1474.7,395.5z"
                                },
                                BO: {
                                    d: "M655.7,700.5l1.6-1.3l-0.8-3.6l1.3-2.8l0.5-5l-1.6-4l-3.2-1.7l-0.8-2.6l0.6-3.6l-10.7-0.3l-2.7-7.4l1.6-0.1 l-0.3-2.8l-1.2-1.8l-0.5-3.7l-3.3-1.9l-3.5,0.1l-2.5-1.9l-3.8-1.2l-2.4-2.4l-6.3-1l-6.4-5.7l0.3-4.3l-0.9-2.5l0.4-4.7l-7.3,1.1 l-2.8,2.3l-4.8,2.6l-1.1,1.9l-2.9,0.2l-4.2-0.6l5.5,10.3l-1.1,2.1l0.1,4.5l0.3,5.4l-1.9,3.2l1.2,2.4l-1.1,2.1l2.8,5.3L591,684 l3.1,4.3l1.2,4.6l3.2,2.7l-1.1,6.2l3.7,7.1l3.1,8.8l3.8-0.9l4-5.7l7.4,1.5l3.7,4.6l1.6-5.1l6.3,0.3l1,1.3l1.5-7.6l-0.2-3.4l2.1-5.6 l9.5-1.9l5.1,0.1l5.4,3.3L655.7,700.5L655.7,700.5z"
                                },
                                BA: {
                                    d: "M1062.2,284.9l-2.3,0.1l-1,1.3l-1.9-1.4l-0.9,2.5l2.7,2.9l1.3,1.9l2.5,2.3l2,1.4l2.2,2.5l4.7,2.4l0.4-3.4l1.5-1.4 l0.9-0.6l1.2-0.3l0.5-2.9l-2.7-2.3l1-2.7h-1.8l0,0l-2.4-1.4l-3.5,0.1L1062.2,284.9L1062.2,284.9z"
                                },
                                BW: {
                                    d: "M1116.7,685l-1-0.5l-3.2,1.5h-1.6l-3.7,2.5l-2-2.6l-8.6,2.2l-4.1,0.2l-0.9,22.7l-5.4,0.2l-0.6,18.5l1.4,1l3,6.1 l-0.7,3.8l1.1,2.3l4-0.7l2.8-2.8l2.7-1.9l1.5-3.1l2.7-1.5l2.3,0.8l2.5,1.8l4.4,0.3l3.6-1.5l0.6-2l1.2-3l3-0.5l1.7-2.4l2-4.3l5.2-4.7 l8-4.7l-3.4-2.9l-4.2-0.9l-1.5-4.1l0.1-2.2l-2.3-0.7l-6-7l-1.6-3.7l-1.1-1.1L1116.7,685L1116.7,685z"
                                },
                                BR: {
                                    d: "M659,560.1l-1.4,0.2l-3.1-0.5l-1.8,1.7l-2.6,1.1l-1.7,0.2l-0.7,1.3l-2.7-0.3l-3.5-3l-0.3-2.9l-1.4-3.3l1-5.4 l1.6-2.2l-1.2-3l-1.9-0.9l0.8-2.8l-1.3-1.5l-2.9,0.3l0.7,1.8l-2.1,2.4l-6.4,2.4l-4,1l-1.7,1.5l-4.4-1.6l-4.2-0.8l-1,0.6l2.4,1.6 l-0.3,4.3l0.7,4l4.8,0.5l0.3,1.4l-4.1,1.8l-0.7,2.7l-2.3,1l-4.2,1.5l-1.1,1.9l-4.4,0.5l-3-3.4l-1.1,0.8l-1-3.8l-1.6-2l-1.9,2.2 l-10.9-0.1v3.9l3.3,0.7l-0.2,2.4l-1.1-0.6l-3.2,1v4.6l2.5,2.4l0.9,3.6l-0.1,2.8l-2.2,17.4l-5.1-0.3l-0.7,1l-4.6,1.2l-6.2,4.3l-0.4,3 l-1.3,2.2l0.7,3.4l-3.3,1.9l0.1,2.7L562,620l2.6,5.8l3.3,3.8l-1,2.8l3.7,0.3l2.3,3.4l4.9,0.2l4.4-3.8l0.2,9.7l2.6,0.7l3-1.1l4.2,0.6 l2.9-0.2l1.1-1.9l4.8-2.6l2.8-2.3l7.3-1.1l-0.4,4.7l0.9,2.5l-0.3,4.3l6.4,5.7l6.3,1l2.4,2.4l3.8,1.2l2.5,1.9l3.5-0.1l3.3,1.9 l0.5,3.7l1.2,1.8l0.3,2.8l-1.6,0.1l2.7,7.4l10.7,0.3l-0.6,3.6l0.8,2.6l3.2,1.7l1.6,4l-0.5,5l-1.3,2.8l0.8,3.6l-1.6,1.3l1.9,3.6 l0.4,8.6l6,1.2l2.1-1.2l3.9,1.7l1.2,1.9l1,5.8l0.9,2.5l2,0.3l2-1.1l2.1,1.2l0.3,3.5l-0.3,3.8l-0.7,3.6l2.6-1.2l3.1,3.7l0.5,5.1 l-4.2,3.5l-3.3,2.6l-5.3,6.2l-5.9,8.6l3.4-0.7l6.2,4.9l1.9-0.2l6.2,4.1l4.8,3.5l3.8,4.3l-1.9,3l2.1,3.7l2.9-3.7l1.5-6l3.2-3l3.9-5 l4.5-11.2l3.4-3.5l0.8-3.1l0.3-6.4l-1.3-3.5l0.3-4.8l4.1-6.3l6-5.1l6-1.8l3.6-2.9l8.5-2.4h5.9l1.1-3.8l4.2-2.8l0.6-6.5l5.1-8.3 l0.5-8.5l1.6-2.6l0.3-4.1l1.1-9.9l-1-11.9l1.4-4.7l1.4-0.1l3.9-5.5l3.3-7.2l7.7-8.8l2.7-4.2l2-10.5l-1-3.9l-2-8.1l-2.1-2l-4.8-0.2 l-4.3-1.9l-7.3-7.1l-8.4-5.3l-8.4,0.3l-10.9-3.4l-6.5,2l0.8-3.5l-2.7-3.8l-9.4-3.8l-7.1-2.3l-4.2,4.1l-0.3-6.3l-9.9-1l-1.7-2 l4.2-5.2l-0.1-4.4l-3-1l-3-11.2l-1.3-3.5l-1.9,0.3l-3.5,5.8l-1.8,4.7l-2.1,2.4l-2.7,0.5l-0.8-1.8l-1.2-0.3l-1.8,1.8l-2.4-1.3 l-3.2-1.4l-2.7,0.7l-2.3-0.6l-0.5,1.8l0.9,1.3l-0.5,1.3L659,560.1L659,560.1z"
                                },
                                VG: {
                                    d: "M619.2,455.1l0.3-0.2l-0.2-0.1h-0.4l-0.3,0.2l0.1,0.1H619.2L619.2,455.1z M620.3,454.7l0.4-0.4l-0.5,0.1l-0.2,0.2 l0.1,0.1h0.1L620.3,454.7L620.3,454.7z M621.1,452.9h-0.2h-0.5l0,0l0.1,0.1h0.3l0.3,0.1l0,0L621.1,452.9L621.1,452.9z"
                                },
                                BN: {
                                    d: "M1617.8,543.4l2.7,3.3l1.1-2.2l2.7,0.2l0.1-4.1l0.1-3.1l-4.6,3.5L1617.8,543.4L1617.8,543.4z"
                                },
                                BG: {
                                    d: "M1121.6,294.3l-3-0.7l-4-2.2l-5.8,1.4l-2.3,1.6l-7.5-0.3l-4-1l-1.9,0.5l-1.8-2.6l-1.1,1.4l0.7,2.3l2.8,2.6l-1.7,1.9 l-0.7,2l0.6,0.7l-0.7,0.9l2.8,2l0.8,4.1l3.8,0.2l3.9-1.7l3.9,2.1l4.6-0.6l-0.3-3l5-2l4.5,0.8l-2.1-3.5l1.3-4.4L1121.6,294.3 L1121.6,294.3z"
                                },
                                BF: {
                                    d: "M978.8,477.2h-3.6l-1.4-1.2l-3,0.9l-5.2,2.6l-1.1,2l-4.3,2.9l-0.8,1.6l-2.3,1.3l-2.7-0.9l-1.6,1.6l-0.8,4.4 l-4.5,5.2l0.2,2.2l-1.6,2.7l0.4,3.7l2.5,1.4l1,2.1l2.5,1.3l1.9-1.6l2.7-0.2l3.8,1.6l-0.8-4.8l0.2-3.6l9.7-0.3l2.4,0.5l1.8-1l2.6,0.5 l4.9,0.1l1.9-0.7l1.2-2.8l2.7-0.6l1.2-1.9l0.1-4.4l-6.4-1.4l-0.2-3.1l-3.1-4.1l-0.8-2.9L978.8,477.2L978.8,477.2z"
                                },
                                BI: {
                                    d: "M1148.2,590l-0.3-2.5l0,0l-3-0.4l-1.7,3.6l-3.5-0.5l1.4,2.9l0.1,1.1l2,6.1l-0.1,0.3l0.6-0.1l2.1-2.3l2.2-3.3 l1.4-1.4v-2L1148.2,590L1148.2,590z"
                                },
                                KH: {
                                    d: "M1574.8,481.8l-5.2-2.3l-2,4.3l-4.9-2.4l-5.3-1l-7.1,1.3l-3,5.2l2.1,7.7l3.4,6.6l2.6,3.3l4.7,0.9l4.7-2.5l5.8-0.5 l-2.8-3.8l8.9-4.9l-0.1-7.7L1574.8,481.8L1574.8,481.8z"
                                },
                                CM: {
                                    d: "M1060.1,502.9l0.2-4.3l-0.5-4.2l-2.2-4.1l-1.6,0.4l-0.2,2l2.3,2.6l-0.6,1.1l-0.3,2.1l-4.6,5l-1.5,4l-0.7,3.3 l-1.2,1.4l-1.1,4.5l-3,2.6l-0.8,3.2l-1.2,2.6l-0.5,2.6l-3.9,2.2l-3.2-2.6l-2.1,0.1l-3.3,3.7l-1.6,0.1l-2.7,6.1l-1.4,4.5v1.8l1.4,0.9 l1.1,2.8l2.6,1.1l2.2,4.2l-0.8,5l9.2,0.2l2.6-0.4l3.4,0.8l3.4-0.8l0.7,0.3l7.1,0.3l4.5,1.7l4.5,1.5l0.4-3.5l-0.6-1.8l-0.3-2.9 l-2.6-2.1l-2.1-3.2l-0.5-2.3l-2.6-3.3l0.4-1.9l-0.6-2.7l0.4-5l1.4-1.1l2.7-6.5l0.9-1.7l-1.8-4.4l-0.8-2.6l-2.5-1.1l-3.3-3.7l1.2-3 l2.5,0.6l1.6-0.4l3.1,0.1L1060.1,502.9L1060.1,502.9z"
                                },
                                CA: {
                                    d: "M659,276.7l-0.7-3l-2.5,1.9l0.5,2.1l5.6,2.6l1.9-0.4l3.3-2.5l-4.7,0.1L659,276.7L659,276.7z M673.4,260.8l0.2-1.1 l-4.1-2.6l-5.9-1.6l-1.9,0.6l3.5,2.9l5.7,1.9L673.4,260.8L673.4,260.8z M368.1,264.5l0.2-3.4l-3.2-2.6l-0.4-2.9l-0.1-2.1l-4.1-0.7 l-2.4-0.9l-4.1-1.4l-1.4,1.5l-0.6,3.3l4.3,1.1l-0.4,1.8l2.9,2.2v2.2l6.3,2.8L368.1,264.5L368.1,264.5z M704.2,251l3.9-3.8l1.4-1.7 l-2.1-0.3l-4.9,2.2l-4.2,3.5l-8.1,9.8l-5.3,3.7l1.6,1.7l-3.8,2.2l0.2,1.9l9.6,0.1l5.4-0.3l4.4,1.5l-4.4,2.9l2.9,0.2l7.3-5.4l1.2,0.8 l-2.5,5.1l3,1.2l2.3-0.2l3.5-5.5l-0.5-3.9l0.3-3.3l-3.7,1.1l2.8-4.6l-4.3-1.9l-2.7,1.5l-3.9-1.7l2.4-2.1l-2.9-1.3l-3.8,2L704.2,251 L704.2,251z M347.4,229.8l-1.9,2l-1.4,2.6l0.9,1.9l-0.6,2.8l0.7,2.8h1.9l-0.2-4.9l7.1-6.9l-4.9,0.5L347.4,229.8L347.4,229.8z M628.3,182.8l-0.4-1.2l-1.7-0.1l-2.8,1.7l-0.4,0.4l0.1,1.7l1.7,0.5L628.3,182.8L628.3,182.8z M618.7,179.6l0.8-1.1l-6-0.1l-4.9,2.7 v1.5l3,0.2L618.7,179.6L618.7,179.6z M615.6,163l-2.7-0.5l-5,5.2l-3.6,4.4l-5.7,2.8l6.3-0.6l-0.8,3.4l8.2-3l6.2-3l0.8,2.6l5.9,1.3 l4.9-1.8l-1.9-1.8l-3.4,0.4l1.3-2.7l-3.7-1.7l-3.4-1.9l-1.5-1.5l-2.8,0.9L615.6,163L615.6,163z M660.2,154.8l3.7-1.7l1-0.7l1.4-2.3 l-2.3-1.5l-4.2,0.7l-3.8,3.1l-0.7,2.6L660.2,154.8L660.2,154.8z M586.4,144.1l-0.8-2l-0.3-1l-1.6-1l-3-1.5l-4.9,2.3l-5,1.7l3.5,2.4 l3.8-0.6l4.1,1.6L586.4,144.1z M608.8,142l-6.6-1l5.7-2.6l-0.4-6l-1.9-2.3l-4.5-0.8l-8.1,3.8l-5.5,5.8l2.9,2.1l1.6,3.3l-6.3,5.5 l-3.2-0.2l-6.2,4.4l4.2-5.2l-4.8-1.8l-4.5,0.9l-2.4,3.4l-5.9-0.1l-7.2,0.8l-5.1-2.4l-5,0.4l-1.5-2.9l-2.1-1.3l-3.8,0.5l-5.2,0.3 l-4.4,1.8l2,2.3l-7,2.8l-1.4-3.3l-4.4,1l-11.8,0.6l-6.4-1.2l8.5-2.6l-2.8-2.8l-4.4,0.4l-4.7-1l-7.5-1.9l-3.8-2.3l-4.5-0.3l-3.3,1.6 l-5.9,0.9l3.9-4.1l-9.4,3.6l-1.4-4.7l-2.1-0.6l-3.8,2.5l-4.5,1.2l-0.2-2.2l-8.2,1.4l-8.8,2.3l-5.2-0.6l-7,1.6l-6.2,2.3l-3.7-0.5 l-3.3-2.6l-5.9-1.3l0,0l-24.3,20.2l-35.4,32.4l4.2,0.1l2.7,1.6l0.6,2.6l0.2,3.9l7.6-3.3l6.4-1.9l-0.5,3l0.7,2.4l1.7,2.7l-1.1,4.2 l-1.5,6.8l4.6,3.8l-3.1,3.7l-5.1,2.9l0,0l-2.5,3.1l2.1,4.4l-3.1,4.9l4.1,2.6l-3.6,3.7l-1.3,5.5l6.9,2.5l1.6,2.7l5.4,6.1h0.7h13.9 h14.6h4.8h15h14.5h14.7h14.8h16.7h16.8h10.1l1.3-2.4h1.6l-0.8,3.4l1,1l3.2,0.4l4.6,1l3.8,1.9l4.4-0.8l5.3,1.6l0,0l3.2-2.4l3.2-1 l1.8-1.5l1.5-0.8l4,1.2l3.3,0.2l0.8,0.8l0.1,3.5l5.2,1l-1.7,1.7l1.2,1.9l-1.9,2.3l1.8,0.8l-1.9,2.1l0,0l1.2,0.2l1.3-0.9l0.5,1.4 l3.4,0.7l3.8,0.1l3.8,0.6l4,1.2l0.8,2l1.4,4.7l-2.4,2l-3.8-0.8l-1-3.8l-0.9,3.9l-3.8,3.4l-0.8,2.9l-1.1,1.7l-4.1,2l0,0l-3.7,3.4 l-2,2.2l2.7,0.4l4.5-2l2.9-1.7l1.6-0.3l2.6,0.6l1.7-0.9l2.8-0.8l4.7-0.8l0,0l0,0l0.3-1.8l-0.3,0.1l-1.7,0.3l-1.8-0.6l2.3-2.1 l1.9-0.7l3.9-0.9l4.6-0.9l1.8,1.2l1.9-1.4l1.9-0.8l0.9,0.4l0.1,0.1l6.7-4.2l2.7-1.2h7.7h9.3l1-1.6l1.7-0.3l2.5-0.9l2.7-2.8l3.2-4.9 l5.5-4.7l1.1,1.7l3.7-1.1l1.5,1.8l-2.8,8.5l2.1,3.5l5.9-0.8l8.1-0.2l-10.4,5.1l-1.5,5.2l3.7,0.5l7.1-4.5l5.8-2.4l12.2-3.7l7.5-4.1 l-2.6-2.2l1-4.5l-7.1,7l-8.6,0.8l-5.5-3.1l-0.1-4.6l0.6-6.8l6.1-4.1l-3.3-3.1l-7.6,0.6l-12.1,5.2l-10.9,8.2l-4.6,1l7.8-5.7l10.1-8.3 l7.2-2.7l5.7-4.4l5.2-0.5l7.3,0.1l10,1.3l8.6-1l7.8-5.1l8.7-2.2l4.2-2.1l4.2-2.3l2-6.8l-1.1-2.3l-3.4-0.8v-5.1l-2.3-1.9l-6.9-1.6 l-2.8-3.4l-4.8-3.4l3.4-3.7l-2-7.1l-2.6-7.5l-1-5.2l-4.3,2.7l-7.4,6.5l-8.1,3.2l-1.6-3.4l-3.7-1l2.2-7.3l2.6-4.9l-7.7-0.5l-0.1-2.2 l-3.6-3.3l-3-2l-4.5,1.5l-4.2-0.5l-6.6-1.6l-3.9,1.3l-3.8,9l-1,5.3l-8.8,6.1l3.1,4.5l0.5,5l-1.7,4l-4.7,4.1L610,224l-9,2.8l1.7,3.2 l-2.2,9.6l-5.6,6.3l-4.6,1.9l-4.4-5.8l-0.1-6.8l1.7-6l3.6-5.2l-4.8-0.6l-7.5-0.4l-3.6-2.5l-4.8-1.6l-1.7-2.9l-3.3-2.2l-7-2.6 l-7.1,1.2l0.7-4.5l1.5-5.5l-6-1l4.9-6.8l4.9-4.6l9.4-6.5l8.6-4.6l5.6-0.7l2.9-3.7l5.1-2.4l6.4-0.4l7.7-3.8l2.9-2.4l7.4-4.7l3.2-2.8 l3.2,1.7l6.5-0.9L637,155l2.3-2.7l-0.8-2.9l5-2.9l1.7-2.7l-3.5-2.6l-5.4-0.8l-5.5-0.4l-4.6,5.9l-6.5,4.6l-7.2,4l-1.3-3.7l4.2-4 l-2.2-3.5l-8.7,4.2L608.8,142L608.8,142z M533.3,123.1l-2.8-1l-14.1,3.2l-5.1,2l-7.8,3.9l5.4,1.4l6.2-0.1l-11.5,2.1v1.9l5.6,0.1 l9-0.4l6.5,1.2l-6.2,1l-5.5-0.3l-7.1,0.9l-3.3,0.6l0.6,4.2l4.2-0.6l4.1,1.5l-0.3,2.5l7.8-0.5l11.2-0.8l9.4-1.8l5-0.4l5.7,1.5 l6.7,0.8l3.1-1.9l-0.7-2.1l7-0.4l2.6-2.4l-5-2.5l-4.2-2.6l2.4-3.6l2.7-5.1l-2.2-2l-3-0.9l-4.2,0.8l-2.8,5.3l-4.3,2.1l2.2-5.1 l-1.7-1.7l-7.3,2.7L539,124l-10.4,1.5L533.3,123.1L533.3,123.1z M572.4,121.6l-1.7-1.1l-5.4,0.2l-2.1,0.7l2.2,3.6 C565.4,125,572.4,121.6,572.4,121.6z M680.1,123.2l-4.4-2.8l-8.4-0.5l-2.1,0.3l-1.7,1.8l2,2.8l0.9,0.3l4.8-0.7l4.1,0.1l4.1,0.1 L680.1,123.2L680.1,123.2z M640.7,122.9l5.7-3.2l-11.2,1.3l-5.8,2.1l-7.1,4.6l-3.3,5.2l5.6,0.1l-6.1,2.3l1.8,1.9l5.9,0.8l7.3,1.5 l13.8,1.2l7.9-0.6l3.2-1.6l2,1.8l3.3,0.3l2,3.3l-3.5,1.4l7.1,1.8l4.6,2.6l0.5,1.9L674,154l-8.6,5.4l-3.2,2.7l0.2,2l-9.2,0.7l-8,0.1 l-5.4,4.2l2.4,1.9l13-0.9l0.9-1.6l4.7,2.7l4.7,2.9l-2.4,1.6l3.8,2.8l7.6,3.3l10.7,2.3l0.3-2l-2.8-3.5l-3.5-4.9l8.5,4.6l4.7,1.5 l3.6-4.1v-5.6l-1-1.5l-4.4-2.5l-2.7-3.3l2.3-3.2l5.8-0.7l3.8,5.4l4,2.4l10.7-6.5l3.3-3.9l-6.4-0.3l-3.2-5.1l-5.9-1.2l-7.7-3.5l9-2.5 l-0.8-5l-2.2-2.1l-8.3-2.1l-1.9-3.3l-8.2,1.2l1.1-2.3l-3.6-2.5l-6.8-2.6l-5.2,2.1l-9,1.5l3.3-3.4l-2.3-5.3l-11.6,2.1l-7.1,4.1 L640.7,122.9L640.7,122.9z M590.7,119.5l-7.1,2.4l0.9,3.4l-7.4-0.7l-1.7,1.7l5.8,3.9l0.9,2l3.4,0.5l8.4-2l5.1-4.7l-3.8-2.2l6-2.4 l0.5-1.5l-7.5,0.6L590.7,119.5L590.7,119.5z M613,124.9l5.6-1l10-4.5l-6.1-1.2l-7.8-0.2l-5.2,1.4l-4.2,2.1l-2.5,2.6l-1.8,4.5 l4.3,0.2L613,124.9z M498.3,132.1l2.6-2.3l9.1-3.6l13.8-3.6l6.4-1.3l-1.6-2.1l-1.9-1.5l-9.4-0.2l-4.1-1.1l-14,0.8l-0.3,3.1l-7.6,3.3 l-7.4,3.8l-4.3,2.2l5.9,2.7l-0.6,2.3L498.3,132.1L498.3,132.1z M622.4,113.8l0.3-1.6l-1.4-1.7l-6.9,1.3L610,114l3.2,1.3l5.1,0.4 L622.4,113.8L622.4,113.8z M613.7,105.2l-1.1,0.7l-4.8-0.3l-7.6,1.6l-3.8-0.1l-4.3,3.8l6.6-0.4l-3.4,2.9l3.2,0.8l6.8-0.5l5.8-3.7 l2.8-2.5L613.7,105.2z M574.6,107.7l1.8-2.3l-3.1-0.5l-5.7,1.7l-0.7,4.7l-6.1-0.4L558,108l-8.2-1.6l-5.4,1.4l-11.6,4.8l4.1,0.8 l17.8-0.5l-10.6,2.2l-1.5,1.6l5.9-0.1l12.2-2.2l13.8-0.8l5.1-2.3l2.3-2.4l-3.7-0.2l-4.3,0.8C573.9,109.5,574.6,107.7,574.6,107.7z M629.8,103.4l-7.1-0.3l-3.8,2l2.6,1.5l7,0.6l1.4,2.1l-2.2,2.4l-1.5,2.8l8.5,1.6l5.5,0.6l8-0.1l11.6-0.8l4.3,0.6l6.7-1l3.5-1.4l1-2 l-2.3-1.9l-5.8-0.3l-8,0.4l-7,1.1l-5.1-0.4l-4.8-0.3l-1.2-1.1l-3.1-1.1l2.8-1.9l-1.4-1.6l-7.3,0.1L629.8,103.4L629.8,103.4z M554.8,100.8l-6,0.7l-5.5-0.1l-12.1,3.1l-11.6,3.7l0,0l3.6,1l7-0.7l9.8-2.1l3.8-0.3l5.2-1.6L554.8,100.8z M635.3,101.4l1-0.5 l-1.5-0.9l-7.2-0.1l-0.6,1.3l6.4,0.3L635.3,101.4L635.3,101.4z M576.9,100.6l3.2-1.4l-4.1-0.8l-5.9,0.5l-5.1,1.5l3.3,1.5 C568.3,101.9,576.9,100.6,576.9,100.6z M584.7,96.4l-3.3-0.9l-1.6-0.2l-5.7,1.3l-1,0.7h6L584.7,96.4z M631.1,98.9l3-1.7l-2.3-1.6 l-1.7-0.3l-4.4-0.1l-2.1,1.8l-0.7,1.8l1.6,1.1L631.1,98.9L631.1,98.9z M617.4,97.7l0.1-2.2l-7.4-1.7l-6.1-0.6l-2.1,1.7l2.8,1.1 l-5.3,1.4l7.7,0.2l4,1.5l5.2,0.5L617.4,97.7z M671.1,91.6l0.6-2.8L667,88l-4.7-0.9l-1.6-2.2l-8.2,0.2l0.3,0.9l-3.9,0.3l-4.1,1.3 l-4.9,1.9l-0.3,1.9l2,1.5h6.5l-4.3,1.2l-2.1,1.6l1.6,1.9l6.7,0.6l6.8-0.4l10.5-3.4l6.4-1.3L671.1,91.6z M749.6,77.8l-7-0.2l-6.9-0.3 l-10.2,0.6l-1.4-0.4l-10.3,0.2l-6.4,0.4l-5.1,0.6l-5,2l-2.3-1l-3.9-0.2l-6.7,1.4l-7.4,0.6l-4.1,0.1l-6,0.8l-1.1,1.3l2.5,1.2l0.8,1.6 l4.4,1.5l12.4-0.3l7.2,0.5l-7.2,1.5l-2.2-0.4l-9.3-0.2l-1.1,2.2l3,1.7l-2.8,1.6l-7.5,1.1l-4.9,1.7l4.8,0.9l1.7,3l-7.5-2l-2.5,0.3 l-2,3.4l-8,1.1l-2,2.3l6.7,0.3l4.9,0.6l11.7-0.8l8.4,1.4l12.6-3l1-1.1l-6.4,0.2l0.5-1.1l6.5-1.4l3.6-1.9l6.8-1.3l5-1.6l-0.8-2.2 l3.3-0.8l-4.3-0.6l11.1-0.4l3.2-0.9l7.9-0.8l9.3-3.5l6.8-1.1l10.3-2.5h-7.4l3.9-0.9l9-0.8l9.7-1.6l1.1-1.1l-5.2-1l-6.7-0.4 L749.6,77.8L749.6,77.8z"
                                },
                                CV: {
                                    d: "M841.4,477.6l0.1-0.4l-0.2-0.6l-0.3-0.1l-0.6,0.4l-0.1,0.3l0.1,0.3l0.3,0.3l0.3,0.1L841.4,477.6L841.4,477.6z M847.7,475.9l0.4-0.2V475l-0.1-0.3h-0.4l-0.2,0.4v0.1v0.4L847.7,475.9L847.7,475.9L847.7,475.9z M846.3,476.7l-0.5-0.9l-0.3-0.1 l-0.6-0.7v-0.3l-0.3-0.1v0.2v0.4l-0.2,0.5v0.5l0.4,0.8l0.4,0.2l0.7,0.1L846.3,476.7L846.3,476.7z M849.4,468.9v0.5l-0.3,0.7l0.5,0.3 l0.3,0.1l0.6-0.4l0.2-0.5l-0.1-0.3l-0.3-0.3l-0.3-0.1l-0.1,0.1L849.4,468.9L849.4,468.9z M843,466.4l-1-0.1l-0.6-0.2h-0.1v0.3 l0.4,0.8l0.2-0.5l0.2-0.1l0.8,0.2l0.4-0.1l-0.1-0.1L843,466.4L843,466.4z M849.7,466.2l-0.1-0.5V465h-0.2l-0.3,0.2l0.1,0.7l0.1,0.1 l0.2,0.5L849.7,466.2L849.7,466.2z M838.6,465.2V465l-0.3-0.5l-0.3,0.1l-0.4,0.2l-0.1,0.3l0.4,0.2h0.2L838.6,465.2L838.6,465.2z M837.1,464.3l0.8-0.6l0.2-0.3l-0.2-0.5l-0.5-0.1l-1.2,0.6l-0.1,0.2l0.1,0.3l0.1,0.5l0.2,0.1L837.1,464.3L837.1,464.3z"
                                },
                                KY: {
                                    d: "M527,449.1l-0.1-0.3l-0.1,0.1v0.6h0.5h0.2l0.3-0.2h0.6l-0.1-0.2l-0.8-0.1l-0.1,0.1l-0.2,0.1L527,449.1L527,449.1z M535,446.8L535,446.8l-0.1-0.1h-0.1l-0.3,0.1h-0.1h-0.1l-0.1,0.1l-0.1,0.1h0.2l0.4-0.2H535L535,446.8L535,446.8z M535.8,446.7 l0.5-0.2l0,0l-0.1-0.1h-0.1l-0.1,0.1h-0.1l-0.5,0.3h0.2L535.8,446.7L535.8,446.7z"
                                },
                                CF: {
                                    d: "M1110.5,517.3l-0.5-0.3l-2-1.8l-0.3-2l0.8-2.6V508l-3.3-4l-0.7-2.7l-3.5,1.1l-2.8,2.5l-4,7l-5.2,2.9l-5.4-0.4 l-1.6,0.6l0.6,2.3l-2.9,2.2l-2.3,2.5l-7.1,2.4l-1.4-1.4l-0.9-0.2l-1,1.7l-4.7,0.4l-2.7,6.5l-1.4,1.1l-0.4,5l0.6,2.7l-0.4,1.9 l2.6,3.3l0.5,2.3l2.1,3.2l2.6,2.1l0.3,2.9l0.6,1.8l2.9-5.9l3.3-3.4l3.8,1.1l3.6,0.4l0.5-4.5l2.2-3.2l3-2l4.6,2.1l3.6,2.4l4.1,0.6 l4.2,1.2l1.6-3.8l0.8-0.5l2.6,0.6l6.2-3.1l2.2,1.3l1.8-0.2l0.9-1.5l2-0.6l4.3,0.7l3.6,0.1l1.8-0.6l-0.9-2.1l-4.2-2.5l-1.5-3.8 l-2.4-2.7l-3.8-3.4l-0.1-2l-3.1-2.6L1110.5,517.3L1110.5,517.3z"
                                },
                                TD: {
                                    d: "M1108.4,447.6l-22.4-12.2l-22.3-12.2l-5.4,3.5l1.6,9.9l2,1.6l0.2,2.1l2.3,2.2l-1.1,2.7l-1.8,12.9l-0.2,8.3l-6.9,6 l-2.3,8.4l2.4,2.3v4.1l3.6,0.2l-0.5,2.9l2.2,4.1l0.5,4.2l-0.2,4.3l3.1,5.8l-3.1-0.1l-1.6,0.4l-2.5-0.6l-1.2,3l3.3,3.7l2.5,1.1 l0.8,2.6l1.8,4.4l-0.9,1.7l4.7-0.4l1-1.7l0.9,0.2l1.4,1.4l7.1-2.4l2.3-2.5l2.9-2.2l-0.6-2.3l1.6-0.6l5.4,0.4l5.2-2.9l4-7l2.8-2.5 l3.5-1.1v-1.6l-2.1-1.8l-0.1-3.7l-1.2-2.5l-2,0.4l0.5-2.4l1.4-2.6l-0.7-2.7l1.8-1.9l-1.2-1.5l1.4-3.9l2.4-4.7l4.8,0.4L1108.4,447.6 L1108.4,447.6z"
                                },
                                CL: {
                                    d: "M648.4,905.2l-3.7-0.7l-3.3,2.5l0.2,4.1l-1.2,2.8l-7.2-2.2l-8.6-4l-4.5-1.3l9.7,6.8l6.3,3.2l7.5,3.4l5.3,0.9 l4.3,1.8l3,0.5l2.3,0.1l3.2-1.8l0.5-2.4l-2.9-0.2h-5L648.4,905.2L648.4,905.2z M601.1,708.9l-3.7-7.1l1.1-6.2l-3.2-2.7l-1.2-4.6 L591,684l-1.2,3.3l-2.7,1.6l2.1,9l1.5,10.4l-0.1,14.2v13.2l0.9,12.3l-1.9,7.8l2.1,7.8l-0.5,5.3l3.2,9.5l-0.1,9.5l-1.2,10.2 l-0.6,10.5l-2.1,0.2l2.4,7.3l3.3,6.3l-1.1,4.3l1.9,11.6l1.5,8.8l3.5,0.9l-1.1-7.7l4,1.6l1.8,12.7l-6.4-2.1l2,10.2l-2.7,5.5l8.2,1.8 l-3.4,4.8l0.2,6l5,10.6l4.2,4.1l0.2,3.6l3.3,3.8l7.5,3.5l0,0l7.4,4.2l6.2,2l2-0.1l-1.8-5.7l3.4-2.2l1.7-1.5h4.2l-4.8-0.9l-12-0.8 l-3.5-3.6l-1.8-4.6l-3.1,0.4l-2.6-2.2l-3.1-6.6l2.7-2.7l0.1-3.9l-1.8-3.2l0.7-5.3l-1.1-8.2l-1.8-3.7l1.8-1.1l-1.3-2.3l-2.8-1.3 l0.8-2.6l-3.1-2.3l-3.6-7.1l1.6-1.2l-3.3-7.6l-0.7-6.4l-0.3-5.7l2.5-2.4l-3.3-6.3l-1.5-5.9l2.9-4.3l-1.4-5.4l1.6-6.2l-1.3-5.9 l-1.6-1.2l-4.9-10.9l2.1-6.5l-1.7-6.2l0.9-5.8l2.6-5.9l3.2-4l-2-2.5l0.9-2l-1.6-10.6l5.6-3.2l1.1-6.6l-0.9-1.6l-3.8,0.9L601.1,708.9 L601.1,708.9z"
                                },
                                CN: {
                                    d: "M1587.2,453.3l0.6-3.6l2-2.8l-1.6-2.5l-3.2-0.1l-5.8,1.8l-2.2,2.8l1,5.5l4.9,2L1587.2,453.3L1587.2,453.3z M1600.4,256.8l-6.1-6.1l-4.4-3.7l-3.8-2.7l-7.7-6.1l-5.9-2.3l-8.5-1.8l-6.2,0.2l-5.1,1.1l-1.7,3l3.7,1.5l2.5,3.3l-1.2,2l0.1,6.5 l1.9,2.7l-4.4,3.9l-7.3-2.3l0.6,4.6l0.3,6.2l2.7,2.6l2.4-0.8l5.4,1l2.5-2.3l5.1,2l7.2,4.3l0.7,2.2l-4.3-0.7l-6.8,0.8l-2.4,1.8 l-1.4,4.1l-6.3,2.4l-3.1,3.3l-5.9-1.3l-3.2-0.5l-0.4,4l2.9,2.3l1.9,2.1l-2.5,2l-1.9,3.3l-4.9,2.2l-7.5,0.2l-7.2,2.2l-4.4,3.3l-3.2-2 l-6.2,0.1l-9.3-3.8l-5.5-0.9l-6.4,0.8l-11.2-1.3l-5.5,0.1l-4.7-3.6l-4.9-5.7l-3.4-0.7l-7.9-3.8l-7.2-0.9l-6.4-1l-3-2.7l-1.3-7.3 l-5.8-5l-8.1-2.3l-5.7-3.3l-3.3-4.4l-1.7,0.5l-1.8,4.2l-3.8,0.6l2.5,6.2l-1.6,2.8l-10.7-2l1,11.1l-2,1.4l-9,2.4l8.7,10.7l-2.9,1.6 l1.7,3.5l-0.2,1.4l-6.8,3.4l-1,2.4l-6.4,0.8l-0.6,4l-5.7-0.9l-3.2,1.2l-4,3l1.1,1.5l-1,1.5l3,5.9l1.6-0.6l3.5,1.4l0.6,2.5l1.8,3.7 l1.4,1.9l4.7,3l2.9,5l9.4,2.6l7.6,7.5l0.8,5.2l3,3.3l0.6,3.3l-4.1-0.9l3.2,7l6.2,4l8.5,4.4l1.9-1.5l4.7,2l6.4,4.1l3.2,0.9l2.5,3.1 l4.5,1.2l5,2.8l6.4,1.5l6.5,0.6l3-1.4l1.5,5.1l2.6-4.8l2.6-1.6l4.2,1.5l2.9,0.1l2.7,1.8l4.2-0.8l3.9-4.8l5.3-4l4.9,1.5l3.2-2.6 l3.5,3.9l-1.2,2.7l6.1,0.9l3-0.4l2.7,3.7l2.7,1.5l1.3,4.9l0.8,5.3l-4.1,5.3l0.7,7.5l5.6-1l2.3,5.8l3.7,1.3l-0.8,5.2l4.5,2.4l2.5,1.2 l3.8-1.8l0.6,2.6l0.7,1.5l2.9,0.1l-1.9-7.2l2.7-1l2.7-1.5h4.3l5.3-0.7l4.1-3.4l3,2.4l5.2,1.1l-0.2,3.7l3,2.6l5.9,1.6l2.4-1l7.7,2 l-0.9,2.5l2.2,4.6l3-0.4l0.8-6.7l5.6-0.9l7.2-3.2l2.5-3.2l2.3,2.1l2.8-2.9l6.1-0.7l6.6-5.3l6.3-5.9l3.3-7.6l2.3-8.4l2.1-6.9l2.8-0.5 l-0.1-5.1l-0.8-5.1l-3.8-2l-2.5-3.4l2.8-1.7l-1.6-4.7l-5.4-4.9l-5.4-5.8l-4.6-6.3l-7.1-3.5l0.9-4.6l3.8-3.2l1-3.5l6.7-1.8l-2.4-3.4 l-3.4-0.2l-5.8-2.5l-3.9,4.6l-4.9-1.9l-1.5-2.9l-4.7-1l-4.7-4.4l1.2-3l5-0.3l1.2-4.1l3.6-4.4l3.4-2.2l4.4,3.3l-1.9,4.2l2.3,2.5 l-1.4,3l4.8-1.8l2.4-2.9l6.3-1.9l2.1-4l3.8-3.4l1-4.4l3.6,2l4.6,0.2l-2.7-3.3l6.3-2.6l-0.1-3.5l5.5,3.6l0,0l-1.9-3.1l2.5-0.1 l-3.8-7.3l-4.7-5.3l2.9-2.2l6.8,1.1l-0.6-6l-2.8-6.8l0.4-2.3l-1.3-5.6l-6.9,1.8l-2.6,2.5h-7.5l-6-5.8l-8.9-4.5L1600.4,256.8 L1600.4,256.8z"
                                },
                                CO: {
                                    d: "M578.3,497.2l1.2-2.1l-1.3-1.7l-2-0.4l-2.9,3.1l-2.3,1.4l-4.6,3.2l-4.3-0.5l-0.5,1.3l-3.6,0.1l-3.3,3l-1.4,5.4 l-0.1,2.1l-2.4,0.7l-4.4,4.4l-2.9-0.2l-0.7,0.9l1.1,3.8l-1.1,1.9l-1.8-0.5l-0.9,3.1l2.2,3.4l0.6,5.4l-1.2,1.6l1.1,5.9l-1.2,3.7 l2,1.5l-2.2,3.3l-2.5,4l-2.8,0.4l-1.4,2.3l0.2,3.2l-2.1,0.5l0.8,2l5.6,3.6l1-0.1l1.4,2.7l4.7,0.9l1.6-1l2.8,2.1l2.4,1.5l1.5-0.6 l3.7,3l1.8,3l2.7,1.7l3.4,6.7l4.2,0.8l3-1.7l2.1,1.1l3.3-0.6l4.4,3l-3.5,6.5l1.7,0.1l2.9,3.4l2.2-17.4l0.1-2.8l-0.9-3.6l-2.5-2.4 v-4.6l3.2-1l1.1,0.6l0.2-2.4l-3.3-0.7v-3.9l10.9,0.1l1.9-2.2l1.6,2l1,3.8l1.1-0.8l-1.7-6.4l-1.4-2.2l-2-1.4l2.9-3.1l-0.2-1.5 l-1.5-1.9l-1-4.2l0.5-4.6l1.3-2.1l1.2-3.4l-2-1.1l-3.2,0.7l-4-0.3l-2.3,0.7l-3.8-5.5l-3.2-0.8l-7.2,0.6l-1.3-2.2l-1.3-0.6l-0.2-1.3 l0.8-2.4l-0.4-2.5l-1.1-1.4l-0.6-2.9l-2.9-0.5l1.8-3.7l0.9-4.5l1.8-2.4l2.2-1.8l1.6-3.2L578.3,497.2L578.3,497.2z"
                                },
                                KM: {
                                    d: "M1221.1,650.5l-0.4-0.4h-0.4v0.2l0.1,0.4l1.1,0.2L1221.1,650.5L1221.1,650.5z M1225,649L1225,649l-0.3,0.1l-0.1,0.2 l-0.1,0.3h-0.3h-0.2h-0.4l0.8,0.5l0.5,0.5l0.2,0.2l0.1-0.2l0.1-0.7L1225,649L1225,649z M1219.4,647.9l0.2-0.3l-0.2-0.7l-0.4-0.8 l0.1-1.4l-0.2-0.2h-0.3l-0.1,0.1l-0.1,0.3l-0.3,2l0.4,0.6l0.3,0.1L1219.4,647.9L1219.4,647.9L1219.4,647.9z"
                                },
                                CG: {
                                    d: "M1080.3,549.9l-3.6-0.4l-3.8-1.1l-3.3,3.4l-2.9,5.9l-0.4,3.5l-4.5-1.5l-4.5-1.7l-7.1-0.3l-0.4,2.8l1.5,3.3l4.2-0.5 l1.4,1.2l-2.4,7.4l2.7,3.8l0.6,4.9l-0.8,4.3l-1.7,3l-4.9-0.3l-3-3l-0.5,2.8l-3.8,0.8l-1.9,1.6l2.1,4.2l-4.3,3.5l4.6,6.7l2.2-2.7 l1.8-1.1l2,2.2l1.5,0.6l1.9-2.4l3.1,0.1l0.4,1.8l2,1.1l3.4-4l3.3-3.1l1.4-2l-0.2-5.3l2.5-6.2l2.6-3.2l3.7-3.1l0.6-2l0.2-2.4l0.9-2.2 l-0.3-3.6l0.7-5.6l1.1-4l1.6-3.4L1080.3,549.9L1080.3,549.9z"
                                },
                                CR: {
                                    d: "M509.1,502.6l-1.4,1.3l-1.7-0.4l-0.8-1.3l-1.7-0.5l-1.4,0.8l-3.5-1.7l-0.9,0.8l-1.4,1.2l1.5,0.9l-0.9,2l-0.1,2 l0.7,1.3l1.7,0.6l1.2,1.8l1.2-1.6l-0.3-1.8l1.4,1.1l0.3,1.9l1.9,0.8l2.1,1.3l1.5,1.5l0.1,1.4l-0.7,1.1l1.1,1.3l2.9,1.4l0.4-1.2 l0.5-1.3l-0.1-1.2l0.8-0.7l-1.1-1l0.1-2.5l2.2-0.6l-2.4-2.7l-2-2.6L509.1,502.6L509.1,502.6z"
                                },
                                HR: {
                                    d: "M1065,280.4l-4-2.6l-1.6-0.8l-3.9,1.7l-0.3,2.5l-1.7,0.6l0.2,1.7l-2-0.1l-1.8-1l-0.8,1l-3.5-0.2l-0.2,0.1v2.2l1.7,2 l1.3-2.6l3.3,1l0.3,2l2.5,2.6l-1,0.5l4.6,4.5l4.8,1.8l3.1,2.2l5,2.3l0,0l0.5-1l-4.7-2.4l-2.2-2.5l-2-1.4l-2.5-2.3l-1.3-1.9l-2.7-2.9 l0.9-2.5l1.9,1.4l1-1.3l2.3-0.1l4.4,1l3.5-0.1l2.4,1.4l0,0l1.7-2.3l-1.7-1.8l-1.5-2.4l0,0l-1.8,0.9L1065,280.4L1065,280.4z"
                                },
                                CU: {
                                    d: "M539,427.3l-4.9-2.1l-4.3-0.1l-4.7-0.5l-1.4,0.7l-4.2,0.6l-3,1.3l-2.7,1.4l-1.5,2.3l-3.1,2l2.2,0.6l2.9-0.7l0.9-1.6 l2.3-0.1l4.4-3.3l5.4,0.3l-2.3,1.6l1.8,1.3l7,1l1.5,1.3l4.9,1.7l3.2-0.2l0.8,3.6l1.7,1.8l3.5,0.4l2.1,1.7l-4.1,3.5l7.9-0.6l3.8,0.5 l3.7-0.3l3.8-0.8l0.8-1.5l-3.9-2.6l-4-0.3l0.6-1.7l-3.1-1.3h-1.9l-3-2.8l-4.2-4l-1.8-1.5l-5.2,0.8L539,427.3L539,427.3z"
                                },
                                CW: {
                                    d: "M595.9,494.9v-0.6l-0.9-0.4v0.3l0.1,0.2l0.3,0.1l0.1,0.2l-0.1,0.6l0.2,0.3L595.9,494.9L595.9,494.9z"
                                },
                                CY: {
                                    d: "M1149.9,348.4l-0.3-0.1l-0.5,0.2l-0.4,0.4l-0.4,0.3l-0.5-0.3l0.2,0.9l0.6,1.1l0.2,0.3l0.3,0.2l1.1,0.3h0.3h0.6 l0.2,0.1l0.2,0.4h0.4v-0.1v-0.3l0.2-0.2l0.3-0.2h0.3l0.6-0.1l0.6-0.2l0.5-0.4l0.9-1h0.3h0.3h0.6l0.6-0.1l-0.2-0.4l-0.1-0.1l-0.4-0.5 l-0.2-0.4l0.1-0.6l2.5-1.9l0.5-0.5l-0.8,0.2l-0.6,0.4l-0.4,0.2l-0.7,0.4l-2.3,0.8l-0.8,0.1h-0.8l-1-0.1l-0.9-0.2v0.7l-0.2,0.6 l-0.6,0.2L1149.9,348.4L1149.9,348.4z"
                                },
                                CZ: {
                                    d: "M1049.4,248.5l-2.1,0.6l-1.4-0.7l-1.1,1.2l-3.4,1.2l-1.7,1.5l-3.4,1.3l1,1.9l0.7,2.6l2.6,1.5l2.9,2.6l3.8,2l2.6-2.5 l1.7-0.5l4,1.9l2.3-0.3l2.3,1.2l0.6-1.4l2.2,0.1l1.6-0.6l0.1-0.6l0.9-0.3l0.2-1.4l1.1-0.3l0.6-1.1h1.5l-2.6-3.1l-3.6-0.3l-0.7-2 l-3.4-0.6l-0.6,1.5l-2.7-1.2l0.1-1.7l-3.7-0.6L1049.4,248.5L1049.4,248.5z"
                                },
                                CD: {
                                    d: "M1124.9,539.4l-4.3-0.7l-2,0.6l-0.9,1.5l-1.8,0.2l-2.2-1.3l-6.2,3.1l-2.6-0.6l-0.8,0.5l-1.6,3.8l-4.2-1.2l-4.1-0.6 l-3.6-2.4l-4.6-2.1l-3,2l-2.2,3.2l-0.5,4.5l-0.3,3.8l-1.6,3.4l-1.1,4l-0.7,5.6l0.3,3.6l-0.9,2.2l-0.2,2.4l-0.6,2l-3.7,3.1l-2.6,3.2 l-2.5,6.2l0.2,5.3l-1.4,2l-3.3,3.1l-3.4,4l-2-1.1l-0.4-1.8l-3.1-0.1l-1.9,2.4l-1.5-0.6l-2,1.3l-0.9,1.7l-0.2,2.7l-1.5,0.7l0.8,2 l2.3-0.9l1.7,0.1l1.9-0.7l16.6,0.1l1.3,4.7l1.6,3.8l1.3,2.1l2.1,3.3l3.7-0.5l1.9-0.9l3,0.9l0.9-1.6l1.5-3.7l3.4-0.3l0.3-1.1h2.9 l-0.5,2.3h6.8v4l1.2,2.4l-0.9,3.8l0.3,4l1.9,2.3l-0.5,7.6l1.4-0.6l2.4,0.2l3.5-1l2.6,0.4l1.9,0.1l0.3,2l2.6-0.1l3.5,0.6l1.8,2.8 l4.5,0.9l3.4-2l1.2,3.4l4.3,0.8l2,2.8l2.1,3.5h4.3l-0.3-6.9l-1.5,1.2l-3.9-2.5l-1.4-1.1l0.8-6.4l1.2-7.5l-1.2-2.8l1.6-4.1l1.6-0.7 l7.5-1.1l1,0.3l0.2-1.1l-1.5-1.7l-0.7-3.5l-3.4-3.5l-1.8-4.5l1-2.7l-1.5-3.6l1.1-10.2l0.1,0.1l-0.1-1.1l-1.4-2.9l0.6-3.5l0.8-0.4 l0.2-3.8l1.6-1.8l0.1-4.8l1.3-2.4l0.3-5.1l1.2-3l2.1-3.3l2.2-1.7l1.8-2.3l-2.3-0.8l0.3-7.5l0,0l-5-4.2l-1.4-2.7l-3.1,1.3l-2.6-0.4 l-1.5,1.1l-2.5-0.8l-3.5-5.2l-1.8,0.6L1124.9,539.4L1124.9,539.4z"
                                },
                                DK: {
                                    d: "M1035.9,221.2l-1.7-3l-6.7,2l0.9,2.5l5.1,3.4L1035.9,221.2L1035.9,221.2z M1027.3,216.1l-2.6-0.9l-0.7-1.6l1.3-2 l-0.1-3l-3.6,1.6l-1.5,1.7l-4,0.4l-1.2,1.7l-0.7,1.6l0.4,6.1l2.1,3.4l3.6,0.8l3-0.9l-1.5-3l3.1-4.3l1.4,0.7L1027.3,216.1 L1027.3,216.1z"
                                },
                                DJ: {
                                    d: "M1217.8,499.2l-2.5-1.7l3.1-1.5l0.1-2.7l-1.4-1.9l-1.6,1.5l-2.4-0.5l-1.9,2.8l-1.8,3l0.5,1.7l0.2,2l3.1,0.1l1.3-0.5 l1.3,1.1L1217.8,499.2L1217.8,499.2z"
                                },
                                DM: {
                                    d: "M635.8,475.1l0.3-0.7l-0.1-1l-0.2-0.4l-0.8-0.3v0.2l-0.1,0.5l0.3,0.8l0.1,1.1L635.8,475.1z"
                                },
                                DO: {
                                    d: "M579.6,457.4v1.8l1.4,1l2.6-4.4l2-0.9l0.6,1.6l2.2-0.4l1.1-1.2l1.8,0.3l2.6-0.2l2.5,1.3l2.3-2.6l-2.5-2.3l-2.4-0.2 l0.3-1.9l-3,0.1l-0.8-2.2l-1.4,0.1l-3.1-1.6l-4.4-0.1l-0.8,1.1l0.2,3.5l-0.7,2.4l-1.5,1.1l1.2,1.9L579.6,457.4L579.6,457.4z"
                                },
                                EC: {
                                    d: "M553.1,573.1l-2.4-1.5l-2.8-2.1l-1.6,1l-4.7-0.9l-1.4-2.7l-1,0.1l-5.6-3.6l-3.9,2.5l-3.1,1.4l0.4,2.6l-2.2,4.1 l-1,3.9l-1.9,1l1,5.8l-1.1,1.8l3.4,2.7l2.1-2.9l1.3,2.8l-2.9,4.7l0.7,2.7l-1.5,1.5l0.2,2.3l2.3-0.5l2.3,0.7l2.5,3.2l3.1-2.6l0.9-4.3 l3.3-5.5l6.7-2.5l6-6.7l1.7-4.1L553.1,573.1z"
                                },
                                EG: {
                                    d: "M1129.7,374.8l-5.5-1.9l-5.3-1.7l-7.1,0.2l-1.8,3l1.1,2.7l-1.2,3.9l2,5.1l1.3,22.7l1,23.4h22.1h21.4h21.8l-1-1.3 l-6.8-5.7l-0.4-4.2l1-1.1l-5.3-7l-2-3.6l-2.3-3.5l-4.8-9.9l-3.9-6.4l-2.8-6.7l0.5-0.6l4.6,9.1l2.7,2.9l2,2l1.2-1.1l1.2-3.3l0.7-4.8 l1.3-2.5l-0.7-1.7l-3.9-9.2l0,0l-2.5,1.6l-4.2-0.4l-4.4-1.5l-1.1,2.1l-1.7-3.2l-3.9-0.8l-4.7,0.6l-2.1,1.8l-3.9,2L1129.7,374.8 L1129.7,374.8z"
                                },
                                SV: {
                                    d: "M487.2,487l0.6-2.5l-0.7-0.7l-1.1-0.5l-2.5,0.8l-0.1-0.9l-1.6-1l-1.1-1.3l-1.5-0.5l-1.4,0.4l0.2,0.7l-1.1,0.7 l-2.1,1.6l-0.2,1l1.4,1.3l3.1,0.4l2.2,1.3l1.9,0.6l3.3,0.1L487.2,487L487.2,487z"
                                },
                                GQ: {
                                    d: "M1040.1,557.8l-9.2-0.2l-1.9,7.2l1,0.9l1.9-0.3h8.2V557.8L1040.1,557.8z"
                                },
                                ER: {
                                    d: "M1198.1,474l-3.2-3.1l-1.8-5.9l-3.7-7.3l-2.6,3.6l-4,1l-1.6,2l-0.4,4.2l-1.9,9.4l0.7,2.5l6.5,1.3l1.5-4.7l3.5,2.9 l3.2-1.5l1.4,1.3l3.9,0.1l4.9,2.5l1.6,2.2l2.5,2.1l2.5,3.7l2,2.1l2.4,0.5l1.6-1.5l-2.8-1.9l-1.9-2.2l-3.2-3.7l-3.2-3.6L1198.1,474z"
                                },
                                EE: {
                                    d: "M1093.2,197.5l-5.5,0.9l-5.4,1.6l0.9,3.4l3.3,2.1l1.5-0.8l0.1,3.5l3.7-1l2.1,0.7l4.4,2.2h3.8l1.6-1.9l-2.5-5.5 l2.6-3.4l-0.9-1l0,0l-4.6,0.2L1093.2,197.5z"
                                },
                                ET: {
                                    d: "M1187.6,477l-1.5,4.7l-6.5-1.3l-0.7,5.5l-2.1,6.2l-3.2,3.2l-2.3,4.8l-0.5,2.6l-2.6,1.8l-1.4,6.7v0.7l0.2,5l-0.8,2 l-3,0.1l-1.8,3.6l3.4,0.5l2.9,3.1l1,2.5l2.6,1.5l3.5,6.9l2.9,1.1v3.6l2,2.1h3.9l7.2,5.4h1.8l1.3-0.1l1.2,0.7l3.8,0.5l1.6-2.7 l5.1-2.6l2.3,2.1h3.8l1.5-2l3.6-0.1l4.9-4.5l7.4-0.3l15.4-19.1l-4.8,0.1l-18.5-7.6l-2.2-2.2l-2.1-3.1l-2.2-3.5l1.1-2.3l-1.3-1.1 l-1.3,0.5l-3.1-0.1l-0.2-2l-0.5-1.7l1.8-3l1.9-2.8l-2-2.1l-2.5-3.7l-2.5-2.1l-1.6-2.2l-4.9-2.5l-3.9-0.1l-1.4-1.3l-3.2,1.5 L1187.6,477L1187.6,477z"
                                },
                                FK: {
                                    d: "M690.3,902.7l-0.1-0.3l-0.4-0.2l-0.2-0.1l0.1,0.2l0.1,0.3l0.1,0.2l0.2,0.1L690.3,902.7L690.3,902.7z M695.8,901.4 L695.8,901.4l-0.3-0.1l-0.1,0.2l0.2,0.3l0.4,0.1L695.8,901.4L695.8,901.4z M682.9,900l-0.1,0.2l-0.4,0.1l0.2,0.3l0.6,0.4h0.4 l0.1-0.3l-0.1-0.6h-0.3L682.9,900L682.9,900z M685.7,898l-0.9-0.3l-0.4-0.3h-0.3l0.4,0.4l0.1,0.2l0.1,0.2l0.6,0.3l0.6,0.3l0.4,0.3 l-0.1,0.1l-0.8,0.3h-0.3l-0.2,0.1l0.4,0.2l0.6-0.1l0.2-0.1h0.2l0.3,0.1v0.2l-0.1,0.2l-0.2,0.2l-0.4,0.3l-0.6,0.4h-0.8l-0.7,0.7 l0.9,0.5l0.7,0.3h0.9v-0.1l0.2-0.1h0.3l0.1-0.1l0.2-0.4v-0.6h0.2l0.3,0.1l0.7-0.1l0.3-0.1l0.6-0.9l0.4-0.8l0.2-0.4l0.3-0.2l0.1-0.2 l0.1-0.3l0.3-0.2v-0.3l-0.4-0.2l-0.3-0.2l-0.3,0.3l-0.2-0.1l-0.9,0.3h-0.4l-0.3-0.2l-0.4-0.1l-0.4,0.1l-0.5,0.5L685.7,898L685.7,898 z M686.4,897.6l0.1-0.3l-0.1-0.2l-0.5-0.2h-0.5l0.2,0.5l0.2,0.2H686.4z M692.3,896.9h-0.4l0.4,0.5l-0.8,0.8l0.2,0.6l0.3,0.4l0.1,0.2 l-0.1,0.1l-0.4,0.1l-0.3,0.1l-0.2,0.3l-0.9,0.9l0.2,0.2l-0.3,0.7l0.2,0.3l0.8,0.7l0.8,0.4v-0.7l0.4-0.1l0.4,0.2l0.4-0.2l-0.9-1h0.3 l2.5,0.5l-0.1-0.4l-0.1-0.2l-0.3-0.4l1.5-0.4l0.5-0.3l0.2-0.3l0.6-0.1l0.8-0.3l-0.1-0.1l0.1-0.3l-0.4-0.2l-0.5-0.1l0.1-0.3l0.5-0.1 l-0.8-0.7l-0.3-0.1l-1,0.1l-0.3,0.1v0.2l0.1,0.3l0.3,0.3l0.1,0.2l-0.2-0.1l-1.1-0.4l-0.2-0.1l-0.2-0.4l0.2-0.1l0.3,0.1l0.1-0.3 l-0.4-0.3l-0.4-0.1l-0.9,0.1L692.3,896.9L692.3,896.9z"
                                },
                                FO: {
                                    d: "M947,186.9v-0.3l-0.1-0.3v-0.2h-0.1l-0.5-0.1l-0.1-0.2h-0.1v0.2l0.1,0.4l0.5,0.4L947,186.9L947,186.9L947,186.9zM947.5,184.8v-0.1l-0.2-0.2l-0.5-0.2l-0.2-0.1l-0.2,0.1v0.2l0.1,0.1l0.4,0.1l0.4,0.3h0.1L947.5,184.8L947.5,184.8z M945.1,182.9l-0.2-0.1l-0.5,0.1h-0.3l0.1,0.3l0.6,0.2h0.3h0.3l0.2-0.1l-0.1-0.2L945.1,182.9L945.1,182.9z M947.6,182.4l-0.8-0.2l-0.6-0.3l-1,0.1l0.7,1.1l0.8,0.7l0.4,0.2v-0.1v-0.2l-0.4-0.5l-0.1-0.1V183l0.1-0.1h0.2l0.3,0.2h0.2L947.6,182.4L947.6,182.4z M948.6,182.2l-0.3-0.2l-0.4-0.4v0.5v0.3v0.1h0.1l0.3,0.1L948.6,182.2L948.6,182.2z"
                                },
                                FJ: {
                                    d: "M1976.7,674.4l-3.7,2l-1.9,0.3l-3.1,1.3l0.2,2.4l3.9-1.3l3.9-1.6L1976.7,674.4L1976.7,674.4z M1965.7,682.5l-1.6,1 l-2.3-0.8l-2.7,2.2l-0.2,2.8l2.9,0.8l3.6-0.9l1.8-3.3L1965.7,682.5L1965.7,682.5z"
                                },
                                FI: {
                                    d: "M1093.4,144.4l0.8-3.8l-5.7-2.1l-5.8,1.8l-1.1,3.9l-3.4,2.4l-4.7-1.3l-5.3,0.3l-5.1-2.9l-2.1,1.4l5.9,2.7l7.2,3.7 l1.7,8.4l1.9,2.2l6.4,2.6l0.9,2.3l-2.6,1.2l-8.7,6.1l-3.3,3.6l-1.5,3.3l2.9,5.2l-0.1,5.7l4.7,1.9l3.1,3.1l7.1-1.2l7.5-2.1l8-0.5l0,0 l7.9-7.4l3.3-3.3l0.9-2.9l-7.3-3.9l0.9-3.7l-4.9-4.1l1.7-4.8l-6.4-6.3l2.8-4.1l-7.2-3.7L1093.4,144.4L1093.4,144.4z"
                                },
                                FR: {
                                    d: "M1012.2,290.9l2.7,0.8l-0.5,2.7l-0.1,0.1l-0.3-0.2l-0.5,0.6l0,0.3l-3.6,2.6l-10-1.6l-7.4,2l-0.5,3.7l-6,0.8 l-1.3-0.7l0.7-0.3l0.2-0.4l-0.2-0.2l-0.7-0.2l-0.3-0.1l-0.4,0.3l-0.1,0.3l0.1,0.1v0.2l-3.7-1.8l-1.9,1.3l-9.4-2.8l-2-2.4l2.7-3.7 l1-12.3l-5.1-6.5l-3.6-3.1l-7.5-2.4l-0.4-4.6l6.4-1.3l8.2,1.6l-1.4-7l4.6,2.6l11.3-4.8l1.4-5.1l4.3-1.2l0.7,2.2l2.2,0.1l2.4,2.4 l3.4,2.9l2.5-0.4l4.4,2.8l0,0l1.1,0.5l1.4-0.1l2.4,1.6l7.1,1.2l-2.3,4.2l-0.5,4.5l-1.3,1l-2.3-0.6l0.2,1.6l-3.5,3.5v2.8l2.4-0.9 l1.8,2.7l0,0l-0.2,1.7l1.6,2.4l-1.7,1.8L1012.2,290.9z M1025.6,304.3l-1-6l-0.6,1.6l-2.7,1.1l-0.7,4.3l3,3.7L1025.6,304.3z"
                                },
                                GF: {
                                    d: "M681.4,556.2l1.8-4.7l3.5-5.8l-0.9-2.6l-5.8-5.4l-4.1-1.5l-1.9-0.7l-3.1,5.5l0.4,4.4l2.1,3.7l-1,2.7l-0.6,2.9 l-1.4,2.8l2.4,1.3l1.8-1.8l1.2,0.3l0.8,1.8l2.7-0.5L681.4,556.2z"
                                },
                                PF: {
                                    d: "M213.2,704.9l-0.1-0.3l-0.2-0.3l-0.1,0.1l0.1,0.1l0.2,0.3v0.2L213.2,704.9z M222.5,690.2l-0.2-0.2l-0.4-0.2 l-0.2-0.1l-0.2-0.1l-0.1,0.1l0.1,0.1h0.1l0.3,0.2l0.3,0.1L222.5,690.2L222.5,690.2L222.5,690.2L222.5,690.2z M198,689.1l-0.6-0.3 l0.1,0.2l0.4,0.2l0.2,0.1L198,689.1L198,689.1z M218.5,688.9l-0.4-0.5h-0.3L218.5,688.9L218.5,688.9z M196.9,687.9l-0.4-0.4 l-0.2-0.3l-0.3-0.1l0.1,0.1l0.4,0.4l0.3,0.4l0.2,0.1L196.9,687.9z M196.6,685.8l-0.1-0.1l0,0v-0.3l0.2-0.3l0.6-0.4v-0.1l0,0 l-0.2,0.1l-0.4,0.2l-0.2,0.2l-0.1,0.2l-0.1,0.3l0.1,0.2l0.1,0.1h0.2L196.6,685.8L196.6,685.8z M149.2,684.7l-0.2-0.6l-0.3-0.5 l-0.8-0.1l-0.5,0.2l-0.1,0.2l0.1,0.4l0.5,0.7l0.5,0.1l0.8-0.1l0.4,0.6l0.2,0.1l0.4,0.1l0.1-0.3l-0.2-0.5L149.2,684.7L149.2,684.7z M146.3,683.8l0.1-0.4l-0.2-0.1h-0.5v0.2l0.1,0.2l0.1,0.1l0.3,0.2L146.3,683.8L146.3,683.8z M136.6,679.5h0.2l-0.4-0.6l-0.3-0.2v0.1 v0.7l0.3,0.1L136.6,679.5z M180.5,677.9h-0.2H180h-0.1l0.5,0.1l0.4,0.2L180.5,677.9L180.5,677.9z M179.8,678l-0.3-0.1l-0.3-0.2h-0.3 l0.7,0.3H179.8L179.8,678z M136,678.1l0.1-0.2l-0.1-0.1l-0.4-0.2l0.1,0.3v0.2H136L136,678.1L136,678.1z M168.8,676.1l-0.3-0.4 l-0.2-0.3l-0.2-0.4l-0.4-0.5l0.1,0.3l0.1,0.2l0.2,0.2l0.2,0.4l0.1,0.2l0.3,0.4h0.1L168.8,676.1L168.8,676.1z M185,674.6l0.1-0.5 h-0.2L185,674.6L185,674.6L185,674.6z M170.6,673l-0.6-0.6h-0.1l0.1,0.2l0.5,0.5l0.1,0.2V673L170.6,673z M201.4,639.1l0.1-0.2v-0.2 l-0.1-0.1l-0.3-0.1l0.1,0.7L201.4,639.1L201.4,639.1z M198.7,635.4l-0.1-0.2h-0.2l-0.1,0.1v0.5L198.7,635.4L198.7,635.4z M198.8,633.8l-0.8,0.5l0.2,0.4l0.4,0.1l0.2-0.2l0.8-0.1l0.3-0.4l-0.3,0.1L198.8,633.8L198.8,633.8z M192.7,632.1l0.2-0.5l-0.2-0.1 l-0.4,0.2v0.2l0.3,0.4L192.7,632.1L192.7,632.1z M195.3,629l0.3-0.1v-0.1l-0.2-0.2l-0.3-0.1l-0.1,0.1l-0.1,0.2l0.1,0.3L195.3,629 L195.3,629z M192.4,628.9l0.1-0.3v-0.2l-0.1-0.2l-0.9-0.2l-0.1,0.1v0.4l0.2,0.5h0.3L192.4,628.9z"
                                },
                                GA: {
                                    d: "M1050.2,557.7l-0.7-0.3l-3.4,0.8l-3.4-0.8l-2.6,0.4v7.6h-8.2l-1.9,0.3l-1.1,4.8l-1.3,4.6l-1.3,2l-0.2,2.1l3.4,6.6 l3.7,5.3l5.8,6.4l4.3-3.5l-2.1-4.2l1.9-1.6l3.8-0.8l0.5-2.8l3,3l4.9,0.3l1.7-3l0.8-4.3l-0.6-4.9l-2.7-3.8l2.4-7.4l-1.4-1.2l-4.2,0.5 l-1.5-3.3L1050.2,557.7L1050.2,557.7z"
                                },
                                GM: {
                                    d: "M882.8,488.5l5,0.1l1.4-0.9h1l2.1-1.5l2.4,1.4l2.4,0.1l2.4-1.5l-1.1-1.8l-1.8,1.1l-1.8-0.1l-2.1-1.5l-1.8,0.1 l-1.3,1.5l-6.1,0.2L882.8,488.5L882.8,488.5z"
                                },
                                GE: {
                                    d: "M1200,300.2l-7.5-2.9l-7.7-1l-4.5-1.1l-0.5,0.7l2.2,1.9l3,0.7l3.4,2.3l2.1,4.2l-0.3,2.7l5.4-0.3l5.6,3l6.9-1l1.1-1 l4.2,1.8l2.8,0.4l0.6-0.7l-3.2-3.4l1.1-0.9l-3.5-1.4l-2.1-2.5l-5.1-1.3l-2.9,1L1200,300.2L1200,300.2z"
                                },
                                DE: {
                                    d: "M1043.6,232.3l-2.4-1.9l-5.5-2.4l-2.5,1.7l-4.7,1.1l-0.1-2.1l-4.9-1.4l-0.2-2.3l-3,0.9l-3.6-0.8l0.4,3.4l1.2,2.2 l-3,3l-1-1.3l-3.9,0.3l-0.9,1.3l1,2l-1,5.6l-1.1,2.3h-2.9l1.1,6.4l-0.4,4.2l1,1.4l-0.2,2.7l2.4,1.6l7.1,1.2l-2.3,4.2l-0.5,4.5h4.2 l1-1.4l5.4,1.9l1.5-0.3l2.6,1.7l0.6-1.6l4.4,0.3l3.4-1.2l2.4,0.2l1.7,1.3l0.4-1.1l-1-4l1.7-0.8l1.5-2.9l-2.9-2.6l-2.6-1.5l-0.7-2.6 l-1-1.9l3.4-1.3l1.7-1.5l3.4-1.2l1.1-1.2l1.4,0.7l2.1-0.6l-2.3-3.9l0.1-2.1l-1.4-3.3l-2-2.2l1.2-1.6L1043.6,232.3L1043.6,232.3z"
                                },
                                GH: {
                                    d: "M976.8,502.1l-2.6-0.5l-1.8,1l-2.4-0.5l-9.7,0.3l-0.2,3.6l0.8,4.8l1.4,9.1l-2.3,5.3l-1.5,7.2l2.4,5.5l-0.2,2.5 l5,1.8l5-1.9l3.2-2.1l8.7-3.8l-1.2-2.2l-1.5-4l-0.4-3.2l1.2-5.7l-1.4-2.3l-0.6-5.1l0.1-4.6l-2.4-3.3L976.8,502.1L976.8,502.1z"
                                },
                                GR: {
                                    d: "M1101.9,344.9l-0.8,2.8l6.6,1.2v1.1l7.6-0.6l0.5-1.9l-2.8,0.8v-1.1l-3.9-0.5l-4.1,0.4L1101.9,344.9L1101.9,344.9z M1113.4,307.5l-2.7-1.6l0.3,3l-4.6,0.6l-3.9-2.1l-3.9,1.7l-3.8-0.2l-1,0.2l-0.7,1.1l-2.8-0.1l-1.9,1.3l-3.3,0.6v1.6l-1.6,0.9 l-0.1,2.1l-2.1,3l0.5,1.9l2.9,3.6l2.3,3l1.3,4.3l2.3,5.1l4.6,2.9l3.4-0.1l-2.4-5.7l3.3-0.7l-1.9-3.3l5,1.7l-0.4-3.7l-2.7-1.8l-3.2-3 l1.8-1.4l-2.8-3l-1.6-3.8l0.9-1.3l3,3.2h2.9l2.5-1l-3.9-3.6l6.1-1.6l2.7,0.6l3.2,0.2l1.1-0.7L1113.4,307.5L1113.4,307.5z"
                                },
                                GL: {
                                    d: "M887.4,76.3l-26-0.4l-11.8,0.3l-5,1.3l-11.5-0.1l-12.7,2.1l-1.6,1.7l6.7,2.1l-6.2-1.3l-4.5-0.3l-7-1.4l-10.6,2.1 l-2.7-1.2h-10.4l-10.9,0.6l-8.9,1l-0.2,1.8l-5.3,0.5L744.2,88l-4.6,1.7l8.1,1.5l-2.8,1.6L730,95l-15.5,2.2l-2.2,1.7l6.4,2l14.5,1.2 l-7.5,0.2l-10.9,1.5l3.8,3.1l3,1.5l9.4-0.3l10.1-0.2l7.6,0.3l8,2.9l-1.4,2.1l3.6,1.9l1.4,5.3l1,3.6l1.4,1.9l-7,4.8l2.6,1.3l4.4-0.8 l2.6,1.8l5.3,3.4l-7.5-1.4h-3.8l-3,2.8l-1.5,3.6l4.2,1.8l4-0.8l2.6-0.8l5.5-1.9l-2.8,4.2l-2.6,2.3l-7.1,2l-7,6.3l2,2l-3.4,4l3.7,5.2 l-1.5,5l0.7,3.7l4.8,7.1l0.8,5.6l3.1,3.2h8.9l5,4.7l6.5-0.3l4.1-5.7l3.5-4.8l-0.3-4.4l8.6-4.6l3.3-3.7l1.4-3.9l4.7-3.5l6.5-1.3 l6.1-1.4l3-0.2l10.2-3.9l7.4-5.7l4.8-2.1l4.6-0.1l12.5-1.8l12.1-4.3l11.9-4.6l-5.5-0.3l-10.6-0.2l5.3-2.8l-0.5-3.6l4.2,3l2.7,2.1 l7.3-1l-0.6-4.3l-4.5-3.1l-5-1.3l2.4-1.4l7.2,2.1l0.5-2.3l-4.1-3.4h5.4l5.6-0.8l1.7-1.8l-4-2.1l8.6-0.3l-4-4.3l4.1-0.5l0.1-4.2 l-6.2-2.5l6.4-1.6l5.8-0.1l-3.6-3.2l1.1-5.1l3.6-2.9l4.9-3.2l-8-0.2l11.3-0.7l2.2-1l14.6-2.9l-1.6-1.7l-10-0.8l-16.9,1.5l-9.2,1.5 l4.5-2.3l-2.3-1.4l-7,1.2l-9.7-1.4l-12.1,0.5l-1.4-0.7l18.3-0.4l12.9-0.2l6.6-1.4L887.4,76.3L887.4,76.3z"
                                },
                                GD: {
                                    d: "M632.1,495.7l0.5-0.2l0.2-1.1l-0.3-0.1l-0.3,0.3l-0.3,0.5v0.4l-0.2,0.3L632.1,495.7L632.1,495.7z"
                                },
                                GP: {
                                    d: "M636.4,471.1l0.2-0.2v-0.3l-0.2-0.3l-0.2,0.1l-0.2,0.3v0.3l0.1,0.1H636.4L636.4,471.1z M634.5,470.3l0.2-0.2v-1.2 l0.1-0.3l-0.2-0.1l-0.2-0.2l-0.6-0.2l-0.1,0.1l-0.2,0.3l0.1,1.5l0.2,0.5l0.2,0.1L634.5,470.3L634.5,470.3z M636.1,468.9l0.8-0.2 l-0.9-0.6l-0.2-0.4v-0.3l-0.4-0.3l-0.2,0.2l-0.1,0.3l0.1,0.5l-0.3,0.4l0.1,0.4l0.4,0.1L636.1,468.9L636.1,468.9z"
                                },
                                GT: {
                                    d: "M482.8,458.9l-5.1-0.1h-5.2l-0.4,3.6h-2.6l1.8,2.1l1.9,1.5l0.5,1.4l0.8,0.4l-0.4,2.1H467l-3.3,5.2l0.7,1.2l-0.8,1.5 l-0.4,1.9l2.7,2.6l2.5,1.3l3.4,0.1l2.8,1.1l0.2-1l2.1-1.6l1.1-0.7l-0.2-0.7l1.4-0.4l1.3-1.6l-0.3-1.3l0.5-1.2l2.8-1.8l2.8-2.4 l-1.5-0.8l-0.6,0.9l-1.7-1.1h-1.6l1.2-7.2L482.8,458.9L482.8,458.9z"
                                },
                                GN: {
                                    d: "M912.4,493l-0.8,0.4l-3-0.5l-0.4,0.7l-1.3,0.1l-4-1.5l-2.7-0.1l-0.1,2.1l-0.6,0.7l0.4,2.1l-0.8,0.9h-1.3l-1.4,1 l-1.7-0.1l-2.6,3.1l1.6,1.1l0.8,1.4l0.7,2.8l1.3,1.2l1.5,0.9l2.1,2.5l2.4,3.7l3-2.8l0.7-1.7l1-1.4l1.5-0.2l1.3-1.2h4.5l1.5,2.3 l1.2,2.7L917,515l0.9,1.7v2.3l1.5-0.3l1.2-0.2l1.5-0.7l2.3,3.9l-0.4,2.6l1.1,1.3l1.6,0.1l1.1-2.6l1.6,0.2h0.9l0.3-2.8l-0.4-1.2 l0.6-0.9l2-0.8l-1.3-5.1l-1.3-2.6l0.5-2.2l1.1-0.5l-1.7-1.8l0.3-1.9l-0.7-0.7l-1.2,0.6l0.2-2.1l1.2-1.6l-2.3-2.7l-0.6-1.7l-1.3-1.4 l-1.1-0.2l-1.3,0.9l-1.8,0.8l-1.6,1.4l-2.4-0.5l-1.5-1.6l-0.9-0.2l-1.5,0.8h-0.9L912.4,493L912.4,493z"
                                },
                                GW: {
                                    d: "M900.2,492.1l-10.3-0.3l-1.5,0.7l-1.8-0.2l-3,1.1l0.3,1.3l1.7,1.4v0.9l1.2,1.8l2.4,0.5l2.9,2.6l2.6-3.1l1.7,0.1 l1.4-1h1.3l0.8-0.9l-0.4-2.1l0.6-0.7L900.2,492.1L900.2,492.1z"
                                },
                                GY: {
                                    d: "M656.1,534.2l-2.1-2.3l-2.9-3.1l-2.1-0.1l-0.1-3.3l-3.3-4.1l-3.6-2.4l-4.6,3.8l-0.6,2.3l1.9,2.3l-1.5,1.2l-3.4,1.1 v2.9l-1.6,1.8l3.7,4.8l2.9-0.3l1.3,1.5l-0.8,2.8l1.9,0.9l1.2,3l-1.6,2.2l-1,5.4l1.4,3.3l0.3,2.9l3.5,3l2.7,0.3l0.7-1.3l1.7-0.2 l2.6-1.1l1.8-1.7l3.1,0.5l1.4-0.2l-3.3-5.6L655,551l-1.8-0.1l-2.4-4.6l1.1-3.3l-0.3-1.5l3.5-1.6L656.1,534.2L656.1,534.2z"
                                },
                                HT: {
                                    d: "M580.6,446.7l-4.6-1l-3.4-0.2l-1.4,1.7l3.4,1l-0.3,2.4l2.2,2.8l-2.1,1.4l-4.2-0.5l-5-0.9l-0.7,2.1l2.8,1.9l2.7-1.1 l3.3,0.4l2.7-0.4l3.6,1.1l0.2-1.8l-1.2-1.9l1.5-1.1l0.7-2.4L580.6,446.7z"
                                },
                                HN: {
                                    d: "M514.1,476.8l-1.3-1.8l-1.9-1l-1.5-1.4l-1.6-1.2l-0.8-0.1l-2.5-0.9l-1.1,0.5l-1.5,0.2l-1.3-0.4l-1.7-0.4l-0.8,0.7 l-1.8,0.7l-2.6,0.2l-2.5-0.6l-0.9,0.4l-0.5-0.6l-1.6,0.1l-1.3,1.1l-0.6-0.2l-2.8,2.4l-2.8,1.8l-0.5,1.2l0.3,1.3l-1.3,1.6l1.5,0.5 l1.1,1.3l1.6,1l0.1,0.9l2.5-0.8l1.1,0.5l0.7,0.7l-0.6,2.5l1.7,0.6l0.7,2l1.8-0.3l0.8-1.5h0.8l0.2-3.1l1.3-0.2h1.2l1.4-1.7l1.5,1.3 l0.6-0.8l1.1-0.7l2.1-1.8l0.3-1.3l0.5,0.1l0.8-1.5l0.6-0.2l0.9,0.9l1.1,0.3l1.3-0.8h1.4l2-0.8l0.9-0.9L514.1,476.8L514.1,476.8z"
                                },
                                HK: {
                                    d: "M1604.9,430.9v-0.2v-0.2l-0.4-0.2h-0.3l0.1,0.2l0.4,0.5L1604.9,430.9L1604.9,430.9z M1603.6,430.9l-0.1-0.5l0.2-0.3 l-0.9,0.3l-0.1,0.3v0.1l0.2,0.1H1603.6L1603.6,430.9z M1605.2,429.7l-0.1-0.3l-0.2-0.1l-0.1-0.3l-0.1-0.2l0,0l-0.3-0.1l-0.2-0.1 h-0.4l-0.1,0.1h-0.2l-0.2,0.2l0,0v0.2l-0.5,0.4v0.2l0.3,0.2l0.5-0.1l0.6,0.2l0.8,0.3v-0.2v-0.3L1605.2,429.7L1605.2,429.7z"
                                },
                                HU: {
                                    d: "M1079.1,263.8l-1.6,0.4l-1,1.5l-2.2,0.7l-0.6-0.4l-2.3,1l-1.9,0.2l-0.3,1.2l-4.1,0.8l-1.9-0.7l-2.6-1.6l-0.2,2.6 h-2.8l1.1,1.3l-1.3,4l0.8,0.1l1.2,2.1l1.6,0.8l4,2.6l4.2,1.2l1.8-0.9l0,0l3.7-1.6l3.2,0.2l3.8-1.1l2.6-4.3l1.9-4.2l2.9-1.3l-0.6-1.6 l-2.9-1.7l-1,0.6L1079.1,263.8L1079.1,263.8z"
                                },
                                IS: {
                                    d: "M915.7,158.6l-6.9-0.4l-7.3,2.9l-5.1-1.5l-6.9,3l-5.9-3.8l-6.5,0.8l-3.6,3.7l8.7,1.3l-0.1,1.6l-7.8,1.1l8.8,2.7 l-4.6,2.5l11.7,1.8l5.6,0.8l3.9-1l12.9-3.9l6.1-4.2l-4.4-3.8L915.7,158.6L915.7,158.6z"
                                },
                                IN: {
                                    d: "M1414.1,380.1l-8.5-4.4l-6.2-4l-3.2-7l4.1,0.9l-0.6-3.3l-3-3.3l-0.8-5.2l-7.6-7.5l-3.7,5.4l-5.7,1l-8.5-1.6 l-1.9,2.8l3.2,5.6l2.9,4.3l5,3.1l-3.7,3.7l1,4.5l-3.9,6.3l-2.1,6.5l-4.5,6.7l-6.4-0.5l-4.9,6.6l4,2.9l1.3,4.9l3.5,3.2l1.8,5.5h-12 l-3.2,4.2l7.1,5.4l1.9,2.5l-2.4,2.3l8,7.7l4,0.8l7.6-3.8l1.7,5.9l0.8,7.8l2.5,8.1l3.6,12.3l5.8,8.8l1.3,3.9l2,8l3.4,6.1l2.2,3 l2.5,6.4l3.1,8.9l5.5,6l2.2-1.8l1.7-4.4l5-1.8l-1.8-2.1l2.2-4.8l2.9-0.3l-0.7-10.8l1.9-6.1l-0.7-5.3l-1.9-8.2l1.2-4.9l2.5-0.3 l4.8-2.3l2.6-1.6l-0.3-2.9l5-4.2l3.7-4l5.3-7.5l7.4-4.2l2.4-3.8l-0.9-4.8l6.6-1.3l3.7,0.1l0.5-2.4l-1.6-5.2l-2.6-4.8l0.4-3.8 l-3.7-1.7l0.8-2.3l3.1-2.4l-4.6-3.4l1.2-4.3l4.8,2.7l2.7,0.4l1.2,4.4l5.4,0.9l5-0.1l3.4,1.1l-1.6,5.3l-2.4,0.4l-1.1,3.6l3.5,3.3 l0.2-4l1.5-0.1l4.5,10.1l2.4-1.5l-0.9-2.7l0.9-2.1l-0.9-6.6l4.6,1.4l1.5-5.2l-0.3-3.1l2.1-5.4l-0.9-3.6l6.1-4.4l4.1,1.1l-1.3-3.9 l1.6-1.2l-0.9-2.4l-6.1-0.9l1.2-2.7l-3.5-3.9l-3.2,2.6l-4.9-1.5l-5.3,4l-3.9,4.8l-4.2,0.8l2.7,2l0.4,3.9l-4.4,0.2l-4.7-0.4l-3.2,1 l-5.5-2.5l-0.3-1.2l-1.5-5.1l-3,1.4l0.1,2.7l1.5,4.1l-0.1,2.5l-4.6,0.1l-6.8-1.5l-4.3-0.6l-3.8-3.2l-7.6-0.9l-7.7-3.5l-5.8-3.1 l-5.7-2.5l0.9-5.9L1414.1,380.1L1414.1,380.1z"
                                },
                                ID: {
                                    d: "M1651.9,637.3l0.5-1.7l-1.8-1.9l-2.8-2l-5.3,1.3l7,4.4L1651.9,637.3L1651.9,637.3z M1672.8,636.7l4-4.8l0.1-1.9 l-0.5-1.3l-5.7,2.6l-2.8,3.9l-0.7,2.1l0.6,0.8L1672.8,636.7L1672.8,636.7z M1637.2,623.7l-1.6,2.2l-3.1,0.1l-2.2,3.6l3,0.1l3.9-0.9 l6.6-1.2l-1.2-2.8l-3.5,0.6L1637.2,623.7L1637.2,623.7z M1665.3,623.7l-5.2,2.3l-3.8,0.5l-3.4-1.9l-4.5,1.3l-0.2,2.3l7.4,0.8 l8.6-1.8L1665.3,623.7L1665.3,623.7z M1585.8,615.3l-0.7-2.3l-2.3-0.5l-4.4-2.4l-6.8-0.4l-4.1,6.1l5.1,0.4l0.8,2.8l10,2.6l2.4-0.8 l4.1,0.6l6.3,2.4l5.2,1.2l5.8,0.5l5.1-0.2l5.9,2.5l6.6-2.4l-6.6-3.8l-8.3-1.1l-1.8-4.1l-10.3-3.1l-1.3,2.6L1585.8,615.3 L1585.8,615.3z M1732.4,611.7l0.2-3l-1.2-1.9l-1.3,2.2l-1.2,2.2l0.3,4.8L1732.4,611.7z M1691.4,594.2l-1.4-2.1l-5.7,0.3l1,2.7 l3.9,1.2L1691.4,594.2L1691.4,594.2z M1709.5,591.8l-6.1-1.8l-6.9,0.3l-1.5,3.5l3.9,0.2l3.2-0.4l4.6,0.5l4.7,2.6L1709.5,591.8 L1709.5,591.8z M1730.5,579.5l-0.8-2.4l-9-2.6l-2.9,2.1l-7.6,1.5l2.3,3.2l5,1.2l2.1,3.7l8.3,0.1l0.4,1.6l-4-0.1l-6.2,2.3l4.2,3.1 l-0.1,2.8l1.2,2.3l2.1-0.5l1.8-3.1l8.2,5.9l4.6,0.5l10.6,5.4l2.3,5.3l1,6.9l-3.7,1.8l-2.8,5.2l7.1-0.2l1.6-1.8l5.5,1.3l4.6,5.2 l1.5-20.8l1-20.7l-6-1.2l-4.1-2.3l-4.7-2.2h-5l-6.6,3.8l-4.9,6.8l-5.7-3.8L1730.5,579.5z M1680.5,563.1l-1-1.4l-5.5,4.6l-6.5,0.3 l-7.1-0.9l-4.4-1.9l-4.7,4.8l-1.2,2.6l-2.9,9.6l-0.9,5l-2.4,4.2l1.6,4.3l2.3,0.1l0.6,6.1l-1.9,5.9l2.3,1.9l3.6-1l0.3-9.1l-0.2-7.4 l3.8-1.9l-0.7,6.2l3.9,3.7l-0.8,2.5l1.3,1.7l5.6-2.4l-3,5.2l2.1,2.2l3.1-1.9l0.3-4.1l-4.7-7.4l1.1-2.2l-5.1-8.1l5-2.5l2.6-3.7 l2.4,0.9l0.5-2.9l-10.5,2.1l-3.1,2.9l-5-5.6l0.9-4.8l4.9-1l9.3-0.3l5.4,1.3l4.3-1.3L1680.5,563.1L1680.5,563.1z M1699.9,565 l-0.6-2.6l-3.3-0.6l-0.5-3.5l-1.8,2.3l-1,5.1l1.7,8.2l2.2,4l1.6-0.8l-2.3-3.3l0.9-3.9l2.9,0.6L1699.9,565L1699.9,565z M1639,560.5 l0.9-2.9l-4.3-6l3-5.8l-5-1h-6.4l-1.7,7.2l-2,2.2l-2.7,8.9l-4.5,1.3l-5.4-1.8l-2.7,0.6l-3.2,3.2l-3.6-0.4l-3.6,1.2l-3.9-3.5l-1-4.3 l-3.3,4.2l-0.6,5.9l0.8,5.6l2.6,5.4l2.8,1.8l0.7,8.5l4.6,0.8l3.6-0.4l2,3.1l6.7-2.3l2.8,2l4,0.4l2,3.9l6.5-2.9l0.8,2.3l2.5-9.7 l0.3-6.4l5.5-4.3l-0.2-5.8l1.8-4.3l6.7-0.8L1639,560.5L1639,560.5z M1570.3,609.4l0.7-9.8l1.7-8l-2.6-4l-4.1-0.5l-1.9-3.6l-0.9-4.4 l-2-0.2l-3.2-2.2l2.3-5.2l-4.3-2.9l-3.3-5.3l-4.8-4.4l-5.7-0.1l-5.5-6.8l-3.2-2.7l-4.5-4.3l-5.2-6.2l-8.8-1.2l-3.6-0.3l0.6,3.2 l6.1,7l4.4,3.6l3.1,5.5l5.1,4l2.2,4.9l1.7,5.5l4.9,5.3l4.1,8.9l2.7,4.8l4.1,5.2l2.2,3.8l7,5.2l4.5,5.3L1570.3,609.4L1570.3,609.4z"
                                },
                                IR: {
                                    d: "M1213.5,324.4l-3.2-2.9l-1.2-2.4l-3.3,1.8l2.9,7.3l-0.7,2l3.7,5.2l0,0l4.7,7.8l3.7,1.9l1,3.8l-2.3,2.2l-0.5,5 l4.6,6.1l7,3.4l3.5,4.9l-0.2,4.6h1.7l0.5,3.3l3.4,3.4l1.7-2.5l3.7,2.1l2.8-1l5.1,8.4l4.3,6.1l5.5,1.8l6.1,4.9l6.9,2.1l5.1-3.1l4-1.1 l2.8,1.1l3.2,7.8l6.3,0.8l6.1,1.5l10.5,1.9l1.2-7.4l7.4-3.3l-0.9-2.9l-2.7-1l-1-5.7l-5.6-2.7l-2.8-3.9l-3.2-3.3l3.9-5.8l-1.1-4 l-4.3-1.1l-1.1-4l-2.7-5.1l1.6-3.5l-2.5-0.9l0.5-4.7l0.5-8l-1.6-5.5l-3.9-0.2l-7.3-5.7l-4.3-0.7l-6.5-3.3l-3.8-0.6l-2.1,1.2 l-3.5-0.2l-3,3.7l-4.4,1.2l-0.2,1.6l-7.9,1.7l-7.6-1.1l-4.3-3.3l-5.2-1.3l-2.5-4.8l-1.3,0.3l-3.8-3.4l1.2-3.1l-1.9-1.9l-1.9,0.5 l-5.3,4.7l-1.8,0.2L1213.5,324.4L1213.5,324.4z"
                                },
                                IQ: {
                                    d: "M1207.3,334.9l-6.2-0.9l-2.1,1l-2.1,4.1l-2.7,1.6l1.2,4.7l-0.9,7.8l-11,6.7l3.1,7.7l6.7,1.7l8.5,4.5l16.7,12.7 l10.2,0.5l3.2-6.1l3.7,0.5l3.2,0.4l-3.4-3.4l-0.5-3.3h-1.7l0.2-4.6l-3.5-4.9l-7-3.4l-4.6-6.1l0.5-5l2.3-2.2l-1-3.8l-3.7-1.9 l-4.7-7.8l0,0l-2.3,1.1L1207.3,334.9L1207.3,334.9z"
                                },
                                IE: {
                                    d: "M947.3,231.7l-3.5-1.3l-2.9,0.1l1.1-3.2l-0.8-3.2l-3.7,2.8l-6.7,4.7l2.1,6.1l-4.2,6.4l6.7,0.9l8.7-3.6l3.9-5.4 L947.3,231.7L947.3,231.7z"
                                },
                                IL: {
                                    d: "M1167.8,360.5l-1.4,0.1l-0.4,1.1h-1.8l-0.1,0.1l-0.6,1.6l-0.6,4.8l-1.1,2.9l0.4,0.4l-1.4,2.1l0,0l3.9,9.2l0.7,1.7 l1.7-10.2l-0.4-2.4l-2.4,0.8l0.1-1.7l1.2-0.8l-1.4-0.7l0.7-4.3l2,0.9l0.7-2h-0.1l0.6-1L1167.8,360.5L1167.8,360.5z"
                                },
                                IT: {
                                    d: "M1057.8,328.6l-1.6,5.1l0.9,2l-0.9,3.3l-4.2-2.4l-2.7-0.7l-7.5-3.3l0.6-3.4l6.2,0.6l5.2-0.7L1057.8,328.6z M1072.3,316.2l-0.8,2.3l-3.1-3l-4.5-1l-1.9,4.1l3.9,2.3l-0.4,3.3l-2.1,0.4l-2.5,5.6l-2.1,0.5l-0.1-2l0.8-3.5l1.1-1.3l-2.3-3.7 l-1.8-3.2l-2.2-0.8l-1.7-2.7l-3.4-1.2l-2.3-2.5l-3.9-0.4l-4.2-2.8l-4.9-4l-3.6-3.6l-1.9-6l-2.6-0.7l-4.2-2.1l-2.3,0.9l-2.8,2.8 l-2.1,0.5l0.5-2.7l-2.7-0.8l-1.5-4.8l1.7-1.8l-1.6-2.4l0.2-1.7l2.2,1.3l2.4-0.3l2.7-2.1l0.9,1l2.4-0.2l0.9-2.5l3.8,0.8l2.1-1.1 l0.3-2.5l3.1,0.9l0.5-1.2l4.8-1.1l1.3,2.2l7.2,1.6l-0.3,3l1.4,2.7l-4.1-0.9l-3.9,2.2l0.4,3l-0.5,1.8l1.9,3.1l4.9,3.1l2.9,5.1l6,5 l4-0.1l1.4,1.4l-1.4,1.2l4.8,2.3l3.9,1.9l4.7,3.2L1072.3,316.2z M1040.2,305.3l-0.1-0.6l-0.6,0.1l-0.2,0.5H1040.2z M1040.3,292.4 l-0.9,0.3l0.2,0.9l0.7-0.1L1040.3,292.4z M1021.6,311.6l-2.8-0.3l1.3,3.6l0.4,7.6l2.1,1.7l2-2.1l2.4,0.4l0.4-8.4l-3.3-4.4 L1021.6,311.6z"
                                },
                                CI: {
                                    d: "M946.5,506.2l-2.3,0.9l-1.3,0.8l-0.9-2.7l-1.6,0.7l-1-0.1l-1,1.9l-4.3-0.1l-1.6-1l-0.7,0.6l-1.1,0.5l-0.5,2.2 l1.3,2.6l1.3,5.1l-2,0.8l-0.6,0.9l0.4,1.2l-0.3,2.8h-0.9l-0.3,1.8l0.6,3.1l-1.2,2.8l1.6,1.8l1.8,0.4l2.3,2.7l0.2,2.5l-0.5,0.8 l-0.5,5.2l1.1,0.2l5.6-2.4l3.9-1.8l6.6-1.1l3.6-0.1l3.9,1.3l2.6-0.1l0.2-2.5l-2.4-5.5l1.5-7.2l2.3-5.3l-1.4-9.1l-3.8-1.6l-2.7,0.2 l-1.9,1.6l-2.5-1.3l-1-2.1L946.5,506.2L946.5,506.2z"
                                },
                                JM: {
                                    d: "M550.7,458.5l3.9-0.1l-0.8-1.8l-2.7-1.5l-3.7-0.6l-1.2-0.2l-2.4,0.4l-0.8,1.5l2.9,2.3l3,1L550.7,458.5L550.7,458.5z "
                                },
                                JP: {
                                    d: "M1692.5,354.9l-4.5-1.3l-1.1,2.7l-3.3-0.8l-1.3,3.8l1.2,3l4.2,1.8l-0.1-3.7l2.1-1.5l3.1,2.1l1.3-3.9L1692.5,354.9 L1692.5,354.9z M1716.9,335.6l-3.6-6.7l1.3-6.4l-2.8-5.2l-8.1-8.7l-4.8,1.2l0.2,3.9l5.1,7.1l1,7.9l-1.7,2.5l-4.5,6.5l-5-3.1v11.5 l-6.3-1.3l-9.6,1.9l-1.9,4.4l-3.9,3.3l-1.1,4l-4.3,2l4,4.3l4.1,1.9l0.9,5.7l3.5,2.5l2.5-2.7l-0.8-10.8l-7.3-4.7l6.1-0.1l5-3l8.6-1.4 l2.4,4.8l4.6,2.4l4.4-7.3l9.1-0.4l5.4-3l0.6-4.6l-2.5-3.2L1716.9,335.6L1716.9,335.6z M1705.1,291.4l-5.3-2.1l-10.4-6.4l1.9,4.8 l4.3,8.5l-5.2,0.4l0.6,4.7l4.6,6.1h5.7l-1.6-6.8l10.8,4.2l0.4-6.1l6.4-1.7l-6-6.9l-1.7,2.6L1705.1,291.4L1705.1,291.4z"
                                },
                                JO: {
                                    d: "M1186.6,367.6l-3.1-7.7l-9.6,6.7l-6.3-2.5l-0.7,2l0.4,3.9l-0.6,1.9l0.4,2.4l-1.7,10.2l0.3,0.9l6.1,1l2.1-2l1.1-2.3 l4-0.8l0.7-2.2l1.7-1l-6.1-6.4l10.4-3.1L1186.6,367.6L1186.6,367.6z"
                                },
                                KZ: {
                                    d: "M1308.8,223.8l-9-1.3l-3.1,2.5l-10.8,2.2l-1.7,1.5l-16.8,2.1l-1.4,2.1l5,4.1l-3.9,1.6l1.5,1.7l-3.6,2.9l9.4,4.2 l-0.2,3l-6.9-0.3l-0.8,1.8l-7.3-3.2l-7.6,0.2l-4.3,2.5l-6.6-2.4l-11.9-4.3l-7.5,0.2l-8.1,6.6l0.7,4.6l-6-3.6l-2.1,6.8l1.7,1.2 l-1.7,4.7l5.3,4.3l3.6-0.2l4.2,4.1l0.2,3.2l2.8,1l4.4-1.3l5-2.7l4.7,1.5l4.9-0.3l1.9,3.9l0.6,6l-4.6-0.9l-4,1l0.9,4.5l-5-0.6l0.6,2 l3.2,1.6l3.7,5.5l6.4,2.1l1.5,2.1l-0.7,2.6l0.7,1.5l1.8-2l5.5-1.3l3.8,1.7l4.9,4.9l2.5-0.3l-6.2-22.8l11.9-3.6l1.1,0.5l9.1,4.5 l4.8,2.3l6.5,5.5l5.7-0.9l8.6-0.5l7.5,4.5l1.5,6.2l2.5,0.1l2.6,5l6.6,0.2l2.3,3h1.9l0.9-4.5l5.4-4.3l2.5-1.2l0.3-2.7l3.1-0.8 l9.1,2.1l-0.5-3.6l2.5-1.3l8.1,2.6l1.6-0.7l8.6,0.2l7.8,0.6l3.3,2.2l3.5,0.9l-1.7-3.5l2.9-1.6l-8.7-10.7l9-2.4l2-1.4l-1-11.1l10.7,2 l1.6-2.8l-2.5-6.2l3.8-0.6l1.8-4.2l-4.3-3.8l-6,0.9l-3.3-2.6l-3.9-1.2l-4.1-3.6l-3.2-1.1l-6.2,1.6l-8.3-3.6l-1.1,3.3l-18.1-15.5 l-8.3-4.7l0.8-1.9l-9.1,5.7l-4.4,0.4l-1.2-3.3l-7-2.1l-4.3,1.5L1308.8,223.8L1308.8,223.8z"
                                },
                                KE: {
                                    d: "M1211.7,547.2h-3.8l-2.3-2.1l-5.1,2.6l-1.6,2.7l-3.8-0.5l-1.2-0.7l-1.3,0.1h-1.8l-7.2-5.4h-3.9l-2-2.1v-3.6 l-2.9-1.1l-3.8,4.2l-3.4,3.8l2.7,4.4l0.7,3.2l2.6,7.3l-2.1,4.7l-2.7,4.2l-1.6,2.6v0.3l1.4,2.4l-0.4,4.7l20.2,13l0.4,3.7l8,6.3 l2.2-2.1l1.2-4.2l1.8-2.6l0.9-4.5l2.1-0.4l1.4-2.7l4-2.5l-3.3-5.3l-0.2-23.2L1211.7,547.2L1211.7,547.2z"
                                },
                                KW: {
                                    d: "M1235.6,381.4l-3.7-0.5l-3.2,6.1l4.9,0.6l1.7,3.1l3.8-0.2l-2.4-4.8l0.3-1.5L1235.6,381.4L1235.6,381.4z"
                                },
                                KG: {
                                    d: "M1387.2,302.6l-3.5-0.9l-3.3-2.2l-7.8-0.6l-8.6-0.2l-1.6,0.7l-8.1-2.6l-2.5,1.3l0.5,3.6l-9.1-2.1l-3.1,0.8l-0.3,2.7 l1.8,0.6l-3.1,4.1l4.6,2.3l3.2-1.6l7.1,3.3l-5.2,4.5l-4.1-0.6l-1.4,2l-5.9-1.1l0.6,3.7l5.4-0.5l7.1,2l9.5-0.9l1-1.5l-1.1-1.5l4-3 l3.2-1.2l5.7,0.9l0.6-4l6.4-0.8l1-2.4l6.8-3.4L1387.2,302.6L1387.2,302.6z"
                                },
                                LA: {
                                    d: "M1574.8,481.8l0.2-6.4l-2-4.5l-4.8-4.4l-4.3-5.6l-5.7-7.5l-7.3-3.8l1.3-2.3l3.3-1.7l-3-5.5l-6.8-0.1l-3.4-5.7 l-4-5.1l-2.7,1l1.9,7.2l-2.9-0.1l-0.7-1.5l-4.1,4.1l-0.8,2.4l2.6,1.9l0.9,3.8l3.8,0.3l-0.4,6.7l1,5.7l5.3-3.8l1.8,1.2l3.2-0.2 l0.8-2.2l4.3,0.4l4.9,5.2l1.3,6.3l5.2,5.5l0.5,5.4l-1.5,2.9l4.9,2.4l2-4.3L1574.8,481.8L1574.8,481.8z"
                                },
                                LV: {
                                    d: "M1102.1,210.1h-3.8l-4.4-2.2l-2.1-0.7l-3.7,1l-0.2,4.6l-3.6,0.1l-4.4-4.5l-4,2.1l-1.7,3.7l0.5,4.5l5-1.9l7.9,0.4 l4.4-0.6l0.9,1.3l2.5,0.4l5,2.9l2.6-1l4.6-2.3l-2.1-3.6l-1-2.8L1102.1,210.1L1102.1,210.1z"
                                },
                                LB: {
                                    d: "M1167.8,360.5l0.9-3.5l2.6-2.4l-1.2-2.5l-2.4-0.3l-0.1,0.2l-2.1,4.5l-1.3,5.2h1.8l0.4-1.1L1167.8,360.5 L1167.8,360.5z"
                                },
                                LS: {
                                    d: "M1128.1,766.5l1.1-2l3.1-1l1.1-2.1l1.9-3.1l-1.7-1.9l-2.3-2l-2.6,1.3l-3.1,2.5l-3.2,4l3.7,4.9L1128.1,766.5 L1128.1,766.5z"
                                },
                                LR: {
                                    d: "M929.4,523.3l-1.6-0.2l-1.1,2.6l-1.6-0.1l-1.1-1.3l0.4-2.6l-2.3-3.9l-1.5,0.7l-1.2,0.2l-2.6,3l-2.6,3.4l-0.3,1.9 l-1.3,2l3.7,4.1l4.8,3.5l5.1,4.8l5.7,3.1l1.5-0.1l0.5-5.2l0.5-0.8l-0.2-2.5l-2.3-2.7l-1.8-0.4l-1.6-1.8l1.2-2.8l-0.6-3.1 L929.4,523.3L929.4,523.3z"
                                },
                                LY: {
                                    d: "M1111.8,371.4l-1.5-2.1l-5.4-0.8l-1.8-1.1h-2l-2-2.8l-7.3-1.3l-3.6,0.8l-3.7,3l-1.5,3.1l1.5,4.8l-2.4,3l-2.5,1.6 l-5.9-3.1l-7.7-2.7l-4.9-1.2l-2.8-5.7l-7.2-2.8l-4.5-1.1l-2.2,0.6l-6.4-2.2l-0.1,4.9l-2.6,1.8l-1.5,2l-3.7,2.5l0.7,2.6l-0.4,2.7 l-2.6,1.4l1.9,5.6l0.4,3l-0.9,5.2l0.5,2.9l-0.6,3.5l0.5,4l-2.1,2.6l3.4,4.7l0.2,2.7l2,3.6l2.6-1.2l4.3,2.9l2.5,4l8.8,2.8l3.1,3.5 l3.9-2.4l5.4-3.5l22.3,12.2l22.4,12.2v-2.7h6.3l-0.5-12.7l-1-23.4l-1.3-22.7l-2-5.1l1.2-3.9l-1.1-2.7L1111.8,371.4L1111.8,371.4z"
                                },
                                LI: {
                                    d: "M1024.4,273.6v-0.2l0.1-0.2l-0.1-0.1l-0.1-0.2l-0.1-0.1v-0.2l-0.1-0.1v-0.2l-0.1-0.1l-0.2,0.6v0.5l0.1,0.2h0.1 L1024.4,273.6L1024.4,273.6z"
                                },
                                LT: {
                                    d: "M1100.4,221.2l-5-2.9l-2.5-0.4l-0.9-1.3l-4.4,0.6l-7.9-0.4l-5,1.9l1.7,5l5,1.1l2.2,0.9l-0.2,1.7l0.6,1.5l2.5,0.6 l1.4,1.9h4.6l4.8-2.2l0.5-3.4l3.5-2L1100.4,221.2L1100.4,221.2z"
                                },
                                LU: {
                                    d: "M1007,258.6l0.2-2.7l-1-1.4l-1.3,0.2l-0.4,3.5l1.1,0.5L1007,258.6z"
                                },
                                MK: {
                                    d: "M1094,304.8l-2.8-2l-2.4,0.1l-1.7,0.4l-1.1,0.2l-2.9,1l-0.1,1.2h-0.7l0,0l-0.4,2.1l0.9,2.6l2.3,1.6l3.3-0.6l1.9-1.3 l2.8,0.1l0.7-1.1l1-0.2L1094,304.8L1094,304.8z"
                                },
                                MG: {
                                    d: "M1255.7,658.4l-1.1-4.2l-1.4-2.7l-1.8-2.7l-2,2.8l-0.3,3.8l-3.3,4.5l-2.3-0.8l0.6,2.7l-1.8,3.2l-4.8,3.9l-3.4,3.7 h-2.4l-2.2,1.2l-3.1,1.3l-2.8,0.2l-1,4.1l-2.2,3.5l0.1,5.9l0.8,4l1.1,3l-0.8,4.1l-2.9,4.8l-0.2,2.1l-2.6,1.1l-1.3,4.6l0.2,4.6l1.6,5 l-0.1,5.7l1.2,3.3l4.2,2.3l3,1.7l5-2.7l4.6-1.5l3.1-7.4l2.8-8.9l4.3-12l3.3-8.8l2.7-7.4l0.8-5.4l1.6-1.5l0.7-2.7l-0.8-4.7l1.2-1.9 l1.6,3.8l1.1-1.9l0.8-3.1l-1.3-2.9L1255.7,658.4L1255.7,658.4z"
                                },
                                MW: {
                                    d: "M1169.2,661.5l0.1-2.3l-1.2-1.9l0.1-2.8l-1.5-4.7l1.7-3.5l-0.1-7.7l-1.9-4.1l0.2-0.7l0,0l-1.1-1.7l-5.4-1.2l2.6,2.8 l1.2,5.4l-1,1.8l-1.2,5.1l0.9,5.3l-1.8,2.2l-1.9,5.9l2.9,1.7l3,3l1.6-0.6l2.1,1.6l0.3,2.6l-1.3,2.9l0.2,4.5l3.4,4l1.9-4.5l2.5-1.3 l-0.1-8.2l-2.2-4.6l-1.9-2h-0.3v0.8l1.1,0.3l1,3.4l-0.2,0.8l-1.9-2.5l-1,1.6L1169.2,661.5L1169.2,661.5z"
                                },
                                MY: {
                                    d: "M1558.1,554.4l-0.5-3.8l-0.6-2.1l0.5-2.9l-0.5-4.3l-2.6-4.3l-3.5-3.8l-1.3-0.6l-1.7,2.6l-3.7,0.8l-0.6-3.3l-4.7-2.8 l-0.9,1.1l1.4,2.7l-0.4,4.7l2.1,3.4l1,5.3l3.4,4.3l0.8,3.2l6.7,5l5.4,4.8l4-0.5l0.1-2.1l-2.3-5.6L1558.1,554.4z M1560.9,563.3 l0.2,0.2l-0.1,0.2l-0.9,0.4l-0.9-0.4l0.3-0.6l0.6-0.1l0.5,0.2L1560.9,563.3z M1645.2,540.2l-3.8,0.4l1.2,3.1l-4,2.1l-5-1h-6.4 l-1.7,7.2l-2,2.2l-2.7,8.9l-4.5,1.3l-5.4-1.8l-2.7,0.6l-3.2,3.2l-3.6-0.4l-3.6,1.2l-3.9-3.5l-1-4.3l4.1,2.2l4.4-1.2l0.9-5.4l2.4-1.2 l6.7-1.4l3.8-5l2.6-4l2.7,3.3l1.1-2.2l2.7,0.2l0.1-4.1l0.1-3.1l4.1-4.4l2.5-5h2.3l3.1,3.2l0.4,2.8l3.8,1.7l4.8,2L1645.2,540.2z"
                                },
                                MV: {
                                    d: "M1389.1,551.6L1389.1,551.6l0.1-0.3l-0.1-0.1h-0.1l-0.1,0.2v0.1v0.1H1389.1z M1389.4,545.7l0.1-0.2v-0.1v-0.1v-0.1 v-0.1l-0.1,0.1l-0.1,0.2v0.1l-0.1,0.1v0.1H1389.4L1389.4,545.7z"
                                },
                                ML: {
                                    d: "M1000.3,450.3l-6.1,0.6l-0.1-4l-2.6-1.1l-3.4-1.8l-1.3-3l-18.6-13.8l-18.4-13.9l-8.4,0.1l2.4,27.4l2.4,27.5l1,0.8 l-1.3,4.4l-22.3,0.1l-0.9,1.4l-2.1-0.4l-3.2,1.3l-3.8-1.8l-1.8,0.2l-1,3.7l-1.9,1.2l0.2,3.9l1.1,3.7l2.1,1.8l0.4,2.4l-0.3,2l0.3,2.3 h0.9l1.5-0.8l0.9,0.2l1.5,1.6l2.4,0.5l1.6-1.4l1.8-0.8l1.3-0.9l1.1,0.2l1.3,1.4l0.6,1.7l2.3,2.7l-1.2,1.6l-0.2,2.1l1.2-0.6l0.7,0.7 l-0.3,1.9l1.7,1.8l0.7-0.6l1.6,1l4.3,0.1l1-1.9l1,0.1l1.6-0.7l0.9,2.7l1.3-0.8l2.3-0.9l-0.4-3.7l1.6-2.7l-0.2-2.2l4.5-5.2l0.8-4.4 l1.6-1.6l2.7,0.9l2.3-1.3l0.8-1.6l4.3-2.9l1.1-2l5.2-2.6l3-0.9l1.4,1.2h3.6l3.6-0.3l2-2.2l7.6-0.6l4.9-1l0.5-3.9l3-4.3L1000.3,450.3 L1000.3,450.3z"
                                },
                                MT: {
                                    d: "M1053.6,344l-0.2-0.2l-0.5-0.5l-0.5-0.1l0.1,0.6l0.4,0.4h0.5L1053.6,344L1053.6,344z M1052.2,342.8L1052.2,342.8 v-0.2l-0.3-0.1l-0.4,0.1l0.1,0.1l0.3,0.2L1052.2,342.8z"
                                },
                                MQ: {
                                    d: "M638,479.9l-0.2-0.7l-0.1-0.2l-0.2-0.3l0.1-0.3v-0.1h-0.2l-0.3-0.5l-0.6-0.3h-0.3l-0.2,0.2v0.3l0.3,0.9l0.2,0.2 l0.5,0.2l-0.4,0.4v0.1l0.1,0.3h0.9l0.2,0.3l0.1-0.1L638,479.9L638,479.9z"
                                },
                                MR: {
                                    d: "M949.8,413.3l-20.3-15.5l-0.2,9.7l-17.9-0.3l-0.2,16.3L906,424l-1.4,3.3l0.9,9.2l-21.6-0.1l-1.2,2.2l2.8,2.7l1.4,3 l-0.7,3.2l0.6,3.2l0.5,6.3l-0.8,5.9l-1.7,3.2l0.4,3.4l2-2l2.7,0.5l2.8-1.4h3.1l2.6,1.8l3.7,1.7l3.2,4.7l3.6,4.4l1.9-1.2l1-3.7 l1.8-0.2l3.8,1.8l3.2-1.3l2.1,0.4l0.9-1.4l22.3-0.1l1.3-4.4l-1-0.8l-2.4-27.5l-2.4-27.4L949.8,413.3L949.8,413.3z"
                                },
                                MU: {
                                    d: "M1294.7,702.5l0.3-0.3l0.2-0.4l0.3-0.3l0.1-0.7l-0.2-0.8l-0.4-0.7l-0.5,0.1l-0.3,0.4l-0.2,0.5l-0.5,0.3l-0.1,0.3 l-0.2,0.7l-0.1,0.4l-0.2,0.1v0.2l0.3,0.3l0.8,0.1L1294.7,702.5L1294.7,702.5z"
                                },
                                YT: {
                                    d: "M1228.7,654.7v-0.3l0.2-0.5v-0.1l0.1-0.5l-0.3-0.3h-0.2l-0.2-0.3l-0.3,0.3l0.3,0.5l-0.1,0.3l-0.1,0.4l0.1,0.4 l0.2,0.2L1228.7,654.7L1228.7,654.7z"
                                },
                                MX: {
                                    d: "M444.4,407.8l-3.6-1.4l-3.9-2l-0.8-3l-0.2-4.5l-2.4-3.6l-1-3.7l-1.6-4.4l-3.1-2.5l-4.4,0.1l-4.8,5l-4-1.9l-2.2-1.9 l-0.4-3.5l-0.8-3.3l-2.4-2.8l-2.1-2l-1.3-2.2h-9.3l-0.8,2.6H391h-10.7l-10.7-4.4l-7.1-3.1l1-1.3l-7,0.7l-6.3,0.5l0.2,5.7l0.7,5.1 l0.7,4.1l0.8,4l2.6,1.8l2.9,4.5l-1,2.9l-2.7,2.3l-2.1-0.3l-0.6,0.5l2.3,3.7l2.9,1.5l1,1.7l0.9-0.9l3.1,2.9l2.1,2l0.1,3.4l-1.2,4.7 l2.5,1.6l3.3,3.1l2.9,3.6l0.7,3.9h1l2.7-2.3l0.4-1.2l-1.5-2.8l-1.6-2.9l-2.6-0.2l0.4-3.4l-0.9-3l-1-2.8l-0.5-5.9l-2.6-3.2l-0.6-2.3 l-1.2-1.6v-4.1l-1,0.1l-0.1-2.2l-0.7-0.5l-0.4-1.4l-2.7-4.4l-1.1-2.6l1-4.8l0.1-3l1.8-2.6l2.4,1.7l1.9-0.2l3.1,2.5l-0.9,2.4l0.4,4.9 l1.5,4.7l-0.4,2l1.7,3.1l2.3,3.4l2.7,0.5l0.3,4.4l2.4,3.1l2.5,1.5l-1.8,4l0.7,1.5l4.1,2.6l1.9,4l4.5,4.9l3.8,6.4l1.3,3.2v2.5 l1.4,2.9l-0.3,2.2l-1.6,1.6l0.3,1.8l-1.9,0.7l0.8,3.1l2.2,4l5.3,3.6l1.9,2.9l5.4,2l3,0.4l1.2,1.7l4.2,3l5.9,3l4,0.9l4.8,2.9l4,1.2 l3.7,1.7l2.9-0.7l4.8-2.4l3.1-0.4l4.4,1.6l2.6,2.1l5.5,6.9l0.4-1.9l0.8-1.5l-0.7-1.2l3.3-5.2h7.1l0.4-2.1l-0.8-0.4l-0.5-1.4 l-1.9-1.5l-1.8-2.1h2.6l0.4-3.6h5.2l5.1,0.1l0.1-1l0.7-0.3l0.9,0.8l2.5-3.9h1l1.2-0.1l1.2,1.6l2-5l1.2-2.7l-0.9-1.1l1.8-3.9l3.5-3.8 l0.6-3.1l-1.2-1.3l-3.4,0.5l-4.8-0.2l-6,1.5l-4,1.7l-1.2,1.8l-1.2,5.4l-1.8,3.7l-3.9,2.6l-3.6,1.1l-4.3,1.1l-4.3,0.6l-5.1,1.8 l-1.9-2.6l-5.6-1.7l-1.8-3.2l-0.7-3.6l-3-4.7l-0.4-5l-1.2-3.1l-0.5-3.4l1.1-3.1l1.8-8.6l1.8-4.5l3.1-5.6L444.4,407.8L444.4,407.8z"
                                },
                                MD: {
                                    d: "M1118.5,283.3l1.2-0.7l0.5-2.1l1.1-2l-0.5-1.1l1-0.5l0.6,0.9l3,0.2l1.2-0.5l-1-0.6l0.2-1l-2-1.5l-1.1-2.6l-1.9-1.1 v-2.1l-2.5-1.6l-2-0.3l-3.9-1.9l-3.2,0.6l-1.1,0.9l1.6,0.6l1.8,1.9l1.9,2.6l3.4,3.7l0.6,2.7l-0.2,2.7L1118.5,283.3z"
                                },
                                MC: {
                                    d: "M1013.5,295.2l0-0.3l0.5-0.6l0.3,0.2L1013.5,295.2z"
                                },
                                MN: {
                                    d: "M1473.7,252.1l-3.7-4.6l-6.6-1.5l-4.8-0.8l-6.9-2.5l-1.3,6.4l4,3.6l-2.4,4.3l-7.9-1.6l-5-0.2l-4.7-2.9l-5.1-0.1 l-5.3-1.9l-5.9,2.9l-6.6,5.4l-4.7,1l3.3,4.4l5.7,3.3l8.1,2.3l5.8,5l1.3,7.3l3,2.7l6.4,1l7.2,0.9l7.9,3.8l3.4,0.7l4.9,5.7l4.7,3.6 l5.5-0.1l11.2,1.3l6.4-0.8l5.5,0.9l9.3,3.8l6.2-0.1l3.2,2l4.4-3.3l7.2-2.2l7.5-0.2l4.9-2.2l1.9-3.3l2.5-2l-1.9-2.1l-2.9-2.3l0.4-4 l3.2,0.5l5.9,1.3l3.1-3.3l6.3-2.4l1.4-4.1l2.4-1.8l6.8-0.8l4.3,0.7l-0.7-2.2l-7.2-4.3l-5.1-2l-2.5,2.3l-5.4-1l-2.4,0.8l-2.7-2.6 l-0.3-6.2l-0.6-4.6l-5.5,0.5l-3.9-2.1l-3.3-0.7l-4.5,4.4l-5.8,1l-3.6,1.6l-6.7-1h-4.5l-4.9-3.1l-6.5-3l-5.4-0.8l-5.7,0.8l-3.9,1.1 L1473.7,252.1L1473.7,252.1z"
                                },
                                ME: {
                                    d: "M1080,299.8l0.4-0.6l-2-1.2l-1.8-0.7l-0.8-0.8l-1.5-1.1l-0.9,0.6l-1.5,1.4l-0.4,3.4l-0.5,1l0,0l2.3,1.2l1.6,2.1 l1.1,0.4l0,0l-0.5-1.9l2-3.1l0.4,1.2l1.3-0.5L1080,299.8z"
                                },
                                MS: {
                                    d: "M631.8,465.7l-0.1-0.5h-0.1l-0.2,0.4v0.3l0.3,0.1L631.8,465.7z"
                                },
                                MA: {
                                    d: "M965.2,348.4l-2.3-0.1l-5.5-1.4l-5,0.4l-3.1-2.7h-3.9l-1.8,3.9l-3.7,6.7l-4,2.6l-5.4,2.9L927,365l-0.9,3.4l-2.1,5.4 l1.1,7.9l-4.7,5.3l-2.7,1.7l-4.4,4.4l-5.1,0.7l-2.8,2.4l-0.1,0.1l-3.6,6.5l-3.7,2.3l-2.1,4l-0.2,3.3l-1.6,3.8l-1.9,1l-3.1,4l-2,4.5 l0.3,2.2l-1.9,3.3l-2.2,1.7l-0.3,3h0.1l12.4-0.5l0.7-2.3l2.3-2.9l2-8.8l7.8-6.8l2.8-8.1l1.7-0.4l1.9-5l4.6-0.7l1.9,0.9h2.5l1.8-1.5 l3.4-0.2l-0.1-3.4l0,0h0.8l0.1-7.5l8.9-4.7l5.4-1l4.4-1.7l2.1-3.2l6.3-2.5l0.3-4.7l3.1-0.5l2.5-2.4l7-1l1-2.5l-1.4-1.4l-1.8-6.7 l-0.3-3.9L965.2,348.4L965.2,348.4z"
                                },
                                MZ: {
                                    d: "M1203,640.7l-0.8-2.9l0,0l0,0l-4.6,3.7l-6.2,2.5l-3.3-0.1l-2.1,1.9l-3.9,0.1l-1.4,0.8l-6.7-1.8l-2.1,0.3l-1.6,6 l0.7,7.3h0.3l1.9,2l2.2,4.6l0.1,8.2l-2.5,1.3l-1.9,4.5l-3.4-4l-0.2-4.5l1.3-2.9l-0.3-2.6l-2.1-1.6l-1.6,0.6l-3-3l-17.1,5.2l0.3,4.5 l0.3,2.4l4.6-0.1l2.6,1.3l1.1,1.6l2.6,0.5l2.8,2l-0.3,8.1l-1.3,4.4l-0.5,4.7l0.8,1.9l-0.8,3.7l-0.9,0.6l-1.6,4.6l-6.2,7.2l2.2,9 l1.1,4.5l-1.4,7.1l0.4,2.3l0.6,2.9l0.3,2.8h4.1l0.7-3.3l-1.4-0.5l-0.3-2.6l2.6-2.4l6.8-3.4l4.6-2.2l2.5-2.3l0.9-2.6l-1.2-1.1l1.1-3 l0.5-6.2l-1,0.3v-1.9l-0.8-3.7l-2.4-4.8l0.7-4.6l2.3-1.4l4.1-4.6l2.2-1.1l6.7-6.8l6.4-3.1l5.2-2.5l3.7-3.9l2.4-4.4l1.9-4.6l-0.9-3.1 l0.2-9.9l-0.4-5.6L1203,640.7L1203,640.7z"
                                },
                                MM: {
                                    d: "M1533.9,435.8l-0.6-2.6l-3.8,1.8l-2.5-1.2l-4.5-2.4l0.8-5.2l-3.7-1.3l-2.3-5.8l-5.6,1l-0.7-7.5l4.1-5.3l-0.8-5.3 l-1.3-4.9l-2.7-1.5l-2.7-3.7l-3,0.4l0.9,2.4l-1.6,1.2l1.3,3.9l-4.1-1.1l-6.1,4.4l0.9,3.6l-2.1,5.4l0.3,3.1l-1.5,5.2l-4.6-1.4 l0.9,6.6l-0.9,2.1l0.9,2.7l-2.4,1.5l0.5,4.6l-2.1-1l1.1,5.1l4.6,5.2l3.4,0.9l-0.4,2.2l5.4,7.4l1.9,5.9l-0.9,7.9l3.6,1.5l3.2,0.6 l5.8-4.6l3.2-3.1l3.1,5.2l2,8.1l2.6,7.6l2.6,3.3l0.2,6.9l2.2,3.8l-1.3,4.8l0.9,4.8l2.2-6.6l2.6-5.9l-2.8-5.8l-0.2-3l-1-3.5l-4.2-5.1 l-1.7-3.2l1.7-1.1l1.4-5.6l-2.9-4.2l-4.1-4.6l-3.5-5.6l2.2-1.1l1.5-6.9l3.9-0.3l2.8-2.8l3-1.4l0.8-2.4L1533.9,435.8L1533.9,435.8z"
                                },
                                NA: {
                                    d: "M1105.4,683.7l-10.3,2.5l-13.4-0.9l-3.7-3l-22.5,0.3l-0.9,0.4l-3.2-2.9l-3.6-0.1l-3.3,1l-2.7,1.2l0.2,4.9l4.4,6.2 l1.1,4l2.8,7.7l2.7,5.2l2.1,2.6l0.6,3.5v7.6l1.6,9.8l1.2,4.6l1,6.2l1.9,4.7l3.9,4.8l2.7-3.2l2.1,1.8l0.8,2.7l2.4,0.5l3.3,1.2 l2.9-0.5l5-3.2l1.1-23.6l0.6-18.5l5.4-0.2l0.9-22.7l4.1-0.2l8.6-2.2l2,2.6l3.7-2.5h1.6l3.2-1.5V684l-2.1-1.4l-3.6-0.4L1105.4,683.7 L1105.4,683.7z"
                                },
                                NR: {
                                    d: "M1915,575.5v-0.2h-0.1h-0.1l-0.1,0.2l0.1,0.1l0.1,0.1L1915,575.5L1915,575.5z"
                                },
                                NP: {
                                    d: "M1455.2,394.8l-6.5-0.6l-6.4-1.5l-5-2.8l-4.5-1.2l-2.5-3.1l-3.2-0.9l-6.4-4.1l-4.7-2l-1.9,1.5l-2.8,2.9l-0.9,5.9 l5.7,2.5l5.8,3.1l7.7,3.5l7.6,0.9l3.8,3.2l4.3,0.6l6.8,1.5l4.6-0.1l0.1-2.5l-1.5-4.1L1455.2,394.8L1455.2,394.8z"
                                },
                                NL: {
                                    d: "M1005.5,243.9h2.9l1.1-2.3l1-5.6l-1-2l-3.9-0.2l-6.5,2.6l-3.9,8.9l-2.5,1.7l0,0l3.6,0.5l4.4-1.3l3.1,2.7l2.8,1.4 L1005.5,243.9L1005.5,243.9z"
                                },
                                NC: {
                                    d: "M1897.3,716.1v-0.3l-0.4-0.2l-0.2,0.5v0.1l0.2,0.1h0.2L1897.3,716.1L1897.3,716.1z M1901.9,708.5L1901.9,708.5 l-0.1-0.4l0.1-0.2l-0.4,0.2l-0.6,0.2l0.1,0.8l-0.1,0.4l0.3,0.1l0.1,0.3h0.2l0.7-0.2l0.3-1.1h-0.4L1901.9,708.5L1901.9,708.5z M1898.9,706.8l0.3-0.5l0.1-0.2l-0.2-0.7l-0.3-0.3l0.3-1l-0.1-0.2l-0.4-0.2l-0.9,0.3l-0.1,0.2l0.5,0.1l0.2,0.2l-0.5,0.7l-0.5,0.1 l0.1,0.5l0.2,0.4l0.7,0.2l0.3,0.4H1898.9z M1895,703.9l0.3-0.3l0.3-0.4l-0.1-0.1v-0.3l0.2-0.4l0.3-0.1l-0.2-0.2l-0.2-0.1v0.3 l-0.3,0.7l-0.1,0.3l-0.5,0.6H1895L1895,703.9z M1882.7,701l-0.6-0.7l-0.1,0.2l-0.1,0.4v0.3l0.3,0.2l0.1,0.2l-0.1,0.5v0.4l0.6,0.9 l0.1,0.7l0.3,0.6l0.5,0.5l0.4,0.5l0.8,1.4l0.2,0.5l0.4,0.3l1,1.2l0.4,0.4l0.4,0.2l0.9,0.7l0.6,0.3l0.3,0.5l0.6,0.3l0.8,0.4l0.1,0.2 v0.3l0.1,0.3l0.5,0.4l0.6,0.3l0.1,0.2l0.1,0.2l0.3-0.1l0.3,0.1l0.9,0.7l0.4-0.1h0.3l0.5-0.2l0.3-0.4l-0.1-1.1l-0.5-0.5l-0.7-0.4 l-0.4-0.5l-0.4-0.5l-0.8-1l-1.1-1l-0.5-0.2l-0.3-0.4l-0.3-0.1l-0.2-0.3l-0.5-0.3l-0.3-0.6l-0.6-0.6l-0.1-0.3l0.1-0.3l-0.1-0.3 l-0.4-0.3l-0.2-0.5l-0.2-0.3l-0.4-0.2l-0.7-0.4l-1.6-1.9l-0.7-0.6l-0.7,0.2L1882.7,701L1882.7,701z M1860.7,695l0.2-0.4l0.1-0.8 l-0.2,0.4l-0.2,1L1860.7,695z"
                                },
                                NZ: {
                                    d: "M1868.6,832.8l0.9-2.6l-5.8,2.9l-3.4,3.4l-3.2,1.6l-5.9,4.6l-5.6,3.2l-7,3.2l-5.5,2.4l-4.3,1.1l-11.3,6.1l-6.4,4.6 l-1.1,2.3l5.1,0.4l1.5,2.1l4.5,0.1l4-1.8l6.3-2.8l8.1-6.2l4.7-4.1l6.2-2.3l4-0.1l0.6-2.9l4.6-2.5l7-4.5l4.2-2.9l2.1-2.6l0.5-2.6 l-5.6,2.5L1868.6,832.8L1868.6,832.8z M1897.4,802.3l1.9-5.7l-3.1-1.7l-0.8-3.6l-2.3,0.5l-0.4,4.6l0.8,5.7l0.9,2.7l-0.9,1.1 l-0.6,4.4l-2.4,4.1l-4.2,5l-5.3,2.2l-1.7,2.4l3.7,2.5l-0.8,3.5l-6.9,5.1l1.4,0.9l-0.4,1.6l5.9-2.5l5.9-4.2l4.5-3.4l1.6-1.2l1.5-2.7 l2.8-2l3.8,0.2l4.2-3.8l5.1-5.7l-2.1-0.8l-4.6,2.5l-3.2-0.5l-2.9-2.1l2.3-4.9l-1.2-1.8l-2.9,4.4L1897.4,802.3L1897.4,802.3z"
                                },
                                NI: {
                                    d: "M514.1,476.8l-1.9-0.2l-0.9,0.9l-2,0.8h-1.4l-1.3,0.8l-1.1-0.3l-0.9-0.9l-0.6,0.2l-0.8,1.5l-0.5-0.1l-0.3,1.3 l-2.1,1.8l-1.1,0.7l-0.6,0.8l-1.5-1.3l-1.4,1.7h-1.2l-1.3,0.2l-0.2,3.1h-0.8l-0.8,1.5l-1.8,0.3l-0.4,0.4l-0.9-1l-0.7,1l2.6,2.9 l2.2,2l1,2.1l2.5,2.6l1.8,2l0.9-0.8l3.5,1.7l1.4-0.8l1.7,0.5l0.8,1.3l1.7,0.4l1.4-1.3l-0.8-1.1l-0.1-1.7l1.2-1.6l-0.2-1.7l0.7-2.7 l0.9-0.7l0.1-2.8l-0.2-1.7l0.4-2.8l0.9-2.5l1.4-2.2l-0.3-2.3l0.4-1.4L514.1,476.8L514.1,476.8z"
                                },
                                NE: {
                                    d: "M1051.3,425.6l-8.8-2.8l-18.6,12.2l-15.8,12.5l-7.8,2.8l0.1,14.6l-3,4.3l-0.5,3.9l-4.9,1l-7.6,0.6l-2,2.2l-3.6,0.3 l-0.5,3.1l0.8,2.9l3.1,4.1l0.2,3.1l6.4,1.4l-0.1,4.4l1.9-1.9h2l4.3,3.7l0.3-5.7l1.6-2.6l0.8-3.6l1.4-1.4l6-0.8l5.6,2.4l2.1,2.4 l2.9,0.1l2.6-1.5l6.8,3.3l2.8-0.2l3.3-2.7l3.3,0.2l1.6-0.9l3,0.4l4.3,1.8l4.3-3.5l1.3,0.2l3.9,7l1-0.2l0.2-2l1.6-0.4l0.5-2.9 l-3.6-0.2v-4.1l-2.4-2.3l2.3-8.4l6.9-6l0.2-8.3l1.8-12.9l1.1-2.7l-2.3-2.2l-0.2-2.1l-2-1.6l-1.6-9.9l-3.9,2.4L1051.3,425.6 L1051.3,425.6z"
                                },
                                NG: {
                                    d: "M1055.8,492.7l-1,0.2l-3.9-7l-1.3-0.2l-4.3,3.5l-4.3-1.8l-3-0.4l-1.6,0.9l-3.3-0.2l-3.3,2.7l-2.8,0.2l-6.8-3.3 l-2.6,1.5l-2.9-0.1l-2.1-2.4l-5.6-2.4l-6,0.8l-1.4,1.4l-0.8,3.6l-1.6,2.6l-0.3,5.7l-0.2,2.1l1.2,3.8l-1.1,2.5l0.6,1.7l-2.7,4 L993,514l-1,4l0.1,4.1l-0.3,10.2h4.9h4.3l3.9,4.2l1.9,4.6l3,3.9l4.5,0.2l2.2-1.4l2.1,0.3l5.8-2.3l1.4-4.5l2.7-6.1l1.6-0.1l3.3-3.7 l2.1-0.1l3.2,2.6l3.9-2.2l0.5-2.6l1.2-2.6l0.8-3.2l3-2.6l1.1-4.5l1.2-1.4l0.7-3.3l1.5-4l4.6-5l0.3-2.1l0.6-1.1L1055.8,492.7 L1055.8,492.7z"
                                },
                                KP: {
                                    d: "M1644.7,302.3L1644.7,302.3l-5.5-3.6l0.1,3.5l-6.3,2.6l2.7,3.3l-4.6-0.2l-3.6-2l-1,4.4l-3.8,3.4l-2.1,4l3.3,1.7 l3.4,0.7l0.8,1l0.4,3.5l1.1,1.2l-0.9,0.7l-0.1,2.9l1.9,1l1.6,0.6l0.8,1.2l1.3-0.5v-1.3l3.1,1.3l0.1-0.6l2.4,0.2l0.7-2.9l3.5-0.3 l2.1-0.4l-0.1-1.6l-4.3-2.8l-2.6-1l0.2-0.7l-1.2-2.8l1.3-1.7l2.9-1l1-1.9l0.3-1.1l1.9-1.4l-2.8-4.5l0.3-2.1l0.9-2l2.2,0.3l0,0l0,0 l0,0L1644.7,302.3L1644.7,302.3z"
                                },
                                NO: {
                                    d: "M1088.8,133.1l-6.9,1.1l-7.3-0.3l-5.1,4.4l-6.7-0.3l-8.5,2.3l-10.1,6.8l-6.4,4l-8.8,10.7l-7.1,7.8l-8.1,5.8 l-11.2,4.8l-3.9,3.6l1.9,13.4l1.9,6.3l6.4,3l6-1.4l8.5-6.8l3.3,3.6l1.7-3.3l3.4-4l0.9-6.9l-3.1-2.9l-1-7.6l2.3-5.3l4.3,0.1l1.3-2.2 l-1.8-1.9l5.7-7.9l3.4-6.1l2.2-3.9l4,0.1l0.6-3.1l7.9,0.9v-3.5l2.5-0.3l2.1-1.4l5.1,2.9l5.3-0.3l4.7,1.3l3.4-2.4l1.1-3.9l5.8-1.8 l5.7,2.1l-0.8,3.8l3.2-0.5l6.4-2.2l0,0l-5.4-3.3l4.8-1.4L1088.8,133.1L1088.8,133.1z M1066.2,99.8l-5.6-1l-1.9-1.7l-7.2,0.9l2.6,1.5 l-2.2,1.2l6.7,1.1L1066.2,99.8z M1040.8,91.5l-4.8-1.6l-5.1,0.2l-1,1.5h-5l-2.2-1.5l-9.3,1.6l3.2,3.5l7.6,3.8l5.7,1.4l-3,1.7 l8.4,2.9l4.4-0.2l0.9-3.9l3-0.9l1.2-3.4l8.5-1.8C1053.3,94.8,1040.8,91.5,1040.8,91.5z M1065,88.4l-9.1-1l-3.2,1.2l-5.3-1l-10.4,1.2 l4.3,2h5.1l0.9,1.3l10.6,0.7l10.1-0.5l4.3-2.4C1072.3,89.9,1065,88.4,1065,88.4z"
                                },
                                OM: {
                                    d: "M1301,437.8l2.1-2l0.8-1.8l1.6-3.8l-0.1-1.4l-2.1-0.8l-1.6-2.1l-2.9-3.7l-3.3-1.1l-4.1-0.9l-3.3-2.3l-2.9-4.3h-2.8 l-0.1,4.2l1.1,0.8l-2.4,1.3l0.3,2.6l-1.4,2.6l0.1,2.6l2.9,4.5l-2.6,12.7l-16.1,6.4l5.2,10.5l2.1,4.4l2.5-0.3l3.6-2.2l3.1,0.6 l2.5-1.8l-0.2-2.5l2.1-1.6h3.4l1.2-1.3l0.2-3.1l3.3-2.4h2.6l0.4-0.8l-1-4.2l0.6-3.2l1-1.5l2.5,0.3L1301,437.8L1301,437.8z M1284.4,407.4l0.2-2.6l-0.7-0.6l-1.3,2.2l1.3,2.2L1284.4,407.4z"
                                },
                                PK: {
                                    d: "M1388.3,346.3l-9.4-2.6l-2.9-5l-4.7-3l-2.8,0.7l-2.4,1.2l-5.8,0.8l-5.3,1.3l-2.4,2.8l1.9,2.8l1.4,3.2l-2,2.7 l0.8,2.5l-0.9,2.3l-5.1-0.2l3,4.2l-3,1.6l-1.5,3.8l1.1,3.8l-1.7,1.8l-2.1-0.6l-4,0.9l-0.2,1.7h-4l-2.3,3.6l0.8,5.4l-6.6,2.6 l-3.8-0.5l-0.9,1.4l-3.3-0.8l-5.3,0.9l-9.6-3.2l3.2,3.3l2.8,3.9l5.6,2.7l1,5.7l2.7,1l0.9,2.9l-7.4,3.3l-1.2,7.4l7.6-0.9l8.9-0.1 l9.9-1.2l4.9,4.8l2.1,4.6l4.2,1.6l3.2-4.2h12l-1.8-5.5l-3.5-3.2l-1.3-4.9l-4-2.9l4.9-6.6l6.4,0.5l4.5-6.7l2.1-6.5l3.9-6.3l-1-4.5 l3.7-3.7l-5-3.1l-2.9-4.3l-3.2-5.6l1.9-2.8l8.5,1.6l5.7-1L1388.3,346.3L1388.3,346.3z"
                                },
                                PS: {
                                    d: "M1166.9,366.1l-2-0.9l-0.7,4.3l1.4,0.7l-1.2,0.8l-0.1,1.7l2.4-0.8l0.6-1.9L1166.9,366.1L1166.9,366.1z"
                                },
                                PA: {
                                    d: "M543.5,517l-2-1.8l-1.7-1.9l-2.5-1.1l-3.1-0.2l0.3-0.6l-3.1-0.4l-2,1.9l-3.5,1.3l-2.5,1.6l-2.7,0.5l-1.5-1.6 l-0.5,0.5l-2.3-0.3l0.2-1.3l-1.9-2.3l-2.2,0.6l-0.1,2.5l1.1,1l-0.8,0.7l0.1,1.2l-0.5,1.3l-0.4,1.2l0.6,1l0.3-1.4h2.4l1.4,0.7 l2.3,0.5l1,2.5l1.8,0.4l0.8-1.1l0.8,3.8l2.6-0.3l0.9-0.9l1.5-0.9l-2.5-3.4l0.6-1.3l1.3-0.3l2.3-1.6l1.2-2.2l2.5-0.4l2.7,1.8l1,2.1 l1.4,0.4l-1.5,1.7l1,3.5l1.8,1.8l0.9-3.1l1.8,0.5l1.1-1.9l-1.1-3.8L543.5,517z"
                                },
                                PG: {
                                    d: "M1850.7,615.6l0.9-1.8l-2.4-2.2l-2.5-4l-1.6-1.5l-0.5-1.9l-0.8,0.7l0.9,4.8l2.2,4l2.2,2.5L1850.7,615.6 L1850.7,615.6z M1829.5,607l2.1-3.9l0.4-3.5l-1.1-1l-3.4,0.1l0.4,3.7l-3.3,2.3l-1.7,2.2l-3.2,0.5l-0.4-3.4l-0.8,0.1l-1,3.1l-3.1,0.5 l-5-0.9l-0.6,1.9l3.1,1.8l4.5,1.9h2.9l3-1.5l3.2-1.6l1-1.8L1829.5,607L1829.5,607z M1801.7,619.2l-0.9-4.3l5.2-0.7l-1.1-3.3l-9.1-4 l-0.6-3.7l-2.9-3.2l-3.7-3.3l-10.2-3.6l-9.6-4.4l-1,20.7l-1.5,20.8l5.7,0.2l3.1,1.1l4.6-2.2l-0.3-4.7l3.6-2.1l4.9-1.8l7,2.8l2.4,5.6 l2.9,3.5l3.9,4l5.5,1l4.8,0.7l1.1,1.6l3.8-0.4l0.8-1.8l-5.6-2.7l1.8-1.2l-4.2-1.1l0.5-2.8l-3.2,0.2l-3-6.8L1801.7,619.2 L1801.7,619.2z M1836.4,600.8l-0.5-3.3l-2-2.1l-2.1-2.6l-2.3-1.5l-1.9-1.4l-2.9-1.8l-1.6,1.5l3.9,1.9l3.1,2.7l2.4,2.1l1.2,2.4 l0.8,3.8L1836.4,600.8L1836.4,600.8z"
                                },
                                PY: {
                                    d: "M655.7,700.5l-0.3-1.9l-5.4-3.3l-5.1-0.1l-9.5,1.9l-2.1,5.6l0.2,3.4l-1.5,7.6l11.2,10.4l4.6,1l7.2,4.7l5.9,2.5 l1.1,2.8l-4.2,9.6l5.7,1.8l6.2,1l4.2-1.1l4.3-4.8l0.3-5.7l0.7-3.6l0.3-3.8l-0.3-3.5l-2.1-1.2l-2,1.1l-2-0.3l-0.9-2.5l-1-5.8 l-1.2-1.9l-3.9-1.7l-2.1,1.2l-6-1.2l-0.4-8.6L655.7,700.5L655.7,700.5z"
                                },
                                PE: {
                                    d: "M584.3,599.5l-2.9-3.4l-1.7-0.1l3.5-6.5l-4.4-3l-3.3,0.6l-2.1-1.1l-3,1.7l-4.2-0.8l-3.4-6.7l-2.7-1.7l-1.8-3l-3.7-3 l-1.5,0.6l0.8,4.9l-1.7,4.1l-6,6.7l-6.7,2.5l-3.3,5.5l-0.9,4.3l-3.1,2.6l-2.5-3.2l-2.3-0.7l-2.3,0.5l-0.2-2.3l1.5-1.5l-0.7-2.7 l-4.4,4l-1.6,4.5l3,6.1l-1.7,2.8l4.1,2.6l4.5,4.1l2,4.7l2.4,2.9l6,12.7l6.2,11.7l5.4,8.4l-0.8,1.8l2.8,5.3l4.6,3.9l10.7,6.9 l11.6,6.4l0.7,2.6l5.9,3.7l2.7-1.6l1.2-3.3l2.8-6.9l-2.8-5.3l1.1-2.1l-1.2-2.4l1.9-3.2l-0.3-5.4l-0.1-4.5l1.1-2.1l-5.5-10.3l-3,1.1 l-2.6-0.7l-0.2-9.7l-4.4,3.8l-4.9-0.2l-2.3-3.4l-3.7-0.3l1-2.8l-3.3-3.8L562,620l1.5-1.1l-0.1-2.7l3.3-1.9l-0.7-3.4l1.3-2.2l0.4-3 l6.2-4.3l4.6-1.2l0.7-1L584.3,599.5L584.3,599.5z"
                                },
                                PH: {
                                    d: "M1684.6,518.6l-0.6-2.3l-0.8-3.2l-4.8-3l0.8,4.9l-3.9,0.2l-0.7,2.8l-4.2,1.7l-2.2-2.8l-2.8,2.4l-3.4,1.7l-1.9,5.4 l1.1,1.9l3.9-3.6l2.7,0.3l1.5-2.7l3.8,3l-1.5,3.1l1.9,4.6l6.8,3.7l1.4-3l-2.1-4.7l2.4-3.2l2.5,6.4l1.5-5.8l-0.6-3.5L1684.6,518.6 L1684.6,518.6z M1670.1,506.8v-6.1l-3.6,6.1l0.5-4.2l-3,0.3l-0.3,4l-1.2,1.8l-1,1.7l3.8,4.4l1.6-1.9l1.4-4L1670.1,506.8 L1670.1,506.8z M1640,512.9l2.6-4.4l3.4-3.5l-1.5-5.2l-2.4,6.3l-2.9,4.4l-3.8,4l-2.4,4.4L1640,512.9L1640,512.9z M1657.4,496.5 l1.2,3l-0.1,3.3l0.5,2.9l3.3-1.9l2.4-2.7l-0.2-2.6h-3.6L1657.4,496.5L1657.4,496.5z M1677.4,494.8l-1.8-2.4l-5.4-0.1l4,4.8l0.3,2.4 l-3.3-0.5l1.2,3.9l1.7,0.3l0.7,4.5l2.5-1.4l-1.7-4l-0.4-2.1l4.5,1.7L1677.4,494.8L1677.4,494.8z M1654.5,489l-2.2-2.3l-4.8-0.2 l3.4,4.8l2.8,3.2L1654.5,489L1654.5,489z M1648.1,454.4h-3.3l-0.9,5.8l1.1,9.9l-2.6-2l1.2,6l1.2,2.8l3.3,3.7l0.4-2.3l1.8,1.4 l-1.5,1.7l0.1,2.6l2.9,1.4l5-0.9l4,3.8l1.1-2.4l2.5,3.4l4.8,3.1l0.2-2.9l-2-1.6l0.1-3.4l-7.5-3.6l-2.3,0.8l-3.1-0.7l-2-5.1l0.1-5.1 l3-2.1l0.6-5.3l-2.7-4.6l0.4-2.6l-0.7-1.6l-1.5,1.6L1648.1,454.4L1648.1,454.4z"
                                },
                                PN: {
                                    d: "M274.2,727.4v-0.2l-0.1-0.2l-0.2-0.1l-0.1,0.1l0.1,0.2l0.2,0.2H274.2L274.2,727.4z"
                                },
                                PL: {
                                    d: "M1069.4,228.3l-4.6-0.1l-0.5-1.4l-4.8-1.1l-5.7,2.1l-7.1,2.8l-3.1,1.7l1.4,3.1l-1.2,1.6l2,2.2l1.4,3.3l-0.1,2.1 l2.3,3.9l2.4,1.9l3.7,0.6l-0.1,1.7l2.7,1.2l0.6-1.5l3.4,0.6l0.7,2l3.6,0.3l2.6,3.1l0.3,0.4l1.9-0.9l2.7,2.2l2.8-1.3l2.4,0.6l3.4-0.8 l4.9,2.3l1.1,0.4l-1.6-2.8l3.8-5.1l2.3-0.7l0.3-1.8l-3.1-5.3l-0.5-2.7l-1.9-2.9l2.7-1.2l-0.3-2.4l-1.7-2.3l-0.6-2.7l-1.4-1.9 l-2.5-0.6l-8.7,0.1L1069.4,228.3L1069.4,228.3z"
                                },
                                PT: {
                                    d: "M937.6,335.9l-0.4-2.1l2-2.5l0.8-1.7l-1.8-1.9l1.6-4.3l-2-3.8l2.2-0.5l0.3-3l0.9-0.9l0.2-4.9l2.4-1.7l-1.3-3.1 l-3-0.2l-0.9,0.8h-3l-1.2-3.1l-2.1,0.9l-1.9,1.6l0.1,2.1l0.9,2.2l0.1,2.7l-1.3,3.8l-0.4,2.5l-2.2,2.3l-0.6,4.2l1.2,2.4l2.3,0.6 l0.4,4l-1,5.1l2.8-0.7l2.7,0.9L937.6,335.9L937.6,335.9z"
                                },
                                PR: {
                                    d: "M600.8,457.3v-0.1l0,0h0.1v-0.1l0.1-0.1l0,0v-0.1h-0.1l0,0h-0.3h-0.1v0.1v0.1l0.2,0.1l0,0L600.8,457.3L600.8,457.3 L600.8,457.3z M614.4,457l0.7-0.2v-0.1l-0.4-0.1h-0.6l-0.5,0.2l0.1,0.2h0.2H614.4z M610.7,454.8l-0.1-0.2h-0.2l-3.5-0.1l-1.3-0.2 l-0.3,0.1l-0.3,0.1l-0.1,0.4l-0.2,0.2l-0.3,0.2l0.1,0.3l0.1,0.2l0.2,0.4l-0.1,0.5l-0.2,1l0.3,0.2l0.7-0.1l0.3,0.1l0.3,0.1l0.4-0.1 l0.4-0.2l0.9,0.1l0.5-0.1l0.6,0.3l0.4-0.1l0.2,0.1h0.3h0.6l0.9-0.2l0.8-0.5l0.3-0.5l0.4-0.3l0.6-0.4v-0.9l-0.7-0.1l-0.6-0.3 l-1.1-0.1h-0.1l0.1,0.2h-0.1L610.7,454.8L610.7,454.8z"
                                },
                                QA: {
                                    d: "M1258,415.5l0.8-3.8l-0.5-3.7l-1.9-2l-1.4,0.7l-1.1,3.3l0.8,4.7l1.8,1.2L1258,415.5L1258,415.5z"
                                },
                                RE: {
                                    d: "M1284,707.9l0.2-0.4l0.1-0.8l-0.4-0.8l-0.4-0.7l-0.4-0.2l-0.8-0.1l-0.7,0.3l-0.4,0.6l-0.2,0.3l0.4,1.1l0.2,0.3 l1.1,0.6h0.5L1284,707.9L1284,707.9z"
                                },
                                RO: {
                                    d: "M1108.1,266.3h-2.1l-1,1.5l-3.6,0.6l-1.6,0.9l-2.4-1.5h-3.2l-3.2-0.7l-1.9,1.3l-2.9,1.3l-1.9,4.2l-2.6,4.3l-3.8,1.1 l2.9,2.5l0.8,1.9l3.2,1.5l0.7,2.5l3.1,1.8l1.4-1.3l1.4,0.7l-1.1,1.1l1,1l1.8,2.6l1.9-0.5l4,1l7.5,0.3l2.3-1.6l5.8-1.4l4,2.2l3,0.7 l0.4-7.4l1.6,0.5l2.3-1.3l-0.4-1.6l-2.4-1.1l-2.2,1l-2.4-1.1l-1.3-2.8l0.2-2.7l-0.6-2.7l-3.4-3.7l-1.9-2.6l-1.8-1.9L1108.1,266.3 L1108.1,266.3z"
                                },
                                RU: {
                                    d: "M1332.3,95.1l-4.5-4l-13.6-4.1l-9.4-2.1l-6.2,0.9l-5.3,2.9l5.8,0.8l6.6,3.2l8,1.7l11.5,1.3 C1325.2,95.7,1332.3,95.1,1332.3,95.1z M1153.6,87.8l0.9-0.6l-5.7-0.9L1146,87l-1.3,1l-1.5-1.2l-5.2,0.1l-6.2,0.8l7.7,0.1l-1.1,1.3 l4.4,1l3.6-0.7l0.1-0.7l2.9-0.3C1149.4,88.4,1153.6,87.8,1153.6,87.8z M1354.1,97.7l-1.5-1.8l-12.5-2.6l-3-0.3l-2.2,0.5l1.2,6 C1336.1,99.5,1354.1,97.7,1354.1,97.7z M1369.3,104l-9.2-0.7l3.4-1.2l-8.2-1.5l-6.1,1.9l-1,2l1.5,2.1l-6.9-0.1l-5.3,2.6l-4.3-1.1 l-9.3,0.5l0.3,1.3l-9.2,0.7l-4.9,2.4l-4.2,0.2l-1.2,3.3l5.5,2.6l-7.7,0.7l-9.5-0.3l-5.8,1.1l4.8,5.4l6.9,4.3l-9.6-3l-7.9,0.3l-5.1,2 l4.5,3.8l-4.9-1l-2.1-5l-4.2-2.8l-1.8,0.1l3.6,3.7l-4.6,3.5l8.1,4.2l0.4,5.4l2.9,2.9l4.7,0.5l0.4,3.5l4.4,3.1l-1.9,2.6l0.5,2.7 l-3.7,1.4l-0.5,2l-5.3-0.8l3.5-7.8l-0.5-3.6l-6.7-3.3l-3.8-7.3l-3.7-3.7l-3.6-1.6l0.8-4.2l-2.9-2.9l-11.3-1.4l-2.1,1l0.5,4.7 l-4.3,4.7l1.2,1.7l4.7,4.1l0.1,2.6l5.3,0.5l0.8,1.1l5.8,2.9l-1,2.8l-18.5-6.1l-6.6-1.7l-12.8-1.6l-1.2,1.7l5.9,3.1l-2.7,3.6 l-6.4-3.2l-5,2.2l-7.6,0.1l-2.1,1.9l-5.3-0.6l2.5-3.3l-3.2-0.2l-12.3,4.6l-7.6,2.6l0.4,3.5l-6,1.2l-4-1.9l-1.2-3l5-0.7l-3.6-3 l-12.2-1.8l4.3,3.4l-0.8,3.2l4.7,3.3l-1.1,3.8l-4.6-1.9l-4-0.3l-8,5.4l4.2,4.1l-3.2,1.4l-11.4-3.5l-2.1,2.1l3.3,2.4l0.2,2.7 l-3.8-1.4l-6-1.7l-1.9-5.8l-1-2.6l-8-4l2.9-0.7l20.1,4.2l6.4-1.5l3.7-2.9l-1.6-3.6l-4-2.6l-17.6-6.1l-11.6-1.3l-7.6-3.2l-3.6,1.8 l0,0l-6.4,2.2l-3.2,0.5l0.4,3.7l7.2,3.7l-2.8,4.1l6.4,6.3l-1.7,4.8l4.9,4.1l-0.9,3.7l7.3,3.9l-0.9,2.9l-3.3,3.3l-7.9,7.4l0,0 l5.3,2.8l-4.5,3.2l0,0l0.9,1l-2.6,3.4l2.5,5.5l-1.6,1.9l2.4,1.4l1,2.8l2.1,3.6l5.2,1.5l1,1.4l2.3-0.7l4.8,1.4l1,2.9l-0.6,1.6 l3.7,3.9l2.2,1.1l-0.1,1.1l3.4,1.1l1.7,1.6l-1.6,1.3l-3.9-0.2l-0.8,0.6l1.5,2l2,3.9l0,0l1.8,0.2l1-1.4l1.5,0.3l4.8-0.5l3.8,3.4 l-0.9,1.3l0.7,1.9l4,0.2l2.2,2.7l0.2,1.2l6.6,2.2l3.5-1l3.6,2.9l2.9-0.1l7.6,2l0.4,1.9l-1.3,3.2l1.8,3.4l-0.3,2.1l-4.7,0.5l-2.2,1.7 l0.4,2.8l4.2-1l0.4,1.3l-6.8,2.6l3.2,2.4l-3.2,5.2l-3.4,1l5,3.6l6.2,2.4l7.4,5.1l0.5-0.7l4.5,1.1l7.7,1l7.5,2.9l1.1,1.2l2.9-1 l5.1,1.3l2.1,2.5l3.5,1.4l1.5,0.2l4.3,3.8l2.4,0.4l0.5-1.5l2.6-2.5l0,0l-7.3-7.3l-0.4-4.1l-5.9-5.9l3.5-6.3l4.6-1.1l1.4-3.7l-2.8-1 l-0.2-3.2l-4.2-4.1l-3.6,0.2l-5.3-4.3l1.7-4.7l-1.7-1.2l2.1-6.8l6,3.6l-0.7-4.6l8.1-6.6l7.5-0.2l11.9,4.3l6.6,2.4l4.3-2.5l7.6-0.2 l7.3,3.2l0.8-1.8l6.9,0.3l0.2-3l-9.4-4.2l3.6-2.9l-1.5-1.7l3.9-1.6l-5-4.1l1.4-2.1l16.8-2.1l1.7-1.5l10.8-2.2l3.1-2.5l9,1.3l4.3,6.3 l4.3-1.5l7,2.1l1.2,3.3l4.4-0.4l9.1-5.7l-0.8,1.9l8.3,4.7l18.1,15.5l1.1-3.3l8.3,3.6l6.2-1.6l3.2,1.1l4.1,3.6l3.9,1.2l3.3,2.6l6-0.9 l4.3,3.8l1.7-0.5l4.7-1l6.6-5.4l5.9-2.9l5.3,1.9l5.1,0.1l4.7,2.9l5,0.2l7.9,1.6l2.4-4.3l-4-3.6l1.3-6.4l6.9,2.5l4.8,0.8l6.6,1.5 l3.7,4.6l8.4,2.6l3.9-1.1l5.7-0.8l5.4,0.8l6.5,3l4.9,3.1h4.5l6.7,1l3.6-1.6l5.8-1l4.5-4.4l3.3,0.7l3.9,2.1l5.5-0.5l7.3,2.3l4.4-3.9 l-1.9-2.7l-0.1-6.5l1.2-2l-2.5-3.3l-3.7-1.5l1.7-3l5.1-1.1l6.2-0.2l8.5,1.8l5.9,2.3l7.7,6.1l3.8,2.7l4.4,3.7l6.1,6.1l9.9,1.9 l8.9,4.5l6,5.8h7.5l2.6-2.5l6.9-1.8l1.3,5.6l-0.4,2.3l2.8,6.8l0.6,6l-6.8-1.1l-2.9,2.2l4.7,5.3l3.8,7.3l-2.5,0.1l1.9,3.1l0,0 l1.4,1.1l0,0l0,0l0,0l-0.4-2l4-4.5l5.1,3l3.2-0.1l4.4-3.6l1-3.7l2.1-7.1l1.9-7.2l-1.3-4.3l1-9l-5.2-9.9l-5.5-7.3l-1.3-6.2l-4.7-5.1 l-12.7-6.7l-5.6-0.4l-0.3,3l-5.8-1.3l-5.7-3.8l-8-0.7l4.9-14.1l3.5-11.5l13.1-1.8l14.9,1l2.5-2.8l7.9,0.8l4.3,4.3l6.4-0.6l8.4-1.6 l-7.7-3.5v-9.8l9.1-1.9l12.1,7.1l3.6-6.4l-3.2-4.7l4.7-0.5l6.5,8.1l-2.4,4.6l-0.8,6l0.3,7.5l-5.7,1.3l2.8,2.7l-0.1,3.6l6.4,8.3 l16,13.4l10.5,8.8l5.7,4.3l1.6-5.7l-4.5-6.2l5.7-1.5l-5.4-6.9l5-3.1l-4.7-2.6l-3.4-5l4.1-0.2l-9-8.6l-6.7-1.4l-2.9-2.4l-1.1-5.6 l-3.1-3.9l7,0.8l1.3-2.5l4.7,2.2l6.1-4.6l11.4,4l-1.7-2.6l2-3.6l1.5-4l3.1-0.7l6.5-4.3l9.8,1.2l-0.9-1.5l-3.8-2.3l-4.1-1.6l-9.1-4.6 l-8.1-3l6.1,0.4l2-2.5l0,0l-32.9-21.9l-9.4-2.3l-15.7-2.6l-7.9,0.3l-15.2-1.4l1.8,2.3l8.5,3.4l-2.5,1.8l-14.2-4.8l-6.8,0.6l-9.2-1.1 l-7,0.2l-3.9,1.1l-7.2-1.6l-5.1-3.8l-6.5-2.2l-9.2-0.9l-14.7,1l-16.1-4l-7.8-3l-40.1-3.4l-2.1,2.2l9.3,4.8l-7.5-0.7l-1,1.5l-9.7-1.6 l-5,1.4l-9.3-2.4l3,5.5l-8.9-2.1l-10-4.1l-0.4-2.2l-6-3.3l-9.8-2.6h-6.1l-9.3-0.9l4.7,3.9l-17.2-0.8l-3.9-2.3l-13.3-0.9l-5.3,0.8 l-0.1,1.3l-5.8-3.2l-2.3,0.9l-7.2-1.2l-5.6-0.7l1.1-1.5l6.6-2.8l2.3-1.5l-2.4-2.5l-5.5-1.9l-11.5-2.3l-10.8-0.1l-1.9,1.2L1369.3,104 L1369.3,104z M1207.1,135.6l-9.9-4.3l-3.1-4.3l3.3-4.9l2.8-5l8.6-4.7l9.8-2.4l11.3-2.4l1.3-1.5l-4.2-1.9l-6.6,0.6l-4.9,1.8 l-11.7,0.9l-10.1,3.1l-6.8,2.7l2.5,2.2l-6.6,4.4l3.9,0.7l-5.4,4.3l1.6,2.8l-3.4,1.1l1.9,2.8l7.9,1.4l2.2,2.3l13.4,0.7L1207.1,135.6 L1207.1,135.6z M1521.1,110.9l-17.9-2.6l-10.2-0.2l-3.4,0.9l3.4,3.4l12.4,3.2l4.5-1.2l14.2,0.2 C1524.1,114.6,1521.1,110.9,1521.1,110.9z M1546.3,113.2l-11.7-1.3l-8.2-0.7l1.7,1.6l10.3,2l6.8,0.4L1546.3,113.2L1546.3,113.2z M1533.8,122.7l-2.5-1.4l-8.3-1.9l-4.1,0.5l-0.8,2l1.1,0.2l8.8,0.6C1528,122.7,1533.8,122.7,1533.8,122.7z M1696.4,135l-6-3.6 l-1.4,2.2l3.5,1.6L1696.4,135z M1084,228.9l-0.6-1.5l0.2-1.7l-2.2-0.9l-5-1.1l-6.3,2l-0.7,2.6l5.9,0.7L1084,228.9z M1673.7,250.7 l-7.2-6.2l-5.1-6l-6.8-5.8l-4.9-4l-1.3,0.8l4.4,2.8l-1.9,2.8l6.8,8.3l7.8,6l6.4,8.3l2.4,4.6l5.5,6.8l3.8,6l4.6,5.2l-0.1-4.8l6.5,3.8 l-3-4.4l-9.5-6.3l-3.7-9l8.9,2L1673.7,250.7L1673.7,250.7z"
                                },
                                RW: {
                                    d: "M1147.6,579.4l-3.3,1.9l-1.4-0.6l-1.6,1.8l-0.2,3.8l-0.8,0.4l-0.6,3.5l3.5,0.5l1.7-3.6l3,0.4l0,0l1.6-0.8l0.4-3.7 L1147.6,579.4L1147.6,579.4z"
                                },
                                KN: {
                                    d: "M629.9,463.2v-0.3l-0.2-0.2h-0.3v0.5l0.2,0.2L629.9,463.2z M629.4,462.5l-0.1-0.2l-0.1-0.1l-0.2-0.4l-0.4-0.4 l-0.2,0.1l-0.1,0.2v0.1l0,0l0.3,0.3l0.4,0.1l0.2,0.4L629.4,462.5L629.4,462.5z"
                                },
                                LC: {
                                    d: "M637.4,484.2l0.1-1.2l-0.1-0.5l-0.2,0.1l-0.3,0.4l-0.4,0.6l-0.1,0.3v0.6l0.6,0.4L637.4,484.2L637.4,484.2z"
                                },
                                VC: {
                                    d: "M634.5,491.4L634.5,491.4v-0.1h0.1v-0.1l0,0v-0.1h-0.1v0.1l0,0v0.1h-0.1L634.5,491.4L634.5,491.4L634.5,491.4 L634.5,491.4z M635.2,489.5l0.1-0.2l0.1-0.1l0,0l0,0l-0.1-0.1l0,0v0.1l-0.2,0.1l0,0v0.1l0,0v0.1H635h-0.1l0,0h0.1l0,0l0.1,0.1l0,0 l0,0l0,0L635.2,489.5L635.2,489.5z M635.5,488.4l0.3-0.2l0.1-0.6l-0.1-0.4h-0.2l-0.3,0.1l-0.2,0.3l-0.1,0.5L635.5,488.4L635.5,488.4 L635.5,488.4z"
                                },
                                SM: {
                                    d: "M1040.3,293.5l-0.7,0.1l-0.2-0.9l0.9-0.3L1040.3,293.5z"
                                },
                                ST: {
                                    d: "M1014.1,571.4l0.5-0.8v-0.5l-0.3-0.5h-0.4l-0.5,0.4l-0.3,0.4v0.3l0.1,0.7l0.1,0.3l0.3,0.2L1014.1,571.4 L1014.1,571.4z M1018.4,562.2l0.2-0.4v-0.2l-0.1-0.1l-0.1-0.1l-0.2,0.1l-0.3,0.5l0.1,0.2l0.2,0.2L1018.4,562.2L1018.4,562.2z"
                                },
                                SA: {
                                    d: "M1228.7,387l-10.2-0.5l-16.7-12.7l-8.5-4.5l-6.7-1.7l-0.9,1l-10.4,3.1l6.1,6.4l-1.7,1l-0.7,2.2l-4,0.8l-1.1,2.3 l-2.1,2l-6.1-1l-0.5,2.5v2.2l-0.6,3.5h2.7l3.2,4.4l3.7,5.1l2.5,4.7l1.7,1.5l1.7,3.3l-0.2,1.4l2.1,3.7l3,1.3l2.8,2.5l3.6,7v3.8 l0.9,4.4l4,6.1l2.5,1l4.1,4.4l1.9,5.2l3.2,5.3l3,2.3l0.6,2.5l1.8,1.9l0.9,2.8l2.3-2.1l-0.7-2.7l1.2-3.1l2.4,1.7l1.5-0.6l6.4-0.2 l1,0.7l5.4,0.6l2.1-0.3l1.6,2.1l2.5-1l3.5-6.7l5-2.9l15.7-2.4l16.1-6.4l2.6-12.7l-2.9-4.5l-1,1.3l-16.8-3.2l-2.6-6.4l-0.4-1.5 l-1.2-2.4l-1.5,0.4l-1.8-1.2l-1-1.6l-0.9-2.1l-1.7-1.8l-1-2.1l0.4-2.1l-0.6-2.7l-4-2.6l-1.2-2.3l-2.9-1.4l-2.7-5.5l-3.8,0.2 l-1.7-3.1L1228.7,387L1228.7,387z"
                                },
                                SN: {
                                    d: "M908.9,479.2l-3.6-4.4l-3.2-4.7l-3.7-1.7l-2.6-1.8h-3.1l-2.8,1.4l-2.7-0.5l-2,2l-1.3,3.3l-2.8,4.4l-2.5,1.2l2.7,2.3 l2.2,5l6.1-0.2l1.3-1.5l1.8-0.1l2.1,1.5l1.8,0.1l1.8-1.1l1.1,1.8l-2.4,1.5l-2.4-0.1l-2.4-1.4l-2.1,1.5h-1l-1.4,0.9l-5-0.1l0.8,4.9 l3-1.1l1.8,0.2l1.5-0.7l10.3,0.3l2.7,0.1l4,1.5l1.3-0.1l0.4-0.7l3,0.5l0.8-0.4l0.3-2l-0.4-2.4l-2.1-1.8l-1.1-3.7L908.9,479.2 L908.9,479.2z"
                                },
                                RS: {
                                    d: "M1084.8,285.2l-3.2-1.5l-0.8-1.9l-2.9-2.5l-3.2-0.2l-3.7,1.6l0,0l1.5,2.4l1.7,1.8l-1.7,2.3l0,0h1.8l-1,2.7l2.7,2.3 l-0.5,2.9l-1.2,0.3l1.5,1.1l0.8,0.8l1.8,0.7l2,1.2l-0.4,0.6l1.2-0.5l0.5-2l0.9-0.4l0.8,0.9l1,0.4l0.8,1l0.8,0.3l1.1,1.1h0.8 l-0.5,1.5l-0.5,0.7l0.2,0.5l1.7-0.4l2.4-0.1l0.7-0.9l-0.6-0.7l0.7-2l1.7-1.9l-2.8-2.6l-0.7-2.3l1.1-1.4l-1-1l1.1-1.1l-1.4-0.7 l-1.4,1.3l-3.1-1.8L1084.8,285.2L1084.8,285.2z"
                                },
                                SC: {
                                    d: "M1288.5,602l-0.5-0.8l-0.4,0.3l0.2,0.3l0.3,0.2l0.1,0.4l0.3,0.2V602L1288.5,602z"
                                },
                                SL: {
                                    d: "M919.4,518.7l-1.5,0.3v-2.3L917,515l0.2-1.8l-1.2-2.7l-1.5-2.3H910l-1.3,1.2l-1.5,0.2l-1,1.4l-0.7,1.7l-3,2.8 l0.7,4.7l0.9,2.3l2.9,3.5l4.1,2.5l1.5,0.5l1.3-2l0.3-1.9l2.6-3.4L919.4,518.7L919.4,518.7z"
                                },
                                SG: {
                                    d: "M1561,563.7l0.1-0.2l-0.2-0.2l-0.3-0.1l-0.5-0.2l-0.6,0.1l-0.3,0.6l0.9,0.4L1561,563.7L1561,563.7z"
                                },
                                SX: {
                                    d: "M627.1,457.2L627.1,457.2l0.2,0.2l0.3,0.1l0.1-0.1v-0.2H627.1z"
                                },
                                SK: {
                                    d: "M1087.4,260.9l-4.9-2.3l-3.4,0.8l-2.4-0.6l-2.8,1.3l-2.7-2.2l-1.9,0.9l-0.3-0.4h-1.5l-0.6,1.1l-1.1,0.3l-0.2,1.4 l-0.9,0.3l-0.1,0.6l-1.6,0.6l-2.2-0.1l-0.6,1.4l-0.3,0.8l0.7,2.1l2.6,1.6l1.9,0.7l4.1-0.8l0.3-1.2l1.9-0.2l2.3-1l0.6,0.4l2.2-0.7 l1-1.5l1.6-0.4l5.5,1.9l1-0.6l0.7-2.5L1087.4,260.9L1087.4,260.9z"
                                },
                                SI: {
                                    d: "M1059.4,277l-1.2-2.1l-0.8-0.1l-0.9,1.1l-4.3,0.1l-2.4,1.4l-4.2-0.4l-0.3,3l1.4,2.7l-1.1,0.5l3.5,0.2l0.8-1l1.8,1 l2,0.1l-0.2-1.7l1.7-0.6l0.3-2.5L1059.4,277L1059.4,277z"
                                },
                                SB: {
                                    d: "M1909.1,646.4l-0.2-0.2l-0.1-0.4h-0.3l-0.3,0.1l0.2,0.6h0.2L1909.1,646.4L1909.1,646.4z M1873.5,647.2l-0.1-0.2 l-0.5-0.4l-1.9-1.3l-0.4-0.1l-0.1,0.1l-0.1,0.3l0.1,0.2l0.5,0.1v0.1l0.3,0.2l0.7,0.2l0.4,0.3l0.1,0.5l0.3,0.1l0.3,0.1L1873.5,647.2 L1873.5,647.2z M1905.5,640.6L1905.5,640.6l0.2-0.4l-0.2-0.1l-0.5-0.1l-0.7,0.1l-0.3,0.2l-0.2,0.3h-0.2v0.2l0.1,0.4l0.2-0.1l0.2,0.1 l0.5-0.5h0.3h0.1L1905.5,640.6L1905.5,640.6z M1881.1,638.3l-0.1-0.2l-0.2-0.1l-0.9-0.7l-0.5-0.2h-0.5l-0.1,0.5v0.3h0.6l0.4,0.2v0.6 l0.2,0.2v0.5l1.2,0.9l0.7,0.4l0.7,0.1l0.4,0.2l0.5-0.1l0.5,0.2l0.4-0.1l-0.4-0.3v-0.4l-0.5-1.3l-0.3-0.3l-0.5,0.1l-0.5-0.2h-0.4 L1881.1,638.3L1881.1,638.3z M1880.7,633.4l-0.6-1.6l-0.2-0.1l0.1,0.6l0.1,0.4l-0.1,0.5l-0.1,0.6l0.2,0.2l0.2-0.2l0.4,0.5v-0.2 V633.4z M1870.9,631.2l-0.3-0.1l-0.4,0.3l-0.1,0.3l-0.1,0.7v0.4l0.3,0.7l0.3,0.5l0.3,0.3l0.2,0.2l0.9,0.1l1.7,0.1l0.9,0.4l0.9,0.2 l0.4-0.1l0.5-0.2l0.1-0.1l-0.1-0.6l-0.2-0.3l-0.4-0.2l-0.2-0.6l-0.5-0.4l-0.9-0.7h-1.6l-0.6,0.1L1870.9,631.2L1870.9,631.2z M1873.5,629.4l-0.5,0.2v0.3l0.4,0.1l0.4,0.2l0.1,0.3l0,0l0.2-0.1l0.4,0.2l0.2-0.3l-0.4-0.5l-0.4-0.3h-0.1L1873.5,629.4 L1873.5,629.4z M1867.9,630.2l0.3-0.2v-0.4h-0.3l-0.1-0.2h-0.2l-0.3,0.2l-0.2,0.3l0.1,0.2h0.4L1867.9,630.2L1867.9,630.2 L1867.9,630.2z M1859.5,627.9l-0.1-0.2l-0.3-0.2h-0.2l-0.5,0.1l0.1,0.1l0.6,0.3l0.3,0.1L1859.5,627.9L1859.5,627.9z M1862.6,628.3 l0.3-0.2l-0.1-0.2l-0.1-0.5l-0.4,0.7l0.1,0.2H1862.6z M1862.1,627.4v-0.2V627l-0.2-0.1l0.4-0.3l-0.1-0.1l-0.6-0.2l-0.2,0.2l-0.2,0.1 l-0.1,0.1l-0.1,0.1l-0.1,0.5l0.2,0.4l0.4,0.2L1862.1,627.4L1862.1,627.4z M1858.1,627.6l-0.3-0.4l0.1-0.5l0.2-0.1l0.2-0.5l-0.1-0.4 l-0.2,0.1l-0.7,0.6l-0.1,0.3l0.6,0.8L1858.1,627.6L1858.1,627.6L1858.1,627.6z M1871.1,626.3l-0.2-0.4v-0.2l-0.3-0.2l-0.2,0.1 l-0.1,0.3l0.1,0.2l0.4,0.3L1871.1,626.3L1871.1,626.3z M1877.1,625.1h-0.2l-0.1,0.1h-0.2h-0.3l-0.1,0.2l0.6,1.1l-0.3,0.5l0.4,2.2 l0.4,1.2l0.8,0.8v0.2l0.8,0.5l0.6,1.3l0.2,0.1l0.1-0.2v-0.6l-0.5-1.1l0.1-0.8l-0.2-0.3V630l-0.2-0.8l-0.6-0.7l-0.3-0.1l-0.2-0.3 l0.2-0.6l0.2-0.2l0.1-0.3L1877.1,625.1L1877.1,625.1z M1860.5,624.6l-0.6-0.2l-0.2-0.3v-1l-0.6-0.3l-0.3,0.2l-0.6,0.7l-0.2,0.4 l-0.5,0.3l-0.1,0.3v0.4l0.4,0.1l0.3-0.4l0.9-0.1l0.3,0.1v0.4l0.1,0.7l0.3,0.3l0.5,0.2l0.4,0.6l0.1-0.3h0.2l0.2-0.4l-0.3-1.2 L1860.5,624.6L1860.5,624.6z M1854,624.2l0.1-0.5l-0.1-0.9l-0.2,0.1v0.2l-0.1,0.4L1854,624.2L1854,624.2z M1857.2,623.8l0.2-0.2 v-0.4v-0.5l-0.2-0.4l-0.2-0.2l-0.5,0.1l-0.4,0.5v0.5l0.4,0.6L1857.2,623.8L1857.2,623.8L1857.2,623.8z M1854.6,622.6l0.2-0.3 l0.5-0.7l0.1-0.3l-0.5-0.2l-0.4-0.5l-0.4-0.2l-0.3,0.4v0.4l0.5,0.6l-0.1,0.4l0.2,0.1l0.1,0.4L1854.6,622.6L1854.6,622.6z M1872.1,626.5l-0.1-0.5l-0.3-0.4l0.4-0.5l-2.2-1.9l-0.3-0.2l-0.4-0.1l-0.5-0.4l-0.5-0.1l-0.5-0.4l-0.2-0.3l-0.6-0.4l-0.6-0.8 l-1.5-0.3l0.1,0.2l0.4,0.4l0.1,0.7l0.5,0.4l0.5,0.6l0.2,0.1l0.2,0.2l0.4,0.5l0.8,0.4l0.8,0.6l0.3,0.1l0.3,0.3l1.5,0.7l0.5,0.7 L1872.1,626.5L1872.1,626.5L1872.1,626.5z M1850.3,617.3l0.2-0.3l-0.7-0.5l-0.2,0.3l-0.2,0.5l0.4,0.2L1850.3,617.3L1850.3,617.3z M1859.4,618.8L1859.4,618.8l-0.4-0.1l-0.4-0.2l-0.7-0.8l-0.2-0.3l-0.2-1l-0.4-0.4l-1.4-0.8l-0.8-0.8l-0.7-0.2l-0.2,0.2v0.5l0.2,0.3 l1,0.9l1.1,1.7l1,1l0.8,0.1h0.4v0.1l0.1,0.2l0.5,0.2l0.5-0.4L1859.4,618.8L1859.4,618.8z"
                                },
                                SO: {
                                    d: "M1223.4,505.7l-2.6-2.7l-1.2-2.6l-1.8-1.2l-2,3.4l-1.1,2.3l2.2,3.5l2.1,3.1l2.2,2.2l18.5,7.6l4.8-0.1l-15.4,19.1 l-7.4,0.3l-4.9,4.5l-3.6,0.1l-1.5,2l-4.8,7.2l0.2,23.2l3.3,5.3l1.3-1.5l1.3-3.4l6.1-7.7l5.3-4.8l8.3-6.4l5.6-5.1l6.4-8.7l4.7-7.1 l4.6-9.3l3.2-8.2l2.5-7.1l1.3-6.8l1.1-2.3l-0.2-3.4l0.4-3.7l-0.2-1.7h-2.1l-2.6,2.2l-2.9,0.6l-2.5,0.9l-1.8,0.2l0,0l-3.2,0.2 l-1.9,1.1l-2.8,0.5l-4.8,1.9l-6.1,0.8l-5.2,1.6L1223.4,505.7L1223.4,505.7z"
                                },
                                ZA: {
                                    d: "M1148.2,713.7l-2.9-0.6l-1.9,0.8l-2.6-1.1l-2.2-0.1l-8,4.7l-5.2,4.7l-2,4.3l-1.7,2.4l-3,0.5l-1.2,3l-0.6,2l-3.6,1.5 l-4.4-0.3l-2.5-1.8l-2.3-0.8l-2.7,1.5l-1.5,3.1l-2.7,1.9l-2.8,2.8l-4,0.7l-1.1-2.3l0.7-3.8l-3-6.1l-1.4-1l-1.1,23.6l-5,3.2l-2.9,0.5 l-3.3-1.2l-2.4-0.5l-0.8-2.7l-2.1-1.8l-2.7,3.2l3.5,8.2v0.1l2.5,5.3l3.2,6l-0.2,4.8l-1.7,1.2l1.4,4.2l-0.2,3.8l0.6,1.7l0.3-0.9 l2.1,2.9l1.8,0.1l2.1,2.3l2.4-0.2l3.5-2.4l4.6-1l5.6-2.5l2.2,0.3l3.3-0.8l5.7,1.2l2.7-1.2l3.2,1l0.8-1.8l2.7-0.3l5.8-2.5l4.3-2.9 l4.1-3.8l6.7-6.5l3.4-4.6l1.8-3.2l2.5-3.3l1.2-0.9l3.9-3.2l1.6-2.9l1.1-5.2l1.7-4.7h-4.1l-1.3,2.8l-3.3,0.7l-3-3.5l0.1-2.2l1.6-2.4 l0.7-1.8l1.6-0.5l2.7,1.2l-0.4-2.3l1.4-7.1l-1.1-4.5L1148.2,713.7L1148.2,713.7z M1128.1,766.5l-2,0.6l-3.7-4.9l3.2-4l3.1-2.5 l2.6-1.3l2.3,2l1.7,1.9l-1.9,3.1l-1.1,2.1l-3.1,1L1128.1,766.5L1128.1,766.5z"
                                },
                                KR: {
                                    d: "M1637.3,331.7l6.2,5.5l-3.4,1.1l5.2,6.8l1.1,4.8l2.1,3.5l4.5-0.5l3.2-2.7l4.2-1.2l0.5-3.6l-3.4-7.5l-3.3-4.2 l-8.2-7.6l0.1,1.6l-2.1,0.4l-3.5,0.3l-0.7,2.9l-2.4-0.2L1637.3,331.7L1637.3,331.7z"
                                },
                                SS: {
                                    d: "M1166,508.7l-0.7-2.2l-2.9-2.5l-0.8-4.6l0.5-4.7l-2.6-0.5l-0.3,1.5l-3.4,0.3l1.4,1.8l0.6,3.9l-3,3.5l-2.7,4.5 l-2.8,0.7l-4.8-3.7l-2.1,1.3l-0.5,1.9l-2.9,1.2l-0.2,1.3h-5.5l-0.8-1.3l-4.1-0.3l-2,1.1l-1.5-0.5l-3-3.7l-1-1.8l-4,0.9l-1.5,2.9 l-1.3,5.7l-1.9,1.2l-1.7,0.7l3.8,2.5l3.1,2.6l0.1,2l3.8,3.4l2.4,2.7l1.5,3.8l4.2,2.5l0.9,2.1l3.5,5.2l2.5,0.8l1.5-1.1l2.6,0.4 l3.1-1.3l1.4,2.7l5,4.2l0,0l2.3-1.7l3.5,1.4l4.5-1.5l4,0.1l3.4-3l3.4-3.8l3.8-4.2l-3.5-6.9l-2.6-1.5l-1-2.5l-2.9-3.1l-3.4-0.5 l1.8-3.6l3-0.1l0.8-2l-0.2-5l-0.8-0.1L1166,508.7L1166,508.7z"
                                },
                                ES: {
                                    d: "M888.3,390.4l1-0.1v0.3l-1.2,1l-0.5,1.4l-0.4,0.6l-0.3,0.2l-0.6,0.2l-0.7-0.9l-0.4-1l-0.2-0.3l0.4-0.2h0.5l1-0.1 l0.3-0.1L888.3,390.4z M883.3,392.7h-0.2l-0.2,0.2l-0.2,0.4l0.3,0.5l0.2,0.1h0.2l0.5-0.4v-0.2l-0.1-0.3L883.3,392.7z M880.6,389 l-0.3-0.4h-0.7l-0.4,0.6l0.6,1.2l0.1,0.5h0.1l0.5-0.5l0.1-0.3l-0.1-0.5l0.2-0.2L880.6,389z M878.7,395.5h-0.6l0.1,0.2l0.1,0.2 l0.7,0.4l0.6-1.1l-0.2-0.2L878.7,395.5z M901.1,389.3l-0.3,0.2l-0.1,0.6l-0.7,1.3l-0.5,1.2l-0.7,0.6l-0.7,0.2l0.1,0.1l0.7,0.1 l0.8-0.7l1.5-0.5l0.3-1l0.3-1.1v-0.7l-0.3-0.3L901.1,389.3L901.1,389.3z M893.1,393.1L893.1,393.1L893.1,393.1h-0.2l-1.3-0.1 l-0.2,0.6l-0.5,0.4v0.7l0.5,0.7l0.3,0.1l0.5,0.1l0.7-0.4l0.2-0.4l0.1-0.8l-0.1-0.4V393.1z M994.3,318.7l-0.3-0.1l-0.5,0.2l-0.5-0.2 l0.1-0.3l0.1-0.2l0.1-0.1l-0.2-0.2v-0.1l0.2-0.2l-0.2-0.1l-1.3,0.4l-0.7,0.4l-2.1,1.5v0.3l0.1,0.2h0.4l0.2,0.4l0.4-0.4l0.3-0.1 l0.3,0.1l0.3,0.2l0.1,0.6l0.1,0.2l0.6,0.1l0.9,0.4l0.4-0.2l0.5-0.3l0.2-0.6l0.3-0.5l0.3-0.5l0.3-0.4l-0.1-0.4L994.3,318.7z M998.6,317.1l-0.9-0.3l-1,0.1l-0.1,0.1v0.4l0.1,0.1l0.6,0.1l1.6,0.7h0.1l0.1-0.4v-0.1L998.6,317.1z M992,301.9l-6,0.8l-1.3-0.7 l-0.2,0.1h-0.4l-0.1-0.2v-0.2l-3.7-1.8l-1.9,1.3l-9.4-2.8l-2-2.4l-8.2-0.2l-4.2,0.3l-5.4-1h-6.8l-6.2-1.1l-7.4,4.5l2,2.6l-0.4,4.4 l1.9-1.6l2.1-0.9l1.2,3.1h3l0.9-0.8l3,0.2l1.3,3.1l-2.4,1.7l-0.2,4.9l-0.9,0.9l-0.3,3l-2.2,0.5l2,3.8l-1.6,4.3l1.8,1.9l-0.8,1.7 l-2,2.5l0.4,2.1l4.8,1l1.4,3.7l2,2.2l2.5,0.6l2.1-2.5l3.3-2.3l5,0.1h6.7l3.8-5l3.9-1.3l1.2-4.2l3-2.9l-2-3.7l2-5.1l3.1-3.5l0.5-2.1 l6.6-1.3l4.8-4.2L992,301.9z M903.7,386.3l-0.2,0.4l-0.6,0.2l-0.8,0.4l-0.2,0.3l-0.2,0.9l0.4,0.1l0.3-0.4l0.9-0.3l0.5-0.3l0.1-0.9 l0.2-0.3l-0.2-0.3L903.7,386.3z M983.7,323.1l-0.2,0.3v0.3l-0.3,0.1l-0.1,0.4l0.1,0.2l0.8,0.1l0.2-0.4h0.3l0.6-0.7v-0.3l-0.3-0.2 L983.7,323.1z M984.2,325.1l-0.1,0.2l-0.1,0.2v0.2h0.5l0.4,0.1l0.1-0.1v-0.2h-0.5L984.2,325.1z"
                                },
                                LK: {
                                    d: "M1432.2,532.7l2.3-1.8l0.6-6.6l-3-6.6l-2.9-4.5l-4.1-3.5l-1.9,10.3l1.4,9.1l2.8,5.1L1432.2,532.7L1432.2,532.7z"
                                },
                                SD: {
                                    d: "M1180.8,468.5l0.4-4.2l1.6-2l4-1l2.6-3.6l-3.1-2.4l-2.2-1.6l-2.5-7.6l-1.1-6.5l1.1-1.2l-2.1-6.2h-21.8h-21.4h-22.1 l0.5,12.7h-6.3v2.7l1.1,25.2l-4.8-0.4l-2.4,4.7l-1.4,3.9l1.2,1.5l-1.8,1.9l0.7,2.7l-1.4,2.6l-0.5,2.4l2-0.4l1.2,2.5l0.1,3.7l2.1,1.8 v1.6l0.7,2.7l3.3,4v2.6l-0.8,2.6l0.3,2l2,1.8l0.5,0.3l1.7-0.7l1.9-1.2l1.3-5.7l1.5-2.9l4-0.9l1,1.8l3,3.7l1.5,0.5l2-1.1l4.1,0.3 l0.8,1.3h5.5l0.2-1.3l2.9-1.2l0.5-1.9l2.1-1.3l4.8,3.7l2.8-0.7l2.7-4.5l3-3.5l-0.6-3.9l-1.4-1.8l3.4-0.3l0.3-1.5l2.6,0.5l-0.5,4.7 l0.8,4.6l2.9,2.5l0.7,2.2v3.1l0.8,0.1v-0.7l1.4-6.7l2.6-1.8l0.5-2.6l2.3-4.8l3.2-3.2l2.1-6.2l0.7-5.5l-0.7-2.5L1180.8,468.5 L1180.8,468.5z"
                                },
                                SR: {
                                    d: "M668,533.8l-4.6,0.5l-0.6,1.1l-6.7-1.2l-1,5.7l-3.5,1.6l0.3,1.5l-1.1,3.3l2.4,4.6l1.8,0.1l0.7,3.5l3.3,5.6l3.1,0.5 l0.5-1.3l-0.9-1.3l0.5-1.8l2.3,0.6l2.7-0.7l3.2,1.4l1.4-2.7l0.6-2.9l1-2.8l-2.1-3.7l-0.4-4.4l3.1-5.5L668,533.8L668,533.8z"
                                },
                                SZ: {
                                    d: "M1150.5,736.6l-2.7-1.2l-1.6,0.5l-0.7,1.8l-1.6,2.4l-0.1,2.2l3,3.5l3.3-0.7l1.3-2.8l-0.3-2.8L1150.5,736.6 L1150.5,736.6z"
                                },
                                SE: {
                                    d: "M1077.7,161.1l-1.9-2.2l-1.7-8.4l-7.2-3.7l-5.9-2.7l-2.5,0.3v3.5l-7.9-0.9l-0.6,3.1l-4-0.1l-2.2,3.9l-3.4,6.1 l-5.7,7.9l1.8,1.9l-1.3,2.2l-4.3-0.1l-2.3,5.3l1,7.6l3.1,2.9l-0.9,6.9l-3.4,4l-1.7,3.3l4.2,8.4l4.4,6.7l2,5.7l5.3-0.3l2.2-4.7 l5.7,0.5l2-5.5l0.6-10l4.6-1.3l3.3-6.6l-4.8-3.3l-3.6-4l2.1-8.1l7.7-4.9l6.1-4.5l-1.2-3.5l3.4-3.9L1077.7,161.1L1077.7,161.1z"
                                },
                                CH: {
                                    d: "M1024.3,270.6l-5.4-1.9l-1,1.4h-4.2l-1.3,1l-2.3-0.6l0.2,1.6l-3.5,3.5v2.8l2.4-0.9l1.8,2.7l2.2,1.3l2.4-0.3l2.7-2.1 l0.9,1l2.4-0.2l0.9-2.5l3.8,0.8l2.1-1.1l0.3-2.5l-2.6-0.2l-2.3-1.1l0.7-1.6L1024.3,270.6L1024.3,270.6z"
                                },
                                SY: {
                                    d: "M1183.5,359.9l11-6.7l0.9-7.8l-1.2-4.7l2.7-1.6l2.1-4.1l-5.9,1.1l-2.8-0.2l-5.7,2.5h-4.3l-3-1.2l-5.5,1.8l-1.9-1.3 l0.1,3.6l-1.2,1.5l-1.2,1.4l-1,2.6l1.1,5l2.4,0.3l1.2,2.5l-2.6,2.4l-0.9,3.5l0.3,2.6l-0.6,1h0.1l6.3,2.5L1183.5,359.9L1183.5,359.9z "
                                },
                                TW: {
                                    d: "M1642.3,427.2l1.2-10.2l0.1-3.9l-2.9-1.9l-3.3,4.8l-1.9,6.3l1.5,4.7l4,5.4L1642.3,427.2L1642.3,427.2z"
                                },
                                TJ: {
                                    d: "M1344.1,315.7l-2.1,0.2l-1.3-1.8l0.2-2.9l-6.4,1.5l-0.5,4l-1.5,3.5l-4.4-0.3l-0.6,2.8l4.2,1.6l2.4,4.7l-1.3,6.6 l1.8,0.8l3.3-2.1l2.1,1.3l0.9-3l3.2,0.1l0.6-0.9l-0.2-2.6l1.7-2.3l3.2,1.5v2l1.6,0.3l1,5.4l2.6,2.1l1.5-1.3l2.1-0.7l2.5-2.9l3.8,0.5 h5.4l-1.8-3.7l-0.6-2.5l-3.5-1.4l-1.6,0.6l-3-5.9l-9.5,0.9l-7.1-2l-5.4,0.5l-0.6-3.7l5.9,1.1L1344.1,315.7L1344.1,315.7z"
                                },
                                TZ: {
                                    d: "M1149.6,578.6l-2,0.8l2.3,3.6l-0.4,3.7l-1.6,0.8l0,0l0.3,2.5l1.2,1.5v2l-1.4,1.4l-2.2,3.3l-2.1,2.3l-0.6,0.1 l-0.3,2.7l1.1,0.9l-0.2,2.7l1,2.6l-1.3,2.4l4.5,4.3l0.3,3.9l2.7,6.5l0,0l0.3,0.2l2.2,1.1l3.5,1.1l3.2,1.9l5.4,1.2l1.1,1.7l0,0 l0.4-1.2l2.8,3.4l0.3,6.7l1.8,2.4v0.1l2.1-0.3l6.7,1.8l1.4-0.8l3.9-0.1l2.1-1.9l3.3,0.1l6.2-2.5l4.6-3.7l0,0l-2-1.4l-2.2-6.3 l-1.8-3.9l0.4-3.1l-0.3-1.9l1.7-3.9l-0.2-1.6l-3.5-2.3l-0.3-3.6l2.8-7.9l-8-6.3l-0.4-3.7l-20.2-13l0,0l-2.8,2.8l-1.9,2.9l2.2,2.2 l-3.2,1.6l-0.7-0.8l-3.2,0.4l-2.5,1.4l-1.6-2.4l1.1-4.5l0.2-3.8l0,0l0,0L1149.6,578.6L1149.6,578.6z"
                                },
                                TH: {
                                    d: "M1562.7,481.4l1.5-2.9l-0.5-5.4l-5.2-5.5l-1.3-6.3l-4.9-5.2l-4.3-0.4l-0.8,2.2l-3.2,0.2l-1.8-1.2l-5.3,3.8l-1-5.7 l0.4-6.7l-3.8-0.3l-0.9-3.8l-2.6-1.9l-3,1.4l-2.8,2.8l-3.9,0.3l-1.5,6.9l-2.2,1.1l3.5,5.6l4.1,4.6l2.9,4.2l-1.4,5.6l-1.7,1.1 l1.7,3.2l4.2,5.1l1,3.5l0.2,3l2.8,5.8l-2.6,5.9l-2.2,6.6l-1.3,6.1l-0.3,3.9l1.2,3.6l0.7-3.8l2.9,3.1l3.2,3.5l1.1,3.2l2.4,2.4 l0.9-1.1l4.7,2.8l0.6,3.3l3.7-0.8l1.7-2.6l-3.1-3.3l-3.4-0.8l-3.3-3.6l-1.4-5.5l-2.6-5.8l-3.7-0.2l-0.7-4.6l1.4-5.6l2.2-9.3l-0.2-7 l4.9-0.1l-0.3,5l4.7-0.1l5.3,2.9l-2.1-7.7l3-5.2l7.1-1.3L1562.7,481.4L1562.7,481.4z"
                                },
                                TL: {
                                    d: "M1676.8,631.9l4.9-1.8l6-2.8l2.2-1.7l-2-0.8l-1.8,0.8l-4,0.2l-4.9,1.4l-0.8,1.5l0.5,1.3L1676.8,631.9L1676.8,631.9z "
                                },
                                TG: {
                                    d: "M981.7,502.2l-4.9-0.1l-0.4,1.9l2.4,3.3l-0.1,4.6l0.6,5.1l1.4,2.3l-1.2,5.7l0.4,3.2l1.5,4l1.2,2.2l4.6-1.3l-1.4-4.4 l0.2-14.6l-1.1-1.3l-0.2-3.1l-2-2.3l-1.7-1.9L981.7,502.2L981.7,502.2z"
                                },
                                TO: {
                                    d: "M13.3,707.7L13.3,707.7l-0.2,0.3v0.2l0.4,0.4L13.3,707.7z M11.7,706.8h-0.2H11.7l-0.4-0.3h-0.4l-0.2-0.1v-0.2 l-0.2,0.3l0.2,0.3l0.9,0.4l0.3,0.2l0.2-0.6v-0.2l-0.3,0.1v0.1H11.7z M14.2,690.8l0.1-0.2v-0.2l-0.3-0.1h-0.1l-0.3,0.5l0.1,0.1 l0.3,0.2h0.1L14.2,690.8z"
                                },
                                TT: {
                                    d: "M635.4,507.7l0.1-0.2v-0.6l0.2-0.4l-0.2-0.4l-0.1-0.6l0.1-0.5v-0.7l0.2-0.3l0.5-0.8h-0.9l-0.6,0.2l-1.1,0.1 l-0.5,0.2l-0.7,0.1L632,504l0.1,0.1l0.5,0.2l0.2,0.2l0.1,0.2l0.1,0.4l-0.3,1.7l-0.1,0.1L632,507l-0.2,0.3l-1.4,0.8l0.8-0.1l0.9,0.1 l2.4-0.1L635.4,507.7L635.4,507.7z M637.2,501l1.2-0.5l0.1-0.4h-0.2l-0.8,0.3l-0.6,0.5v0.2L637.2,501z"
                                },
                                TN: {
                                    d: "M1038,361.4l-2-1l-1.5-3l-2.8-0.1l-1.1-3.5l3.4-3.2l0.5-5.6l-1.9-1.6l-0.1-3l2.5-3.2l-0.4-1.3l-4.4,2.4l0.1-3.3 l-3.7-0.7l-5.6,2.6l-1,3.3l1,6.2l-1.1,5.3l-3.2,3.6l0.6,4.8l4.5,3.8v1.5l3.4,2.6l2.6,11.3l2.6-1.4l0.4-2.7l-0.7-2.6l3.7-2.5l1.5-2 l2.6-1.8L1038,361.4L1038,361.4z"
                                },
                                TR: {
                                    d: "M1166.6,308.9l-9.7-4.4l-8.5,0.2l-5.7,1.7l-5.6,4l-9.9-0.8l-1.6,4.8l-7.9,0.2l-5.1,6.1l3.6,3l-2,5l4.2,3.6l3.7,6.4 l5.8-0.1l5.4,3.5l3.6-0.8l0.9-2.7l5.7,0.2l4.6,3.5l8-0.7l3.1-3.7l4.6,1.5l3.2-0.6l-1.7,2.4l2.3,3l1.2-1.4l1.2-1.5l-0.1-3.6l1.9,1.3 l5.5-1.8l3,1.2h4.3l5.7-2.5l2.8,0.2l5.9-1.1l2.1-1l6.2,0.9l2.1,1.6l2.3-1.1l0,0l-3.7-5.2l0.7-2l-2.9-7.3l3.3-1.8l-2.4-1.9l-4.2-1.5 v-3.1l-1.3-2.2l-5.6-3l-5.4,0.3l-5.5,3.2l-4.5-0.6l-5.8,1L1166.6,308.9L1166.6,308.9z M1117,312.9l2-1.9l6.1-0.4l0.7-1.5l-4.7-2 l-0.9-2.4l-4.5-0.8l-5,2l2.7,1.6l-1.2,3.9l-1.1,0.7l0.1,1.3l1.9,2.9L1117,312.9L1117,312.9z"
                                },
                                TM: {
                                    d: "M1325.6,334.2l-0.8-4l-7.7-2.7l-6.2-3.2l-4.2-3l-7-4.4l-4.3-6.4l-2-1.2l-5.5,0.3l-2.3-1.3l-1.9-4.9l-7.8-3.3 l-3.3,3.6l-3.8,2.2l1.6,3.1l-5.8,0.1l-2.5,0.3l-4.9-4.9l-3.8-1.7l-5.5,1.3l-1.8,2l2.5,4l-0.5-4.5l3.7-1.6l2.4,3.6l4.6,3.7l-4,2 l-5.3-1.5l0.1,5.2l3.5,0.4l-0.4,4.4l4.5,2.1l0.7,6.8l1.8,4.5l4.4-1.2l3-3.7l3.5,0.2l2.1-1.2l3.8,0.6l6.5,3.3l4.3,0.7l7.3,5.7 l3.9,0.2l1.6,5.5l5.9,2.4l3.9-0.8l0.4-3l4-0.9l2.5-2l-0.1-5.2l4.1-1.2l0.3-2.3l2.9,1.7L1325.6,334.2L1325.6,334.2z"
                                },
                                TC: {
                                    d: "M578.7,433.1l-0.1,0.4v0.2l0.2,0.1l0.6-0.1l0.1-0.1l0.2-0.1v-0.1l-0.4,0.1L578.7,433.1z M582.3,433.7l0.2-0.2 l-0.2-0.2l-0.7-0.2l-0.2,0.1v0.3h0.6L582.3,433.7L582.3,433.7L582.3,433.7z M581.2,433.2l-0.1-0.1l-0.1-0.6h-0.5v0.2l0.1,0.2h0.1 l0.1,0.2l0.3,0.2L581.2,433.2L581.2,433.2z"
                                },
                                UG: {
                                    d: "M1167.6,545.1l-3.4,3l-4-0.1l-4.5,1.5l-3.5-1.4l-2.3,1.7l0,0l-0.3,7.5l2.3,0.8l-1.8,2.3l-2.2,1.7l-2.1,3.3l-1.2,3 l-0.3,5.1l-1.3,2.4l-0.1,4.8l1.4,0.6l3.3-1.9l2-0.8l6.2,0.1l0,0l-0.3-2.5l2.6-3.7l3.5-0.9l2.4-1.5l2.9,1.2l0.3,0.5v-0.3l1.6-2.6 l2.7-4.2l2.1-4.7l-2.6-7.3l-0.7-3.2L1167.6,545.1L1167.6,545.1z"
                                },
                                UA: {
                                    d: "M1138.5,241l-4.8,0.5l-1.5-0.3l-1,1.4l-1.8-0.2l0,0l-4.1,0.3l-1.2,1.4l0.2,3.1l-2-0.6l-4.3,0.3l-1.5-1.5l-1.6,1.1 l-2-0.9l-3.8-0.1l-5.6-1.5l-5-0.5l-3.7,0.2l-2.4,1.6l-2.2,0.3l3.1,5.3l-0.3,1.8l-2.3,0.7l-3.8,5.1l1.6,2.8l-1.1-0.4l-1.1,1.7 l-0.7,2.5l2.9,1.7l0.6,1.6l1.9-1.3l3.2,0.7h3.2l2.4,1.5l1.6-0.9l3.6-0.6l1-1.5h2.1l1.1-0.9l3.2-0.6l3.9,1.9l2,0.3l2.5,1.6v2.1 l1.9,1.1l1.1,2.6l2,1.5l-0.2,1l1,0.6l-1.2,0.5l-3-0.2l-0.6-0.9l-1,0.5l0.5,1.1l-1.1,2l-0.5,2.1l-1.2,0.7l2.4,1.1l2.2-1l2.4,1.1 l3.3-4.6l1.3-3.4l4.5-0.8l0.7,2.4l8,1.5l1.7,1.4l-4.5,2.1l-0.7,1.2l5.8,1.8l-0.6,2.9l3,1.3l6.3-3.6l5.3-1.1l0.6-2.2l-5.1,0.4 l-2.7-1.5l-1-3.9l3.9-2.3l4.6-0.3l3-2l3.9-0.5l-0.4-2.8l2.2-1.7l4.7-0.5l0.3-2.1l-1.8-3.4l1.3-3.2l-0.4-1.9l-7.6-2l-2.9,0.1 l-3.6-2.9l-3.5,1l-6.6-2.2l-0.2-1.2l-2.2-2.7l-4-0.2l-0.7-1.9l0.9-1.3L1138.5,241L1138.5,241z"
                                },
                                AE: {
                                    d: "M1283.9,408.6l-1.3-2.2l-3,3.9l-3.7,4.1l-3.3,4.3l-3.3-0.2l-4.6-0.2l-4.2,1l-0.3-1.7l-1,0.3l0.4,1.5l2.6,6.4 l16.8,3.2l1-1.3l-0.1-2.6l1.4-2.6l-0.3-2.6l2.4-1.3l-1.1-0.8l0.1-4.2h2.8L1283.9,408.6L1283.9,408.6z"
                                },
                                GB: {
                                    d: "M950,227.5l-4.9-3.7l-3.9,0.3l0.8,3.2l-1.1,3.2l2.9-0.1l3.5,1.3L950,227.5z M963,203.2l-5.5,0.5l-3.6-0.4l-3.7,4.8 l-1.9,6.1l2.2,3l0.1,5.8l2.6-2.8l1.4,1.6l-1.7,2.7l1,1.6l5.7,1.1h0.1l3.1,3.8l-0.8,3.5l0,0l-7.1-0.6l-1,4l2.6,3.3l-5.1,1.9l1.3,2.4 l7.5,1l0,0l-4.3,1.3l-7.3,6.5l2.5,1.2l3.5-2.3l4.5,0.7l3.3-2.9l2.2,1.2l8.3-1.7l6.5,0.1l4.3-3.3l-1.9-3.1l2.4-1.8l0.5-3.9l-5.8-1.2 l-1.3-2.3l-2.9-6.9l-3.2-1l-4.1-7.1l-0.4-0.6l-4.8-0.4l4.2-5.3l1.3-4.9h-5l-4.7,0.8L963,203.2L963,203.2z"
                                },
                                US: {
                                    d: "M116.7,450.7l2-0.9l2.5-1.4l0.2-0.4l-0.9-2.2l-0.7-0.8l-0.8-0.6l-1.9-1.1l-0.4-0.1l-0.4,0.6v1.3l-1.2,1l-0.4,0.7 l0.4,2.3l-0.6,1.8l1.2,0.9L116.7,450.7L116.7,450.7z M116.1,440.8l0.6-0.7l-1.2-1l-1.8-0.6L113,439v0.4l0.5,0.5l0.6,1.4L116.1,440.8 L116.1,440.8z M113.1,437.4l-2.6-0.2l-0.6,0.7l2.9,0.2L113.1,437.4z M108.4,436.5l-1.1-2.1L107,434l-1.7,0.9l0.1,0.2l0.4,1.5 l1.8,0.2l0.4,0.1L108.4,436.5L108.4,436.5z M100.1,432.3l0.3-1.5l-1.3-0.1l-1,0.6l-0.4,0.5l1.6,1.1L100.1,432.3z M512.2,259.1h-1.6 l-1.3,2.4h-10.1h-16.8h-16.7h-14.8h-14.7h-14.5h-15h-4.8h-14.6h-13.9l-1.6,5.1l-2.4,5.1l-2.3,1.6l1.1-5.9l-5.8-2.1l-1.4,1.2 l-0.4,2.9l-1.8,5.4l-4.2,8.3l-4,5.6l-4,5.6l-5.4,5.8l-1.1,4.7l-2.8,5.3l-3.9,5.2l1,3.4l-1.9,5.2l1.5,5.4l1.3,2.2l-0.8,1.5l0.4,9 l2.5,6.5l-0.8,3.5l1,1l4.6,0.7l1.3,1.7l2.8,0.3l-0.1,1.9l2.2,0.7l2.1,3.7l-0.3,3.2l6.3-0.5l7-0.7l-1,1.3l7.1,3.1l10.7,4.4H391h4.3 l0.8-2.6h9.3l1.3,2.2l2.1,2l2.4,2.8l0.8,3.3l0.4,3.5l2.2,1.9l4,1.9l4.8-5l4.4-0.1l3.1,2.5l1.6,4.4l1,3.7l2.4,3.6l0.2,4.5l0.8,3 l3.9,2l3.6,1.4l2.1-0.2l-0.6-2.2l0.4-3.1l1-4.4l1.9-2.8l3.7-3.1l6-2.7l6.1-4.7l4.9-1.5l3.5-0.4l3.5,1.4l4.9-0.8l3.3,3.4l3.8,0.2 l2.4-1.2l1.7,0.9l1.3-0.8l-0.9-1.3l0.7-2.5l-0.5-1.7l2.4-1l4.2-0.4l4.7,0.7l6.2-0.8l3,1.5l2,3l0.9,0.3l6.1-2.9l1.9,1l3,5.3l0.8,3.5 l-2,4.2l0.4,2.5l1.6,4.9l2,5.5l1.8,1.4l0.4,2.8l2.6,0.8l1.7-0.8l2-3.9l0.7-2.5l0.9-4.3l-1.2-7.4l0.5-2.7l-1.5-4.5l-0.7-5.4l0.1-4.4 l1.8-4.5l3.5-3.8l3.7-3l6.9-4.1l1.3-2.2l3.3-2.3l2.8-0.4l4.4-3.8l6-1.9l4.6-4.8l0.9-6.5l0.1-2.2l-1.4-0.4l1.5-6.2l-3-2.1l3.2,1v-4.1 l1.9-2.7l-1,5.3l2,2.5l-2.9,4.4l0.4,0.2l4.4-5.1l2.4-2.5l0.6-2.5l-0.9-1.1l-0.1-3.5l1.2,1.6l1.1,0.4l-0.1,1.6l5.2-4.9l2.5-4.5 l-1.4-0.3l2.1-1.8l-0.4,0.8h3.3l7.8-1.9l-1.1-1.2l-7.9,1.2l4.8-1.8l3.1-0.3l2.4-0.3l4.1-1.1l2.4,0.1l3.8-1l1-1.7l-1.1-1.4l-0.2,2.2 L615,306l-0.6-3.3l1.1-3.3l1.4-1.3l3.9-3.7l5.9-1.8l6-2.1l6.3-3l-0.2-2l-2.1-3.5l2.8-8.5l-1.5-1.8l-3.7,1.1l-1.1-1.7l-5.5,4.7 l-3.2,4.9l-2.7,2.8l-2.5,0.9l-1.7,0.3l-1,1.6h-9.3h-7.7l-2.7,1.2l-6.7,4.2l0.2,0.9l-0.6,2.4l-4.6,2l-3.9-0.5l-4-0.2l-2.6,0.7 l-0.3,1.8l0,0l-0.1,0.6l-5.8,3.7l-4.5,1.8l-2.9,0.8l-3.7,1.7l-4,0.9l-2.5-0.3l-2.7-1.3l2.7-2.4l0,0l2-2.2l3.7-3.4l0,0l0,0l0.7-2.5 l0.5-3.5l-1.6-0.7l-4.3,2.8l-0.9-0.1l0.3-1.5l3.8-2.5l1.6-2.8l0.7-2.8l-2.7-2.4l-3.7-1.3l-1.7,2.4l-1.4,0.6l-2.2,3.1l0.4-2.1 l-2.6,1.5l-2.1,2l-2.6,3.1l-1.3,2.6l0.1,3.8l-1.8,4l-3.3,3l-1.4,0.9l-1.6,0.7h-1.8l-0.3-0.4l-0.1-3.3l0.7-1.6l0.7-1.5l0.6-3l2.5-3.5 l2.9-4.3l4.6-4.7h-0.7l-5.4,4l-0.4-0.7l2.9-2.3l4.7-4l3.7-0.5l4.4-1.3l3.7,0.7h0.1l4.7-0.5l-1.5-2.5l0,0l-1.2-0.2l0,0l0,0l-1.4-0.3 l-0.4-1.7l-5.1,0.5l-5,1.4l-2.5-2.3l-2.5-0.8l3.1-3.3l-5.3,2l-4.9,2.1l-4.6,1.5l-2.1-2.1l-5.5,1.3l0.4-0.9l4.6-2.6l4.7-2.5l5.9-2.1 l0,0l0,0l-5.3-1.6l-4.4,0.8l-3.8-1.9l-4.6-1l-3.2-0.4l-1-1L512.2,259.1L512.2,259.1z M271.6,212.2l6.9-2.8v-1.8l-2.6-0.4l-3.4,0.9 l-6.4,2.1l-2.2,2.7l0.7,1.6L271.6,212.2z M232.9,195.8l2.3-2.3l-2.9-0.5l-5.7,1l0.8,1.6l1.6,1.1L232.9,195.8L232.9,195.8z M234.1,173.5l-3.1,2.2l0.4,0.5l4.2-0.4l0.3,1.1l1.7,1.2l4.9-1.2l1.2-0.6l-3.3-0.8l-1.6-1.5l-3.4,0.6L234.1,173.5L234.1,173.5z M359,133.3l-4.4-1.1l-10.2,2.8l-3.2-0.3l-11,2.3l-4.8,0.6l-7.8,2.5l-4.8,2.6l-8.6,2.5l-7.6,0.1l-6.3,2.9l3.2,1.7l0.7,2.3l-0.8,2.7 l2.3,2.1l-1.2,3.5l-9.2,0.2l4.3-2.8h-3.4l-13.1,2.7l-9.1,2.3l1,3.3l-1.2,2.2l4.5,1.4l6.9-0.7l1.8,1.3l2.9-1.3l6.1-1.2h2.7l-5.9,2.1 l1.1,1l-2.5,2.6l-5.5,1.8l-2.5-0.5l-7,2.7l-1.8-0.9l-4.1,0.4l-5.3,3l-7.6,3.1l-5.8,3.4l0.3,2.4l-4,3.3l1.4,1.4l0.5,2.7l7.2-1.1 l0.4,2.1l-3.3,2.1l-3.6,3.5h2.8l7.2-2.3l-1.6,2.9l3.6-2.1l-0.4,3l4.8-2.2l0.4,1.1l7.2-1.8l-6.2,3.4l-5.7,4.5l-5.7,2.1l-2.3,1.2 l-10.3,3.6l-4.9,2.4l-6.5,0.7l-8.5,3.3l-6.6,1.8l-8.1,2.8l-0.4,1l10-1.7l6-2l6.9-2l6.1-1.7l2.8,0.5l8.1-2.6l4.5-2.8l10.5-3.1 l3.9-2.6l6.6-1.8l7.6-2.5l8.9-4.2l-0.2-2.9l11.1-4.1l7.4-3.9l9.2-3.2l-0.4,1.4l-6.7,1.8l-8.3,5.7l-3.2,3.5l6.4-1.3l6.1-1.9l6.5-1.3 l2.9-0.3l3.5-4.1l6.3-1.2l2.6,2.5l6,2.7l6.7-0.5l5.7,2l3.2,1.1l3.3,6.1l3.7,1.7l7.1,0.2l4.1,0.4l-2.7,5.5l1.6,4.9l-3.3,5.2l2.5,1.9 l0.6,2.2l0,0l5.1-2.9l3.1-3.7l-4.6-3.8l1.5-6.8l1.1-4.2l-1.7-2.7l-0.7-2.4l0.5-3l-6.4,1.9l-7.6,3.3l-0.2-3.9l-0.6-2.6l-2.7-1.6 l-4.2-0.1l35.4-32.4l24.3-20.2l0,0l0,0l-3.5-0.7l-4.1-1.6l-6.5,0.8l-2.2-0.7l-7.1-0.5l-6.2-1.6l-4.8,0.5l-4.9-0.9l2-1.2l-6.3-0.3 l-3.3,1L359,133.3L359,133.3z"
                                },
                                VI: {
                                    d: "M617.9,458.9l-0.7,0.2l-0.1,0.4h1.1l0.7-0.3h-0.6L617.9,458.9L617.9,458.9z M618.8,455.4l-0.5-0.1l-0.2,0.2l0,0 l0.3,0.1L618.8,455.4z M617.7,455.5l-0.2-0.2l-0.3-0.1l-0.4,0.1l0.5,0.3L617.7,455.5L617.7,455.5z"
                                },
                                UY: {
                                    d: "M692.5,787l-2.1-3.7l1.9-3l-3.8-4.3l-4.8-3.5l-6.2-4.1l-1.9,0.2l-6.2-4.9l-3.4,0.7l-0.5,5.1l-0.3,6.5l1.1,6.3 l-0.9,1.4l0.4,4.2l3.9,3.5l3.6-0.2l5.4,2.7l2.7-0.6l4.2,1.2l5.3-3.5L692.5,787L692.5,787z"
                                },
                                UZ: {
                                    d: "M1339.8,303.1l-2.5,1.2l-5.4,4.3l-0.9,4.5h-1.9l-2.3-3l-6.6-0.2l-2.6-5l-2.5-0.1l-1.5-6.2l-7.5-4.5l-8.6,0.5 l-5.7,0.9l-6.5-5.5l-4.8-2.3l-9.1-4.5l-1.1-0.5l-11.9,3.6l6.2,22.8l5.8-0.1l-1.6-3.1l3.8-2.2l3.3-3.6l7.8,3.3l1.9,4.9l2.3,1.3 l5.5-0.3l2,1.2l4.3,6.4l7,4.4l4.2,3l6.2,3.2l7.7,2.7l0.8,4h2.9l4.3,1.4l1.3-6.6l-2.4-4.7l-4.2-1.6l0.6-2.8l4.4,0.3l1.5-3.5l0.5-4 l6.4-1.5l-0.2,2.9l1.3,1.8l2.1-0.2l4.1,0.6l5.2-4.5l-7.1-3.3l-3.2,1.6l-4.6-2.3l3.1-4.1L1339.8,303.1L1339.8,303.1z"
                                },
                                VU: {
                                    d: "M1908.6,676.9l-2.7-3.6l-0.6,1.7l1.3,2.8L1908.6,676.9L1908.6,676.9z M1906.6,667.2l-2.3-2l-0.9,4.9l0.5,1.8 l1.2-0.4l1.3,0.8L1906.6,667.2L1906.6,667.2z"
                                },
                                VA: {
                                    d: "M1039.5,304.8l0.6-0.1l0.1,0.6h-0.9L1039.5,304.8z"
                                },
                                VE: {
                                    d: "M642,518.9l-2.2-1.5l-2.9,0.2l-0.7-5.1l-4.1-3.2l-4.4-0.4l-1.8-3l4.8-1.9l-6.7,0.1l-6.9,0.4l-0.2,1.6l-3.2,1.9 l-4.2-0.7l-3.1-2.9l-6,0.7l-5-0.1l-0.1-2.1l-3.5-3.5l-3.9-0.1l-1.7-4.5l-2.1,2l0.6,3l-7.1,2.6v4.8l1.6,2.2l-1.5,4.6l-2.4,0.4l-1.9-5 l2.7-3.7l0.3-3.3l-1.7-2.9l3.3-0.8l0.3-1.5l-3.7,1.1l-1.6,3.2l-2.2,1.8l-1.8,2.4l-0.9,4.5l-1.8,3.7l2.9,0.5l0.6,2.9l1.1,1.4l0.4,2.5 l-0.8,2.4l0.2,1.3l1.3,0.6l1.3,2.2l7.2-0.6l3.2,0.8l3.8,5.5l2.3-0.7l4,0.3l3.2-0.7l2,1.1l-1.2,3.4l-1.3,2.1l-0.5,4.6l1,4.2l1.5,1.9 l0.2,1.5l-2.9,3.1l2,1.4l1.4,2.2l1.7,6.4l3,3.4l4.4-0.5l1.1-1.9l4.2-1.5l2.3-1l0.7-2.7l4.1-1.8l-0.3-1.4l-4.8-0.5l-0.7-4l0.3-4.3 l-2.4-1.6l1-0.6l4.2,0.8l4.4,1.6l1.7-1.5l4-1l6.4-2.4l2.1-2.4l-0.7-1.8l-3.7-4.8l1.6-1.8v-2.9l3.4-1.1l1.5-1.2l-1.9-2.3l0.6-2.3 L642,518.9L642,518.9z"
                                },
                                VN: {
                                    d: "M1571.6,435l-5.9-1.6l-3-2.6l0.2-3.7l-5.2-1.1l-3-2.4l-4.1,3.4l-5.3,0.7h-4.3l-2.7,1.5l4,5.1l3.4,5.7l6.8,0.1l3,5.5 l-3.3,1.7l-1.3,2.3l7.3,3.8l5.7,7.5l4.3,5.6l4.8,4.4l2,4.5l-0.2,6.4l1.8,4.2l0.1,7.7l-8.9,4.9l2.8,3.8l-5.8,0.5l-4.7,2.5l4.5,3.7 l-1.3,4.3l2.3,4l6.6-5.9l4.1-5.3l6.1-4.1l4.3-4.2l-0.4-11.2l-4-11.7l-4.1-5.1l-5.6-4l-6.4-8.3l-5.3-6.7l0.5-4.4l3.7-6L1571.6,435z"
                                },
                                EH: {
                                    d: "M928.8,396.2h0.8v0.4l-0.1,1.2l-0.2,9.7l-17.9-0.3l-0.2,16.3L906,424l-1.4,3.3l0.9,9.2l-21.6-0.1l-1.2,2.2l0.3-2.7 h0.1l12.4-0.5l0.7-2.3l2.3-2.9l2-8.8l7.8-6.8l2.8-8.1l1.7-0.4l1.9-5l4.6-0.7l1.9,0.9h2.5l1.8-1.5l3.4-0.2L928.8,396.2z"
                                },
                                YE: {
                                    d: "M1271.5,466.2l-2.1-4.4l-5.2-10.5l-15.7,2.4l-5,2.9l-3.5,6.7l-2.5,1l-1.6-2.1l-2.1,0.3l-5.4-0.6l-1-0.7l-6.4,0.2 l-1.5,0.6l-2.4-1.7l-1.2,3.1l0.7,2.7l-2.3,2.1l0.4,2.7l-0.6,1.3l0.7,2.9l-1.1,0.3l1.7,2.6l1.3,4.7l1,1.9v3.4l1.6,3.8l3.9,0.3 l1.8-0.9l2.7,0.2l0.8-1.7l1.5-0.4l1.1-1.7l1.4-0.4l4.7-0.3l3.5-1.2l3.1-2.7l1.7,0.4l2.4-0.3l4.7-4.5l8.8-3l5.3-2.7v-2.1l0.9-2.9 L1271.5,466.2L1271.5,466.2z"
                                },
                                ZM: {
                                    d: "M1149.2,626.7l-1.9-0.5l0.4-1.3l-1-0.3l-7.5,1.1l-1.6,0.7l-1.6,4.1l1.2,2.8l-1.2,7.5l-0.8,6.4l1.4,1.1l3.9,2.5 l1.5-1.2l0.3,6.9h-4.3l-2.1-3.5l-2-2.8l-4.3-0.8l-1.2-3.4l-3.4,2l-4.5-0.9l-1.8-2.8l-3.5-0.6l-2.6,0.1l-0.3-2l-1.9-0.1l0.5,2l-0.7,3 l0.9,3l-0.9,2.4l0.5,2.2l-11.6-0.1l-0.8,20.3l3.6,5.2l3.5,4l4.6-1.5l3.6,0.4l2.1,1.4v0.5l1,0.5l6.2,0.7l1.7,0.7l1.9-0.1l3.2-4.1 l5.1-5.3l2-0.5l0.7-2.2l3.3-2.5l4.2-0.9l-0.3-4.5l17.1-5.2l-2.9-1.7l1.9-5.9l1.8-2.2l-0.9-5.3l1.2-5.1l1-1.8l-1.2-5.4l-2.6-2.8 l-3.2-1.9l-3.5-1.1l-2.2-1.1l-0.3-0.2l0,0l0.5,1.1l-1,0.4L1149.2,626.7L1149.2,626.7z"
                                },
                                ZW: {
                                    d: "M1148.2,713.7l6.2-7.2l1.6-4.6l0.9-0.6l0.8-3.7l-0.8-1.9l0.5-4.7l1.3-4.4l0.3-8.1l-2.8-2l-2.6-0.5l-1.1-1.6 l-2.6-1.3l-4.6,0.1l-0.3-2.4l-4.2,0.9l-3.3,2.5l-0.7,2.2l-2,0.5l-5.1,5.3l-3.2,4.1l-1.9,0.1l-1.7-0.7l-6.2-0.7l1.9,5.1l1.1,1.1 l1.6,3.7l6,7l2.3,0.7l-0.1,2.2l1.5,4.1l4.2,0.9l3.4,2.9l2.2,0.1l2.6,1.1l1.9-0.8L1148.2,713.7L1148.2,713.7z"
                                },
                                XK: {
                                    d: "M1080,299.8l1.2-0.5l0.5-2l0.9-0.4l0.8,0.9l1,0.4l0.8,1l0.8,0.3l1.1,1.1h0.8l-0.5,1.5l-0.5,0.7l0.2,0.5l-1.1,0.2l-2.9,1l-0.1,1.2h-0.7l-0.5-2.3l-1.3-0.6l-1.3-1.6L1080,299.8z"
                                },
                                "MA-EH": {
                                    d: "M969.3,363.1l-1.8-6.7l-0.3-3.9l-2-4.1l-2.3-0.1l-5.5-1.4l-5,0.4l-3.1-2.7h-3.9l-1.8,3.9l-3.7,6.7l-4,2.6 l-5.4,2.9L927,365l-0.9,3.4l-2.1,5.4l1.1,7.9l-4.7,5.3l-2.7,1.7l-4.4,4.4l-5.1,0.7l-2.8,2.4l-0.1,0.1l-3.6,6.5l-3.7,2.3l-2.1,4 l-0.2,3.3l-1.6,3.8l-1.9,1l-3.1,4l-2,4.5l0.3,2.2l-1.9,3.3l-2.2,1.7l-0.3,3l-0.3,2.7l1.2-2.2l21.6,0.1l-0.9-9.2l1.4-3.3l5.2-0.5 l0.2-16.3l17.9,0.3l0.2-9.7l0.1-1.2v-0.4l0,0l0,0l0,0l0.1-7.5l8.9-4.7l5.4-1l4.4-1.7l2.1-3.2l6.3-2.5l0.3-4.7l3.1-0.5l2.5-2.4l7-1 l1-2.5L969.3,363.1z"
                                },
                                "RU-WITH-CRIMEA": {
                                    d: "M1145,281l-4.5,2.1l-0.7,1.2l5.8,1.8l-0.6,2.9l3,1.3l6.3-3.6l5.3-1.1l0.6-2.2l-5.1,0.4l-2.7-1.5L1145,281z M1332.3,95.1l-4.5-4l-13.6-4.1l-9.4-2.1l-6.2,0.9l-5.3,2.9l5.8,0.8l6.6,3.2l8,1.7l11.5,1.3C1325.2,95.7,1332.3,95.1,1332.3,95.1z M1153.6,87.8l0.9-0.6l-5.7-0.9L1146,87l-1.3,1l-1.5-1.2l-5.2,0.1l-6.2,0.8l7.7,0.1l-1.1,1.3l4.4,1l3.6-0.7l0.1-0.7l2.9-0.3C1149.4,88.4,1153.6,87.8,1153.6,87.8z M1354.1,97.7l-1.5-1.8l-12.5-2.6l-3-0.3l-2.2,0.5l1.2,6C1336.1,99.5,1354.1,97.7,1354.1,97.7z M1369.3,104l-9.2-0.7l3.4-1.2l-8.2-1.5l-6.1,1.9l-1,2l1.5,2.1l-6.9-0.1l-5.3,2.6l-4.3-1.1l-9.3,0.5l0.3,1.3l-9.2,0.7l-4.9,2.4l-4.2,0.2l-1.2,3.3l5.5,2.6l-7.7,0.7l-9.5-0.3l-5.8,1.1l4.8,5.4l6.9,4.3l-9.6-3l-7.9,0.3l-5.1,2l4.5,3.8l-4.9-1l-2.1-5l-4.2-2.8l-1.8,0.1l3.6,3.7l-4.6,3.5l8.1,4.2l0.4,5.4l2.9,2.9l4.7,0.5l0.4,3.5l4.4,3.1l-1.9,2.6l0.5,2.7l-3.7,1.4l-0.5,2l-5.3-0.8l3.5-7.8l-0.5-3.6l-6.7-3.3l-3.8-7.3l-3.7-3.7l-3.6-1.6l0.8-4.2l-2.9-2.9l-11.3-1.4l-2.1,1l0.5,4.7l-4.3,4.7l1.2,1.7l4.7,4.1l0.1,2.6l5.3,0.5l0.8,1.1l5.8,2.9l-1,2.8l-18.5-6.1l-6.6-1.7l-12.8-1.6l-1.2,1.7l5.9,3.1l-2.7,3.6l-6.4-3.2l-5,2.2l-7.6,0.1l-2.1,1.9l-5.3-0.6l2.5-3.3l-3.2-0.2l-12.3,4.6l-7.6,2.6l0.4,3.5l-6,1.2l-4-1.9l-1.2-3l5-0.7l-3.6-3l-12.2-1.8l4.3,3.4l-0.8,3.2l4.7,3.3l-1.1,3.8l-4.6-1.9l-4-0.3l-8,5.4l4.2,4.1l-3.2,1.4l-11.4-3.5l-2.1,2.1l3.3,2.4l0.2,2.7l-3.8-1.4l-6-1.7l-1.9-5.8l-1-2.6l-8-4l2.9-0.7l20.1,4.2l6.4-1.5l3.7-2.9l-1.6-3.6l-4-2.6l-17.6-6.1l-11.6-1.3l-7.6-3.2l-3.6,1.8l0,0l-6.4,2.2l-3.2,0.5l0.4,3.7l7.2,3.7l-2.8,4.1l6.4,6.3l-1.7,4.8l4.9,4.1l-0.9,3.7l7.3,3.9l-0.9,2.9l-3.3,3.3l-7.9,7.4l0,0l5.3,2.8l-4.5,3.2l0,0l0.9,1l-2.6,3.4l2.5,5.5l-1.6,1.9l2.4,1.4l1,2.8l2.1,3.6l5.2,1.5l1,1.4l2.3-0.7l4.8,1.4l1,2.9l-0.6,1.6l3.7,3.9l2.2,1.1l-0.1,1.1l3.4,1.1l1.7,1.6l-1.6,1.3l-3.9-0.2l-0.8,0.6l1.5,2l2,3.9l0,0l1.8,0.2l1-1.4l1.5,0.3l4.8-0.5l3.8,3.4l-0.9,1.3l0.7,1.9l4,0.2l2.2,2.7l0.2,1.2l6.6,2.2l3.5-1l3.6,2.9l2.9-0.1l7.6,2l0.4,1.9l-1.3,3.2l1.8,3.4l-0.3,2.1l-4.7,0.5l-2.2,1.7l0.4,2.8l4.2-1l0.4,1.3l-6.8,2.6l3.2,2.4l-3.2,5.2l-3.4,1l5,3.6l6.2,2.4l7.4,5.1l0.5-0.7l4.5,1.1l7.7,1l7.5,2.9l1.1,1.2l2.9-1l5.1,1.3l2.1,2.5l3.5,1.4l1.5,0.2l4.3,3.8l2.4,0.4l0.5-1.5l2.6-2.5l0,0l-7.3-7.3l-0.4-4.1l-5.9-5.9l3.5-6.3l4.6-1.1l1.4-3.7l-2.8-1l-0.2-3.2l-4.2-4.1l-3.6,0.2l-5.3-4.3l1.7-4.7l-1.7-1.2l2.1-6.8l6,3.6l-0.7-4.6l8.1-6.6l7.5-0.2l11.9,4.3l6.6,2.4l4.3-2.5l7.6-0.2l7.3,3.2l0.8-1.8l6.9,0.3l0.2-3l-9.4-4.2l3.6-2.9l-1.5-1.7l3.9-1.6l-5-4.1l1.4-2.1l16.8-2.1l1.7-1.5l10.8-2.2l3.1-2.5l9,1.3l4.3,6.3l4.3-1.5l7,2.1l1.2,3.3l4.4-0.4l9.1-5.7l-0.8,1.9l8.3,4.7l18.1,15.5l1.1-3.3l8.3,3.6l6.2-1.6l3.2,1.1l4.1,3.6l3.9,1.2l3.3,2.6l6-0.9l4.3,3.8l1.7-0.5l4.7-1l6.6-5.4l5.9-2.9l5.3,1.9l5.1,0.1l4.7,2.9l5,0.2l7.9,1.6l2.4-4.3l-4-3.6l1.3-6.4l6.9,2.5l4.8,0.8l6.6,1.5l3.7,4.6l8.4,2.6l3.9-1.1l5.7-0.8l5.4,0.8l6.5,3l4.9,3.1h4.5l6.7,1l3.6-1.6l5.8-1l4.5-4.4l3.3,0.7l3.9,2.1l5.5-0.5l7.3,2.3l4.4-3.9l-1.9-2.7l-0.1-6.5l1.2-2l-2.5-3.3l-3.7-1.5l1.7-3l5.1-1.1l6.2-0.2l8.5,1.8l5.9,2.3l7.7,6.1l3.8,2.7l4.4,3.7l6.1,6.1l9.9,1.9l8.9,4.5l6,5.8h7.5l2.6-2.5l6.9-1.8l1.3,5.6l-0.4,2.3l2.8,6.8l0.6,6l-6.8-1.1l-2.9,2.2l4.7,5.3l3.8,7.3l-2.5,0.1l1.9,3.1l0,0l1.4,1.1l0,0l0,0l0,0l-0.4-2l4-4.5l5.1,3l3.2-0.1l4.4-3.6l1-3.7l2.1-7.1l1.9-7.2l-1.3-4.3l1-9l-5.2-9.9l-5.5-7.3l-1.3-6.2l-4.7-5.1l-12.7-6.7l-5.6-0.4l-0.3,3l-5.8-1.3l-5.7-3.8l-8-0.7l4.9-14.1l3.5-11.5l13.1-1.8l14.9,1l2.5-2.8l7.9,0.8l4.3,4.3l6.4-0.6l8.4-1.6l-7.7-3.5v-9.8l9.1-1.9l12.1,7.1l3.6-6.4l-3.2-4.7l4.7-0.5l6.5,8.1l-2.4,4.6l-0.8,6l0.3,7.5l-5.7,1.3l2.8,2.7l-0.1,3.6l6.4,8.3l16,13.4l10.5,8.8l5.7,4.3l1.6-5.7l-4.5-6.2l5.7-1.5l-5.4-6.9l5-3.1l-4.7-2.6l-3.4-5l4.1-0.2l-9-8.6l-6.7-1.4l-2.9-2.4l-1.1-5.6l-3.1-3.9l7,0.8l1.3-2.5l4.7,2.2l6.1-4.6l11.4,4l-1.7-2.6l2-3.6l1.5-4l3.1-0.7l6.5-4.3l9.8,1.2l-0.9-1.5l-3.8-2.3l-4.1-1.6l-9.1-4.6l-8.1-3l6.1,0.4l2-2.5l0,0l-32.9-21.9l-9.4-2.3l-15.7-2.6l-7.9,0.3l-15.2-1.4l1.8,2.3l8.5,3.4l-2.5,1.8l-14.2-4.8l-6.8,0.6l-9.2-1.1l-7,0.2l-3.9,1.1l-7.2-1.6l-5.1-3.8l-6.5-2.2l-9.2-0.9l-14.7,1l-16.1-4l-7.8-3l-40.1-3.4l-2.1,2.2l9.3,4.8l-7.5-0.7l-1,1.5l-9.7-1.6l-5,1.4l-9.3-2.4l3,5.5l-8.9-2.1l-10-4.1l-0.4-2.2l-6-3.3l-9.8-2.6h-6.1l-9.3-0.9l4.7,3.9l-17.2-0.8l-3.9-2.3l-13.3-0.9l-5.3,0.8l-0.1,1.3l-5.8-3.2l-2.3,0.9l-7.2-1.2l-5.6-0.7l1.1-1.5l6.6-2.8l2.3-1.5l-2.4-2.5l-5.5-1.9l-11.5-2.3l-10.8-0.1l-1.9,1.2L1369.3,104L1369.3,104z M1207.1,135.6l-9.9-4.3l-3.1-4.3l3.3-4.9l2.8-5l8.6-4.7l9.8-2.4l11.3-2.4l1.3-1.5l-4.2-1.9l-6.6,0.6l-4.9,1.8l-11.7,0.9l-10.1,3.1l-6.8,2.7l2.5,2.2l-6.6,4.4l3.9,0.7l-5.4,4.3l1.6,2.8l-3.4,1.1l1.9,2.8l7.9,1.4l2.2,2.3l13.4,0.7L1207.1,135.6L1207.1,135.6z M1521.1,110.9l-17.9-2.6l-10.2-0.2l-3.4,0.9l3.4,3.4l12.4,3.2l4.5-1.2l14.2,0.2C1524.1,114.6,1521.1,110.9,1521.1,110.9z M1546.3,113.2l-11.7-1.3l-8.2-0.7l1.7,1.6l10.3,2l6.8,0.4L1546.3,113.2L1546.3,113.2z M1533.8,122.7l-2.5-1.4l-8.3-1.9l-4.1,0.5l-0.8,2l1.1,0.2l8.8,0.6C1528,122.7,1533.8,122.7,1533.8,122.7z M1696.4,135l-6-3.6l-1.4,2.2l3.5,1.6L1696.4,135z M1084,228.9l-0.6-1.5l0.2-1.7l-2.2-0.9l-5-1.1l-6.3,2l-0.7,2.6l5.9,0.7L1084,228.9z M1673.7,250.7l-7.2-6.2l-5.1-6l-6.8-5.8l-4.9-4l-1.3,0.8l4.4,2.8l-1.9,2.8l6.8,8.3l7.8,6l6.4,8.3l2.4,4.6l5.5,6.8l3.8,6l4.6,5.2l-0.1-4.8l6.5,3.8l-3-4.4l-9.5-6.3l-3.7-9l8.9,2L1673.7,250.7L1673.7,250.7z"
                                },
                                "UA-WITHOUT-CRIMEA": {
                                    d: "M1138.5,241l-4.8,0.5l-1.5-0.3l-1,1.4l-1.8-0.2l0,0l-4.1,0.3l-1.2,1.4l0.2,3.1l-2-0.6l-4.3,0.3l-1.5-1.5l-1.6,1.1l-2-0.9l-3.8-0.1l-5.6-1.5l-5-0.5l-3.7,0.2l-2.4,1.6l-2.2,0.3l3.1,5.3l-0.3,1.8l-2.3,0.7l-3.8,5.1l1.6,2.8l-1.1-0.4l-1.1,1.7l-0.7,2.5l2.9,1.7l0.6,1.6l1.9-1.3l3.2,0.7h3.2l2.4,1.5l1.6-0.9l3.6-0.6l1-1.5h2.1l1.1-0.9l3.2-0.6l3.9,1.9l2,0.3l2.5,1.6v2.1l1.9,1.1l1.1,2.6l2,1.5l-0.2,1l1,0.6l-1.2,0.5l-3-0.2l-0.6-0.9l-1,0.5l0.5,1.1l-1.1,2l-0.5,2.1l-1.2,0.7l2.4,1.1l2.2-1l2.4,1.1l3.3-4.6l1.3-3.4l4.5-0.8l0.7,2.4l8,1.5l1.7,1.4l7.4,1.3l-1-3.9l3.9-2.3l4.6-0.3l3-2l3.9-0.5l-0.4-2.8l2.2-1.7l4.7-0.5l0.3-2.1l-1.8-3.4l1.3-3.2l-0.4-1.9l-7.6-2l-2.9,0.1l-3.6-2.9l-3.5,1l-6.6-2.2l-0.2-1.2l-2.2-2.7l-4.7-2.1l0.9-1.3L1138.5,241L1138.5,241z"
                                }
                            }, e.prototype.createTooltip = function () {
                                if (this.tooltip) return !1;
                                this.tooltip = this.createElement("div", "svgMap-tooltip", document.getElementsByTagName("body")[0]), this.tooltipContent = this.createElement("div", "svgMap-tooltip-content-wrapper", this.tooltip), this.tooltipPointer = this.createElement("div", "svgMap-tooltip-pointer", this.tooltip)
                            }, e.prototype.setTooltipContent = function (t) {
                                this.tooltip && (this.tooltipContent.innerHTML = "", this.tooltipContent.append(t))
                            }, e.prototype.showTooltip = function (t) {
                                this.tooltip.classList.add("svgMap-active"), this.moveTooltip(t)
                            }, e.prototype.hideTooltip = function () {
                                this.tooltip.classList.remove("svgMap-active")
                            }, e.prototype.moveTooltip = function (t) {
                                var e, l, i, a, s = t.pageX || (t.touches && t.touches[0] ? t.touches[0].pageX : null),
                                    n = t.pageY || (t.touches && t.touches[0] ? t.touches[0].pageY : null);
                                null !== s && null !== n && (e = window.innerWidth, l = this.tooltip.offsetWidth, i = this.tooltip.offsetHeight, (a = s - l / 2) <= 6 ? (s = 6 + l / 2, this.tooltipPointer.style.marginLeft = a - 6 + "px") : e - 6 <= a + l ? (s = e - 6 - l / 2, this.tooltipPointer.style.marginLeft = -1 * (e - 6 - t.pageX - l / 2) + "px") : this.tooltipPointer.style.marginLeft = "0px", n - 12 - i <= 6 ? (this.tooltip.classList.add("svgMap-tooltip-flipped"), n += 32) : (this.tooltip.classList.remove("svgMap-tooltip-flipped"), n -= 12), this.tooltip.style.left = s + "px", this.tooltip.style.top = n + "px")
                            }, e.prototype.error = function (t) {
                                (console.error || console.log)("svgMap error: " + (t || "Unknown error"))
                            }, e.prototype.createElement = function (t, e, l, i) {
                                var a = document.createElement(t);
                                return e && (e = e.split(" ")).forEach((function (t) {
                                    a.classList.add(t)
                                })), i && (a.innerHTML = i), l && l.appendChild(a), a
                            }, e.prototype.numberWithCommas = function (t, e) {
                                return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g, e || ",")
                            }, e.prototype.getColor = function (t, e, l) {
                                t = t.slice(-6), e = e.slice(-6), l = parseFloat(l).toFixed(1);
                                var i = Math.ceil(parseInt(t.substring(0, 2), 16) * l + parseInt(e.substring(0, 2), 16) * (1 - l)),
                                    a = Math.ceil(parseInt(t.substring(2, 4), 16) * l + parseInt(e.substring(2, 4), 16) * (1 - l));
                                return l = Math.ceil(parseInt(t.substring(4, 6), 16) * l + parseInt(e.substring(4, 6), 16) * (1 - l)), "#" + this.getHex(i) + this.getHex(a) + this.getHex(l)
                            }, e.prototype.getHex = function (t) {
                                return ("0" + (t = t.toString(16))).slice(-2)
                            }, e.prototype.getCountryName = function (t) {
                                return (this.options.countryNames && this.options.countryNames[t] ? this.options.countryNames : this.countries)[t]
                            }, e
                        }(t)
                    }(t)
                }.apply(e, i)) || (t.exports = a)
            }
        },
        e = {};

    function l(i) {
        var a = e[i];
        if (void 0 !== a) return a.exports;
        var s = e[i] = {
            exports: {}
        };
        return t[i].call(s.exports, s, s.exports, l), s.exports
    }
    l.n = t => {
        var e = t && t.__esModule ? () => t.default : () => t;
        return l.d(e, {
            a: e
        }), e
    }, l.d = (t, e) => {
        for (var i in e) l.o(e, i) && !l.o(t, i) && Object.defineProperty(t, i, {
            enumerable: !0,
            get: e[i]
        })
    }, l.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e), l(848)
})();
//# sourceMappingURL=app.bundle.js.map